/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var Shallot = __webpack_require__(1).Shallot;
	var cs = new callstats(null,io,jsSHA);

	//cs.initialize( 842748708,"CuXT/0zOOd9R:7TL8LgESzRqEDTZcIMh6IWta+qdhKe5wkLciF5yTQNw=", "testID");

	window.s = new Shallot({
		chordConfig: {
			conductorConfig: {
				callstats: cs,
				callstats_app_id: 842748708,
				callstats_app_secret: "CuXT/0zOOd9R:7TL8LgESzRqEDTZcIMh6IWta+qdhKe5wkLciF5yTQNw="
			}
		}
	});

	var srv = prompt("Please specify a server:", "ws://mcfelix.me:7171")

	s.join(srv)
		.then(
			() => {
				s.on("receiveConnection", conn => {
					window.conny = conn;
					console.log("Conny!");
					conn.on("data", data => console.log(`[DATA] Conny: ${data}`))
				})
			},

			err => {
				alert("Couldn't join chord server: "+err);
			}
		)


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const Chord = __webpack_require__(2).Chord,
		ShallotModule = __webpack_require__(32),
		u = __webpack_require__(35);

	class Shallot {
		static get defaultConfig(){
			return {
				chordConfig: {},
				shallotConfig: {}
			};
		};

		constructor (config) {
			this.config = u.mergeConfig(Shallot.defaultConfig, config);

			this.chord = new Chord(this.config.chordConfig);

			this._module = new ShallotModule(this.chord, this.config.shallotConfig);

			//Hookup chord's events to our emitter.
			this.chord.statemachine.on("*", args => {
				if(Array.isArray(args))
					this.emit.apply(this, args);
				else
					this.emit.apply(this, [args]);
			});
		}

		get emit () {
			return this._module._evts.emit.bind(this._module._evts);
		}

		get on () {
			return this._module._evts.on.bind(this._module._evts);
		}

		get off () {
			return this._module._evts.off.bind(this._module._evts);
		}

		join (addr) {
			return this.chord.join(addr);
		}

		connectTo (id) {
			return this._module.connectTo(id);
		}
	}

	module.exports = {
		Shallot,
		ShallotModule
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	const u = __webpack_require__(3),
		ChordSignalChannel = __webpack_require__(4),
		BootstrapChannelClient = __webpack_require__(18),
		BootstrapChannelServer = __webpack_require__(20),
		ModuleRegistry = __webpack_require__(5),
		RemoteCallModule = __webpack_require__(21),
		FileStore = __webpack_require__(26),
		MessageCore = __webpack_require__(28),
		Message = __webpack_require__(29),
		Node = __webpack_require__(24),
		RemoteNode = __webpack_require__(23),
		ID = __webpack_require__(6),
		sha3 = __webpack_require__(27),
		pki = __webpack_require__(10).pki,
		machina = __webpack_require__(30),
		Conductor = __webpack_require__(8);


	class ConductorChord {
		static get defaultConfig(){
			return {
				idWidth: 224,

				keyWidth: 2048,

				remoteCall: {
					timeout: 5000,
					retries: 2,
					cacheAnswerDuration: 20000
				},

				fileStore: {
					itemDuration: 30000,
					itemRefreshPeriod: 5000
				},

				messageMaxHops: 448,

				serverConfig: {
					port: 7171
				},

				conductorConfig: {
					channel: null,
					timeout: 0,
					callstats_cID: "conductor"
				},

				stabilizeInterval: 1000,

				fixFingersInterval: 666,

				moveKeysInterval: 10000,

				checkPubKeyInterval: 2500,

				isServer: false,

				allowUpgrade: true,

				allowDowngrade: false,

				debug: false
			}
		};

		constructor(config){
			this.config = u.mergeConfig(ConductorChord.defaultConfig, config);
			u.log(this, "Config merged.");
			u.log(this, this.config);

			//Generate a public-private key combination, and store the public key in PEM format.
			u.log(this, "Generating RSA keys...");
			this.key = pki.rsa.generateKeyPair({bits: this.config.keyWidth, e: 0x10001});
			this.pubKeyPem = pki.publicKeyToRSAPublicKeyPem(this.key.publicKey);
			u.log(this, "Generated.");

			//Generate an ID on the network from this public key.
			u.log(this, "Generating ID from public key.");
			let idBuf = sha3["sha3_"+this.config.idWidth].buffer(this.pubKeyPem);
			this.id = new ID(idBuf);
			u.log(this, "ID created:");
			u.log(this, this.id.idString);
			this.config.conductorConfig.callstats_uID = this.id.idString;

			//Set up a Node object to represent the local state.
			u.log(this, "Creating local node.");
			this.node = new Node(this);

			//Create a module registry, register the RPC default module.
			//Create file storage subsystem.
			u.log(this, "Establishing registry, core modules...");
			this.registry = new ModuleRegistry();
			this.rcm = new RemoteCallModule(this);
			this.fileStore = new FileStore(this);
			this.messageCore = new MessageCore(this);

			//Prepare the standard connection channel and an instance of Conductor:
			//(SignalChannel registers itself to the module registry)
			u.log(this, "Creating standard channel and conductor.");
			this.config.conductorConfig.channel = new ChordSignalChannel(this);
			this.conductor = Conductor.create(this.config.conductorConfig);

			//Set onconnection event to handle connections made to us.
			this.conductor.onconnection = conn => {
				conn.ondatachannel = dChan => {
					dChan.onmessage = msg => {
						let msgObj = this.messageCore.parseMessage(msg.data);
						if(msgObj)
							this.message(msgObj);
					};

					let node = this.obtainRemoteNode(conn.id);
					node.connection = conn; 
					this.directNodes[conn.id] = node;

					conn.ondisconnect = evt => {
						this.statemachine.disconnect(node);
					};

					this.statemachine.node_connection(node);
				}
			};

			//If this node is actually a server, load a background channel which will mediate requests to join the network.
			if(this.config.isServer){
				u.log(this, "Initialising server backing channel.");
				this.conductor.register(new BootstrapChannelServer(this));
				setInterval(this.node.stabilize.bind(this.node), this.config.stabilizeInterval);
				setInterval(this.node.fixFingers.bind(this.node), this.config.fixFingersInterval);
				setInterval(this.fileStore.relocateKeys.bind(this.fileStore), this.config.moveKeysInterval);
				setInterval(this._checkForID.bind(this), this.config.checkPubKeyInterval);
			}

			//space to store, well, external nodes - if you're a server, for instance.
			//This is also used for resource management and ring bypass.
			this.directNodes = {};
			this.knownNodes = {}; // nodes w/o connections
			this.server = {
				connect: false,
				node: null,
				address: null
			};

			u.log(this, "Creating state machine.");
			this.createStateMachine();

			//Store the K,V pair <ID, pubKey> on the local view of the DHT.
			//This will be relocated once an actual network is joined.
			u.log(this, "Adding public key to local store.");
			this.addItem(this.id.idString, this.pubKeyPem);

			if(this.config.debug) {
				try {
					window.chorddebug = this;
				} catch (e) {
					global.chorddebug = this;
				}
			}
		}

		smartConnectToNode(id, optNode) {
			if (Object.getOwnPropertyNames(this.directNodes).length === 0) {
				return this.join(this.server.address)
					.then( () => {
						return this.nodeOverRing(id, optNode);
					} );
			} else if (this.directNodes[ID.coerceString(id)]) {
				let entry = this.directNodes[ID.coerceString(id)];

				if(entry.isConnected())
					return Promise.resolve(this.directNodes[ID.coerceString(id)]);
				else
					return this.nodeOverRing(id, optNode);
			} else {
				return this.nodeOverRing(id, optNode);
			}
		}

		obtainRemoteNode(id){
			let saneID = ID.coerceString(id);

			if (saneID === this.id.idString) {
				return this.node;
			} else if (this.directNodes[saneID]) {
				return this.directNodes[saneID];
			} else if (this.knownNodes[saneID]) {
				return this.knownNodes[saneID];
			} else {
				let node = new RemoteNode(this, new ID(saneID), null);
				this.knownNodes[saneID] = node;
				return node;
			}
		}

		nodeOverRing(id, optNode){
			let saneId = ID.coerceString(id);

			return new Promise( (resolve, reject) => {
				this.conductor.connectTo(saneId, "Conductor-Chord")
					.then( conn => {
						let node = this.obtainRemoteNode(conn.id);

						if (optNode)
							optNode.connection = conn;
			
						node.connection = conn;

						if (!node.isConnected()) {
							node.connection.close();
							reject("Connection was closed - attempt to obtain link failed.");
						}

						conn.on("message", msg => {
							let msgObj = this.messageCore.parseMessage(msg.data);
							if(msgObj)
								this.message(msgObj);
						});

						conn.ondisconnect = evt => {
							this.statemachine.disconnect(node);
						};

						this.knownNodes[conn.id] = node;
						this.directNodes[conn.id] = node;

						if(ID.compare(conn.id, node.id) !== 0){
							delete this.directNodes[ID.coerceString(node.id)];
							node.id = new ID(conn.id)
						}

						this.statemachine.node_connection(node);

						resolve(node);
					} );
			} );
		}

		get state () {
			if(this.statemachine)
				return this.statemachine.state;
			return "disconnected";
		}

		get on () {
			if(this.statemachine)
				return this.statemachine.on.bind(this.statemachine);
			return ()=>{};
		}

		createStateMachine () {
			let t = this;

			this.statemachine = new machina.Fsm({
				initialize: function(options) {
					//idk?
				},

				namespace: "chord-fsm",

				initialState: "disconnected",

				states: {
					disconnected: { 
						_onEnter() {
							//force predecessor and all fingers to be self...
							t.node.clean();

							if(!t.config.isServer)
								this.emit("disconnect")

						},

						node_connection(node) {
							this.transition("external");
						}
					},

					external: {
						_onEnter() {
							//set predecessor and successor to null
							this._lastPredec = t.node.predecessor;

							if(this.priorState.substr(0,4)==="full")
								this.emit("lowConnection");

							if(this._lastPredec !== null && this._lastPredec !== t.node)
								this.transition("external_known")

							t.node.predecessor = t.node;
							t.node.setFinger(0, t.node);
							
							if(this.priorState !== "disconnected" && !t.config.isServer)
								t._finalResortReconnect();
						},

						set_successor(node) {
							this.transition("partial");
						},

						// set_predecessor(node) {
						// 	if(t.node.finger[0].node )
						// }

						disconnect_all() {
							this.transition("disconnected");
						}
					},

					external_known: {
						_onEnter() {
							//we're still known about - wait some time before trying to fully reconnect.
							t.node.predecessor = t.node;
							t.node.setFinger(0, t.node);

							this._fullReconnTime = setTimeout(() => {
								if (!t.config.isServer) t._finalResortReconnect();
							}, 5000);
						},

						_onExit() {
							 clearTimeout(this._fullReconnTime);
						},

						set_successor(node) {
							this.transition("partial");
						},

						// set_predecessor(node) {
						// 	if(t.node.finger[0].node )
						// }

						disconnect_all() {
							this.transition("disconnected");
						}
					},

					partial: {
						_onEnter() {
							//The server can be told about its predecessor BEFORE it knows it has a successor.
							//Check for this, and move if needed.

							if(t.node.predecessor && t.node.predecessor !== t.node)
								this.set_predecessor(t.node.predecessor);
						},

						set_predecessor(node) {
							this.transition("full_fragile");
						},

						disconnect_successor() {
							this.transition("external");
						},

						disconnect_all() {
							this.transition("disconnected");
						}
					},

					full_fragile: {
						_onEnter() {
							//Check for current status of successor list, if required.
							//TODO

							t.fileStore.relocateKeys();
							this.emit("connect");
						},

						set_predecessor (node) {
							t.fileStore.relocateKeys();
						},

						disconnect_successor() {
							this.transition("external");
						},

						disconnect_predecessor() {
							this.transition("partial");
						},

						disconnect_all() {
							this.transition("disconnected");
						}
					},

					full_stable: {
						//IGNORE THIS STATE FOR NOW!
						//Deal with it once 
						disconnect_predecessor() {
							this.transition("partial");
						},

						set_predecessor (node) {
							t.fileStore.relocateKeys();
						},

						disconnect_all() {
							this.transition("disconnected");
						}
					}
				},

				//Known events:
				//
				//"node_connection" - we have obtained a connection to a new node.
				//"set_successor" - successor has been (re)defined.
				//"set_predecessor" - predecessor has been (re)defined.
				//"disconnection" - used to determine the actual event to fire (in order of severity):
				//	-> "disconnect_all"
				//	-> "disconnect_successor"
				//	-> "disconnect_predecessor"
				//	-> "disconnect_backup"
				//	-> "disconnect"
				//"connect_backup" - backup successor has been identified and connected to.
				//
				//Finger table modification is handled in the disconnect handler,
				//it is noted that they do not affect the overall correctnesss of the system.
				node_connection(node) {
					this.handle("node_connection", node);
				},

				set_successor(node) {
					this.handle("set_successor", node);
				},

				set_predecessor(node) {
					this.handle("set_predecessor", node);
				},

				disconnect(node) {
					let evt = "disconnect",
						nodeID = ID.coerceString(node.id),
						leastFingerNo =  t.node.removeFinger(nodeID);

					if(t.directNodes[nodeID])
						delete t.directNodes[nodeID];

					//Check 1: was it a backup?
					//TODO

					// debugger;

					//Check 2: was it our predecessor?
					if(!t.node.predecessor || ID.coerceString(t.node.predecessor.id) === nodeID){
						evt = "disconnect_predecessor";
						t.node.predecessor = null;
					}

					//Check 3: was it our successor?
					if(leastFingerNo === 0)
						evt = "disconnect_successor";
					

					//Check 4: do we have ANY connections left?
					if(Object.getOwnPropertyNames(t.directNodes).length === 0)
						evt = "disconnect_all";

					this.handle(evt, node);
				},

				connect_backup(node) {
					this.handle("connect_backup", node);
				}
			});
		}

		join(addr){
			u.log(this, "Joining "+addr);

			let chan = new BootstrapChannelClient(addr, this);
			this.server.address = addr;

			return this.conductor.connectTo(this.id.idString, chan)
				.then(
					result =>{
						u.log(this, result);
						result.on("message", msg => {
							let msgObj = this.messageCore.parseMessage(msg.data);
							if(msgObj)
								this.message(msgObj);
						});

						let srvNode = new RemoteNode(this, new ID(result.id), result);

						result.ondisconnect = evt => {
							this.statemachine.disconnect(srvNode);
						};

						this.server.node = srvNode;
						this.directNodes[result.id] = srvNode;
						this.knownNodes[result.id] = srvNode;

						this.statemachine.node_connection(srvNode);

						return this.node.stableJoin(srvNode)
							.then(
								() => {return this.node.stabilize();}
							)
							.then(
								() => {
									return srvNode.unlinkClient();
								}
							)
							.then(
								() => {
									this.server.connect = false;
									setInterval(this.node.stabilize.bind(this.node), this.config.stabilizeInterval);
									setInterval(this.node.fixFingers.bind(this.node), this.config.fixFingersInterval);
									setInterval(this.fileStore.relocateKeys.bind(this.fileStore), this.config.moveKeysInterval);
									setInterval(this._checkForID.bind(this), this.config.checkPubKeyInterval);
								}
							)
					},
					reason => u.log(this, reason)
					);
		}

		addItem(key, value){
			return this.fileStore.store(key, value);
		}

		lookupItem(key){
			return this.fileStore.retrieve(key);
		}

		updateItem (key, value) {
			return this.fileStore.update(key, value);
		}

		dropItem (key) {
			return this.fileStore.dropOwnership(key);
		}

		message(msg){
			if(!(msg instanceof Message))
				return;

			msg.hops--;
			if(msg.hops<=0)
				return null;

			u.log(this, `Received message at the chord for ${msg.dest}: ${msg.data}`);

			if(this.directNodes[msg.dest])
				this.directNodes[msg.dest].message(msg);
			else
				this.node.message(msg);
		}

		registerModule(module){
			this.registry.register(module);
		}

		newMessage (module, handler, data, dest) {
			return new Message(this, 0, {src: this.id, dest, module, handler, data, hops: this.config.messageMaxHops});
		}

		sendNewMessage (module, handler, data, dest) {
			let m = this.newMessage(module, handler, data, dest);

			if(m)
				this.message(m);
		}

		_checkForID () {
			if (this.state.substr(0,5)!=="full_")
				return;

			u.log(this, "[CHORD]: Checking to see if own public key is still accessible...");

			this.lookupItem(this.id.idString)
				.then(
					result => {
						if (result!==this.pubKeyPem) {
							u.log(this, "[CHORD]: Public key could not be found - readding...");
							this.addItem(this.id.idString, this.pubKeyPem);
						} else {
							u.log(this, "[CHORD]: Public key still accessible.");
						}
					}
				)
		}

		_finalResortReconnect () {
			let nodeIdList = Object.getOwnPropertyNames(this.directNodes);

			if(nodeIdList.length < 1)
				return;

			let chosen = this.directNodes[nodeIdList[0]]

			return this.node.stableJoin(chosen)
				.then(
					() => {return this.node.stabilize();}
				)
		}
	}

	module.exports = {
		Chord: ConductorChord,
		ID,
		RemoteCallable: __webpack_require__(22)
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	let utils = {
		mergeConfig(config1, config2){
			let out = {};
			
			for(var propName in config1)
				if(config1.hasOwnProperty(propName))
					out[propName] = config1[propName];

			for(var propName in config2)
				if(config2.hasOwnProperty(propName))
					if(typeof config2[propName] === "object")
						out[propName] = utils.mergeConfig(
							out[propName], config2[propName]
						);
					else
						out[propName] = config2[propName];

			return out;
		},

		log(chord, msg){
			if(chord.config.debug)
				console.log(msg);
		}
	}

	module.exports = utils;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const ModuleRegistry = __webpack_require__(5),
		ID = __webpack_require__(6),
		msg_types = __webpack_require__(8).enums,
		pki = __webpack_require__(10).pki,
		random = __webpack_require__(10).random,
		cipher = __webpack_require__(10).cipher,
		forgeUtil = __webpack_require__(10).util,
		u = __webpack_require__(3);

	//handshake status codes.
	const HSHAKE_UNKNOWN = 0,
		HSHAKE_SENT = 1,
		HSHAKE_OBTAINED = 2;

	class ChordSignalChannel{
		constructor(chord){
			this.id =  "chord-signal";
			this.internalID = "Conductor-Chord";
			this.chord = chord;

			this.handshakes = {};

			chord.registerModule(this);
		}

		//Must implement:
		// 1) ConnectionVector
		// 2) ChordMessageHandler

		//
		// ConnectionVector
		//

		// Description of algorithm:
		// 1) Send a request to the ID you think you want - include your public key and id.
		// 2) On receipt, connectee sends back its true id and key.
		// 3) Use key to encrypt SDP - send offer.
		// Standard setup from here on out - trade encrypted SDP and ICE.

		onbind(){
		}

		send(id,type,data){
			u.log(this.chord, "Queueing command from conductor to send over chord:");
			u.log(this.chord, type);
			switch(type){
				//All of these calls RELY on an accurate key exchange beforehand.
				//These interactiona are queued.

				case msg_types.MSG_SDP_OFFER:
					this.queueOrPerformActionOn(id, id => {this.sendSDP(id, "offer", data)} );
					break;
				case msg_types.MSG_SDP_ANSWER:
					this.queueOrPerformActionOn(id, id => {this.sendSDP(id, "answer", data)} );
					break;
				case msg_types.MSG_ICE:
					this.queueOrPerformActionOn(id, id => {this.sendICE(id, data)} );
					break;
			}
		}

		onmessage(msg){
			let out = {
					type: null,
					data: null,
					id: null
				};

			u.log(this.chord, `Response requested at conductor via chord:`);

			switch(msg.handler){
				case "sdp-offer":
					u.log(this.chord, `SDP offer from ${out.id}`);

					out.type = msg_types.RESPONSE_SDP_OFFER;
					out.data = msg.data.sdp;
					break;
				case "sdp-answer":
					u.log(this.chord, `SDP answer from ${out.id}`);

					out.type = msg_types.RESPONSE_SDP_ANSWER;
					out.data = msg.data.sdp;
					break;
				case "ice":
					u.log(this.chord, `ICE candidate from ${out.id}`);

					out.type = msg_types.RESPONSE_ICE;
					out.data = msg.data.ice;
					break;
				default:
					u.log(this.chord, `Misc message from: ${out.id}`);

					out.type = msg_types.RESPONSE_NONE;
					break;
			}

			out.id = msg.src;

			return out;
		}

		close(){
		}

		//
		// ChordMessageHandler
		//

		delegate(message){
			u.log(this.chord, "Received message at chord signal channel:");
			u.log(this.chord, `${message}`);

			//Band aid fix.
			//I can either do this or force proxying over the successor.
			//Ideally, we would just proxy when overwriting an existing successor...
			if(message.dest !== this.chord.id.idString && message.handler !== "key-shake-init")
				return message.pass();

			switch(message.handler){
				case "key-shake-init":
					this.recvHandshakeInit(message);
					break;
				case "key-shake-reply":
					this.recvHandshakeReply(message);
					break;
				case "sdp-offer":
				case "sdp-answer":
					this.recvSDP(message);
					break;
				case "ice":
					this.recvICE(message);
					break;
			}
		}

		//
		// Entry management
		//
		fetchOrCreateNodeEntry(id){
			if(!this.handshakes[id]){
				this.handshakes[id] = {
					id,
					queue: [],
					status: HSHAKE_UNKNOWN,
					pubKey: null
				};
			}

			return this.handshakes[id];
		}

		queueOrPerformActionOn(id, func){
			//If no handshake, or ongoing then queue action.
			//Otherwise, execute action with id of entry.
			let entry = this.fetchOrCreateNodeEntry(id);

			//noinspection FallThroughInSwitchStatementJS
			switch(entry.status){
				case HSHAKE_UNKNOWN:
					this.initiateHandshake(id);
					//falls through
				case HSHAKE_SENT:
					entry.queue.push(func);
					break;
				case HSHAKE_OBTAINED:
					this.clearActionQueue(entry);
					func(id);
					break;
			}
		}

		clearActionQueue(entry){
			u.log(this.chord, `Clearing action queue for ${entry.id}`);

			while(entry.queue.length)
				(entry.queue.shift())(entry.id);
		}

		finishEntry(lookupID, pubPEM, optNewName, optAesKey){
			let entry = this.fetchOrCreateNodeEntry(lookupID);

			entry.status = HSHAKE_OBTAINED;

			if(optNewName)
				this.renameEntry(lookupID, optNewName);

			entry.pubKey = pki.publicKeyFromPem(pubPEM);

			entry.aesKey = (optAesKey) ? optAesKey : random.getBytesSync(16);

			return entry;
		}

		renameEntry(oldName, newName){
			if(oldName===newName || !this.handshakes[oldName])
				return false;
			else {
				this.handshakes[newName] = this.handshakes[oldName];
				this.handshakes[newName].id = newName;
				delete this.handshakes[oldName];
			}
		}

		//
		// Handshake Functions
		//

		initiateHandshake(id){
			u.log(this.chord, `Initialising handshake with: ${id}`);

			let entry = this.fetchOrCreateNodeEntry(id);

			entry.status = HSHAKE_SENT;

			this.message("key-shake-init", ModuleRegistry.wrap({pub: this.chord.pubKeyPem}), id);
		}

		recvHandshakeInit(message){
			//Message has: pub.
			u.log(this.chord, `Received handshake from: ${message.src}`);

			let entry = this.finishEntry(message.src, message.data.pub);
			this.updateLastMessage(message);

			this.message("key-shake-reply", ModuleRegistry.wrap({
				origId: message.dest,
				pub: this.chord.pubKeyPem,
				encKey: entry.pubKey.encrypt(entry.aesKey, "RSA-OAEP")
			}), message.src);
		}

		recvHandshakeReply(message){
			//Message has: origId, pub, encKey.
			u.log(this.chord, `Received handshake reply from ${message.data.origId}: true ID ${message.src}.`);

			let entry = this.finishEntry(message.data.origId,
				message.data.pub,
				message.src,
				this.chord.key.privateKey.decrypt(message.data.encKey, "RSA-OAEP")
			);

			try {
				this.chord.conductor.renameConnection(message.data.origId, message.src);
			} finally {
				this._manager.confirmName(message.src);
				this.clearActionQueue(entry);
			}
		}

		//
		// RTC functions
		//

		sendSDP(id, type, msg){
			let entry = this.fetchOrCreateNodeEntry(id);

			let iv = random.getBytesSync(12),
				cipherObj = cipher.createCipher('AES-GCM', entry.aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128
			});

			cipherObj.update(forgeUtil.createBuffer(JSON.stringify(msg)));
			cipherObj.finish();

			this.message("sdp-"+type, {
				sdpEnc: cipherObj.output.data,
				tag: cipherObj.mode.tag.data,
				iv: iv
			}, id);
		}

		sendICE(id, msg){
			let entry = this.fetchOrCreateNodeEntry(id);

			let iv = random.getBytesSync(12),
				cipherObj = cipher.createCipher('AES-GCM', entry.aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128
			});

			cipherObj.update(forgeUtil.createBuffer(JSON.stringify(msg)));
			cipherObj.finish();

			this.message("ice", {
				iceEnc: cipherObj.output.data,
				tag: cipherObj.mode.tag.data,
				iv: iv
			}, id);
		}

		recvSDP(message){
			//Message has: sdpEnc, tag, iv

			this.updateLastMessage(message);

			let entry = this.fetchOrCreateNodeEntry(message.src),
				iv = message.data.iv,
				decipher = cipher.createDecipher('AES-GCM', entry.aesKey);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128,
				tag: message.data.tag
			});

			decipher.update(forgeUtil.createBuffer(message.data.sdpEnc));
			let success = decipher.finish();

			message.data.sdp = (success) ? JSON.parse(decipher.output.data) : "";

			this.chord.conductor.response(message, this);
		}

		recvICE(message) {
			//Message has: iceEnc, tag, iv

			this.updateLastMessage(message);

			let entry = this.fetchOrCreateNodeEntry(message.src),
				iv = message.data.iv,
				decipher = cipher.createDecipher('AES-GCM', entry.aesKey);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128,
				tag: message.data.tag
			});

			decipher.update(forgeUtil.createBuffer(message.data.iceEnc));
			let success = decipher.finish();

			message.data.ice = (success) ? JSON.parse(decipher.output.data) : "";

			this.chord.conductor.response(message, this);
		}

		//
		// Helpers
		//
		message(handler, data, dest) {
			let msg = this.chord.newMessage(this.id, handler, data, dest);

			if(this.handshakes[dest] && this.handshakes[dest].lastMessage)
				this.handshakes[dest].lastMessage.reply(msg);
			else
				this.chord.message(msg);
		}

		updateLastMessage(message){
			if(message.src && this.handshakes[message.src])
				this.handshakes[message.src].lastMessage = message;
		}


	}

	module.exports = ChordSignalChannel;

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";

	// Registry for message parsers and handlers for the Chord class.
	// Used for extensions to the message handling and for RPC.

	class ModuleRegistry {
		constructor(){
			this.registry = {};
		}

		register(module){
			this.registry[module.id] = module;
		}

		parse(message){
			if(message.module && this.registry[message.module]){
				//unwrap the message's data...
				try{
					message.data = ModuleRegistry.unwrap(message.data);
				} catch (e) {}

				this.registry[message.module].delegate(message);
			}
		}

		static wrap(data){
			return JSON.stringify(data);
		}

		static unwrap(data){
			return JSON.parse(data);
		}
	}

	module.exports = ModuleRegistry;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const StringView = __webpack_require__(7);

	class ID {
		constructor(input){
			if (input instanceof ArrayBuffer){
				this.buffer = input;
				this.dataView = new Uint8Array(input);
				this.stringView = new StringView(this.buffer);
			} else if (ArrayBuffer.isView(input)){
				this.buffer = input.buffer;
				if(input instanceof Uint8Array)
					this.dataView = input;
				else
					this.dataView = new Uint8Array(this.buffer);
				this.stringView = new StringView(this.buffer);
			} else if (typeof input === "string"){
				this.stringView = StringView.makeFromBase64(input);
				this.buffer = this.stringView.buffer;
				this.dataView = new Uint8Array(this.buffer);
			} else {
				throw new TypeError("Illegal type for ID constructor: "+ typeof input);
			}
		}

		get idLength(){
			return this.buffer.byteLength * 8;
		}

		get idArray(){
			return this.dataView;
		}

		get idString(){
			if(this.base64 === undefined)
				this.base64 = this.stringView.toBase64(true);
			return this.base64;
		}

		leftShiftIn(bit){
			return ID.leftShiftIn(this, bit);
		}

		compareTo(id){
			return ID.compare(this, id);
		}

		add(arrayLike){
			return ID.add(this, arrayLike);
		}

		subtract(arrayLike){
			return ID.subtract(this, arrayLike);
		}

		inOpenBound(aL1, aL2){
			return ID.inOpenBound(this, aL1, aL2);
		}

		inLeftOpenBound(aL1, aL2){
			return ID.inRightOpenBound(this, aL1, aL2);
		}

		inRightOpenBound(aL1, aL2){
			return ID.inLeftOpenBound(this, aL1, aL2);
		}

		inClosedBound(aL1, aL2){
			return ID.inClosedBound(this, aL1, aL2);
		}

		static leftShiftIn(id, bit){
			let out = ID.uint8FromArrayLike(id).slice(0);

			for (let i = out.length - 1; i >= 0; i--) {
				let old = out[i];
				out[i] = (old << 1) + bit;
				bit = (old & 0x80) >> 7;
			};

			return new ID(out);
		}

		static compare(id1, id2){
			let arr1 = ID.uint8FromArrayLike(id1),
				arr2 = ID.uint8FromArrayLike(id2),
				loopLen = (arr1.length > arr2.length) ? arr1.length : arr2.length,
				retVal = 0;

			for(let i = 0; i<loopLen && retVal===0; i++){
				let pt1 = (arr1.length-loopLen+i < 0) ? 0x00 : arr1[arr1.length-loopLen+i],
					pt2 = (arr2.length-loopLen+i < 0) ? 0x00 : arr2[arr2.length-loopLen+i];

				retVal = pt1 - pt2;
			};

			return retVal;
		}

		static add(aL1, aL2){
			let arr1 = ID.uint8FromArrayLike(aL1),
				arr2 = ID.uint8FromArrayLike(aL2),
				out,
				addition;

			if(arr1.length > arr2.length){
				out = arr1.slice(0);
				addition = arr2;
			} else {
				out = arr2.slice(0);
				addition = arr1;
			}

			let carry = 0;
			for (let i = out.length - 1; i >= 0; i--) {
				let addIter = i + addition.length - out.length,
					pt = (addIter < 0) ? 0x00 : addition[addIter],
					old = out[i];

				out[i] += pt + carry;
				carry = old > out[i];

			};

			return new ID(out);
		}

		static subtract(aL1, aL2){
			let arr1 = ID.uint8FromArrayLike(aL1),
				arr2 = ID.uint8FromArrayLike(aL2),
				out,
				subtraction;

			if(arr1.length > arr2.length){
				out = arr1.slice(0);
				subtraction = new Uint8Array(arr1.length);
				subtraction.set(arr2, arr1.length-arr2.length);
			} else {
				out = new Uint8Array(arr2.length);
				out.set(arr1, arr2.length-arr1.length);
				subtraction = arr2;
			}

			return ID.add(out, ID.twosComplement(subtraction));
		}

		static inOpenBound(al_value, al_LB, al_UB){
			let bVal = ID.boundsChecks(al_value, al_LB, al_UB);
			return bVal[0];
		}

		static inLeftOpenBound(al_value, al_LB, al_UB){
			let bVal = ID.boundsChecks(al_value, al_LB, al_UB);
			return bVal[0] || bVal[2];
		}

		static inRightOpenBound(al_value, al_LB, al_UB){
			let bVal = ID.boundsChecks(al_value, al_LB, al_UB);
			return bVal[0] || bVal[1];
		}

		static inClosedBound(al_value, al_LB, al_UB){
			let bVal = ID.boundsChecks(al_value, al_LB, al_UB);
			return bVal[0] || bVal[1] || bVal[2];
		}

		static boundsChecks(al_value, al_LB, al_UB){
			let cmpLB = ID.compare(al_value, al_LB),
				cmpUB = ID.compare(al_value, al_UB),
				order = ID.compare(al_LB, al_UB);

			return [
				(order < 0)? (cmpLB>0 && cmpUB<0) : (cmpLB>0 || cmpUB<0), //Strictly in bounds.
				cmpLB === 0, //On left bound.
				cmpUB === 0 //On right bound.
			];
		}

		static powerOfTwoBuffer(power){
			let bytes = power/8;
			bytes = (bytes | 0) === bytes ? bytes : (bytes | 0) + 1;

			let out = new Uint8Array(bytes);
			out[0] = 0x01 << power%8;

			return out;
		}

		static onesComplement(arrayLike){
			let arr = ID.uint8FromArrayLike(arrayLike).slice(0);

			for (var i = arr.length - 1; i >= 0; i--) {
				arr[i] = ~arr[i]
			};

			return arr;
		}

		static twosComplement(arrayLike){
			return ID.add([0x01], ID.onesComplement(arrayLike));
		}

		static uint8FromArrayLike(arrayLike){
			if (arrayLike instanceof ArrayBuffer || arrayLike instanceof Array){
				return new Uint8Array(arrayLike);
			} else if (ArrayBuffer.isView(arrayLike)){
				return new Uint8Array(arrayLike.buffer);
			} else if (arrayLike instanceof ID){
				return arrayLike.dataView;
			} else if (typeof arrayLike === "string"){
				return new Uint8Array(StringView.makeFromBase64(arrayLike).buffer);
			} else {
				throw new TypeError(arrayLike + "is not an array-like type: "+ typeof arrayLike);
			}
		}

		static coerceString(unknownIDType){
			if (typeof unknownIDType === "string") {
				return unknownIDType
			} else if (unknownIDType instanceof ArrayBuffer || unknownIDType instanceof Array || ArrayBuffer.isView(unknownIDType)) {
				return new ID(unknownIDType).idString;
			} else {
				return unknownIDType.idString;
			}
		}
	}

	module.exports = ID;

/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";

	/*\
	|*|
	|*|  :: Number.isInteger() polyfill ::
	|*|
	|*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
	|*|
	\*/

	if (!Number.isInteger) {
	  Number.isInteger = function isInteger (nVal) {
	    return typeof nVal === "number" && isFinite(nVal) && nVal > -9007199254740992 && nVal < 9007199254740992 && Math.floor(nVal) === nVal;
	  };
	}

	/*\
	|*|
	|*|  StringView - Mozilla Developer Network
	|*|
	|*|  Revision #8, October 6, 2014
	|*|
	|*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays/StringView
	|*|  https://developer.mozilla.org/en-US/docs/User:fusionchess
	|*|
	|*|  This framework is released under the GNU Lesser General Public License, version 3 or later.
	|*|  http://www.gnu.org/licenses/lgpl-3.0.html
	|*|
	\*/

	function StringView (vInput, sEncoding /* optional (default: UTF-8) */, nOffset /* optional */, nLength /* optional */) {

	  var fTAView, aWhole, aRaw, fPutOutptCode, fGetOutptChrSize, nInptLen, nStartIdx = isFinite(nOffset) ? nOffset : 0, nTranscrType = 15;

	  if (sEncoding) { this.encoding = sEncoding.toString(); }

	  encSwitch: switch (this.encoding) {
	    case "UTF-8":
	      fPutOutptCode = StringView.putUTF8CharCode;
	      fGetOutptChrSize = StringView.getUTF8CharLength;
	      fTAView = Uint8Array;
	      break encSwitch;
	    case "UTF-16":
	      fPutOutptCode = StringView.putUTF16CharCode;
	      fGetOutptChrSize = StringView.getUTF16CharLength;
	      fTAView = Uint16Array;
	      break encSwitch;
	    case "UTF-32":
	      fTAView = Uint32Array;
	      nTranscrType &= 14;
	      break encSwitch;
	    default:
	      /* case "ASCII", or case "BinaryString" or unknown cases */
	      fTAView = Uint8Array;
	      nTranscrType &= 14;
	  }

	  typeSwitch: switch (typeof vInput) {
	    case "string":
	      /* the input argument is a primitive string: a new buffer will be created. */
	      nTranscrType &= 7;
	      break typeSwitch;
	    case "object":
	      classSwitch: switch (vInput.constructor) {
	        case StringView:
	          /* the input argument is a stringView: a new buffer will be created. */
	          nTranscrType &= 3;
	          break typeSwitch;
	        case String:
	          /* the input argument is an objectified string: a new buffer will be created. */
	          nTranscrType &= 7;
	          break typeSwitch;
	        case ArrayBuffer:
	          /* the input argument is an arrayBuffer: the buffer will be shared. */
	          aWhole = new fTAView(vInput);
	          nInptLen = this.encoding === "UTF-32" ?
	              vInput.byteLength >>> 2
	            : this.encoding === "UTF-16" ?
	              vInput.byteLength >>> 1
	            :
	              vInput.byteLength;
	          aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?
	            aWhole
	            : new fTAView(vInput, nStartIdx, !isFinite(nLength) ? nInptLen - nStartIdx : nLength);

	          break typeSwitch;
	        case Uint32Array:
	        case Uint16Array:
	        case Uint8Array:
	          /* the input argument is a typedArray: the buffer, and possibly the array itself, will be shared. */
	          fTAView = vInput.constructor;
	          nInptLen = vInput.length;
	          aWhole = vInput.byteOffset === 0 && vInput.length === (
	            fTAView === Uint32Array ?
	              vInput.buffer.byteLength >>> 2
	            : fTAView === Uint16Array ?
	              vInput.buffer.byteLength >>> 1
	            :
	              vInput.buffer.byteLength
	          ) ? vInput : new fTAView(vInput.buffer);
	          aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?
	            vInput
	            : vInput.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);

	          break typeSwitch;
	        default:
	          /* the input argument is an array or another serializable object: a new typedArray will be created. */
	          aWhole = new fTAView(vInput);
	          nInptLen = aWhole.length;
	          aRaw = nStartIdx === 0 && (!isFinite(nLength) || nLength === nInptLen) ?
	            aWhole
	            : aWhole.subarray(nStartIdx, isFinite(nLength) ? nStartIdx + nLength : nInptLen);
	      }
	      break typeSwitch;
	    default:
	      /* the input argument is a number, a boolean or a function: a new typedArray will be created. */
	      aWhole = aRaw = new fTAView(Number(vInput) || 0);

	  }

	  if (nTranscrType < 8) {

	    var vSource, nOutptLen, nCharStart, nCharEnd, nEndIdx, fGetInptChrSize, fGetInptChrCode;

	    if (nTranscrType & 4) { /* input is string */

	      vSource = vInput;
	      nOutptLen = nInptLen = vSource.length;
	      nTranscrType ^= this.encoding === "UTF-32" ? 0 : 2;
	      /* ...or...: nTranscrType ^= Number(this.encoding !== "UTF-32") << 1; */
	      nStartIdx = nCharStart = nOffset ? Math.max((nOutptLen + nOffset) % nOutptLen, 0) : 0;
	      nEndIdx = nCharEnd = (Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0) + nStartIdx, nOutptLen) : nOutptLen) - 1;

	    } else { /* input is stringView */

	      vSource = vInput.rawData;
	      nInptLen = vInput.makeIndex();
	      nStartIdx = nCharStart = nOffset ? Math.max((nInptLen + nOffset) % nInptLen, 0) : 0;
	      nOutptLen = Number.isInteger(nLength) ? Math.min(Math.max(nLength, 0), nInptLen - nCharStart) : nInptLen;
	      nEndIdx = nCharEnd = nOutptLen + nCharStart;

	      if (vInput.encoding === "UTF-8") {
	        fGetInptChrSize = StringView.getUTF8CharLength;
	        fGetInptChrCode = StringView.loadUTF8CharCode;
	      } else if (vInput.encoding === "UTF-16") {
	        fGetInptChrSize = StringView.getUTF16CharLength;
	        fGetInptChrCode = StringView.loadUTF16CharCode;
	      } else {
	        nTranscrType &= 1;
	      }

	    }

	    if (nOutptLen === 0 || nTranscrType < 4 && vSource.encoding === this.encoding && nCharStart === 0 && nOutptLen === nInptLen) {

	      /* the encoding is the same, the length too and the offset is 0... or the input is empty! */

	      nTranscrType = 7;

	    }

	    conversionSwitch: switch (nTranscrType) {

	      case 0:

	      /* both the source and the new StringView have a fixed-length encoding... */

	        aWhole = new fTAView(nOutptLen);
	        for (var nOutptIdx = 0; nOutptIdx < nOutptLen; aWhole[nOutptIdx] = vSource[nStartIdx + nOutptIdx++]);
	        break conversionSwitch;

	      case 1:

	      /* the source has a fixed-length encoding but the new StringView has a variable-length encoding... */

	        /* mapping... */

	        nOutptLen = 0;

	        for (var nInptIdx = nStartIdx; nInptIdx < nEndIdx; nInptIdx++) {
	          nOutptLen += fGetOutptChrSize(vSource[nInptIdx]);
	        }

	        aWhole = new fTAView(nOutptLen);

	        /* transcription of the source... */

	        for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx++) {
	          nOutptIdx = fPutOutptCode(aWhole, vSource[nInptIdx], nOutptIdx);
	        }

	        break conversionSwitch;

	      case 2:

	      /* the source has a variable-length encoding but the new StringView has a fixed-length encoding... */

	        /* mapping... */

	        nStartIdx = 0;

	        var nChrCode;

	        for (nChrIdx = 0; nChrIdx < nCharStart; nChrIdx++) {
	          nChrCode = fGetInptChrCode(vSource, nStartIdx);
	          nStartIdx += fGetInptChrSize(nChrCode);
	        }

	        aWhole = new fTAView(nOutptLen);

	        /* transcription of the source... */

	        for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode), nOutptIdx++) {
	          nChrCode = fGetInptChrCode(vSource, nInptIdx);
	          aWhole[nOutptIdx] = nChrCode;
	        }

	        break conversionSwitch;

	      case 3:

	      /* both the source and the new StringView have a variable-length encoding... */

	        /* mapping... */

	        nOutptLen = 0;

	        var nChrCode;

	        for (var nChrIdx = 0, nInptIdx = 0; nChrIdx < nCharEnd; nInptIdx += fGetInptChrSize(nChrCode)) {
	          nChrCode = fGetInptChrCode(vSource, nInptIdx);
	          if (nChrIdx === nCharStart) { nStartIdx = nInptIdx; }
	          if (++nChrIdx > nCharStart) { nOutptLen += fGetOutptChrSize(nChrCode); }
	        }

	        aWhole = new fTAView(nOutptLen);

	        /* transcription... */

	        for (var nInptIdx = nStartIdx, nOutptIdx = 0; nOutptIdx < nOutptLen; nInptIdx += fGetInptChrSize(nChrCode)) {
	          nChrCode = fGetInptChrCode(vSource, nInptIdx);
	          nOutptIdx = fPutOutptCode(aWhole, nChrCode, nOutptIdx);
	        }

	        break conversionSwitch;

	      case 4:

	      /* DOMString to ASCII or BinaryString or other unknown encodings */

	        aWhole = new fTAView(nOutptLen);

	        /* transcription... */

	        for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {
	          aWhole[nIdx] = vSource.charCodeAt(nIdx) & 0xff;
	        }

	        break conversionSwitch;

	      case 5:

	      /* DOMString to UTF-8 or to UTF-16 */

	        /* mapping... */

	        nOutptLen = 0;

	        for (var nMapIdx = 0; nMapIdx < nInptLen; nMapIdx++) {
	          if (nMapIdx === nCharStart) { nStartIdx = nOutptLen; }
	          nOutptLen += fGetOutptChrSize(vSource.charCodeAt(nMapIdx));
	          if (nMapIdx === nCharEnd) { nEndIdx = nOutptLen; }
	        }

	        aWhole = new fTAView(nOutptLen);

	        /* transcription... */

	        for (var nOutptIdx = 0, nChrIdx = 0; nOutptIdx < nOutptLen; nChrIdx++) {
	          nOutptIdx = fPutOutptCode(aWhole, vSource.charCodeAt(nChrIdx), nOutptIdx);
	        }

	        break conversionSwitch;

	      case 6:

	      /* DOMString to UTF-32 */

	        aWhole = new fTAView(nOutptLen);

	        /* transcription... */

	        for (var nIdx = 0; nIdx < nOutptLen; nIdx++) {
	          aWhole[nIdx] = vSource.charCodeAt(nIdx);
	        }

	        break conversionSwitch;

	      case 7:

	        aWhole = new fTAView(nOutptLen ? vSource : 0);
	        break conversionSwitch;

	    }

	    aRaw = nTranscrType > 3 && (nStartIdx > 0 || nEndIdx < aWhole.length - 1) ? aWhole.subarray(nStartIdx, nEndIdx) : aWhole;

	  }

	  this.buffer = aWhole.buffer;
	  this.bufferView = aWhole;
	  this.rawData = aRaw;

	  Object.freeze(this);

	}

	/* CONSTRUCTOR'S METHODS */

	StringView.loadUTF8CharCode = function (aChars, nIdx) {

	  var nLen = aChars.length, nPart = aChars[nIdx];

	  return nPart > 251 && nPart < 254 && nIdx + 5 < nLen ?
	      /* (nPart - 252 << 30) may be not safe in ECMAScript! So...: */
	      /* six bytes */ (nPart - 252) * 1073741824 + (aChars[nIdx + 1] - 128 << 24) + (aChars[nIdx + 2] - 128 << 18) + (aChars[nIdx + 3] - 128 << 12) + (aChars[nIdx + 4] - 128 << 6) + aChars[nIdx + 5] - 128
	    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ?
	      /* five bytes */ (nPart - 248 << 24) + (aChars[nIdx + 1] - 128 << 18) + (aChars[nIdx + 2] - 128 << 12) + (aChars[nIdx + 3] - 128 << 6) + aChars[nIdx + 4] - 128
	    : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ?
	      /* four bytes */(nPart - 240 << 18) + (aChars[nIdx + 1] - 128 << 12) + (aChars[nIdx + 2] - 128 << 6) + aChars[nIdx + 3] - 128
	    : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ?
	      /* three bytes */ (nPart - 224 << 12) + (aChars[nIdx + 1] - 128 << 6) + aChars[nIdx + 2] - 128
	    : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ?
	      /* two bytes */ (nPart - 192 << 6) + aChars[nIdx + 1] - 128
	    :
	      /* one byte */ nPart;

	};

	StringView.putUTF8CharCode = function (aTarget, nChar, nPutAt) {

	  var nIdx = nPutAt;

	  if (nChar < 0x80 /* 128 */) {
	    /* one byte */
	    aTarget[nIdx++] = nChar;
	  } else if (nChar < 0x800 /* 2048 */) {
	    /* two bytes */
	    aTarget[nIdx++] = 0xc0 /* 192 */ + (nChar >>> 6);
	    aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);
	  } else if (nChar < 0x10000 /* 65536 */) {
	    /* three bytes */
	    aTarget[nIdx++] = 0xe0 /* 224 */ + (nChar >>> 12);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);
	  } else if (nChar < 0x200000 /* 2097152 */) {
	    /* four bytes */
	    aTarget[nIdx++] = 0xf0 /* 240 */ + (nChar >>> 18);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);
	  } else if (nChar < 0x4000000 /* 67108864 */) {
	    /* five bytes */
	    aTarget[nIdx++] = 0xf8 /* 248 */ + (nChar >>> 24);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);
	  } else /* if (nChar <= 0x7fffffff) */ { /* 2147483647 */
	    /* six bytes */
	    aTarget[nIdx++] = 0xfc /* 252 */ + /* (nChar >>> 30) may be not safe in ECMAScript! So...: */ (nChar / 1073741824);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 24) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 18) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 12) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + ((nChar >>> 6) & 0x3f /* 63 */);
	    aTarget[nIdx++] = 0x80 /* 128 */ + (nChar & 0x3f /* 63 */);
	  }

	  return nIdx;

	};

	StringView.getUTF8CharLength = function (nChar) {
	  return nChar < 0x80 ? 1 : nChar < 0x800 ? 2 : nChar < 0x10000 ? 3 : nChar < 0x200000 ? 4 : nChar < 0x4000000 ? 5 : 6;
	};

	StringView.loadUTF16CharCode = function (aChars, nIdx) {

	  /* UTF-16 to DOMString decoding algorithm */
	  var nFrstChr = aChars[nIdx];

	  return nFrstChr > 0xD7BF /* 55231 */ && nIdx + 1 < aChars.length ?
	    (nFrstChr - 0xD800 /* 55296 */ << 10) + aChars[nIdx + 1] + 0x2400 /* 9216 */
	    : nFrstChr;

	};

	StringView.putUTF16CharCode = function (aTarget, nChar, nPutAt) {

	  var nIdx = nPutAt;

	  if (nChar < 0x10000 /* 65536 */) {
	    /* one element */
	    aTarget[nIdx++] = nChar;
	  } else {
	    /* two elements */
	    aTarget[nIdx++] = 0xD7C0 /* 55232 */ + (nChar >>> 10);
	    aTarget[nIdx++] = 0xDC00 /* 56320 */ + (nChar & 0x3FF /* 1023 */);
	  }

	  return nIdx;

	};

	StringView.getUTF16CharLength = function (nChar) {
	  return nChar < 0x10000 ? 1 : 2;
	};

	/* Array of bytes to base64 string decoding */

	StringView.b64ToUint6 = function (nChr) {

	  return nChr > 64 && nChr < 91 ?
	      nChr - 65
	    : nChr > 96 && nChr < 123 ?
	      nChr - 71
	    : nChr > 47 && nChr < 58 ?
	      nChr + 4
	    : nChr === 43 ?
	      62
	    : nChr === 47 ?
	      63
	    :
	      0;

	};

	StringView.uint6ToB64 = function (nUint6) {

	  return nUint6 < 26 ?
	      nUint6 + 65
	    : nUint6 < 52 ?
	      nUint6 + 71
	    : nUint6 < 62 ?
	      nUint6 - 4
	    : nUint6 === 62 ?
	      43
	    : nUint6 === 63 ?
	      47
	    :
	      65;

	};

	/* Base64 string to array encoding */

	StringView.bytesToBase64 = function (aBytes) {

	  var sB64Enc = "";

	  for (var nMod3, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
	    nMod3 = nIdx % 3;
	    if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
	    nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
	    if (nMod3 === 2 || aBytes.length - nIdx === 1) {
	      sB64Enc += String.fromCharCode(StringView.uint6ToB64(nUint24 >>> 18 & 63), StringView.uint6ToB64(nUint24 >>> 12 & 63), StringView.uint6ToB64(nUint24 >>> 6 & 63), StringView.uint6ToB64(nUint24 & 63));
	      nUint24 = 0;
	    }
	  }

	  return sB64Enc.replace(/A(?=A$|$)/g, "=");

	};


	StringView.base64ToBytes = function (sBase64, nBlockBytes) {

	  var
	    sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, ""), nInLen = sB64Enc.length,
	    nOutLen = nBlockBytes ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockBytes) * nBlockBytes : nInLen * 3 + 1 >>> 2, aBytes = new Uint8Array(nOutLen);

	  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
	    nMod4 = nInIdx & 3;
	    nUint24 |= StringView.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
	    if (nMod4 === 3 || nInLen - nInIdx === 1) {
	      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
	        aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
	      }
	      nUint24 = 0;
	    }
	  }

	  return aBytes;

	};

	StringView.makeFromBase64 = function (sB64Inpt, sEncoding, nByteOffset, nLength) {

	  return new StringView(sEncoding === "UTF-16" || sEncoding === "UTF-32" ? StringView.base64ToBytes(sB64Inpt, sEncoding === "UTF-16" ? 2 : 4).buffer : StringView.base64ToBytes(sB64Inpt), sEncoding, nByteOffset, nLength);

	};

	/* DEFAULT VALUES */

	StringView.prototype.encoding = "UTF-8"; /* Default encoding... */

	/* INSTANCES' METHODS */

	StringView.prototype.makeIndex = function (nChrLength, nStartFrom) {

	  var

	    aTarget = this.rawData, nChrEnd, nRawLength = aTarget.length,
	    nStartIdx = nStartFrom || 0, nIdxEnd = nStartIdx, nStopAtChr = isNaN(nChrLength) ? Infinity : nChrLength;

	  if (nChrLength + 1 > aTarget.length) { throw new RangeError("StringView.prototype.makeIndex - The offset can\'t be major than the length of the array - 1."); }

	  switch (this.encoding) {

	    case "UTF-8":

	      var nPart;

	      for (nChrEnd = 0; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {
	        nPart = aTarget[nIdxEnd];
	        nIdxEnd += nPart > 251 && nPart < 254 && nIdxEnd + 5 < nRawLength ? 6
	          : nPart > 247 && nPart < 252 && nIdxEnd + 4 < nRawLength ? 5
	          : nPart > 239 && nPart < 248 && nIdxEnd + 3 < nRawLength ? 4
	          : nPart > 223 && nPart < 240 && nIdxEnd + 2 < nRawLength ? 3
	          : nPart > 191 && nPart < 224 && nIdxEnd + 1 < nRawLength ? 2
	          : 1;
	      }

	      break;

	    case "UTF-16":

	      for (nChrEnd = nStartIdx; nIdxEnd < nRawLength && nChrEnd < nStopAtChr; nChrEnd++) {
	        nIdxEnd += aTarget[nIdxEnd] > 0xD7BF /* 55231 */ && nIdxEnd + 1 < aTarget.length ? 2 : 1;
	      }

	      break;

	    default:

	      nIdxEnd = nChrEnd = isFinite(nChrLength) ? nChrLength : nRawLength - 1;

	  }

	  if (nChrLength) { return nIdxEnd; }

	  return nChrEnd;

	};

	StringView.prototype.toBase64 = function (bWholeBuffer) {

	  return StringView.bytesToBase64(
	    bWholeBuffer ?
	      (
	        this.bufferView.constructor === Uint8Array ?
	          this.bufferView
	        :
	          new Uint8Array(this.buffer)
	      )
	    : this.rawData.constructor === Uint8Array ?
	      this.rawData
	    :
	      new Uint8Array(this.buffer, this.rawData.byteOffset, this.rawData.length << (this.rawData.constructor === Uint16Array ? 1 : 2))
	    );

	};

	StringView.prototype.subview = function (nCharOffset /* optional */, nCharLength /* optional */) {

	  var

	    nChrLen, nCharStart, nStrLen, bVariableLen = this.encoding === "UTF-8" || this.encoding === "UTF-16",
	    nStartOffset = nCharOffset, nStringLength, nRawLen = this.rawData.length;

	  if (nRawLen === 0) {
	    return new StringView(this.buffer, this.encoding);
	  }

	  nStringLength = bVariableLen ? this.makeIndex() : nRawLen;
	  nCharStart = nCharOffset ? Math.max((nStringLength + nCharOffset) % nStringLength, 0) : 0;
	  nStrLen = Number.isInteger(nCharLength) ? Math.max(nCharLength, 0) + nCharStart > nStringLength ? nStringLength - nCharStart : nCharLength : nStringLength;

	  if (nCharStart === 0 && nStrLen === nStringLength) { return this; }

	  if (bVariableLen) {
	    nStartOffset = this.makeIndex(nCharStart);
	    nChrLen = this.makeIndex(nStrLen, nStartOffset) - nStartOffset;
	  } else {
	    nStartOffset = nCharStart;
	    nChrLen = nStrLen - nCharStart;
	  }

	  if (this.encoding === "UTF-16") {
	    nStartOffset <<= 1;
	  } else if (this.encoding === "UTF-32") {
	    nStartOffset <<= 2;
	  }

	  return new StringView(this.buffer, this.encoding, nStartOffset, nChrLen);

	};

	StringView.prototype.forEachChar = function (fCallback, oThat, nChrOffset, nChrLen) {

	  var aSource = this.rawData, nRawEnd, nRawIdx;

	  if (this.encoding === "UTF-8" || this.encoding === "UTF-16") {

	    var fGetInptChrSize, fGetInptChrCode;

	    if (this.encoding === "UTF-8") {
	      fGetInptChrSize = StringView.getUTF8CharLength;
	      fGetInptChrCode = StringView.loadUTF8CharCode;
	    } else if (this.encoding === "UTF-16") {
	      fGetInptChrSize = StringView.getUTF16CharLength;
	      fGetInptChrCode = StringView.loadUTF16CharCode;
	    }

	    nRawIdx = isFinite(nChrOffset) ? this.makeIndex(nChrOffset) : 0;
	    nRawEnd = isFinite(nChrLen) ? this.makeIndex(nChrLen, nRawIdx) : aSource.length;

	    for (var nChrCode, nChrIdx = 0; nRawIdx < nRawEnd; nChrIdx++) {
	      nChrCode = fGetInptChrCode(aSource, nRawIdx);
	      fCallback.call(oThat || null, nChrCode, nChrIdx, nRawIdx, aSource);
	      nRawIdx += fGetInptChrSize(nChrCode);
	    }

	  } else {

	    nRawIdx = isFinite(nChrOffset) ? nChrOffset : 0;
	    nRawEnd = isFinite(nChrLen) ? nChrLen + nRawIdx : aSource.length;

	    for (nRawIdx; nRawIdx < nRawEnd; nRawIdx++) {
	      fCallback.call(oThat || null, aSource[nRawIdx], nRawIdx, nRawIdx, aSource);
	    }

	  }

	};

	StringView.prototype.valueOf = StringView.prototype.toString = function () {

	  if (this.encoding !== "UTF-8" && this.encoding !== "UTF-16") {
	    /* ASCII, UTF-32 or BinaryString to DOMString */
	    return String.fromCharCode.apply(null, this.rawData);
	  }

	  var fGetCode, fGetIncr, sView = "";

	  if (this.encoding === "UTF-8") {
	    fGetIncr = StringView.getUTF8CharLength;
	    fGetCode = StringView.loadUTF8CharCode;
	  } else if (this.encoding === "UTF-16") {
	    fGetIncr = StringView.getUTF16CharLength;
	    fGetCode = StringView.loadUTF16CharCode;
	  }

	  for (var nChr, nLen = this.rawData.length, nIdx = 0; nIdx < nLen; nIdx += fGetIncr(nChr)) {
	    nChr = fGetCode(this.rawData, nIdx);
	    sView += String.fromCharCode(nChr);
	  }

	  return sView;

	};

	module.exports = StringView;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const wrtc_adapter = __webpack_require__(9)
		, enums = {
			RESPONSE_NONE: Symbol("Miscellaneous Response"),
			RESPONSE_ICE: Symbol("ICE Candidate Response"),
			RESPONSE_SDP_ANSWER: Symbol("SDP Reply Response"),
			RESPONSE_SDP_OFFER: Symbol("SDP Offer Response"),

			MSG_SDP_ANSWER: Symbol("SDP Reply Message"),
			MSG_SDP_OFFER: Symbol("SDP Offer Message"),
			MSG_ICE: Symbol("ICE Candidate Message"),

			CHANNEL_BOUND: Symbol("Channel is bound to resource manager."),
			CHANNEL_CLOSED: Symbol("Channel is closed.")
		};

	const defaultConfig = {
		channel: null,
		timeout: 0,
		conn_ttl: 10000,
		rtc_facade: wrtc_adapter,
		rtc_config: { iceServers: [{urls: ["stun:stun.l.google.com:19302", "stun:stun.ekiga.net"] }] },
		callstats: null,
		callstats_app_id: 0,
		callstats_app_secret: "",
		callstats_uID: "",
		callstats_cID: ""
	};

	function WebRTCResourceManager(config){
		this._channelRegistry = {};
		this._connectionRegistry = {};

		let _lookupChannel = id => {
			// Takes a string id, and returns the channel matching that id.
			return this._channelRegistry[id];
		},
		_insertChannel = channel => {
			//Place a channel object into the registry based upon its internalID.
			this._channelRegistry[channel.internalID] = channel;
		},
		_newConnection = (id, channel, response) => {
			let conn = new this.config.rtc_facade.RTCPeerConnection(this.config.rtc_config),
				trConn = new TrackedConnection(id, conn),
				t = this;

			_insertConnection(id, trConn);

			conn.onicecandidate = function(evt) {
				if(evt.candidate)
					channel.send(id, enums.MSG_ICE, evt.candidate);
			}

			conn.ondatachannel = function(evt){
				console.log("Received Channel from other partner.")
				clearTimeout(trConn._rejectTimeout);
				trConn.registerDataChannel(evt.channel);
			}

			let disconnectFired = false;

			conn.oniceconnectionstatechange = function(evt) {
				switch(this.iceConnectionState){
					case "closed":
						if(disconnectFired)
							return;
						if (trConn.onclose)
							trConn.onclose(evt);
					case "failed":
					case "disconnected":
						if(disconnectFired)
							return;
						if (trConn.ondisconnect)
							trConn.ondisconnect(evt);
						delete t._connectionRegistry[trConn.id];
						disconnectFired = true;
						break;
				}		
			}

			trConn._onNamed = () => {
				if (this.callstats) {
					this.callstats.addNewFabric(
							conn, trConn.id, "data", this.config.callstats_cID
						);
					trConn.fabric = true;
				}
			}

			if (this.config.timeout !== 0)
				trConn._rejectTimeout = setTimeout(()=>{trConn.reject(`[Conductor] Couldn't open WebRTC connection "${trConn.id}" - timed out.`)}, this.config.timeout);


			if(response)
				_fireOnConnected(trConn);

			return trConn;
		},
		_lookupConnection = id => {
			// Check to see if a connection exists in the registry already.
			return this._connectionRegistry[id];
		},
		_insertConnection = (id, connection) => {
			//Place a Connection object into the registry based upon its internalID.
			this._connectionRegistry[id] = connection;
		},
		_validateChannel = channel => {
			// Check to see if an object is a valid channel
			return (channel.internalID && typeof channel.internalID === "string")
					&& (channel.send && typeof channel.send === "function")
					&& (channel.onmessage && typeof channel.onmessage === "function")
					&& (!channel.onbind || typeof channel.onbind === "function")
					&& (!channel.onclose || typeof channel.onclose === "function");
		},
		_bindChannel = channel => {
			// Bind a channel to this manager object. Change its state accordingly.
			_insertChannel(channel);
			channel._manager = this;
			channel.state = enums.CHANNEL_BOUND;

			let onbindresult;
			if(channel.onbind){
				onbindresult = channel.onbind();
			}

			if(!(onbindresult instanceof Promise))
				channel._ready = Promise.resolve(true);
			else
				channel._ready = onbindresult;

		},
		_closeChannel = channel => {
			// Close a channel properly, change its state.
			if(channel.close)
				channel.close();
			channel.state = enums.CHANNEL_CLOSED;
		},
		_channelFromObjectOrId = channel => {
			if(typeof channel === "string"){
				channel = _lookupChannel(channel);
			}

			if(channel === null || channel === undefined)
				throw new Error("Channel lookup failed - id does not correspond to a registered channel instance.");
			else if(channel._manager !== this)
				throw new Error("Channel is not bound to this manager instance.");
			else
				return channel;

			return null;
		},
		_validateConfig = config => {
			return (config.channel && _validateChannel(config.channel))
					&& (config.rtc_facade && typeof config.rtc_facade === "object")
					&& (config.rtc_config && typeof config.rtc_config === "object");
		},
		_mergeConfig = (config1, config2)=>{
			let out = {};
			
			for(var propName in config1)
				if(config1.hasOwnProperty(propName))
					out[propName] = config1[propName];

			for(var propName in config2)
				if(config2.hasOwnProperty(propName))
					out[propName] = config2[propName];

			return out;
		},
		_fireOnConnected = (conn) => {
			if(this.onconnection)
				this.onconnection(conn);
		};

		//Public methods.

		this.connectTo = (id, channel) => {
			// Return an instance of a given connection by its id.
			// This increments a connection's usage counter.
			// If the channel supplied is an id, look it up in the registry.
			//		If it has been bound to this, use it. If bound to another manager, throw.
			// 		Otherwise, add it to the registry if it has yet to be bound.

			let look = _lookupConnection(id),
				prom;

			if(!look){
				if(!channel)
					channel = this.config.channel;
				else{
					try{
						channel = _channelFromObjectOrId(channel);
					} catch (e){
						if(channel.state === enums.CHANNEL_BOUND || channel.state === enums.CHANNEL_CLOSED)
							throw e;
						else
							this.register(channel);
					}
				}
		
				look = _newConnection(id, channel);
		
				prom = new Promise((resolve,reject)=>{
					let dataChan = {};
					look._reject = reject;
			
					let ready = channel._ready
						.then(result => {
							if(result){
								dataChan = look.addDataChannel("__default");
								return look.connection.createOffer({});
							}
							else
								return new Promise((res,rej)=>{rej("Channel failed to become ready for connection or is not allowing outbound offers.");});
						})
						.then(result => {
							return look.connection.setLocalDescription(result);
						})
						.then(
							result => {
								channel.send(id, enums.MSG_SDP_OFFER, look.connection.localDescription);
								return true;
							},
							reason => {
								console.log(reason);
								return false;
							}
						);

					console.log(ready);

					ready.then(val => {
						if(val){
							dataChan.onopen = () => {
								clearTimeout(look._rejectTimeout);
								resolve(look);
							};
							dataChan.onerror = err => reject(err);
						} else {
							reject("Cannot create new data channel - connection channel is not alllowing outbound offers.")
							look.close();
						}
					})
				});

				look._promise = prom;

			} else {
				prom = look._promise;
			}

			return prom;
		};

		this.close = id => {
			// Close a connection with the given id.
			// If you have a TrackedConnection instance you'd be better off just calling .close on that.
			_lookupConnection(id).close();
		};

		this.getConnection = id => {
			// Return an instance of a given connection by its id.
			// This shouldn't affect a connection's usages counter.
			return _lookupConnection(id);
		};

		this.response = (msg, channel) => {
			// Call this function to to pass a response from a channel to the correct channel handler.
			// channel may either be a channel object or an id - in both cases the channel object MUST
			// be registered to the controller.
			channel = _channelFromObjectOrId(channel);

			let input = channel.onmessage(msg),
				target = _lookupConnection(input.id),
				data = input.data;

			if(!target && input.id) {
				target = _newConnection(input.id, channel, true);
				this.confirmName(input.id);
			}

			const error = (fnName, error) => {
				if (target.fabric)
					this.callstats.reportError(
						target.connection,
						this.config.callstats_cID,
						fnName,
						error);
			}

			switch(input.type){
				case(enums.RESPONSE_NONE):
					break;
				case(enums.RESPONSE_ICE):
					console.log("ICE candidate picked up by manager.");
					target.connection.addIceCandidate(new this.config.rtc_facade.RTCIceCandidate(data))
						.then(
							result => console.log("Successfully added ICE candidate to connection "+input.id),
							reason => {
								console.log("Unsuccessful in adding ICE candidate to connection "+input.id+": "+reason);
								error("addIceCandidate", reason);
							}
						);
					break;
				case(enums.RESPONSE_SDP_OFFER):
					console.log("SDP offer picked up by manager.")
					target.connection.setRemoteDescription(new this.config.rtc_facade.RTCSessionDescription(data))
						.then(res => {
								return target.connection.createAnswer()
							}, reason => error("setRemoteDescription", reason)
						)
						.then(res => {
								return target.connection.setLocalDescription(res)
							}, reason => error("createAnswer", reason)
						)
						.then(
							result => channel.send(input.id, enums.MSG_SDP_ANSWER, target.connection.localDescription),
							reason => {
								console.log("Failed to respond to SDP offer: "+reason);
								error("setLocalDescription", reason)
							}
						);
					break;
				case(enums.RESPONSE_SDP_ANSWER):
					console.log("SDP answer picked up by manager.");
					target.connection.setRemoteDescription(new this.config.rtc_facade.RTCSessionDescription(data))
					.then(
							result => console.log("Successfully added SDP Answer to connection "+input.id),
							reason => {
								console.log("Unsuccessful in adding SDP Answer to connection "+input.id+": "+reason);
								error("setRemoteDescription", reason);
							}
						);
					break;
				default:
					throw new Error("Illegal input type sent as response to connection driver.");
			}
		};

		this.register = channel => {
			// Called to add a channel handler to the channel registry.
			// Strict limit of one handler per id - duplicate entry should close the old before inserting the new.
			let lookup = _lookupChannel(channel.internalID);

			if(lookup && lookup !== channel)
				_closeChannel(lookup);

			if(_validateChannel(channel))
				_bindChannel(channel);
			else
				throw new TypeError("The supplied channel is not of a valid format.");
		};

		this.renameConnection = (oldName, newName) => {
			if(!(typeof oldName === "string" && typeof newName === "string"))
				throw new TypeError("Invalid parameters for renameConnection - one or both are not of type \"string\".");
			if(!this._connectionRegistry[oldName])
				throw new ReferenceError("Invalid parameter for old name at renameConnection - no corresponding connection exists.");
			if(this._connectionRegistry[newName])
				throw new ReferenceError("Error for new name at renameConnection - connection of name "+newName+" already exists.");

			let item = this._connectionRegistry[oldName];
			this._connectionRegistry[newName] = item;
			item.id = newName;

			delete this._connectionRegistry[oldName];
		}

		this.confirmName = (name) => {
			let item = this._connectionRegistry[name];
			
			if (item._onNamed)
				item._onNamed();
		}

		this.reject = (name, reason) => {
			if(!(typeof name === "string"))
				throw new TypeError("Invalid parameters for reject - name is not of type \"string\".");

			let item = this._connectionRegistry[name];
			if (item)
				item.reject(reason);
		}

		this.onconnection = undefined;

		// Initialisation code
		this.config = _mergeConfig(defaultConfig, config);

		// Initialise callstats, if given.
		if (this.config.callstats) {
			this.callstats = this.config.callstats;
			this.callstats.initialize(
				this.config.callstats_app_id,
				this.config.callstats_app_secret,
				this.config.callstats_uID
			);
		}

		if(!_validateConfig(this.config))
			throw new TypeError("An 'rtc_facade', 'rtc_config' and 'channel' must be defined for WebRTC to be used.");

		this.register(this.config.channel);
	}



	function TrackedConnection(id, rtcConn){
		// let _usages = 0;

		// Object.defineProperty(this, {
		// 	"usages": {
		// 		"get": () => {return _usages;}
		// 	}
		// })

		let _lookupExisting = label => {
			let look;

			if(label)
				look = this.dataChannels[label];
			else
				look = this.dataChannels.__default;

			if(!look)
				throw new Error(label ? "No such data channel for label "+label+"."
					: "No default channel present to send data."
				);

			return look;
		};

		this.id = id;

		this.connection = rtcConn;

		this.dataChannels = {
			__default: null
		};

		this.fabric = false;

		// this.openStatus = "closed";

		this.addDataChannel = label => {
			// Add another data connection onto this RTCPeerConnection.
			// If we use a duplicate label, just take that connection instead.
			// Return a promise.
			let dChan = this.dataChannels[label];
			if(!dChan){
				this.registerDataChannel(this.connection.createDataChannel(label, null));
				dChan = this.dataChannels[label];
			}

			return dChan;
		};

		this.registerDataChannel = (dChan) => {
			// let prom = new Promise((resolve, reject) => {
			// 	dChan.onopen = () => {resolve(dChan)};
			// 	dChan.onerror = err => reject(err);
			// 	dChan.onmessage = (msg) => console.log("MESSAGE: "+msg)
			// });

			this.dataChannels[dChan.label] = dChan;

			if(this.ondatachannel){
				this.ondatachannel(dChan);
			}

			// return prom;
			return dChan;
		};

		this.onclose = null;
		this.ondatachannel = null;
		this.ondisconnect = null;

		this.send = (msg, label) => {
			_lookupExisting(label)
			// .then(result => result.send(msg));
			.send(msg)
		};

		this.close = () => {
			// Decrement usages by 1.
			// If _usages hits zero, place a timeout function to kill this item if it gains no more users
			// before TTL
			// TODO - closes for real right now.

			this.connection.close();
		};

		this.reject = reason => {
			if(this._reject) {
				this._reject(reason);
				this.close();
			}
		}

		this.on = (event, handler, label) => {
			_lookupExisting(label)["on"+event] = handler
			// .then(result => {console.log(result);result["on"+event] = handler;console.log(result.onmessage);});
		};
	}

	module.exports = {
		create(config){
			return new WebRTCResourceManager(config);
		},

		WebRTCResourceManager,
		TrackedConnection,
		enums
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
	 *
	 *  Use of this source code is governed by a BSD-style license
	 *  that can be found in the LICENSE file in the root of the source
	 *  tree.
	 */

	/* More information about these options at jshint.com/docs/options */
	/* jshint browser: true, camelcase: true, curly: true, devel: true,
	   eqeqeq: true, forin: false, globalstrict: true, node: true,
	   quotmark: single, undef: true, unused: strict */
	/* global mozRTCIceCandidate, mozRTCPeerConnection, Promise,
	mozRTCSessionDescription, webkitRTCPeerConnection, MediaStreamTrack,
	MediaStream, RTCIceGatherer, RTCIceTransport, RTCDtlsTransport,
	RTCRtpSender, RTCRtpReceiver*/
	/* exported trace,requestUserMedia */

	'use strict';

	var getUserMedia = null;
	var attachMediaStream = null;
	var reattachMediaStream = null;
	var webrtcDetectedBrowser = null;
	var webrtcDetectedVersion = null;
	var webrtcMinimumVersion = null;
	var webrtcUtils = {
	  log: function() {
	    // suppress console.log output when being included as a module.
	    if (true) {
	      return;
	    }
	    console.log.apply(console, arguments);
	  },
	  extractVersion: function(uastring, expr, pos) {
	    var match = uastring.match(expr);
	    return match && match.length >= pos && parseInt(match[pos], 10);
	  }
	};

	function trace(text) {
	  // This function is used for logging.
	  if (text[text.length - 1] === '\n') {
	    text = text.substring(0, text.length - 1);
	  }
	  if (window.performance) {
	    var now = (window.performance.now() / 1000).toFixed(3);
	    webrtcUtils.log(now + ': ' + text);
	  } else {
	    webrtcUtils.log(text);
	  }
	}

	if (typeof window === 'object') {
	  if (window.HTMLMediaElement &&
	    !('srcObject' in window.HTMLMediaElement.prototype)) {
	    // Shim the srcObject property, once, when HTMLMediaElement is found.
	    Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {
	      get: function() {
	        // If prefixed srcObject property exists, return it.
	        // Otherwise use the shimmed property, _srcObject
	        return 'mozSrcObject' in this ? this.mozSrcObject : this._srcObject;
	      },
	      set: function(stream) {
	        if ('mozSrcObject' in this) {
	          this.mozSrcObject = stream;
	        } else {
	          // Use _srcObject as a private property for this shim
	          this._srcObject = stream;
	          // TODO: revokeObjectUrl(this.src) when !stream to release resources?
	          this.src = URL.createObjectURL(stream);
	        }
	      }
	    });
	  }
	  // Proxy existing globals
	  getUserMedia = window.navigator && window.navigator.getUserMedia;
	}

	// Attach a media stream to an element.
	attachMediaStream = function(element, stream) {
	  element.srcObject = stream;
	};

	reattachMediaStream = function(to, from) {
	  to.srcObject = from.srcObject;
	};

	if (typeof window === 'undefined' || !window.navigator) {
	  webrtcUtils.log('This does not appear to be a browser');
	  webrtcDetectedBrowser = 'not a browser';
	} else if (navigator.mozGetUserMedia) {
	  webrtcUtils.log('This appears to be Firefox');

	  webrtcDetectedBrowser = 'firefox';

	  // the detected firefox version.
	  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
	      /Firefox\/([0-9]+)\./, 1);

	  // the minimum firefox version still supported by adapter.
	  webrtcMinimumVersion = 31;

	  // Shim for RTCPeerConnection on older versions.
	  if (!window.RTCPeerConnection) {
	    window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	      if (webrtcDetectedVersion < 38) {
	        // .urls is not supported in FF < 38.
	        // create RTCIceServers with a single url.
	        if (pcConfig && pcConfig.iceServers) {
	          var newIceServers = [];
	          for (var i = 0; i < pcConfig.iceServers.length; i++) {
	            var server = pcConfig.iceServers[i];
	            if (server.hasOwnProperty('urls')) {
	              for (var j = 0; j < server.urls.length; j++) {
	                var newServer = {
	                  url: server.urls[j]
	                };
	                if (server.urls[j].indexOf('turn') === 0) {
	                  newServer.username = server.username;
	                  newServer.credential = server.credential;
	                }
	                newIceServers.push(newServer);
	              }
	            } else {
	              newIceServers.push(pcConfig.iceServers[i]);
	            }
	          }
	          pcConfig.iceServers = newIceServers;
	        }
	      }
	      return new mozRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors
	    };
	    window.RTCPeerConnection.prototype = mozRTCPeerConnection.prototype;

	    // wrap static methods. Currently just generateCertificate.
	    if (mozRTCPeerConnection.generateCertificate) {
	      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	        get: function() {
	          if (arguments.length) {
	            return mozRTCPeerConnection.generateCertificate.apply(null,
	                arguments);
	          } else {
	            return mozRTCPeerConnection.generateCertificate;
	          }
	        }
	      });
	    }

	    window.RTCSessionDescription = mozRTCSessionDescription;
	    window.RTCIceCandidate = mozRTCIceCandidate;
	  }

	  // getUserMedia constraints shim.
	  getUserMedia = function(constraints, onSuccess, onError) {
	    var constraintsToFF37 = function(c) {
	      if (typeof c !== 'object' || c.require) {
	        return c;
	      }
	      var require = [];
	      Object.keys(c).forEach(function(key) {
	        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	          return;
	        }
	        var r = c[key] = (typeof c[key] === 'object') ?
	            c[key] : {ideal: c[key]};
	        if (r.min !== undefined ||
	            r.max !== undefined || r.exact !== undefined) {
	          require.push(key);
	        }
	        if (r.exact !== undefined) {
	          if (typeof r.exact === 'number') {
	            r.min = r.max = r.exact;
	          } else {
	            c[key] = r.exact;
	          }
	          delete r.exact;
	        }
	        if (r.ideal !== undefined) {
	          c.advanced = c.advanced || [];
	          var oc = {};
	          if (typeof r.ideal === 'number') {
	            oc[key] = {min: r.ideal, max: r.ideal};
	          } else {
	            oc[key] = r.ideal;
	          }
	          c.advanced.push(oc);
	          delete r.ideal;
	          if (!Object.keys(r).length) {
	            delete c[key];
	          }
	        }
	      });
	      if (require.length) {
	        c.require = require;
	      }
	      return c;
	    };
	    if (webrtcDetectedVersion < 38) {
	      webrtcUtils.log('spec: ' + JSON.stringify(constraints));
	      if (constraints.audio) {
	        constraints.audio = constraintsToFF37(constraints.audio);
	      }
	      if (constraints.video) {
	        constraints.video = constraintsToFF37(constraints.video);
	      }
	      webrtcUtils.log('ff37: ' + JSON.stringify(constraints));
	    }
	    return navigator.mozGetUserMedia(constraints, onSuccess, onError);
	  };

	  navigator.getUserMedia = getUserMedia;

	  // Shim for mediaDevices on older versions.
	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {getUserMedia: requestUserMedia,
	      addEventListener: function() { },
	      removeEventListener: function() { }
	    };
	  }
	  navigator.mediaDevices.enumerateDevices =
	      navigator.mediaDevices.enumerateDevices || function() {
	    return new Promise(function(resolve) {
	      var infos = [
	        {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},
	        {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}
	      ];
	      resolve(infos);
	    });
	  };

	  if (webrtcDetectedVersion < 41) {
	    // Work around http://bugzil.la/1169665
	    var orgEnumerateDevices =
	        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);
	    navigator.mediaDevices.enumerateDevices = function() {
	      return orgEnumerateDevices().then(undefined, function(e) {
	        if (e.name === 'NotFoundError') {
	          return [];
	        }
	        throw e;
	      });
	    };
	  }
	} else if (navigator.webkitGetUserMedia && window.webkitRTCPeerConnection) {
	  webrtcUtils.log('This appears to be Chrome');

	  webrtcDetectedBrowser = 'chrome';

	  // the detected chrome version.
	  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
	      /Chrom(e|ium)\/([0-9]+)\./, 2);

	  // the minimum chrome version still supported by adapter.
	  webrtcMinimumVersion = 38;

	  // The RTCPeerConnection object.
	  window.RTCPeerConnection = function(pcConfig, pcConstraints) {
	    // Translate iceTransportPolicy to iceTransports,
	    // see https://code.google.com/p/webrtc/issues/detail?id=4869
	    if (pcConfig && pcConfig.iceTransportPolicy) {
	      pcConfig.iceTransports = pcConfig.iceTransportPolicy;
	    }

	    var pc = new webkitRTCPeerConnection(pcConfig, pcConstraints); // jscs:ignore requireCapitalizedConstructors
	    var origGetStats = pc.getStats.bind(pc);
	    pc.getStats = function(selector, successCallback, errorCallback) { // jshint ignore: line
	      var self = this;
	      var args = arguments;

	      // If selector is a function then we are in the old style stats so just
	      // pass back the original getStats format to avoid breaking old users.
	      if (arguments.length > 0 && typeof selector === 'function') {
	        return origGetStats(selector, successCallback);
	      }

	      var fixChromeStats = function(response) {
	        var standardReport = {};
	        var reports = response.result();
	        reports.forEach(function(report) {
	          var standardStats = {
	            id: report.id,
	            timestamp: report.timestamp,
	            type: report.type
	          };
	          report.names().forEach(function(name) {
	            standardStats[name] = report.stat(name);
	          });
	          standardReport[standardStats.id] = standardStats;
	        });

	        return standardReport;
	      };

	      if (arguments.length >= 2) {
	        var successCallbackWrapper = function(response) {
	          args[1](fixChromeStats(response));
	        };

	        return origGetStats.apply(this, [successCallbackWrapper, arguments[0]]);
	      }

	      // promise-support
	      return new Promise(function(resolve, reject) {
	        if (args.length === 1 && selector === null) {
	          origGetStats.apply(self, [
	              function(response) {
	                resolve.apply(null, [fixChromeStats(response)]);
	              }, reject]);
	        } else {
	          origGetStats.apply(self, [resolve, reject]);
	        }
	      });
	    };

	    return pc;
	  };
	  window.RTCPeerConnection.prototype = webkitRTCPeerConnection.prototype;

	  // wrap static methods. Currently just generateCertificate.
	  if (webkitRTCPeerConnection.generateCertificate) {
	    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {
	      get: function() {
	        if (arguments.length) {
	          return webkitRTCPeerConnection.generateCertificate.apply(null,
	              arguments);
	        } else {
	          return webkitRTCPeerConnection.generateCertificate;
	        }
	      }
	    });
	  }

	  // add promise support
	  ['createOffer', 'createAnswer'].forEach(function(method) {
	    var nativeMethod = webkitRTCPeerConnection.prototype[method];
	    webkitRTCPeerConnection.prototype[method] = function() {
	      var self = this;
	      if (arguments.length < 1 || (arguments.length === 1 &&
	          typeof(arguments[0]) === 'object')) {
	        var opts = arguments.length === 1 ? arguments[0] : undefined;
	        return new Promise(function(resolve, reject) {
	          nativeMethod.apply(self, [resolve, reject, opts]);
	        });
	      } else {
	        return nativeMethod.apply(this, arguments);
	      }
	    };
	  });

	  ['setLocalDescription', 'setRemoteDescription',
	      'addIceCandidate'].forEach(function(method) {
	    var nativeMethod = webkitRTCPeerConnection.prototype[method];
	    webkitRTCPeerConnection.prototype[method] = function() {
	      var args = arguments;
	      var self = this;
	      return new Promise(function(resolve, reject) {
	        nativeMethod.apply(self, [args[0],
	            function() {
	              resolve();
	              if (args.length >= 2) {
	                args[1].apply(null, []);
	              }
	            },
	            function(err) {
	              reject(err);
	              if (args.length >= 3) {
	                args[2].apply(null, [err]);
	              }
	            }]
	          );
	      });
	    };
	  });

	  // getUserMedia constraints shim.
	  var constraintsToChrome = function(c) {
	    if (typeof c !== 'object' || c.mandatory || c.optional) {
	      return c;
	    }
	    var cc = {};
	    Object.keys(c).forEach(function(key) {
	      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {
	        return;
	      }
	      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};
	      if (r.exact !== undefined && typeof r.exact === 'number') {
	        r.min = r.max = r.exact;
	      }
	      var oldname = function(prefix, name) {
	        if (prefix) {
	          return prefix + name.charAt(0).toUpperCase() + name.slice(1);
	        }
	        return (name === 'deviceId') ? 'sourceId' : name;
	      };
	      if (r.ideal !== undefined) {
	        cc.optional = cc.optional || [];
	        var oc = {};
	        if (typeof r.ideal === 'number') {
	          oc[oldname('min', key)] = r.ideal;
	          cc.optional.push(oc);
	          oc = {};
	          oc[oldname('max', key)] = r.ideal;
	          cc.optional.push(oc);
	        } else {
	          oc[oldname('', key)] = r.ideal;
	          cc.optional.push(oc);
	        }
	      }
	      if (r.exact !== undefined && typeof r.exact !== 'number') {
	        cc.mandatory = cc.mandatory || {};
	        cc.mandatory[oldname('', key)] = r.exact;
	      } else {
	        ['min', 'max'].forEach(function(mix) {
	          if (r[mix] !== undefined) {
	            cc.mandatory = cc.mandatory || {};
	            cc.mandatory[oldname(mix, key)] = r[mix];
	          }
	        });
	      }
	    });
	    if (c.advanced) {
	      cc.optional = (cc.optional || []).concat(c.advanced);
	    }
	    return cc;
	  };

	  getUserMedia = function(constraints, onSuccess, onError) {
	    if (constraints.audio) {
	      constraints.audio = constraintsToChrome(constraints.audio);
	    }
	    if (constraints.video) {
	      constraints.video = constraintsToChrome(constraints.video);
	    }
	    webrtcUtils.log('chrome: ' + JSON.stringify(constraints));
	    return navigator.webkitGetUserMedia(constraints, onSuccess, onError);
	  };
	  navigator.getUserMedia = getUserMedia;

	  if (!navigator.mediaDevices) {
	    navigator.mediaDevices = {getUserMedia: requestUserMedia,
	                              enumerateDevices: function() {
	      return new Promise(function(resolve) {
	        var kinds = {audio: 'audioinput', video: 'videoinput'};
	        return MediaStreamTrack.getSources(function(devices) {
	          resolve(devices.map(function(device) {
	            return {label: device.label,
	                    kind: kinds[device.kind],
	                    deviceId: device.id,
	                    groupId: ''};
	          }));
	        });
	      });
	    }};
	  }

	  // A shim for getUserMedia method on the mediaDevices object.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (!navigator.mediaDevices.getUserMedia) {
	    navigator.mediaDevices.getUserMedia = function(constraints) {
	      return requestUserMedia(constraints);
	    };
	  } else {
	    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
	    // function which returns a Promise, it does not accept spec-style
	    // constraints.
	    var origGetUserMedia = navigator.mediaDevices.getUserMedia.
	        bind(navigator.mediaDevices);
	    navigator.mediaDevices.getUserMedia = function(c) {
	      webrtcUtils.log('spec:   ' + JSON.stringify(c)); // whitespace for alignment
	      c.audio = constraintsToChrome(c.audio);
	      c.video = constraintsToChrome(c.video);
	      webrtcUtils.log('chrome: ' + JSON.stringify(c));
	      return origGetUserMedia(c);
	    };
	  }

	  // Dummy devicechange event methods.
	  // TODO(KaptenJansson) remove once implemented in Chrome stable.
	  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {
	    navigator.mediaDevices.addEventListener = function() {
	      webrtcUtils.log('Dummy mediaDevices.addEventListener called.');
	    };
	  }
	  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {
	    navigator.mediaDevices.removeEventListener = function() {
	      webrtcUtils.log('Dummy mediaDevices.removeEventListener called.');
	    };
	  }

	  // Attach a media stream to an element.
	  attachMediaStream = function(element, stream) {
	    if (webrtcDetectedVersion >= 43) {
	      element.srcObject = stream;
	    } else if (typeof element.src !== 'undefined') {
	      element.src = URL.createObjectURL(stream);
	    } else {
	      webrtcUtils.log('Error attaching stream to element.');
	    }
	  };
	  reattachMediaStream = function(to, from) {
	    if (webrtcDetectedVersion >= 43) {
	      to.srcObject = from.srcObject;
	    } else {
	      to.src = from.src;
	    }
	  };

	} else if (navigator.mediaDevices && navigator.userAgent.match(
	    /Edge\/(\d+).(\d+)$/)) {
	  webrtcUtils.log('This appears to be Edge');
	  webrtcDetectedBrowser = 'edge';

	  webrtcDetectedVersion = webrtcUtils.extractVersion(navigator.userAgent,
	      /Edge\/(\d+).(\d+)$/, 2);

	  // The minimum version still supported by adapter.
	  // This is the build number for Edge.
	  webrtcMinimumVersion = 10547;

	  if (window.RTCIceGatherer) {
	    // Generate an alphanumeric identifier for cname or mids.
	    // TODO: use UUIDs instead? https://gist.github.com/jed/982883
	    var generateIdentifier = function() {
	      return Math.random().toString(36).substr(2, 10);
	    };

	    // The RTCP CNAME used by all peerconnections from the same JS.
	    var localCName = generateIdentifier();

	    // SDP helpers - to be moved into separate module.
	    var SDPUtils = {};

	    // Splits SDP into lines, dealing with both CRLF and LF.
	    SDPUtils.splitLines = function(blob) {
	      return blob.trim().split('\n').map(function(line) {
	        return line.trim();
	      });
	    };

	    // Splits SDP into sessionpart and mediasections. Ensures CRLF.
	    SDPUtils.splitSections = function(blob) {
	      var parts = blob.split('\r\nm=');
	      return parts.map(function(part, index) {
	        return (index > 0 ? 'm=' + part : part).trim() + '\r\n';
	      });
	    };

	    // Returns lines that start with a certain prefix.
	    SDPUtils.matchPrefix = function(blob, prefix) {
	      return SDPUtils.splitLines(blob).filter(function(line) {
	        return line.indexOf(prefix) === 0;
	      });
	    };

	    // Parses an ICE candidate line. Sample input:
	    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8 rport 55996"
	    SDPUtils.parseCandidate = function(line) {
	      var parts;
	      // Parse both variants.
	      if (line.indexOf('a=candidate:') === 0) {
	        parts = line.substring(12).split(' ');
	      } else {
	        parts = line.substring(10).split(' ');
	      }

	      var candidate = {
	        foundation: parts[0],
	        component: parts[1],
	        protocol: parts[2].toLowerCase(),
	        priority: parseInt(parts[3], 10),
	        ip: parts[4],
	        port: parseInt(parts[5], 10),
	        // skip parts[6] == 'typ'
	        type: parts[7]
	      };

	      for (var i = 8; i < parts.length; i += 2) {
	        switch (parts[i]) {
	          case 'raddr':
	            candidate.relatedAddress = parts[i + 1];
	            break;
	          case 'rport':
	            candidate.relatedPort = parseInt(parts[i + 1], 10);
	            break;
	          case 'tcptype':
	            candidate.tcpType = parts[i + 1];
	            break;
	          default: // Unknown extensions are silently ignored.
	            break;
	        }
	      }
	      return candidate;
	    };

	    // Translates a candidate object into SDP candidate attribute.
	    SDPUtils.writeCandidate = function(candidate) {
	      var sdp = [];
	      sdp.push(candidate.foundation);
	      sdp.push(candidate.component);
	      sdp.push(candidate.protocol.toUpperCase());
	      sdp.push(candidate.priority);
	      sdp.push(candidate.ip);
	      sdp.push(candidate.port);

	      var type = candidate.type;
	      sdp.push('typ');
	      sdp.push(type);
	      if (type !== 'host' && candidate.relatedAddress &&
	          candidate.relatedPort) {
	        sdp.push('raddr');
	        sdp.push(candidate.relatedAddress); // was: relAddr
	        sdp.push('rport');
	        sdp.push(candidate.relatedPort); // was: relPort
	      }
	      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
	        sdp.push('tcptype');
	        sdp.push(candidate.tcpType);
	      }
	      return 'candidate:' + sdp.join(' ');
	    };

	    // Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:
	    // a=rtpmap:111 opus/48000/2
	    SDPUtils.parseRtpMap = function(line) {
	      var parts = line.substr(9).split(' ');
	      var parsed = {
	        payloadType: parseInt(parts.shift(), 10) // was: id
	      };

	      parts = parts[0].split('/');

	      parsed.name = parts[0];
	      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
	      parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1; // was: channels
	      return parsed;
	    };

	    // Generate an a=rtpmap line from RTCRtpCodecCapability or RTCRtpCodecParameters.
	    SDPUtils.writeRtpMap = function(codec) {
	      var pt = codec.payloadType;
	      if (codec.preferredPayloadType !== undefined) {
	        pt = codec.preferredPayloadType;
	      }
	      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
	          (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\r\n';
	    };

	    // Parses an ftmp line, returns dictionary. Sample input:
	    // a=fmtp:96 vbr=on;cng=on
	    // Also deals with vbr=on; cng=on
	    SDPUtils.parseFmtp = function(line) {
	      var parsed = {};
	      var kv;
	      var parts = line.substr(line.indexOf(' ') + 1).split(';');
	      for (var j = 0; j < parts.length; j++) {
	        kv = parts[j].trim().split('=');
	        parsed[kv[0].trim()] = kv[1];
	      }
	      return parsed;
	    };

	    // Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
	    SDPUtils.writeFtmp = function(codec) {
	      var line = '';
	      var pt = codec.payloadType;
	      if (codec.preferredPayloadType !== undefined) {
	        pt = codec.preferredPayloadType;
	      }
	      if (codec.parameters && codec.parameters.length) {
	        var params = [];
	        Object.keys(codec.parameters).forEach(function(param) {
	          params.push(param + '=' + codec.parameters[param]);
	        });
	        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
	      }
	      return line;
	    };

	    // Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
	    // a=rtcp-fb:98 nack rpsi
	    SDPUtils.parseRtcpFb = function(line) {
	      var parts = line.substr(line.indexOf(' ') + 1).split(' ');
	      return {
	        type: parts.shift(),
	        parameter: parts.join(' ')
	      };
	    };
	    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
	    SDPUtils.writeRtcpFb = function(codec) {
	      var lines = '';
	      var pt = codec.payloadType;
	      if (codec.preferredPayloadType !== undefined) {
	        pt = codec.preferredPayloadType;
	      }
	      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
	        // FIXME: special handling for trr-int?
	        codec.rtcpFeedback.forEach(function(fb) {
	          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + ' ' + fb.parameter +
	              '\r\n';
	        });
	      }
	      return lines;
	    };

	    // Parses an RFC 5576 ssrc media attribute. Sample input:
	    // a=ssrc:3735928559 cname:something
	    SDPUtils.parseSsrcMedia = function(line) {
	      var sp = line.indexOf(' ');
	      var parts = {
	        ssrc: line.substr(7, sp - 7),
	      };
	      var colon = line.indexOf(':', sp);
	      if (colon > -1) {
	        parts.attribute = line.substr(sp + 1, colon - sp - 1);
	        parts.value = line.substr(colon + 1);
	      } else {
	        parts.attribute = line.substr(sp + 1);
	      }
	      return parts;
	    };

	    // Extracts DTLS parameters from SDP media section or sessionpart.
	    // FIXME: for consistency with other functions this should only
	    //   get the fingerprint line as input. See also getIceParameters.
	    SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
	      var lines = SDPUtils.splitLines(mediaSection);
	      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.
	      var fpLine = lines.filter(function(line) {
	        return line.indexOf('a=fingerprint:') === 0;
	      })[0].substr(14);
	      // Note: a=setup line is ignored since we use the 'auto' role.
	      var dtlsParameters = {
	        role: 'auto',
	        fingerprints: [{
	          algorithm: fpLine.split(' ')[0],
	          value: fpLine.split(' ')[1]
	        }]
	      };
	      return dtlsParameters;
	    };

	    // Serializes DTLS parameters to SDP.
	    SDPUtils.writeDtlsParameters = function(params, setupType) {
	      var sdp = 'a=setup:' + setupType + '\r\n';
	      params.fingerprints.forEach(function(fp) {
	        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
	      });
	      return sdp;
	    };
	    // Parses ICE information from SDP media section or sessionpart.
	    // FIXME: for consistency with other functions this should only
	    //   get the ice-ufrag and ice-pwd lines as input.
	    SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
	      var lines = SDPUtils.splitLines(mediaSection);
	      lines = lines.concat(SDPUtils.splitLines(sessionpart)); // Search in session part, too.
	      var iceParameters = {
	        usernameFragment: lines.filter(function(line) {
	          return line.indexOf('a=ice-ufrag:') === 0;
	        })[0].substr(12),
	        password: lines.filter(function(line) {
	          return line.indexOf('a=ice-pwd:') === 0;
	        })[0].substr(10)
	      };
	      return iceParameters;
	    };

	    // Serializes ICE parameters to SDP.
	    SDPUtils.writeIceParameters = function(params) {
	      return 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
	          'a=ice-pwd:' + params.password + '\r\n';
	    };

	    // Parses the SDP media section and returns RTCRtpParameters.
	    SDPUtils.parseRtpParameters = function(mediaSection) {
	      var description = {
	        codecs: [],
	        headerExtensions: [],
	        fecMechanisms: [],
	        rtcp: []
	      };
	      var lines = SDPUtils.splitLines(mediaSection);
	      var mline = lines[0].split(' ');
	      for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
	        var pt = mline[i];
	        var rtpmapline = SDPUtils.matchPrefix(
	            mediaSection, 'a=rtpmap:' + pt + ' ')[0];
	        if (rtpmapline) {
	          var codec = SDPUtils.parseRtpMap(rtpmapline);
	          var fmtps = SDPUtils.matchPrefix(
	              mediaSection, 'a=fmtp:' + pt + ' ');
	          // Only the first a=fmtp:<pt> is considered.
	          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
	          codec.rtcpFeedback = SDPUtils.matchPrefix(
	              mediaSection, 'a=rtcp-fb:' + pt + ' ')
	            .map(SDPUtils.parseRtcpFb);
	          description.codecs.push(codec);
	        }
	      }
	      // FIXME: parse headerExtensions, fecMechanisms and rtcp.
	      return description;
	    };

	    // Generates parts of the SDP media section describing the capabilities / parameters.
	    SDPUtils.writeRtpDescription = function(kind, caps) {
	      var sdp = '';

	      // Build the mline.
	      sdp += 'm=' + kind + ' ';
	      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
	      sdp += ' UDP/TLS/RTP/SAVPF ';
	      sdp += caps.codecs.map(function(codec) {
	        if (codec.preferredPayloadType !== undefined) {
	          return codec.preferredPayloadType;
	        }
	        return codec.payloadType;
	      }).join(' ') + '\r\n';

	      sdp += 'c=IN IP4 0.0.0.0\r\n';
	      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

	      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
	      caps.codecs.forEach(function(codec) {
	        sdp += SDPUtils.writeRtpMap(codec);
	        sdp += SDPUtils.writeFtmp(codec);
	        sdp += SDPUtils.writeRtcpFb(codec);
	      });
	      // FIXME: add headerExtensions, fecMechanismş and rtcp.
	      sdp += 'a=rtcp-mux\r\n';
	      return sdp;
	    };

	    SDPUtils.writeSessionBoilerplate = function() {
	      // FIXME: sess-id should be an NTP timestamp.
	      return 'v=0\r\n' +
	          'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n' +
	          's=-\r\n' +
	          't=0 0\r\n';
	    };

	    SDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {
	      var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);

	      // Map ICE parameters (ufrag, pwd) to SDP.
	      sdp += SDPUtils.writeIceParameters(
	          transceiver.iceGatherer.getLocalParameters());

	      // Map DTLS parameters to SDP.
	      sdp += SDPUtils.writeDtlsParameters(
	          transceiver.dtlsTransport.getLocalParameters(),
	          type === 'offer' ? 'actpass' : 'active');

	      sdp += 'a=mid:' + transceiver.mid + '\r\n';

	      if (transceiver.rtpSender && transceiver.rtpReceiver) {
	        sdp += 'a=sendrecv\r\n';
	      } else if (transceiver.rtpSender) {
	        sdp += 'a=sendonly\r\n';
	      } else if (transceiver.rtpReceiver) {
	        sdp += 'a=recvonly\r\n';
	      } else {
	        sdp += 'a=inactive\r\n';
	      }

	      // FIXME: for RTX there might be multiple SSRCs. Not implemented in Edge yet.
	      if (transceiver.rtpSender) {
	        var msid = 'msid:' + stream.id + ' ' +
	            transceiver.rtpSender.track.id + '\r\n';
	        sdp += 'a=' + msid;
	        sdp += 'a=ssrc:' + transceiver.sendSsrc + ' ' + msid;
	      }
	      // FIXME: this should be written by writeRtpDescription.
	      sdp += 'a=ssrc:' + transceiver.sendSsrc + ' cname:' +
	          localCName + '\r\n';
	      return sdp;
	    };

	    // Gets the direction from the mediaSection or the sessionpart.
	    SDPUtils.getDirection = function(mediaSection, sessionpart) {
	      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
	      var lines = SDPUtils.splitLines(mediaSection);
	      for (var i = 0; i < lines.length; i++) {
	        switch (lines[i]) {
	          case 'a=sendrecv':
	          case 'a=sendonly':
	          case 'a=recvonly':
	          case 'a=inactive':
	            return lines[i].substr(2);
	        }
	      }
	      if (sessionpart) {
	        return SDPUtils.getDirection(sessionpart);
	      }
	      return 'sendrecv';
	    };

	    // ORTC defines an RTCIceCandidate object but no constructor.
	    // Not implemented in Edge.
	    if (!window.RTCIceCandidate) {
	      window.RTCIceCandidate = function(args) {
	        return args;
	      };
	    }
	    // ORTC does not have a session description object but
	    // other browsers (i.e. Chrome) that will support both PC and ORTC
	    // in the future might have this defined already.
	    if (!window.RTCSessionDescription) {
	      window.RTCSessionDescription = function(args) {
	        return args;
	      };
	    }

	    window.RTCPeerConnection = function(config) {
	      var self = this;

	      this.onicecandidate = null;
	      this.onaddstream = null;
	      this.onremovestream = null;
	      this.onsignalingstatechange = null;
	      this.oniceconnectionstatechange = null;
	      this.onnegotiationneeded = null;
	      this.ondatachannel = null;

	      this.localStreams = [];
	      this.remoteStreams = [];
	      this.getLocalStreams = function() { return self.localStreams; };
	      this.getRemoteStreams = function() { return self.remoteStreams; };

	      this.localDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.remoteDescription = new RTCSessionDescription({
	        type: '',
	        sdp: ''
	      });
	      this.signalingState = 'stable';
	      this.iceConnectionState = 'new';

	      this.iceOptions = {
	        gatherPolicy: 'all',
	        iceServers: []
	      };
	      if (config && config.iceTransportPolicy) {
	        switch (config.iceTransportPolicy) {
	          case 'all':
	          case 'relay':
	            this.iceOptions.gatherPolicy = config.iceTransportPolicy;
	            break;
	          case 'none':
	            // FIXME: remove once implementation and spec have added this.
	            throw new TypeError('iceTransportPolicy "none" not supported');
	        }
	      }
	      if (config && config.iceServers) {
	        // Edge does not like
	        // 1) stun:
	        // 2) turn: that does not have all of turn:host:port?transport=udp
	        // 3) an array of urls
	        config.iceServers.forEach(function(server) {
	          if (server.urls) {
	            var url;
	            if (typeof(server.urls) === 'string') {
	              url = server.urls;
	            } else {
	              url = server.urls[0];
	            }
	            if (url.indexOf('transport=udp') !== -1) {
	              self.iceServers.push({
	                username: server.username,
	                credential: server.credential,
	                urls: url
	              });
	            }
	          }
	        });
	      }

	      // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...
	      // everything that is needed to describe a SDP m-line.
	      this.transceivers = [];

	      // since the iceGatherer is currently created in createOffer but we
	      // must not emit candidates until after setLocalDescription we buffer
	      // them in this array.
	      this._localIceCandidatesBuffer = [];
	    };

	    window.RTCPeerConnection.prototype._emitBufferedCandidates = function() {
	      var self = this;
	      // FIXME: need to apply ice candidates in a way which is async but in-order
	      this._localIceCandidatesBuffer.forEach(function(event) {
	        if (self.onicecandidate !== null) {
	          self.onicecandidate(event);
	        }
	      });
	      this._localIceCandidatesBuffer = [];
	    };

	    window.RTCPeerConnection.prototype.addStream = function(stream) {
	      // Clone is necessary for local demos mostly, attaching directly
	      // to two different senders does not work (build 10547).
	      this.localStreams.push(stream.clone());
	      this._maybeFireNegotiationNeeded();
	    };

	    window.RTCPeerConnection.prototype.removeStream = function(stream) {
	      var idx = this.localStreams.indexOf(stream);
	      if (idx > -1) {
	        this.localStreams.splice(idx, 1);
	        this._maybeFireNegotiationNeeded();
	      }
	    };

	    // Determines the intersection of local and remote capabilities.
	    window.RTCPeerConnection.prototype._getCommonCapabilities =
	        function(localCapabilities, remoteCapabilities) {
	      var commonCapabilities = {
	        codecs: [],
	        headerExtensions: [],
	        fecMechanisms: []
	      };
	      localCapabilities.codecs.forEach(function(lCodec) {
	        for (var i = 0; i < remoteCapabilities.codecs.length; i++) {
	          var rCodec = remoteCapabilities.codecs[i];
	          if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&
	              lCodec.clockRate === rCodec.clockRate &&
	              lCodec.numChannels === rCodec.numChannels) {
	            // push rCodec so we reply with offerer payload type
	            commonCapabilities.codecs.push(rCodec);

	            // FIXME: also need to determine intersection between
	            // .rtcpFeedback and .parameters
	            break;
	          }
	        }
	      });

	      localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {
	        for (var i = 0; i < remoteCapabilities.headerExtensions.length; i++) {
	          var rHeaderExtension = remoteCapabilities.headerExtensions[i];
	          if (lHeaderExtension.uri === rHeaderExtension.uri) {
	            commonCapabilities.headerExtensions.push(rHeaderExtension);
	            break;
	          }
	        }
	      });

	      // FIXME: fecMechanisms
	      return commonCapabilities;
	    };

	    // Create ICE gatherer, ICE transport and DTLS transport.
	    window.RTCPeerConnection.prototype._createIceAndDtlsTransports =
	        function(mid, sdpMLineIndex) {
	      var self = this;
	      var iceGatherer = new RTCIceGatherer(self.iceOptions);
	      var iceTransport = new RTCIceTransport(iceGatherer);
	      iceGatherer.onlocalcandidate = function(evt) {
	        var event = {};
	        event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};

	        var cand = evt.candidate;
	        // Edge emits an empty object for RTCIceCandidateComplete‥
	        if (!cand || Object.keys(cand).length === 0) {
	          // polyfill since RTCIceGatherer.state is not implemented in Edge 10547 yet.
	          if (iceGatherer.state === undefined) {
	            iceGatherer.state = 'completed';
	          }

	          // Emit a candidate with type endOfCandidates to make the samples work.
	          // Edge requires addIceCandidate with this empty candidate to start checking.
	          // The real solution is to signal end-of-candidates to the other side when
	          // getting the null candidate but some apps (like the samples) don't do that.
	          event.candidate.candidate =
	              'candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';
	        } else {
	          // RTCIceCandidate doesn't have a component, needs to be added
	          cand.component = iceTransport.component === 'RTCP' ? 2 : 1;
	          event.candidate.candidate = SDPUtils.writeCandidate(cand);
	        }

	        var complete = self.transceivers.every(function(transceiver) {
	          return transceiver.iceGatherer &&
	              transceiver.iceGatherer.state === 'completed';
	        });
	        // FIXME: update .localDescription with candidate and (potentially) end-of-candidates.
	        //     To make this harder, the gatherer might emit candidates before localdescription
	        //     is set. To make things worse, gather.getLocalCandidates still errors in
	        //     Edge 10547 when no candidates have been gathered yet.

	        if (self.onicecandidate !== null) {
	          // Emit candidate if localDescription is set.
	          // Also emits null candidate when all gatherers are complete.
	          if (self.localDescription && self.localDescription.type === '') {
	            self._localIceCandidatesBuffer.push(event);
	            if (complete) {
	              self._localIceCandidatesBuffer.push({});
	            }
	          } else {
	            self.onicecandidate(event);
	            if (complete) {
	              self.onicecandidate({});
	            }
	          }
	        }
	      };
	      iceTransport.onicestatechange = function() {
	        self._updateConnectionState();
	      };

	      var dtlsTransport = new RTCDtlsTransport(iceTransport);
	      dtlsTransport.ondtlsstatechange = function() {
	        self._updateConnectionState();
	      };
	      dtlsTransport.onerror = function() {
	        // onerror does not set state to failed by itself.
	        dtlsTransport.state = 'failed';
	        self._updateConnectionState();
	      };

	      return {
	        iceGatherer: iceGatherer,
	        iceTransport: iceTransport,
	        dtlsTransport: dtlsTransport
	      };
	    };

	    // Start the RTP Sender and Receiver for a transceiver.
	    window.RTCPeerConnection.prototype._transceive = function(transceiver,
	        send, recv) {
	      var params = this._getCommonCapabilities(transceiver.localCapabilities,
	          transceiver.remoteCapabilities);
	      if (send && transceiver.rtpSender) {
	        params.encodings = [{
	          ssrc: transceiver.sendSsrc
	        }];
	        params.rtcp = {
	          cname: localCName,
	          ssrc: transceiver.recvSsrc
	        };
	        transceiver.rtpSender.send(params);
	      }
	      if (recv && transceiver.rtpReceiver) {
	        params.encodings = [{
	          ssrc: transceiver.recvSsrc
	        }];
	        params.rtcp = {
	          cname: transceiver.cname,
	          ssrc: transceiver.sendSsrc
	        };
	        transceiver.rtpReceiver.receive(params);
	      }
	    };

	    window.RTCPeerConnection.prototype.setLocalDescription =
	        function(description) {
	      var self = this;
	      if (description.type === 'offer') {
	        if (!this._pendingOffer) {
	        } else {
	          this.transceivers = this._pendingOffer;
	          delete this._pendingOffer;
	        }
	      } else if (description.type === 'answer') {
	        var sections = SDPUtils.splitSections(self.remoteDescription.sdp);
	        var sessionpart = sections.shift();
	        sections.forEach(function(mediaSection, sdpMLineIndex) {
	          var transceiver = self.transceivers[sdpMLineIndex];
	          var iceGatherer = transceiver.iceGatherer;
	          var iceTransport = transceiver.iceTransport;
	          var dtlsTransport = transceiver.dtlsTransport;
	          var localCapabilities = transceiver.localCapabilities;
	          var remoteCapabilities = transceiver.remoteCapabilities;
	          var rejected = mediaSection.split('\n', 1)[0]
	              .split(' ', 2)[1] === '0';

	          if (!rejected) {
	            var remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
	                sessionpart);
	            iceTransport.start(iceGatherer, remoteIceParameters, 'controlled');

	            var remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
	              sessionpart);
	            dtlsTransport.start(remoteDtlsParameters);

	            // Calculate intersection of capabilities.
	            var params = self._getCommonCapabilities(localCapabilities,
	                remoteCapabilities);

	            // Start the RTCRtpSender. The RTCRtpReceiver for this transceiver
	            // has already been started in setRemoteDescription.
	            self._transceive(transceiver,
	                params.codecs.length > 0,
	                false);
	          }
	        });
	      }

	      this.localDescription = description;
	      switch (description.type) {
	        case 'offer':
	          this._updateSignalingState('have-local-offer');
	          break;
	        case 'answer':
	          this._updateSignalingState('stable');
	          break;
	        default:
	          throw new TypeError('unsupported type "' + description.type + '"');
	      }

	      // If a success callback was provided, emit ICE candidates after it has been
	      // executed. Otherwise, emit callback after the Promise is resolved.
	      var hasCallback = arguments.length > 1 &&
	        typeof arguments[1] === 'function';
	      if (hasCallback) {
	        var cb = arguments[1];
	        window.setTimeout(function() {
	          cb();
	          self._emitBufferedCandidates();
	        }, 0);
	      }
	      var p = Promise.resolve();
	      p.then(function() {
	        if (!hasCallback) {
	          window.setTimeout(self._emitBufferedCandidates.bind(self), 0);
	        }
	      });
	      return p;
	    };

	    window.RTCPeerConnection.prototype.setRemoteDescription =
	        function(description) {
	      var self = this;
	      var stream = new MediaStream();
	      var sections = SDPUtils.splitSections(description.sdp);
	      var sessionpart = sections.shift();
	      sections.forEach(function(mediaSection, sdpMLineIndex) {
	        var lines = SDPUtils.splitLines(mediaSection);
	        var mline = lines[0].substr(2).split(' ');
	        var kind = mline[0];
	        var rejected = mline[1] === '0';
	        var direction = SDPUtils.getDirection(mediaSection, sessionpart);

	        var transceiver;
	        var iceGatherer;
	        var iceTransport;
	        var dtlsTransport;
	        var rtpSender;
	        var rtpReceiver;
	        var sendSsrc;
	        var recvSsrc;
	        var localCapabilities;

	        // FIXME: ensure the mediaSection has rtcp-mux set.
	        var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);
	        var remoteIceParameters;
	        var remoteDtlsParameters;
	        if (!rejected) {
	          remoteIceParameters = SDPUtils.getIceParameters(mediaSection,
	              sessionpart);
	          remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,
	              sessionpart);
	        }
	        var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0].substr(6);

	        var cname;
	        // Gets the first SSRC. Note that with RTX there might be multiple SSRCs.
	        var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
	            .map(function(line) {
	              return SDPUtils.parseSsrcMedia(line);
	            })
	            .filter(function(obj) {
	              return obj.attribute === 'cname';
	            })[0];
	        if (remoteSsrc) {
	          recvSsrc = parseInt(remoteSsrc.ssrc, 10);
	          cname = remoteSsrc.value;
	        }

	        if (description.type === 'offer') {
	          var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);

	          localCapabilities = RTCRtpReceiver.getCapabilities(kind);
	          sendSsrc = (2 * sdpMLineIndex + 2) * 1001;

	          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);

	          // FIXME: not correct when there are multiple streams but that is
	          // not currently supported in this shim.
	          stream.addTrack(rtpReceiver.track);

	          // FIXME: look at direction.
	          if (self.localStreams.length > 0 &&
	              self.localStreams[0].getTracks().length >= sdpMLineIndex) {
	            // FIXME: actually more complicated, needs to match types etc
	            var localtrack = self.localStreams[0].getTracks()[sdpMLineIndex];
	            rtpSender = new RTCRtpSender(localtrack, transports.dtlsTransport);
	          }

	          self.transceivers[sdpMLineIndex] = {
	            iceGatherer: transports.iceGatherer,
	            iceTransport: transports.iceTransport,
	            dtlsTransport: transports.dtlsTransport,
	            localCapabilities: localCapabilities,
	            remoteCapabilities: remoteCapabilities,
	            rtpSender: rtpSender,
	            rtpReceiver: rtpReceiver,
	            kind: kind,
	            mid: mid,
	            cname: cname,
	            sendSsrc: sendSsrc,
	            recvSsrc: recvSsrc
	          };
	          // Start the RTCRtpReceiver now. The RTPSender is started in setLocalDescription.
	          self._transceive(self.transceivers[sdpMLineIndex],
	              false,
	              direction === 'sendrecv' || direction === 'sendonly');
	        } else if (description.type === 'answer' && !rejected) {
	          transceiver = self.transceivers[sdpMLineIndex];
	          iceGatherer = transceiver.iceGatherer;
	          iceTransport = transceiver.iceTransport;
	          dtlsTransport = transceiver.dtlsTransport;
	          rtpSender = transceiver.rtpSender;
	          rtpReceiver = transceiver.rtpReceiver;
	          sendSsrc = transceiver.sendSsrc;
	          //recvSsrc = transceiver.recvSsrc;
	          localCapabilities = transceiver.localCapabilities;

	          self.transceivers[sdpMLineIndex].recvSsrc = recvSsrc;
	          self.transceivers[sdpMLineIndex].remoteCapabilities =
	              remoteCapabilities;
	          self.transceivers[sdpMLineIndex].cname = cname;

	          iceTransport.start(iceGatherer, remoteIceParameters, 'controlling');
	          dtlsTransport.start(remoteDtlsParameters);

	          self._transceive(transceiver,
	              direction === 'sendrecv' || direction === 'recvonly',
	              direction === 'sendrecv' || direction === 'sendonly');

	          if (rtpReceiver &&
	              (direction === 'sendrecv' || direction === 'sendonly')) {
	            stream.addTrack(rtpReceiver.track);
	          } else {
	            // FIXME: actually the receiver should be created later.
	            delete transceiver.rtpReceiver;
	          }
	        }
	      });

	      this.remoteDescription = description;
	      switch (description.type) {
	        case 'offer':
	          this._updateSignalingState('have-remote-offer');
	          break;
	        case 'answer':
	          this._updateSignalingState('stable');
	          break;
	        default:
	          throw new TypeError('unsupported type "' + description.type + '"');
	      }
	      window.setTimeout(function() {
	        if (self.onaddstream !== null && stream.getTracks().length) {
	          self.remoteStreams.push(stream);
	          window.setTimeout(function() {
	            self.onaddstream({stream: stream});
	          }, 0);
	        }
	      }, 0);
	      if (arguments.length > 1 && typeof arguments[1] === 'function') {
	        window.setTimeout(arguments[1], 0);
	      }
	      return Promise.resolve();
	    };

	    window.RTCPeerConnection.prototype.close = function() {
	      this.transceivers.forEach(function(transceiver) {
	        /* not yet
	        if (transceiver.iceGatherer) {
	          transceiver.iceGatherer.close();
	        }
	        */
	        if (transceiver.iceTransport) {
	          transceiver.iceTransport.stop();
	        }
	        if (transceiver.dtlsTransport) {
	          transceiver.dtlsTransport.stop();
	        }
	        if (transceiver.rtpSender) {
	          transceiver.rtpSender.stop();
	        }
	        if (transceiver.rtpReceiver) {
	          transceiver.rtpReceiver.stop();
	        }
	      });
	      // FIXME: clean up tracks, local streams, remote streams, etc
	      this._updateSignalingState('closed');
	    };

	    // Update the signaling state.
	    window.RTCPeerConnection.prototype._updateSignalingState =
	        function(newState) {
	      this.signalingState = newState;
	      if (this.onsignalingstatechange !== null) {
	        this.onsignalingstatechange();
	      }
	    };

	    // Determine whether to fire the negotiationneeded event.
	    window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded =
	        function() {
	      // Fire away (for now).
	      if (this.onnegotiationneeded !== null) {
	        this.onnegotiationneeded();
	      }
	    };

	    // Update the connection state.
	    window.RTCPeerConnection.prototype._updateConnectionState =
	        function() {
	      var self = this;
	      var newState;
	      var states = {
	        'new': 0,
	        closed: 0,
	        connecting: 0,
	        checking: 0,
	        connected: 0,
	        completed: 0,
	        failed: 0
	      };
	      this.transceivers.forEach(function(transceiver) {
	        states[transceiver.iceTransport.state]++;
	        states[transceiver.dtlsTransport.state]++;
	      });
	      // ICETransport.completed and connected are the same for this purpose.
	      states.connected += states.completed;

	      newState = 'new';
	      if (states.failed > 0) {
	        newState = 'failed';
	      } else if (states.connecting > 0 || states.checking > 0) {
	        newState = 'connecting';
	      } else if (states.disconnected > 0) {
	        newState = 'disconnected';
	      } else if (states.new > 0) {
	        newState = 'new';
	      } else if (states.connecting > 0 || states.completed > 0) {
	        newState = 'connected';
	      }

	      if (newState !== self.iceConnectionState) {
	        self.iceConnectionState = newState;
	        if (this.oniceconnectionstatechange !== null) {
	          this.oniceconnectionstatechange();
	        }
	      }
	    };

	    window.RTCPeerConnection.prototype.createOffer = function() {
	      var self = this;
	      if (this._pendingOffer) {
	        throw new Error('createOffer called while there is a pending offer.');
	      }
	      var offerOptions;
	      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	        offerOptions = arguments[0];
	      } else if (arguments.length === 3) {
	        offerOptions = arguments[2];
	      }

	      var tracks = [];
	      var numAudioTracks = 0;
	      var numVideoTracks = 0;
	      // Default to sendrecv.
	      if (this.localStreams.length) {
	        numAudioTracks = this.localStreams[0].getAudioTracks().length;
	        numVideoTracks = this.localStreams[0].getVideoTracks().length;
	      }
	      // Determine number of audio and video tracks we need to send/recv.
	      if (offerOptions) {
	        // Reject Chrome legacy constraints.
	        if (offerOptions.mandatory || offerOptions.optional) {
	          throw new TypeError(
	              'Legacy mandatory/optional constraints not supported.');
	        }
	        if (offerOptions.offerToReceiveAudio !== undefined) {
	          numAudioTracks = offerOptions.offerToReceiveAudio;
	        }
	        if (offerOptions.offerToReceiveVideo !== undefined) {
	          numVideoTracks = offerOptions.offerToReceiveVideo;
	        }
	      }
	      if (this.localStreams.length) {
	        // Push local streams.
	        this.localStreams[0].getTracks().forEach(function(track) {
	          tracks.push({
	            kind: track.kind,
	            track: track,
	            wantReceive: track.kind === 'audio' ?
	                numAudioTracks > 0 : numVideoTracks > 0
	          });
	          if (track.kind === 'audio') {
	            numAudioTracks--;
	          } else if (track.kind === 'video') {
	            numVideoTracks--;
	          }
	        });
	      }
	      // Create M-lines for recvonly streams.
	      while (numAudioTracks > 0 || numVideoTracks > 0) {
	        if (numAudioTracks > 0) {
	          tracks.push({
	            kind: 'audio',
	            wantReceive: true
	          });
	          numAudioTracks--;
	        }
	        if (numVideoTracks > 0) {
	          tracks.push({
	            kind: 'video',
	            wantReceive: true
	          });
	          numVideoTracks--;
	        }
	      }

	      var sdp = SDPUtils.writeSessionBoilerplate();
	      var transceivers = [];
	      tracks.forEach(function(mline, sdpMLineIndex) {
	        // For each track, create an ice gatherer, ice transport, dtls transport,
	        // potentially rtpsender and rtpreceiver.
	        var track = mline.track;
	        var kind = mline.kind;
	        var mid = generateIdentifier();

	        var transports = self._createIceAndDtlsTransports(mid, sdpMLineIndex);

	        var localCapabilities = RTCRtpSender.getCapabilities(kind);
	        var rtpSender;
	        var rtpReceiver;

	        // generate an ssrc now, to be used later in rtpSender.send
	        var sendSsrc = (2 * sdpMLineIndex + 1) * 1001;
	        if (track) {
	          rtpSender = new RTCRtpSender(track, transports.dtlsTransport);
	        }

	        if (mline.wantReceive) {
	          rtpReceiver = new RTCRtpReceiver(transports.dtlsTransport, kind);
	        }

	        transceivers[sdpMLineIndex] = {
	          iceGatherer: transports.iceGatherer,
	          iceTransport: transports.iceTransport,
	          dtlsTransport: transports.dtlsTransport,
	          localCapabilities: localCapabilities,
	          remoteCapabilities: null,
	          rtpSender: rtpSender,
	          rtpReceiver: rtpReceiver,
	          kind: kind,
	          mid: mid,
	          sendSsrc: sendSsrc,
	          recvSsrc: null
	        };
	        var transceiver = transceivers[sdpMLineIndex];
	        sdp += SDPUtils.writeMediaSection(transceiver,
	            transceiver.localCapabilities, 'offer', self.localStreams[0]);
	      });

	      this._pendingOffer = transceivers;
	      var desc = new RTCSessionDescription({
	        type: 'offer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };

	    window.RTCPeerConnection.prototype.createAnswer = function() {
	      var self = this;
	      var answerOptions;
	      if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	        answerOptions = arguments[0];
	      } else if (arguments.length === 3) {
	        answerOptions = arguments[2];
	      }

	      var sdp = SDPUtils.writeSessionBoilerplate();
	      this.transceivers.forEach(function(transceiver) {
	        // Calculate intersection of capabilities.
	        var commonCapabilities = self._getCommonCapabilities(
	            transceiver.localCapabilities,
	            transceiver.remoteCapabilities);

	        sdp += SDPUtils.writeMediaSection(transceiver, commonCapabilities,
	            'answer', self.localStreams[0]);
	      });

	      var desc = new RTCSessionDescription({
	        type: 'answer',
	        sdp: sdp
	      });
	      if (arguments.length && typeof arguments[0] === 'function') {
	        window.setTimeout(arguments[0], 0, desc);
	      }
	      return Promise.resolve(desc);
	    };

	    window.RTCPeerConnection.prototype.addIceCandidate = function(candidate) {
	      var mLineIndex = candidate.sdpMLineIndex;
	      if (candidate.sdpMid) {
	        for (var i = 0; i < this.transceivers.length; i++) {
	          if (this.transceivers[i].mid === candidate.sdpMid) {
	            mLineIndex = i;
	            break;
	          }
	        }
	      }
	      var transceiver = this.transceivers[mLineIndex];
	      if (transceiver) {
	        var cand = Object.keys(candidate.candidate).length > 0 ?
	            SDPUtils.parseCandidate(candidate.candidate) : {};
	        // Ignore Chrome's invalid candidates since Edge does not like them.
	        if (cand.protocol === 'tcp' && cand.port === 0) {
	          return;
	        }
	        // Ignore RTCP candidates, we assume RTCP-MUX.
	        if (cand.component !== '1') {
	          return;
	        }
	        // A dirty hack to make samples work.
	        if (cand.type === 'endOfCandidates') {
	          cand = {};
	        }
	        transceiver.iceTransport.addRemoteCandidate(cand);
	      }
	      if (arguments.length > 1 && typeof arguments[1] === 'function') {
	        window.setTimeout(arguments[1], 0);
	      }
	      return Promise.resolve();
	    };

	    window.RTCPeerConnection.prototype.getStats = function() {
	      var promises = [];
	      this.transceivers.forEach(function(transceiver) {
	        ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',
	            'dtlsTransport'].forEach(function(method) {
	          if (transceiver[method]) {
	            promises.push(transceiver[method].getStats());
	          }
	        });
	      });
	      var cb = arguments.length > 1 && typeof arguments[1] === 'function' &&
	          arguments[1];
	      return new Promise(function(resolve) {
	        var results = {};
	        Promise.all(promises).then(function(res) {
	          res.forEach(function(result) {
	            Object.keys(result).forEach(function(id) {
	              results[id] = result[id];
	            });
	          });
	          if (cb) {
	            window.setTimeout(cb, 0, results);
	          }
	          resolve(results);
	        });
	      });
	    };
	  }
	} else {
	  webrtcUtils.log('Browser does not appear to be WebRTC-capable');
	}

	// Polyfill ontrack on browsers that don't yet have it
	if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in
	    window.RTCPeerConnection.prototype)) {
	  Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {
	    get: function() { return this._ontrack; },
	    set: function(f) {
	      var self = this;
	      if (this._ontrack) {
	        this.removeEventListener('track', this._ontrack);
	        this.removeEventListener('addstream', this._ontrackpoly);
	      }
	      this.addEventListener('track', this._ontrack = f);
	      this.addEventListener('addstream', this._ontrackpoly = function(e) {
	        if (webrtcDetectedBrowser === 'chrome') {
	          // onaddstream does not fire when a track is added to an existing stream.
	          // but stream.onaddtrack is implemented so we use thたt
	          e.stream.addEventListener('addtrack', function(te) {
	            var event = new Event('track');
	            event.track = te.track;
	            event.receiver = {track: te.track};
	            event.streams = [e.stream];
	            self.dispatchEvent(event);
	          });
	        }
	        e.stream.getTracks().forEach(function(track) {
	          var event = new Event('track');
	          event.track = track;
	          event.receiver = {track: track};
	          event.streams = [e.stream];
	          this.dispatchEvent(event);
	        }.bind(this));
	      }.bind(this));
	    }
	  });
	}

	// Returns the result of getUserMedia as a Promise.
	function requestUserMedia(constraints) {
	  return new Promise(function(resolve, reject) {
	    getUserMedia(constraints, resolve, reject);
	  });
	}

	var webrtcTesting = {};
	try {
	  Object.defineProperty(webrtcTesting, 'version', {
	    set: function(version) {
	      webrtcDetectedVersion = version;
	    }
	  });
	} catch (e) {}

	if (true) {
	  var RTCPeerConnection;
	  var RTCIceCandidate;
	  var RTCSessionDescription;
	  if (typeof window !== 'undefined') {
	    RTCPeerConnection = window.RTCPeerConnection;
	    RTCIceCandidate = window.RTCIceCandidate;
	    RTCSessionDescription = window.RTCSessionDescription;
	  }
	  module.exports = {
	    RTCPeerConnection: RTCPeerConnection,
	    RTCIceCandidate: RTCIceCandidate,
	    RTCSessionDescription: RTCSessionDescription,
	    getUserMedia: getUserMedia,
	    attachMediaStream: attachMediaStream,
	    reattachMediaStream: reattachMediaStream,
	    webrtcDetectedBrowser: webrtcDetectedBrowser,
	    webrtcDetectedVersion: webrtcDetectedVersion,
	    webrtcMinimumVersion: webrtcMinimumVersion,
	    webrtcTesting: webrtcTesting,
	    webrtcUtils: webrtcUtils
	    //requestUserMedia: not exposed on purpose.
	    //trace: not exposed on purpose.
	  };
	} else if ((typeof require === 'function') && (typeof define === 'function')) {
	  // Expose objects and functions when RequireJS is doing the loading.
	  define([], function() {
	    return {
	      RTCPeerConnection: window.RTCPeerConnection,
	      RTCIceCandidate: window.RTCIceCandidate,
	      RTCSessionDescription: window.RTCSessionDescription,
	      getUserMedia: getUserMedia,
	      attachMediaStream: attachMediaStream,
	      reattachMediaStream: reattachMediaStream,
	      webrtcDetectedBrowser: webrtcDetectedBrowser,
	      webrtcDetectedVersion: webrtcDetectedVersion,
	      webrtcMinimumVersion: webrtcMinimumVersion,
	      webrtcTesting: webrtcTesting,
	      webrtcUtils: webrtcUtils
	      //requestUserMedia: not exposed on purpose.
	      //trace: not exposed on purpose.
	    };
	  });
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process, setImmediate, module, Buffer) {(function(root, factory) {
	  if(true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    root.forge = factory();
	  }
	})(this, function() {
	/**
	 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/almond for details
	 */
	//Going sloppy to avoid 'use strict' string cost, but strict practices should
	//be followed.
	/*jslint sloppy: true */
	/*global setTimeout: false */

	var requirejs, require, define;
	(function (undef) {
	    var main, req, makeMap, handlers,
	        defined = {},
	        waiting = {},
	        config = {},
	        defining = {},
	        hasOwn = Object.prototype.hasOwnProperty,
	        aps = [].slice,
	        jsSuffixRegExp = /\.js$/;

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    /**
	     * Given a relative module name, like ./something, normalize it to
	     * a real name that can be mapped to a path.
	     * @param {String} name the relative name
	     * @param {String} baseName a real name that the name arg is relative
	     * to.
	     * @returns {String} normalized name
	     */
	    function normalize(name, baseName) {
	        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
	            foundI, foundStarMap, starI, i, j, part,
	            baseParts = baseName && baseName.split("/"),
	            map = config.map,
	            starMap = (map && map['*']) || {};

	        //Adjust any relative paths.
	        if (name && name.charAt(0) === ".") {
	            //If have a base name, try to normalize against it,
	            //otherwise, assume it is a top-level require that will
	            //be relative to baseUrl in the end.
	            if (baseName) {
	                //Convert baseName to array, and lop off the last part,
	                //so that . matches that "directory" and not name of the baseName's
	                //module. For instance, baseName of "one/two/three", maps to
	                //"one/two/three.js", but we want the directory, "one/two" for
	                //this normalization.
	                baseParts = baseParts.slice(0, baseParts.length - 1);
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // Node .js allowance:
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                name = baseParts.concat(name);

	                //start trimDots
	                for (i = 0; i < name.length; i += 1) {
	                    part = name[i];
	                    if (part === ".") {
	                        name.splice(i, 1);
	                        i -= 1;
	                    } else if (part === "..") {
	                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
	                            //End of the line. Keep at least one non-dot
	                            //path segment at the front so it can be mapped
	                            //correctly to disk. Otherwise, there is likely
	                            //no path mapping for a path starting with '..'.
	                            //This can still fail, but catches the most reasonable
	                            //uses of ..
	                            break;
	                        } else if (i > 0) {
	                            name.splice(i - 1, 2);
	                            i -= 2;
	                        }
	                    }
	                }
	                //end trimDots

	                name = name.join("/");
	            } else if (name.indexOf('./') === 0) {
	                // No baseName, so this is ID is resolved relative
	                // to baseUrl, pull off the leading dot.
	                name = name.substring(2);
	            }
	        }

	        //Apply map config if available.
	        if ((baseParts || starMap) && map) {
	            nameParts = name.split('/');

	            for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                    //Find the longest baseName segment match in the config.
	                    //So, do joins on the biggest to smallest lengths of baseParts.
	                    for (j = baseParts.length; j > 0; j -= 1) {
	                        mapValue = map[baseParts.slice(0, j).join('/')];

	                        //baseName segment has  config, find if it has one for
	                        //this name.
	                        if (mapValue) {
	                            mapValue = mapValue[nameSegment];
	                            if (mapValue) {
	                                //Match, update name to the new value.
	                                foundMap = mapValue;
	                                foundI = i;
	                                break;
	                            }
	                        }
	                    }
	                }

	                if (foundMap) {
	                    break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                    foundStarMap = starMap[nameSegment];
	                    starI = i;
	                }
	            }

	            if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	            }

	            if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	            }
	        }

	        return name;
	    }

	    function makeRequire(relName, forceSync) {
	        return function () {
	            //A version of a require function that passes a moduleName
	            //value for items that may need to
	            //look up paths relative to the moduleName
	            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
	        };
	    }

	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(depName) {
	        return function (value) {
	            defined[depName] = value;
	        };
	    }

	    function callDep(name) {
	        if (hasProp(waiting, name)) {
	            var args = waiting[name];
	            delete waiting[name];
	            defining[name] = true;
	            main.apply(undef, args);
	        }

	        if (!hasProp(defined, name) && !hasProp(defining, name)) {
	            throw new Error('No ' + name);
	        }
	        return defined[name];
	    }

	    //Turns a plugin!resource to [plugin, resource]
	    //with the plugin being undefined if the name
	    //did not have a plugin prefix.
	    function splitPrefix(name) {
	        var prefix,
	            index = name ? name.indexOf('!') : -1;
	        if (index > -1) {
	            prefix = name.substring(0, index);
	            name = name.substring(index + 1, name.length);
	        }
	        return [prefix, name];
	    }

	    /**
	     * Makes a name map, normalizing the name, and using a plugin
	     * for normalization if necessary. Grabs a ref to plugin
	     * too, as an optimization.
	     */
	    makeMap = function (name, relName) {
	        var plugin,
	            parts = splitPrefix(name),
	            prefix = parts[0];

	        name = parts[1];

	        if (prefix) {
	            prefix = normalize(prefix, relName);
	            plugin = callDep(prefix);
	        }

	        //Normalize according
	        if (prefix) {
	            if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relName));
	            } else {
	                name = normalize(name, relName);
	            }
	        } else {
	            name = normalize(name, relName);
	            parts = splitPrefix(name);
	            prefix = parts[0];
	            name = parts[1];
	            if (prefix) {
	                plugin = callDep(prefix);
	            }
	        }

	        //Using ridiculous property names for space reasons
	        return {
	            f: prefix ? prefix + '!' + name : name, //fullName
	            n: name,
	            pr: prefix,
	            p: plugin
	        };
	    };

	    function makeConfig(name) {
	        return function () {
	            return (config && config.config && config.config[name]) || {};
	        };
	    }

	    handlers = {
	        require: function (name) {
	            return makeRequire(name);
	        },
	        exports: function (name) {
	            var e = defined[name];
	            if (typeof e !== 'undefined') {
	                return e;
	            } else {
	                return (defined[name] = {});
	            }
	        },
	        module: function (name) {
	            return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	            };
	        }
	    };

	    main = function (name, deps, callback, relName) {
	        var cjsModule, depName, ret, map, i,
	            args = [],
	            callbackType = typeof callback,
	            usingExports;

	        //Use name if no relName
	        relName = relName || name;

	        //Call the callback to define the module, if necessary.
	        if (callbackType === 'undefined' || callbackType === 'function') {
	            //Pull out the defined dependencies and pass the ordered
	            //values to the callback.
	            //Default to [require, exports, module] if no deps
	            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	            for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relName);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                    args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                    //CommonJS module spec 1.1
	                    args[i] = handlers.exports(name);
	                    usingExports = true;
	                } else if (depName === "module") {
	                    //CommonJS module spec 1.1
	                    cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) ||
	                           hasProp(waiting, depName) ||
	                           hasProp(defining, depName)) {
	                    args[i] = callDep(depName);
	                } else if (map.p) {
	                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                    args[i] = defined[depName];
	                } else {
	                    throw new Error(name + ' missing ' + depName);
	                }
	            }

	            ret = callback ? callback.apply(defined[name], args) : undefined;

	            if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef &&
	                        cjsModule.exports !== defined[name]) {
	                    defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                    //Use the return value from the function.
	                    defined[name] = ret;
	                }
	            }
	        } else if (name) {
	            //May just be an object definition for the module. Only
	            //worry about defining if have a module name.
	            defined[name] = callback;
	        }
	    };

	    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	        if (typeof deps === "string") {
	            if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	            }
	            //Just return the module wanted. In this scenario, the
	            //deps arg is the module name, and second arg (if passed)
	            //is just the relName.
	            //Normalize module name, if it contains . or ..
	            return callDep(makeMap(deps, callback).f);
	        } else if (!deps.splice) {
	            //deps is a config object, not an array.
	            config = deps;
	            if (config.deps) {
	                req(config.deps, config.callback);
	            }
	            if (!callback) {
	                return;
	            }

	            if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	            } else {
	                deps = undef;
	            }
	        }

	        //Support require(['a'])
	        callback = callback || function () {};

	        //If relName is a function, it is an errback handler,
	        //so remove it.
	        if (typeof relName === 'function') {
	            relName = forceSync;
	            forceSync = alt;
	        }

	        //Simulate async callback;
	        if (forceSync) {
	            main(undef, deps, callback, relName);
	        } else {
	            //Using a non-zero value because of concern for what old browsers
	            //do, and latest browsers "upgrade" to 4 if lower value is used:
	            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	            //If want a value immediately, use require('id') instead -- something
	            //that works in almond on the global level, but not guaranteed and
	            //unlikely to work in other AMD implementations.
	            setTimeout(function () {
	                main(undef, deps, callback, relName);
	            }, 4);
	        }

	        return req;
	    };

	    /**
	     * Just drops the config on the floor, but returns req in case
	     * the config return value is used.
	     */
	    req.config = function (cfg) {
	        return req(cfg);
	    };

	    /**
	     * Expose module registry for debugging and tooling
	     */
	    requirejs._defined = defined;

	    define = function (name, deps, callback) {

	        //This module may not have dependencies
	        if (!deps.splice) {
	            //deps is not an array, so probably means
	            //an object literal or factory function for
	            //the value. Adjust args.
	            callback = deps;
	            deps = [];
	        }

	        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	            waiting[name] = [name, deps, callback];
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };
	}());

	define("node_modules/almond/almond", function(){});

	/**
	 * Utility functions for web applications.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* Utilities API */
	var util = forge.util = forge.util || {};

	// define setImmediate and nextTick
	(function() {
	  // use native nextTick
	  if(typeof process !== 'undefined' && process.nextTick) {
	    util.nextTick = process.nextTick;
	    if(typeof setImmediate === 'function') {
	      util.setImmediate = setImmediate;
	    } else {
	      // polyfill setImmediate with nextTick, older versions of node
	      // (those w/o setImmediate) won't totally starve IO
	      util.setImmediate = util.nextTick;
	    }
	    return;
	  }

	  // polyfill nextTick with native setImmediate
	  if(typeof setImmediate === 'function') {
	    util.setImmediate = setImmediate;
	    util.nextTick = function(callback) {
	      return setImmediate(callback);
	    };
	    return;
	  }

	  /* Note: A polyfill upgrade pattern is used here to allow combining
	  polyfills. For example, MutationObserver is fast, but blocks UI updates,
	  so it needs to allow UI updates periodically, so it falls back on
	  postMessage or setTimeout. */

	  // polyfill with setTimeout
	  util.setImmediate = function(callback) {
	    setTimeout(callback, 0);
	  };

	  // upgrade polyfill to use postMessage
	  if(typeof window !== 'undefined' &&
	    typeof window.postMessage === 'function') {
	    var msg = 'forge.setImmediate';
	    var callbacks = [];
	    util.setImmediate = function(callback) {
	      callbacks.push(callback);
	      // only send message when one hasn't been sent in
	      // the current turn of the event loop
	      if(callbacks.length === 1) {
	        window.postMessage(msg, '*');
	      }
	    };
	    function handler(event) {
	      if(event.source === window && event.data === msg) {
	        event.stopPropagation();
	        var copy = callbacks.slice();
	        callbacks.length = 0;
	        copy.forEach(function(callback) {
	          callback();
	        });
	      }
	    }
	    window.addEventListener('message', handler, true);
	  }

	  // upgrade polyfill to use MutationObserver
	  if(typeof MutationObserver !== 'undefined') {
	    // polyfill with MutationObserver
	    var now = Date.now();
	    var attr = true;
	    var div = document.createElement('div');
	    var callbacks = [];
	    new MutationObserver(function() {
	      var copy = callbacks.slice();
	      callbacks.length = 0;
	      copy.forEach(function(callback) {
	        callback();
	      });
	    }).observe(div, {attributes: true});
	    var oldSetImmediate = util.setImmediate;
	    util.setImmediate = function(callback) {
	      if(Date.now() - now > 15) {
	        now = Date.now();
	        oldSetImmediate(callback);
	      } else {
	        callbacks.push(callback);
	        // only trigger observer when it hasn't been triggered in
	        // the current turn of the event loop
	        if(callbacks.length === 1) {
	          div.setAttribute('a', attr = !attr);
	        }
	      }
	    };
	  }

	  util.nextTick = util.setImmediate;
	})();

	// define isArray
	util.isArray = Array.isArray || function(x) {
	  return Object.prototype.toString.call(x) === '[object Array]';
	};

	// define isArrayBuffer
	util.isArrayBuffer = function(x) {
	  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
	};

	// define isArrayBufferView
	util.isArrayBufferView = function(x) {
	  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
	};

	// TODO: set ByteBuffer to best available backing
	util.ByteBuffer = ByteStringBuffer;

	/** Buffer w/BinaryString backing */

	/**
	 * Constructor for a binary string backed byte buffer.
	 *
	 * @param [b] the bytes to wrap (either encoded as string, one byte per
	 *          character, or as an ArrayBuffer or Typed Array).
	 */
	function ByteStringBuffer(b) {
	  // TODO: update to match DataBuffer API

	  // the data in this buffer
	  this.data = '';
	  // the pointer for reading from this buffer
	  this.read = 0;

	  if(typeof b === 'string') {
	    this.data = b;
	  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
	    // convert native buffer to forge buffer
	    // FIXME: support native buffers internally instead
	    var arr = new Uint8Array(b);
	    try {
	      this.data = String.fromCharCode.apply(null, arr);
	    } catch(e) {
	      for(var i = 0; i < arr.length; ++i) {
	        this.putByte(arr[i]);
	      }
	    }
	  } else if(b instanceof ByteStringBuffer ||
	    (typeof b === 'object' && typeof b.data === 'string' &&
	    typeof b.read === 'number')) {
	    // copy existing buffer
	    this.data = b.data;
	    this.read = b.read;
	  }

	  // used for v8 optimization
	  this._constructedStringLength = 0;
	}
	util.ByteStringBuffer = ByteStringBuffer;

	/* Note: This is an optimization for V8-based browsers. When V8 concatenates
	  a string, the strings are only joined logically using a "cons string" or
	  "constructed/concatenated string". These containers keep references to one
	  another and can result in very large memory usage. For example, if a 2MB
	  string is constructed by concatenating 4 bytes together at a time, the
	  memory usage will be ~44MB; so ~22x increase. The strings are only joined
	  together when an operation requiring their joining takes place, such as
	  substr(). This function is called when adding data to this buffer to ensure
	  these types of strings are periodically joined to reduce the memory
	  footprint. */
	var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
	util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
	  this._constructedStringLength += x;
	  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
	    // this substr() should cause the constructed string to join
	    this.data.substr(0, 1);
	    this._constructedStringLength = 0;
	  }
	};

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util.ByteStringBuffer.prototype.length = function() {
	  return this.data.length - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util.ByteStringBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putByte = function(b) {
	  return this.putBytes(String.fromCharCode(b));
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
	  b = String.fromCharCode(b);
	  var d = this.data;
	  while(n > 0) {
	    if(n & 1) {
	      d += b;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      b += b;
	    }
	  }
	  this.data = d;
	  this._optimizeConstructedString(n);
	  return this;
	};

	/**
	 * Puts bytes in this buffer.
	 *
	 * @param bytes the bytes (as a UTF-8 encoded string) to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putBytes = function(bytes) {
	  this.data += bytes;
	  this._optimizeConstructedString(bytes.length);
	  return this;
	};

	/**
	 * Puts a UTF-16 encoded string into this buffer.
	 *
	 * @param str the string to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putString = function(str) {
	  return this.putBytes(util.encodeUtf8(str));
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt16 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt24 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt32 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt16Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt24Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt32Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 24 & 0xFF));
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt = function(i, n) {
	  var bytes = '';
	  do {
	    n -= 8;
	    bytes += String.fromCharCode((i >> n) & 0xFF);
	  } while(n > 0);
	  return this.putBytes(bytes);
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
	  return this.putBytes(buffer.getBytes());
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util.ByteStringBuffer.prototype.getByte = function() {
	  return this.data.charCodeAt(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.ByteStringBuffer.prototype.getInt16 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 8 ^
	    this.data.charCodeAt(this.read + 1));
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.ByteStringBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 16 ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.ByteStringBuffer.prototype.getInt32 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 24 ^
	    this.data.charCodeAt(this.read + 1) << 16 ^
	    this.data.charCodeAt(this.read + 2) << 8 ^
	    this.data.charCodeAt(this.read + 3));
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.ByteStringBuffer.prototype.getInt16Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.ByteStringBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.ByteStringBuffer.prototype.getInt32Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16 ^
	    this.data.charCodeAt(this.read + 3) << 24);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.ByteStringBuffer.prototype.getInt = function(n) {
	  var rval = 0;
	  do {
	    rval = (rval << 8) + this.data.charCodeAt(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.ByteStringBuffer.prototype.getSignedInt = function(n) {
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out into a UTF-8 string and clears them from the buffer.
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a UTF-8 string of bytes.
	 */
	util.ByteStringBuffer.prototype.getBytes = function(count) {
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
	 * the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of UTF-8 encoded characters.
	 */
	util.ByteStringBuffer.prototype.bytes = function(count) {
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util.ByteStringBuffer.prototype.at = function(i) {
	  return this.data.charCodeAt(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.setAt = function(i, b) {
	  this.data = this.data.substr(0, this.read + i) +
	    String.fromCharCode(b) +
	    this.data.substr(this.read + i + 1);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util.ByteStringBuffer.prototype.last = function() {
	  return this.data.charCodeAt(this.data.length - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util.ByteStringBuffer.prototype.copy = function() {
	  var c = util.createBuffer(this.data);
	  c.read = this.read;
	  return c;
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    this.data = this.data.slice(this.read);
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.clear = function() {
	  this.data = '';
	  this.read = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.truncate = function(count) {
	  var len = Math.max(0, this.length() - count);
	  this.data = this.data.substr(this.read, len);
	  this.read = 0;
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util.ByteStringBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.length; ++i) {
	    var b = this.data.charCodeAt(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a UTF-16 string (standard JavaScript string).
	 *
	 * @return a UTF-16 string.
	 */
	util.ByteStringBuffer.prototype.toString = function() {
	  return util.decodeUtf8(this.bytes());
	};

	/** End Buffer w/BinaryString backing */


	/** Buffer w/UInt8Array backing */

	/**
	 * FIXME: Experimental. Do not use yet.
	 *
	 * Constructor for an ArrayBuffer-backed byte buffer.
	 *
	 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
	 * TypedArray.
	 *
	 * If a string is given, its encoding should be provided as an option,
	 * otherwise it will default to 'binary'. A 'binary' string is encoded such
	 * that each character is one byte in length and size.
	 *
	 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
	 * *directly* without any copying. Note that, if a write to the buffer requires
	 * more space, the buffer will allocate a new backing ArrayBuffer to
	 * accommodate. The starting read and write offsets for the buffer may be
	 * given as options.
	 *
	 * @param [b] the initial bytes for this buffer.
	 * @param options the options to use:
	 *          [readOffset] the starting read offset to use (default: 0).
	 *          [writeOffset] the starting write offset to use (default: the
	 *            length of the first parameter).
	 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
	 *            accommodate writes (default: 1024).
	 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
	 *            first parameter, if it is a string (default: 'binary').
	 */
	function DataBuffer(b, options) {
	  // default options
	  options = options || {};

	  // pointers for read from/write to buffer
	  this.read = options.readOffset || 0;
	  this.growSize = options.growSize || 1024;

	  var isArrayBuffer = util.isArrayBuffer(b);
	  var isArrayBufferView = util.isArrayBufferView(b);
	  if(isArrayBuffer || isArrayBufferView) {
	    // use ArrayBuffer directly
	    if(isArrayBuffer) {
	      this.data = new DataView(b);
	    } else {
	      // TODO: adjust read/write offset based on the type of view
	      // or specify that this must be done in the options ... that the
	      // offsets are byte-based
	      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
	    }
	    this.write = ('writeOffset' in options ?
	      options.writeOffset : this.data.byteLength);
	    return;
	  }

	  // initialize to empty array buffer and add any given bytes using putBytes
	  this.data = new DataView(new ArrayBuffer(0));
	  this.write = 0;

	  if(b !== null && b !== undefined) {
	    this.putBytes(b);
	  }

	  if('writeOffset' in options) {
	    this.write = options.writeOffset;
	  }
	}
	util.DataBuffer = DataBuffer;

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util.DataBuffer.prototype.length = function() {
	  return this.write - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util.DataBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Ensures this buffer has enough empty space to accommodate the given number
	 * of bytes. An optional parameter may be given that indicates a minimum
	 * amount to grow the buffer if necessary. If the parameter is not given,
	 * the buffer will be grown by some previously-specified default amount
	 * or heuristic.
	 *
	 * @param amount the number of bytes to accommodate.
	 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
	 *          necessary.
	 */
	util.DataBuffer.prototype.accommodate = function(amount, growSize) {
	  if(this.length() >= amount) {
	    return this;
	  }
	  growSize = Math.max(growSize || this.growSize, amount);

	  // grow buffer
	  var src = new Uint8Array(
	    this.data.buffer, this.data.byteOffset, this.data.byteLength);
	  var dst = new Uint8Array(this.length() + growSize);
	  dst.set(src);
	  this.data = new DataView(dst.buffer);

	  return this;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putByte = function(b) {
	  this.accommodate(1);
	  this.data.setUint8(this.write++, b);
	  return this;
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.fillWithByte = function(b, n) {
	  this.accommodate(n);
	  for(var i = 0; i < n; ++i) {
	    this.data.setUint8(b);
	  }
	  return this;
	};

	/**
	 * Puts bytes in this buffer. The bytes may be given as a string, an
	 * ArrayBuffer, a DataView, or a TypedArray.
	 *
	 * @param bytes the bytes to put.
	 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
	 *          'utf16', 'hex'), if it is a string (default: 'binary').
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
	  if(util.isArrayBufferView(bytes)) {
	    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
	    var len = src.byteLength - src.byteOffset;
	    this.accommodate(len);
	    var dst = new Uint8Array(this.data.buffer, this.write);
	    dst.set(src);
	    this.write += len;
	    return this;
	  }

	  if(util.isArrayBuffer(bytes)) {
	    var src = new Uint8Array(bytes);
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(this.data.buffer);
	    dst.set(src, this.write);
	    this.write += src.byteLength;
	    return this;
	  }

	  // bytes is a util.DataBuffer or equivalent
	  if(bytes instanceof util.DataBuffer ||
	    (typeof bytes === 'object' &&
	    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
	    util.isArrayBufferView(bytes.data))) {
	    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(bytes.data.byteLength, this.write);
	    dst.set(src);
	    this.write += src.byteLength;
	    return this;
	  }

	  if(bytes instanceof util.ByteStringBuffer) {
	    // copy binary string and process as the same as a string parameter below
	    bytes = bytes.data;
	    encoding = 'binary';
	  }

	  // string conversion
	  encoding = encoding || 'binary';
	  if(typeof bytes === 'string') {
	    var view;

	    // decode from string
	    if(encoding === 'hex') {
	      this.accommodate(Math.ceil(bytes.length / 2));
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.hex.decode(bytes, view, this.write);
	      return this;
	    }
	    if(encoding === 'base64') {
	      this.accommodate(Math.ceil(bytes.length / 4) * 3);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.base64.decode(bytes, view, this.write);
	      return this;
	    }

	    // encode text as UTF-8 bytes
	    if(encoding === 'utf8') {
	      // encode as UTF-8 then decode string as raw binary
	      bytes = util.encodeUtf8(bytes);
	      encoding = 'binary';
	    }

	    // decode string as raw binary
	    if(encoding === 'binary' || encoding === 'raw') {
	      // one byte per character
	      this.accommodate(bytes.length);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.raw.decode(view);
	      return this;
	    }

	    // encode text as UTF-16 bytes
	    if(encoding === 'utf16') {
	      // two bytes per character
	      this.accommodate(bytes.length * 2);
	      view = new Uint16Array(this.data.buffer, this.write);
	      this.write += util.text.utf16.encode(view);
	      return this;
	    }

	    throw new Error('Invalid encoding: ' + encoding);
	  }

	  throw Error('Invalid parameter: ' + bytes);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putBuffer = function(buffer) {
	  this.putBytes(buffer);
	  buffer.clear();
	  return this;
	};

	/**
	 * Puts a string into this buffer.
	 *
	 * @param str the string to put.
	 * @param [encoding] the encoding for the string (default: 'utf16').
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putString = function(str) {
	  return this.putBytes(str, 'utf16');
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt16 = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt24 = function(i) {
	  this.accommodate(3);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt32 = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt16Le = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i, true);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt24Le = function(i) {
	  this.accommodate(3);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt32Le = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i, true);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt = function(i, n) {
	  this.accommodate(n / 8);
	  do {
	    n -= 8;
	    this.data.setInt8(this.write++, (i >> n) & 0xFF);
	  } while(n > 0);
	  return this;
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putSignedInt = function(i, n) {
	  this.accommodate(n / 8);
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util.DataBuffer.prototype.getByte = function() {
	  return this.data.getInt8(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.DataBuffer.prototype.getInt16 = function() {
	  var rval = this.data.getInt16(this.read);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.DataBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.getInt16(this.read) << 8 ^
	    this.data.getInt8(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.DataBuffer.prototype.getInt32 = function() {
	  var rval = this.data.getInt32(this.read);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.DataBuffer.prototype.getInt16Le = function() {
	  var rval = this.data.getInt16(this.read, true);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.DataBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.getInt8(this.read) ^
	    this.data.getInt16(this.read + 1, true) << 8);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.DataBuffer.prototype.getInt32Le = function() {
	  var rval = this.data.getInt32(this.read, true);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.DataBuffer.prototype.getInt = function(n) {
	  var rval = 0;
	  do {
	    rval = (rval << 8) + this.data.getInt8(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.DataBuffer.prototype.getSignedInt = function(n) {
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out into a UTF-8 string and clears them from the buffer.
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a UTF-8 string of bytes.
	 */
	util.DataBuffer.prototype.getBytes = function(count) {
	  // TODO: deprecate this method, it is poorly named and
	  // this.toString('binary') replaces it
	  // add a toTypedArray()/toArrayBuffer() function
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
	 * the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of UTF-8 encoded characters.
	 */
	util.DataBuffer.prototype.bytes = function(count) {
	  // TODO: deprecate this method, it is poorly named, add "getString()"
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util.DataBuffer.prototype.at = function(i) {
	  return this.data.getUint8(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.setAt = function(i, b) {
	  this.data.setUint8(i, b);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util.DataBuffer.prototype.last = function() {
	  return this.data.getUint8(this.write - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util.DataBuffer.prototype.copy = function() {
	  return new util.DataBuffer(this);
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    var src = new Uint8Array(this.data.buffer, this.read);
	    var dst = new Uint8Array(src.byteLength);
	    dst.set(src);
	    this.data = new DataView(dst);
	    this.write -= this.read;
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.clear = function() {
	  this.data = new DataView(new ArrayBuffer(0));
	  this.read = this.write = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.truncate = function(count) {
	  this.write = Math.max(0, this.length() - count);
	  this.read = Math.min(this.read, this.write);
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util.DataBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.byteLength; ++i) {
	    var b = this.data.getUint8(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a string, using the given encoding. If no
	 * encoding is given, 'utf8' (UTF-8) is used.
	 *
	 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
	 *          'base64' (default: 'utf8').
	 *
	 * @return a string representation of the bytes in this buffer.
	 */
	util.DataBuffer.prototype.toString = function(encoding) {
	  var view = new Uint8Array(this.data, this.read, this.length());
	  encoding = encoding || 'utf8';

	  // encode to string
	  if(encoding === 'binary' || encoding === 'raw') {
	    return util.binary.raw.encode(view);
	  }
	  if(encoding === 'hex') {
	    return util.binary.hex.encode(view);
	  }
	  if(encoding === 'base64') {
	    return util.binary.base64.encode(view);
	  }

	  // decode to text
	  if(encoding === 'utf8') {
	    return util.text.utf8.decode(view);
	  }
	  if(encoding === 'utf16') {
	    return util.text.utf16.decode(view);
	  }

	  throw new Error('Invalid encoding: ' + encoding);
	};

	/** End Buffer w/UInt8Array backing */


	/**
	 * Creates a buffer that stores bytes. A value may be given to put into the
	 * buffer that is either a string of bytes or a UTF-16 string that will
	 * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).
	 *
	 * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode
	 *          as UTF-8.
	 * @param [encoding] (default: 'raw', other: 'utf8').
	 */
	util.createBuffer = function(input, encoding) {
	  // TODO: deprecate, use new ByteBuffer() instead
	  encoding = encoding || 'raw';
	  if(input !== undefined && encoding === 'utf8') {
	    input = util.encodeUtf8(input);
	  }
	  return new util.ByteBuffer(input);
	};

	/**
	 * Fills a string with a particular value. If you want the string to be a byte
	 * string, pass in String.fromCharCode(theByte).
	 *
	 * @param c the character to fill the string with, use String.fromCharCode
	 *          to fill the string with a byte value.
	 * @param n the number of characters of value c to fill with.
	 *
	 * @return the filled string.
	 */
	util.fillString = function(c, n) {
	  var s = '';
	  while(n > 0) {
	    if(n & 1) {
	      s += c;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      c += c;
	    }
	  }
	  return s;
	};

	/**
	 * Performs a per byte XOR between two byte strings and returns the result as a
	 * string of bytes.
	 *
	 * @param s1 first string of bytes.
	 * @param s2 second string of bytes.
	 * @param n the number of bytes to XOR.
	 *
	 * @return the XOR'd result.
	 */
	util.xorBytes = function(s1, s2, n) {
	  var s3 = '';
	  var b = '';
	  var t = '';
	  var i = 0;
	  var c = 0;
	  for(; n > 0; --n, ++i) {
	    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
	    if(c >= 10) {
	      s3 += t;
	      t = '';
	      c = 0;
	    }
	    t += String.fromCharCode(b);
	    ++c;
	  }
	  s3 += t;
	  return s3;
	};

	/**
	 * Converts a hex string into a 'binary' encoded string of bytes.
	 *
	 * @param hex the hexadecimal string to convert.
	 *
	 * @return the binary-encoded string of bytes.
	 */
	util.hexToBytes = function(hex) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
	  var rval = '';
	  var i = 0;
	  if(hex.length & 1 == 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    rval += String.fromCharCode(parseInt(hex[0], 16));
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
	  }
	  return rval;
	};

	/**
	 * Converts a 'binary' encoded string of bytes to hex.
	 *
	 * @param bytes the byte string to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util.bytesToHex = function(bytes) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
	  return util.createBuffer(bytes).toHex();
	};

	/**
	 * Converts an 32-bit integer to 4-big-endian byte string.
	 *
	 * @param i the integer.
	 *
	 * @return the byte string.
	 */
	util.int32ToBytes = function(i) {
	  return (
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	// base64 characters, reverse mapping
	var _base64 =
	  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	var _base64Idx = [
	/*43 -43 = 0*/
	/*'+',  1,  2,  3,'/' */
	   62, -1, -1, -1, 63,

	/*'0','1','2','3','4','5','6','7','8','9' */
	   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

	/*15, 16, 17,'=', 19, 20, 21 */
	  -1, -1, -1, 64, -1, -1, -1,

	/*65 - 43 = 22*/
	/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
	   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

	/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
	   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

	/*91 - 43 = 48 */
	/*48, 49, 50, 51, 52, 53 */
	  -1, -1, -1, -1, -1, -1,

	/*97 - 43 = 54*/
	/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
	   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

	/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
	   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
	];

	/**
	 * Base64 encodes a 'binary' encoded string of bytes.
	 *
	 * @param input the binary encoded string of bytes to base64-encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output.
	 */
	util.encode64 = function(input, maxline) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.length) {
	    chr1 = input.charCodeAt(i++);
	    chr2 = input.charCodeAt(i++);
	    chr3 = input.charCodeAt(i++);

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Base64 decodes a string into a 'binary' encoded string of bytes.
	 *
	 * @param input the base64-encoded input.
	 *
	 * @return the binary encoded string.
	 */
	util.decode64 = function(input) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  var output = '';
	  var enc1, enc2, enc3, enc4;
	  var i = 0;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
	      }
	    }
	  }

	  return output;
	};

	/**
	 * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript
	 * string). Non-ASCII characters will be encoded as multiple bytes according
	 * to UTF-8.
	 *
	 * @param str the string to encode.
	 *
	 * @return the UTF-8 encoded string.
	 */
	util.encodeUtf8 = function(str) {
	  return unescape(encodeURIComponent(str));
	};

	/**
	 * Decodes a UTF-8 encoded string into a UTF-16 string.
	 *
	 * @param str the string to decode.
	 *
	 * @return the UTF-16 encoded string (standard JavaScript string).
	 */
	util.decodeUtf8 = function(str) {
	  return decodeURIComponent(escape(str));
	};

	// binary encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util.binary = {
	  raw: {},
	  hex: {},
	  base64: {}
	};

	/**
	 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param bytes the Uint8Array to encode.
	 *
	 * @return the binary-encoded string.
	 */
	util.binary.raw.encode = function(bytes) {
	  return String.fromCharCode.apply(null, bytes);
	};

	/**
	 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param str the binary-encoded string to decode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.raw.decode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
	 * ByteBuffer as a string of hexadecimal characters.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util.binary.hex.encode = util.bytesToHex;

	/**
	 * Decodes a hex-encoded string to a Uint8Array.
	 *
	 * @param hex the hexadecimal string to convert.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.hex.decode = function(hex, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(hex.length / 2));
	  }
	  offset = offset || 0;
	  var i = 0, j = offset;
	  if(hex.length & 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    out[j++] = parseInt(hex[0], 16);
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    out[j++] = parseInt(hex.substr(i, 2), 16);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Base64-encodes a Uint8Array.
	 *
	 * @param input the Uint8Array to encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output string.
	 */
	util.binary.base64.encode = function(input, maxline) {
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.byteLength) {
	    chr1 = input[i++];
	    chr2 = input[i++];
	    chr3 = input[i++];

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Decodes a base64-encoded string to a Uint8Array.
	 *
	 * @param input the base64-encoded input string.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.base64.decode = function(input, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
	  }

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  offset = offset || 0;
	  var enc1, enc2, enc3, enc4;
	  var i = 0, j = offset;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    out[j++] = (enc1 << 2) | (enc2 >> 4);
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        out[j++] = ((enc3 & 3) << 6) | enc4;
	      }
	    }
	  }

	  // make sure result is the exact decoded length
	  return output ?
	         (j - offset) :
	         out.subarray(0, j);
	};

	// text encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util.text = {
	  utf8: {},
	  utf16: {}
	};

	/**
	 * Encodes the given string as UTF-8 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.text.utf8.encode = function(str, output, offset) {
	  str = util.encodeUtf8(str);
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-8 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util.text.utf8.decode = function(bytes) {
	  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
	};

	/**
	 * Encodes the given string as UTF-16 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.text.utf16.encode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length * 2);
	  }
	  var view = new Uint16Array(out.buffer);
	  offset = offset || 0;
	  var j = offset;
	  var k = offset;
	  for(var i = 0; i < str.length; ++i) {
	    view[k++] = str.charCodeAt(i);
	    j += 2;
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-16 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util.text.utf16.decode = function(bytes) {
	  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
	};

	/**
	 * Deflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true to return only raw deflate data, false to include zlib
	 *          header and trailer.
	 *
	 * @return the deflated data as a string.
	 */
	util.deflate = function(api, bytes, raw) {
	  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

	  // strip zlib header and trailer if necessary
	  if(raw) {
	    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
	    // there is a 4-byte DICT (alder-32) block before the data if
	    // its 5th bit is set
	    var start = 2;
	    var flg = bytes.charCodeAt(1);
	    if(flg & 0x20) {
	      start = 6;
	    }
	    // zlib trailer is 4 bytes of adler-32
	    bytes = bytes.substring(start, bytes.length - 4);
	  }

	  return bytes;
	};

	/**
	 * Inflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true if the incoming data has no zlib header or trailer and is
	 *          raw DEFLATE data.
	 *
	 * @return the inflated data as a string, null on error.
	 */
	util.inflate = function(api, bytes, raw) {
	  // TODO: add zlib header and trailer if necessary/possible
	  var rval = api.inflate(util.encode64(bytes)).rval;
	  return (rval === null) ? null : util.decode64(rval);
	};

	/**
	 * Sets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param obj the storage object, null to remove.
	 */
	var _setStorageObject = function(api, id, obj) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  var rval;
	  if(obj === null) {
	    rval = api.removeItem(id);
	  } else {
	    // json-encode and base64-encode object
	    obj = util.encode64(JSON.stringify(obj));
	    rval = api.setItem(id, obj);
	  }

	  // handle potential flash error
	  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
	    var error = new Error(rval.error.message);
	    error.id = rval.error.id;
	    error.name = rval.error.name;
	    throw error;
	  }
	};

	/**
	 * Gets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 *
	 * @return the storage object entry or null if none exists.
	 */
	var _getStorageObject = function(api, id) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  // get the existing entry
	  var rval = api.getItem(id);

	  /* Note: We check api.init because we can't do (api == localStorage)
	    on IE because of "Class doesn't support Automation" exception. Only
	    the flash api has an init method so this works too, but we need a
	    better solution in the future. */

	  // flash returns item wrapped in an object, handle special case
	  if(api.init) {
	    if(rval.rval === null) {
	      if(rval.error) {
	        var error = new Error(rval.error.message);
	        error.id = rval.error.id;
	        error.name = rval.error.name;
	        throw error;
	      }
	      // no error, but also no item
	      rval = null;
	    } else {
	      rval = rval.rval;
	    }
	  }

	  // handle decoding
	  if(rval !== null) {
	    // base64-decode and json-decode data
	    rval = JSON.parse(util.decode64(rval));
	  }

	  return rval;
	};

	/**
	 * Stores an item in local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 */
	var _setItem = function(api, id, key, data) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj === null) {
	    // create a new storage object
	    obj = {};
	  }
	  // update key
	  obj[key] = data;

	  // set storage object
	  _setStorageObject(api, id, obj);
	};

	/**
	 * Gets an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 *
	 * @return the item.
	 */
	var _getItem = function(api, id, key) {
	  // get storage object
	  var rval = _getStorageObject(api, id);
	  if(rval !== null) {
	    // return data at key
	    rval = (key in rval) ? rval[key] : null;
	  }

	  return rval;
	};

	/**
	 * Removes an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 */
	var _removeItem = function(api, id, key) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj !== null && key in obj) {
	    // remove key
	    delete obj[key];

	    // see if entry has no keys remaining
	    var empty = true;
	    for(var prop in obj) {
	      empty = false;
	      break;
	    }
	    if(empty) {
	      // remove entry entirely if no keys are left
	      obj = null;
	    }

	    // set storage object
	    _setStorageObject(api, id, obj);
	  }
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 */
	var _clearItems = function(api, id) {
	  _setStorageObject(api, id, null);
	};

	/**
	 * Calls a storage function.
	 *
	 * @param func the function to call.
	 * @param args the arguments for the function.
	 * @param location the location argument.
	 *
	 * @return the return value from the function.
	 */
	var _callStorageFunction = function(func, args, location) {
	  var rval = null;

	  // default storage types
	  if(typeof(location) === 'undefined') {
	    location = ['web', 'flash'];
	  }

	  // apply storage types in order of preference
	  var type;
	  var done = false;
	  var exception = null;
	  for(var idx in location) {
	    type = location[idx];
	    try {
	      if(type === 'flash' || type === 'both') {
	        if(args[0] === null) {
	          throw new Error('Flash local storage not available.');
	        }
	        rval = func.apply(this, args);
	        done = (type === 'flash');
	      }
	      if(type === 'web' || type === 'both') {
	        args[0] = localStorage;
	        rval = func.apply(this, args);
	        done = true;
	      }
	    } catch(ex) {
	      exception = ex;
	    }
	    if(done) {
	      break;
	    }
	  }

	  if(!done) {
	    throw exception;
	  }

	  return rval;
	};

	/**
	 * Stores an item on local disk.
	 *
	 * The available types of local storage include 'flash', 'web', and 'both'.
	 *
	 * The type 'flash' refers to flash local storage (SharedObject). In order
	 * to use flash local storage, the 'api' parameter must be valid. The type
	 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
	 * refers to storing using both 'flash' and 'web', not just one or the
	 * other.
	 *
	 * The location array should list the storage types to use in order of
	 * preference:
	 *
	 * ['flash']: flash only storage
	 * ['web']: web only storage
	 * ['both']: try to store in both
	 * ['flash','web']: store in flash first, but if not available, 'web'
	 * ['web','flash']: store in web first, but if not available, 'flash'
	 *
	 * The location array defaults to: ['web', 'flash']
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 * @param location an array with the preferred types of storage to use.
	 */
	util.setItem = function(api, id, key, data, location) {
	  _callStorageFunction(_setItem, arguments, location);
	};

	/**
	 * Gets an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 *
	 * @return the item.
	 */
	util.getItem = function(api, id, key, location) {
	  return _callStorageFunction(_getItem, arguments, location);
	};

	/**
	 * Removes an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 */
	util.removeItem = function(api, id, key, location) {
	  _callStorageFunction(_removeItem, arguments, location);
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface if flash is available.
	 * @param id the storage ID to use.
	 * @param location an array with the preferred types of storage to use.
	 */
	util.clearItems = function(api, id, location) {
	  _callStorageFunction(_clearItems, arguments, location);
	};

	/**
	 * Parses the scheme, host, and port from an http(s) url.
	 *
	 * @param str the url string.
	 *
	 * @return the parsed url object or null if the url is invalid.
	 */
	util.parseUrl = function(str) {
	  // FIXME: this regex looks a bit broken
	  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
	  regex.lastIndex = 0;
	  var m = regex.exec(str);
	  var url = (m === null) ? null : {
	    full: str,
	    scheme: m[1],
	    host: m[2],
	    port: m[3],
	    path: m[4]
	  };
	  if(url) {
	    url.fullHost = url.host;
	    if(url.port) {
	      if(url.port !== 80 && url.scheme === 'http') {
	        url.fullHost += ':' + url.port;
	      } else if(url.port !== 443 && url.scheme === 'https') {
	        url.fullHost += ':' + url.port;
	      }
	    } else if(url.scheme === 'http') {
	      url.port = 80;
	    } else if(url.scheme === 'https') {
	      url.port = 443;
	    }
	    url.full = url.scheme + '://' + url.fullHost;
	  }
	  return url;
	};

	/* Storage for query variables */
	var _queryVariables = null;

	/**
	 * Returns the window location query variables. Query is parsed on the first
	 * call and the same object is returned on subsequent calls. The mapping
	 * is from keys to an array of values. Parameters without values will have
	 * an object key set but no value added to the value array. Values are
	 * unescaped.
	 *
	 * ...?k1=v1&k2=v2:
	 * {
	 *   "k1": ["v1"],
	 *   "k2": ["v2"]
	 * }
	 *
	 * ...?k1=v1&k1=v2:
	 * {
	 *   "k1": ["v1", "v2"]
	 * }
	 *
	 * ...?k1=v1&k2:
	 * {
	 *   "k1": ["v1"],
	 *   "k2": []
	 * }
	 *
	 * ...?k1=v1&k1:
	 * {
	 *   "k1": ["v1"]
	 * }
	 *
	 * ...?k1&k1:
	 * {
	 *   "k1": []
	 * }
	 *
	 * @param query the query string to parse (optional, default to cached
	 *          results from parsing window location search query).
	 *
	 * @return object mapping keys to variables.
	 */
	util.getQueryVariables = function(query) {
	  var parse = function(q) {
	    var rval = {};
	    var kvpairs = q.split('&');
	    for(var i = 0; i < kvpairs.length; i++) {
	      var pos = kvpairs[i].indexOf('=');
	      var key;
	      var val;
	      if(pos > 0) {
	        key = kvpairs[i].substring(0, pos);
	        val = kvpairs[i].substring(pos + 1);
	      } else {
	        key = kvpairs[i];
	        val = null;
	      }
	      if(!(key in rval)) {
	        rval[key] = [];
	      }
	      // disallow overriding object prototype keys
	      if(!(key in Object.prototype) && val !== null) {
	        rval[key].push(unescape(val));
	      }
	    }
	    return rval;
	  };

	   var rval;
	   if(typeof(query) === 'undefined') {
	     // set cached variables if needed
	     if(_queryVariables === null) {
	       if(typeof(window) !== 'undefined' && window.location && window.location.search) {
	          // parse window search query
	          _queryVariables = parse(window.location.search.substring(1));
	       } else {
	          // no query variables available
	          _queryVariables = {};
	       }
	     }
	     rval = _queryVariables;
	   } else {
	     // parse given query
	     rval = parse(query);
	   }
	   return rval;
	};

	/**
	 * Parses a fragment into a path and query. This method will take a URI
	 * fragment and break it up as if it were the main URI. For example:
	 *    /bar/baz?a=1&b=2
	 * results in:
	 *    {
	 *       path: ["bar", "baz"],
	 *       query: {"k1": ["v1"], "k2": ["v2"]}
	 *    }
	 *
	 * @return object with a path array and query object.
	 */
	util.parseFragment = function(fragment) {
	  // default to whole fragment
	  var fp = fragment;
	  var fq = '';
	  // split into path and query if possible at the first '?'
	  var pos = fragment.indexOf('?');
	  if(pos > 0) {
	    fp = fragment.substring(0, pos);
	    fq = fragment.substring(pos + 1);
	  }
	  // split path based on '/' and ignore first element if empty
	  var path = fp.split('/');
	  if(path.length > 0 && path[0] === '') {
	    path.shift();
	  }
	  // convert query into object
	  var query = (fq === '') ? {} : util.getQueryVariables(fq);

	  return {
	    pathString: fp,
	    queryString: fq,
	    path: path,
	    query: query
	  };
	};

	/**
	 * Makes a request out of a URI-like request string. This is intended to
	 * be used where a fragment id (after a URI '#') is parsed as a URI with
	 * path and query parts. The string should have a path beginning and
	 * delimited by '/' and optional query parameters following a '?'. The
	 * query should be a standard URL set of key value pairs delimited by
	 * '&'. For backwards compatibility the initial '/' on the path is not
	 * required. The request object has the following API, (fully described
	 * in the method code):
	 *    {
	 *       path: <the path string part>.
	 *       query: <the query string part>,
	 *       getPath(i): get part or all of the split path array,
	 *       getQuery(k, i): get part or all of a query key array,
	 *       getQueryLast(k, _default): get last element of a query key array.
	 *    }
	 *
	 * @return object with request parameters.
	 */
	util.makeRequest = function(reqString) {
	  var frag = util.parseFragment(reqString);
	  var req = {
	    // full path string
	    path: frag.pathString,
	    // full query string
	    query: frag.queryString,
	    /**
	     * Get path or element in path.
	     *
	     * @param i optional path index.
	     *
	     * @return path or part of path if i provided.
	     */
	    getPath: function(i) {
	      return (typeof(i) === 'undefined') ? frag.path : frag.path[i];
	    },
	    /**
	     * Get query, values for a key, or value for a key index.
	     *
	     * @param k optional query key.
	     * @param i optional query key index.
	     *
	     * @return query, values for a key, or value for a key index.
	     */
	    getQuery: function(k, i) {
	      var rval;
	      if(typeof(k) === 'undefined') {
	        rval = frag.query;
	      } else {
	        rval = frag.query[k];
	        if(rval && typeof(i) !== 'undefined') {
	           rval = rval[i];
	        }
	      }
	      return rval;
	    },
	    getQueryLast: function(k, _default) {
	      var rval;
	      var vals = req.getQuery(k);
	      if(vals) {
	        rval = vals[vals.length - 1];
	      } else {
	        rval = _default;
	      }
	      return rval;
	    }
	  };
	  return req;
	};

	/**
	 * Makes a URI out of a path, an object with query parameters, and a
	 * fragment. Uses jQuery.param() internally for query string creation.
	 * If the path is an array, it will be joined with '/'.
	 *
	 * @param path string path or array of strings.
	 * @param query object with query parameters. (optional)
	 * @param fragment fragment string. (optional)
	 *
	 * @return string object with request parameters.
	 */
	util.makeLink = function(path, query, fragment) {
	  // join path parts if needed
	  path = jQuery.isArray(path) ? path.join('/') : path;

	  var qstr = jQuery.param(query || {});
	  fragment = fragment || '';
	  return path +
	    ((qstr.length > 0) ? ('?' + qstr) : '') +
	    ((fragment.length > 0) ? ('#' + fragment) : '');
	};

	/**
	 * Follows a path of keys deep into an object hierarchy and set a value.
	 * If a key does not exist or it's value is not an object, create an
	 * object in it's place. This can be destructive to a object tree if
	 * leaf nodes are given as non-final path keys.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 * @param value the value to set.
	 */
	util.setPath = function(object, keys, value) {
	  // need to start at an object
	  if(typeof(object) === 'object' && object !== null) {
	    var i = 0;
	    var len = keys.length;
	    while(i < len) {
	      var next = keys[i++];
	      if(i == len) {
	        // last
	        object[next] = value;
	      } else {
	        // more
	        var hasNext = (next in object);
	        if(!hasNext ||
	          (hasNext && typeof(object[next]) !== 'object') ||
	          (hasNext && object[next] === null)) {
	          object[next] = {};
	        }
	        object = object[next];
	      }
	    }
	  }
	};

	/**
	 * Follows a path of keys deep into an object hierarchy and return a value.
	 * If a key does not exist, create an object in it's place.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 * @param _default value to return if path not found.
	 *
	 * @return the value at the path if found, else default if given, else
	 *         undefined.
	 */
	util.getPath = function(object, keys, _default) {
	  var i = 0;
	  var len = keys.length;
	  var hasNext = true;
	  while(hasNext && i < len &&
	    typeof(object) === 'object' && object !== null) {
	    var next = keys[i++];
	    hasNext = next in object;
	    if(hasNext) {
	      object = object[next];
	    }
	  }
	  return (hasNext ? object : _default);
	};

	/**
	 * Follow a path of keys deep into an object hierarchy and delete the
	 * last one. If a key does not exist, do nothing.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 */
	util.deletePath = function(object, keys) {
	  // need to start at an object
	  if(typeof(object) === 'object' && object !== null) {
	    var i = 0;
	    var len = keys.length;
	    while(i < len) {
	      var next = keys[i++];
	      if(i == len) {
	        // last
	        delete object[next];
	      } else {
	        // more
	        if(!(next in object) ||
	          (typeof(object[next]) !== 'object') ||
	          (object[next] === null)) {
	           break;
	        }
	        object = object[next];
	      }
	    }
	  }
	};

	/**
	 * Check if an object is empty.
	 *
	 * Taken from:
	 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
	 *
	 * @param object the object to check.
	 */
	util.isEmpty = function(obj) {
	  for(var prop in obj) {
	    if(obj.hasOwnProperty(prop)) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Format with simple printf-style interpolation.
	 *
	 * %%: literal '%'
	 * %s,%o: convert next argument into a string.
	 *
	 * @param format the string to format.
	 * @param ... arguments to interpolate into the format string.
	 */
	util.format = function(format) {
	  var re = /%./g;
	  // current match
	  var match;
	  // current part
	  var part;
	  // current arg index
	  var argi = 0;
	  // collected parts to recombine later
	  var parts = [];
	  // last index found
	  var last = 0;
	  // loop while matches remain
	  while((match = re.exec(format))) {
	    part = format.substring(last, re.lastIndex - 2);
	    // don't add empty strings (ie, parts between %s%s)
	    if(part.length > 0) {
	      parts.push(part);
	    }
	    last = re.lastIndex;
	    // switch on % code
	    var code = match[0][1];
	    switch(code) {
	    case 's':
	    case 'o':
	      // check if enough arguments were given
	      if(argi < arguments.length) {
	        parts.push(arguments[argi++ + 1]);
	      } else {
	        parts.push('<?>');
	      }
	      break;
	    // FIXME: do proper formating for numbers, etc
	    //case 'f':
	    //case 'd':
	    case '%':
	      parts.push('%');
	      break;
	    default:
	      parts.push('<%' + code + '?>');
	    }
	  }
	  // add trailing part of format string
	  parts.push(format.substring(last));
	  return parts.join('');
	};

	/**
	 * Formats a number.
	 *
	 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
	 */
	util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
	  // http://kevin.vanzonneveld.net
	  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  // +     bugfix by: Michael White (http://crestidg.com)
	  // +     bugfix by: Benjamin Lupton
	  // +     bugfix by: Allan Jensen (http://www.winternet.no)
	  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // *     example 1: number_format(1234.5678, 2, '.', '');
	  // *     returns 1: 1234.57

	  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
	  var d = dec_point === undefined ? ',' : dec_point;
	  var t = thousands_sep === undefined ?
	   '.' : thousands_sep, s = n < 0 ? '-' : '';
	  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
	  var j = (i.length > 3) ? i.length % 3 : 0;
	  return s + (j ? i.substr(0, j) + t : '') +
	    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
	    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
	};

	/**
	 * Formats a byte size.
	 *
	 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
	 */
	util.formatSize = function(size) {
	  if(size >= 1073741824) {
	    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
	  } else if(size >= 1048576) {
	    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
	  } else if(size >= 1024) {
	    size = util.formatNumber(size / 1024, 0) + ' KiB';
	  } else {
	    size = util.formatNumber(size, 0) + ' bytes';
	  }
	  return size;
	};

	/**
	 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 or IPv6 address to convert.
	 *
	 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
	 *         be parsed.
	 */
	util.bytesFromIP = function(ip) {
	  if(ip.indexOf('.') !== -1) {
	    return util.bytesFromIPv4(ip);
	  }
	  if(ip.indexOf(':') !== -1) {
	    return util.bytesFromIPv6(ip);
	  }
	  return null;
	};

	/**
	 * Converts an IPv4 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 address to convert.
	 *
	 * @return the 4-byte address or null if the address can't be parsed.
	 */
	util.bytesFromIPv4 = function(ip) {
	  ip = ip.split('.');
	  if(ip.length !== 4) {
	    return null;
	  }
	  var b = util.createBuffer();
	  for(var i = 0; i < ip.length; ++i) {
	    var num = parseInt(ip[i], 10);
	    if(isNaN(num)) {
	      return null;
	    }
	    b.putByte(num);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts an IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv6 address to convert.
	 *
	 * @return the 16-byte address or null if the address can't be parsed.
	 */
	util.bytesFromIPv6 = function(ip) {
	  var blanks = 0;
	  ip = ip.split(':').filter(function(e) {
	    if(e.length === 0) ++blanks;
	    return true;
	  });
	  var zeros = (8 - ip.length + blanks) * 2;
	  var b = util.createBuffer();
	  for(var i = 0; i < 8; ++i) {
	    if(!ip[i] || ip[i].length === 0) {
	      b.fillWithByte(0, zeros);
	      zeros = 0;
	      continue;
	    }
	    var bytes = util.hexToBytes(ip[i]);
	    if(bytes.length < 2) {
	      b.putByte(0);
	    }
	    b.putBytes(bytes);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
	 * an IPv6 string representation. The bytes must be in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
	 *         respectively, are given, otherwise null.
	 */
	util.bytesToIP = function(bytes) {
	  if(bytes.length === 4) {
	    return util.bytesToIPv4(bytes);
	  }
	  if(bytes.length === 16) {
	    return util.bytesToIPv6(bytes);
	  }
	  return null;
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 string representation or null for an invalid # of bytes.
	 */
	util.bytesToIPv4 = function(bytes) {
	  if(bytes.length !== 4) {
	    return null;
	  }
	  var ip = [];
	  for(var i = 0; i < bytes.length; ++i) {
	    ip.push(bytes.charCodeAt(i));
	  }
	  return ip.join('.');
	};

	/**
	 * Converts 16-bytes into an IPv16 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv16 string representation or null for an invalid # of bytes.
	 */
	util.bytesToIPv6 = function(bytes) {
	  if(bytes.length !== 16) {
	    return null;
	  }
	  var ip = [];
	  var zeroGroups = [];
	  var zeroMaxGroup = 0;
	  for(var i = 0; i < bytes.length; i += 2) {
	    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
	    // canonicalize zero representation
	    while(hex[0] === '0' && hex !== '0') {
	      hex = hex.substr(1);
	    }
	    if(hex === '0') {
	      var last = zeroGroups[zeroGroups.length - 1];
	      var idx = ip.length;
	      if(!last || idx !== last.end + 1) {
	        zeroGroups.push({start: idx, end: idx});
	      } else {
	        last.end = idx;
	        if((last.end - last.start) >
	          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
	          zeroMaxGroup = zeroGroups.length - 1;
	        }
	      }
	    }
	    ip.push(hex);
	  }
	  if(zeroGroups.length > 0) {
	    var group = zeroGroups[zeroMaxGroup];
	    // only shorten group of length > 0
	    if(group.end - group.start > 0) {
	      ip.splice(group.start, group.end - group.start + 1, '');
	      if(group.start === 0) {
	        ip.unshift('');
	      }
	      if(group.end === 7) {
	        ip.push('');
	      }
	    }
	  }
	  return ip.join(':');
	};

	/**
	 * Estimates the number of processes that can be run concurrently. If
	 * creating Web Workers, keep in mind that the main JavaScript process needs
	 * its own core.
	 *
	 * @param options the options to use:
	 *          update true to force an update (not use the cached value).
	 * @param callback(err, max) called once the operation completes.
	 */
	util.estimateCores = function(options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	  if('cores' in util && !options.update) {
	    return callback(null, util.cores);
	  }
	  if(typeof navigator !== 'undefined' &&
	    'hardwareConcurrency' in navigator &&
	    navigator.hardwareConcurrency > 0) {
	    util.cores = navigator.hardwareConcurrency;
	    return callback(null, util.cores);
	  }
	  if(typeof Worker === 'undefined') {
	    // workers not available
	    util.cores = 1;
	    return callback(null, util.cores);
	  }
	  if(typeof Blob === 'undefined') {
	    // can't estimate, default to 2
	    util.cores = 2;
	    return callback(null, util.cores);
	  }

	  // create worker concurrency estimation code as blob
	  var blobUrl = URL.createObjectURL(new Blob(['(',
	    function() {
	      self.addEventListener('message', function(e) {
	        // run worker for 4 ms
	        var st = Date.now();
	        var et = st + 4;
	        while(Date.now() < et);
	        self.postMessage({st: st, et: et});
	      });
	    }.toString(),
	  ')()'], {type: 'application/javascript'}));

	  // take 5 samples using 16 workers
	  sample([], 5, 16);

	  function sample(max, samples, numWorkers) {
	    if(samples === 0) {
	      // get overlap average
	      var avg = Math.floor(max.reduce(function(avg, x) {
	        return avg + x;
	      }, 0) / max.length);
	      util.cores = Math.max(1, avg);
	      URL.revokeObjectURL(blobUrl);
	      return callback(null, util.cores);
	    }
	    map(numWorkers, function(err, results) {
	      max.push(reduce(numWorkers, results));
	      sample(max, samples - 1, numWorkers);
	    });
	  }

	  function map(numWorkers, callback) {
	    var workers = [];
	    var results = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      var worker = new Worker(blobUrl);
	      worker.addEventListener('message', function(e) {
	        results.push(e.data);
	        if(results.length === numWorkers) {
	          for(var i = 0; i < numWorkers; ++i) {
	            workers[i].terminate();
	          }
	          callback(null, results);
	        }
	      });
	      workers.push(worker);
	    }
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].postMessage(i);
	    }
	  }

	  function reduce(numWorkers, results) {
	    // find overlapping time windows
	    var overlaps = [];
	    for(var n = 0; n < numWorkers; ++n) {
	      var r1 = results[n];
	      var overlap = overlaps[n] = [];
	      for(var i = 0; i < numWorkers; ++i) {
	        if(n === i) {
	          continue;
	        }
	        var r2 = results[i];
	        if((r1.st > r2.st && r1.st < r2.et) ||
	          (r2.st > r1.st && r2.st < r1.et)) {
	          overlap.push(i);
	        }
	      }
	    }
	    // get maximum overlaps ... don't include overlapping worker itself
	    // as the main JS process was also being scheduled during the work and
	    // would have to be subtracted from the estimate anyway
	    return overlaps.reduce(function(max, overlap) {
	      return Math.max(max, overlap.length);
	    }, 0);
	  }
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'util';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/util',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Cipher base API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.cipher = forge.cipher || {};

	// registered algorithms
	forge.cipher.algorithms = forge.cipher.algorithms || {};

	/**
	 * Creates a cipher object that can be used to encrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge.cipher.createCipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: false
	  });
	};

	/**
	 * Creates a decipher object that can be used to decrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge.cipher.createDecipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: true
	  });
	};

	/**
	 * Registers an algorithm by name. If the name was already registered, the
	 * algorithm API object will be overwritten.
	 *
	 * @param name the name of the algorithm.
	 * @param algorithm the algorithm API object.
	 */
	forge.cipher.registerAlgorithm = function(name, algorithm) {
	  name = name.toUpperCase();
	  forge.cipher.algorithms[name] = algorithm;
	};

	/**
	 * Gets a registered algorithm by name.
	 *
	 * @param name the name of the algorithm.
	 *
	 * @return the algorithm, if found, null if not.
	 */
	forge.cipher.getAlgorithm = function(name) {
	  name = name.toUpperCase();
	  if(name in forge.cipher.algorithms) {
	    return forge.cipher.algorithms[name];
	  }
	  return null;
	};

	var BlockCipher = forge.cipher.BlockCipher = function(options) {
	  this.algorithm = options.algorithm;
	  this.mode = this.algorithm.mode;
	  this.blockSize = this.mode.blockSize;
	  this._finish = false;
	  this._input = null;
	  this.output = null;
	  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
	  this._decrypt = options.decrypt;
	  this.algorithm.initialize(options);
	};

	/**
	 * Starts or restarts the encryption or decryption process, whichever
	 * was previously configured.
	 *
	 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
	 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
	 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
	 * 32-bit integers, then it must be 4 integers long.
	 *
	 * Note: an IV is not required or used in ECB mode.
	 *
	 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
	 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
	 * by NIST SP-800-38D but another length may be given.
	 *
	 * @param options the options to use:
	 *          iv the initialization vector to use as a binary-encoded string of
	 *            bytes, null to reuse the last ciphered block from a previous
	 *            update() (this "residue" method is for legacy support only).
	 *          additionalData additional authentication data as a binary-encoded
	 *            string of bytes, for 'GCM' mode, (default: none).
	 *          tagLength desired length of authentication tag, in bits, for
	 *            'GCM' mode (0-128, default: 128).
	 *          tag the authentication tag to check if decrypting, as a
	 *             binary-encoded string of bytes.
	 *          output the output the buffer to write to, null to create one.
	 */
	BlockCipher.prototype.start = function(options) {
	  options = options || {};
	  var opts = {};
	  for(var key in options) {
	    opts[key] = options[key];
	  }
	  opts.decrypt = this._decrypt;
	  this._finish = false;
	  this._input = forge.util.createBuffer();
	  this.output = options.output || forge.util.createBuffer();
	  this.mode.start(opts);
	};

	/**
	 * Updates the next block according to the cipher mode.
	 *
	 * @param input the buffer to read from.
	 */
	BlockCipher.prototype.update = function(input) {
	  if(input) {
	    // input given, so empty it into the input buffer
	    this._input.putBuffer(input);
	  }

	  // do cipher operation until it needs more input and not finished
	  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&
	    !this._finish) {}

	  // free consumed memory from input buffer
	  this._input.compact();
	};

	/**
	 * Finishes encrypting or decrypting.
	 *
	 * @param pad a padding function to use in CBC mode, null for default,
	 *          signature(blockSize, buffer, decrypt).
	 *
	 * @return true if successful, false on error.
	 */
	BlockCipher.prototype.finish = function(pad) {
	  // backwards-compatibility w/deprecated padding API
	  // Note: will overwrite padding functions even after another start() call
	  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
	    this.mode.pad = function(input) {
	      return pad(this.blockSize, input, false);
	    };
	    this.mode.unpad = function(output) {
	      return pad(this.blockSize, output, true);
	    };
	  }

	  // build options for padding and afterFinish functions
	  var options = {};
	  options.decrypt = this._decrypt;

	  // get # of bytes that won't fill a block
	  options.overflow = this._input.length() % this.blockSize;

	  if(!this._decrypt && this.mode.pad) {
	    if(!this.mode.pad(this._input, options)) {
	      return false;
	    }
	  }

	  // do final update
	  this._finish = true;
	  this.update();

	  if(this._decrypt && this.mode.unpad) {
	    if(!this.mode.unpad(this.output, options)) {
	      return false;
	    }
	  }

	  if(this.mode.afterFinish) {
	    if(!this.mode.afterFinish(this.output, options)) {
	      return false;
	    }
	  }

	  return true;
	};


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'cipher';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/cipher',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Supported cipher modes.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.cipher = forge.cipher || {};

	// supported cipher modes
	var modes = forge.cipher.modes = forge.cipher.modes || {};


	/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

	modes.ecb = function(options) {
	  options = options || {};
	  this.name = 'ECB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.ecb.prototype.start = function(options) {};

	modes.ecb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.ecb.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};


	/** Cipher-block Chaining (CBC) **/

	modes.cbc = function(options) {
	  options = options || {};
	  this.name = 'CBC';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.cbc.prototype.start = function(options) {
	  // Note: legacy support for using IV residue (has security flaws)
	  // if IV is null, reuse block from previous processing
	  if(options.iv === null) {
	    // must have a previous block
	    if(!this._prev) {
	      throw new Error('Invalid IV parameter.');
	    }
	    this._iv = this._prev.slice(0);
	  } else if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  } else {
	    // save IV as "previous" block
	    this._iv = transformIV(options.iv);
	    this._prev = this._iv.slice(0);
	  }
	};

	modes.cbc.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  // CBC XOR's IV (or previous block) with plaintext
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = this._prev[i] ^ input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output, save previous block
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	  this._prev = this._outBlock;
	};

	modes.cbc.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output, save previous ciphered block
	  // CBC XOR's IV (or previous block) with ciphertext
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._prev[i] ^ this._outBlock[i]);
	  }
	  this._prev = this._inBlock.slice(0);
	};

	modes.cbc.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.cbc.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};


	/** Cipher feedback (CFB) **/

	modes.cfb = function(options) {
	  options = options || {};
	  this.name = 'CFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
	      output.putInt32(this._inBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
	    this._partialOutput.putInt32(this._partialBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32();
	      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32();
	    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	/** Output feedback (OFB) **/

	modes.ofb = function(options) {
	  options = options || {};
	  this.name = 'OFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(input.length() === 0) {
	    return true;
	  }

	  // encrypt block (OFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output and update next input
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	      this._inBlock[i] = this._outBlock[i];
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._outBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;


	/** Counter (CTR) **/

	modes.ctr = function(options) {
	  options = options || {};
	  this.name = 'CTR';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CTR always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes > 0) {
	      // block still incomplete, restore input buffer
	      input.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // block complete, increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;


	/** Galois/Counter Mode (GCM) **/

	modes.gcm = function(options) {
	  options = options || {};
	  this.name = 'GCM';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;

	  // R is actually this value concatenated with 120 more zero bits, but
	  // we only XOR against R so the other zeros have no effect -- we just
	  // apply this value to the first integer in a block
	  this._R = 0xE1000000;
	};

	modes.gcm.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // ensure IV is a byte buffer
	  var iv = forge.util.createBuffer(options.iv);

	  // no ciphered data processed yet
	  this._cipherLength = 0;

	  // default additional data is none
	  var additionalData;
	  if('additionalData' in options) {
	    additionalData = forge.util.createBuffer(options.additionalData);
	  } else {
	    additionalData = forge.util.createBuffer();
	  }

	  // default tag length is 128 bits
	  if('tagLength' in options) {
	    this._tagLength = options.tagLength;
	  } else {
	    this._tagLength = 128;
	  }

	  // if tag is given, ensure tag matches tag length
	  this._tag = null;
	  if(options.decrypt) {
	    // save tag to check later
	    this._tag = forge.util.createBuffer(options.tag).getBytes();
	    if(this._tag.length !== (this._tagLength / 8)) {
	      throw new Error('Authentication tag does not match tag length.');
	    }
	  }

	  // create tmp storage for hash calculation
	  this._hashBlock = new Array(this._ints);

	  // no tag generated yet
	  this.tag = null;

	  // generate hash subkey
	  // (apply block cipher to "zero" block)
	  this._hashSubkey = new Array(this._ints);
	  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

	  // generate table M
	  // use 4-bit tables (32 component decomposition of a 16 byte value)
	  // 8-bit tables take more space and are known to have security
	  // vulnerabilities (in native implementations)
	  this.componentBits = 4;
	  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);

	  // Note: support IV length different from 96 bits? (only supporting
	  // 96 bits is recommended by NIST SP-800-38D)
	  // generate J_0
	  var ivLength = iv.length();
	  if(ivLength === 12) {
	    // 96-bit IV
	    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
	  } else {
	    // IV is NOT 96-bits
	    this._j0 = [0, 0, 0, 0];
	    while(iv.length() > 0) {
	      this._j0 = this.ghash(
	        this._hashSubkey, this._j0,
	        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
	    }
	    this._j0 = this.ghash(
	      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
	  }

	  // generate ICB (initial counter block)
	  this._inBlock = this._j0.slice(0);
	  inc32(this._inBlock);
	  this._partialBytes = 0;

	  // consume authentication data
	  additionalData = forge.util.createBuffer(additionalData);
	  // save additional data length as a BE 64-bit number
	  this._aDataLength = from64To32(additionalData.length() * 8);
	  // pad additional data to 128 bit (16 byte) block size
	  var overflow = additionalData.length() % this.blockSize;
	  if(overflow) {
	    additionalData.fillWithByte(0, this.blockSize - overflow);
	  }
	  this._s = [0, 0, 0, 0];
	  while(additionalData.length() > 0) {
	    this._s = this.ghash(this._hashSubkey, this._s, [
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32()
	    ]);
	  }
	};

	modes.gcm.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(this._outBlock[i] ^= input.getInt32());
	    }
	    this._cipherLength += this.blockSize;
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes === 0 || finish) {
	      // handle overflow prior to hashing
	      if(finish) {
	        // get block overflow
	        var overflow = inputLength % this.blockSize;
	        this._cipherLength += overflow;
	        // truncate for hash function
	        this._partialOutput.truncate(this.blockSize - overflow);
	      } else {
	        this._cipherLength += this.blockSize;
	      }

	      // get output block for hashing
	      for(var i = 0; i < this._ints; ++i) {
	        this._outBlock[i] = this._partialOutput.getInt32();
	      }
	      this._partialOutput.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      // block still incomplete, restore input buffer, get partial output,
	      // and return early
	      input.read -= this.blockSize;
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // update hash block S
	  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.gcm.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {
	    return true;
	  }

	  // encrypt block (GCM always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);

	  // update hash block S
	  this._hashBlock[0] = input.getInt32();
	  this._hashBlock[1] = input.getInt32();
	  this._hashBlock[2] = input.getInt32();
	  this._hashBlock[3] = input.getInt32();
	  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

	  // XOR hash input with output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
	  }

	  // increment cipher data length
	  if(inputLength < this.blockSize) {
	    this._cipherLength += inputLength % this.blockSize;
	  } else {
	    this._cipherLength += this.blockSize;
	  }
	};

	modes.gcm.prototype.afterFinish = function(output, options) {
	  var rval = true;

	  // handle overflow
	  if(options.decrypt && options.overflow) {
	    output.truncate(this.blockSize - options.overflow);
	  }

	  // handle authentication tag
	  this.tag = forge.util.createBuffer();

	  // concatenate additional data length with cipher length
	  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));

	  // include lengths in hash
	  this._s = this.ghash(this._hashSubkey, this._s, lengths);

	  // do GCTR(J_0, S)
	  var tag = [];
	  this.cipher.encrypt(this._j0, tag);
	  for(var i = 0; i < this._ints; ++i) {
	    this.tag.putInt32(this._s[i] ^ tag[i]);
	  }

	  // trim tag to length
	  this.tag.truncate(this.tag.length() % (this._tagLength / 8));

	  // check authentication tag
	  if(options.decrypt && this.tag.bytes() !== this._tag) {
	    rval = false;
	  }

	  return rval;
	};

	/**
	 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
	 * field multiplication. The field, GF(2^128), is defined by the polynomial:
	 *
	 * x^128 + x^7 + x^2 + x + 1
	 *
	 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
	 * the value of a coefficient is 1, a bit is set. The value R, is the
	 * concatenation of this value and 120 zero bits, yielding a 128-bit value
	 * which matches the block size.
	 *
	 * This function will multiply two elements (vectors of bytes), X and Y, in
	 * the field GF(2^128). The result is initialized to zero. For each bit of
	 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
	 * by the current value of Y. For each bit, the value of Y will be raised by
	 * a power of x (multiplied by the polynomial x). This can be achieved by
	 * shifting Y once to the right. If the current value of Y, prior to being
	 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
	 * Otherwise, we must divide by R after shifting to find the remainder.
	 *
	 * @param x the first block to multiply by the second.
	 * @param y the second block to multiply by the first.
	 *
	 * @return the block result of the multiplication.
	 */
	modes.gcm.prototype.multiply = function(x, y) {
	  var z_i = [0, 0, 0, 0];
	  var v_i = y.slice(0);

	  // calculate Z_128 (block has 128 bits)
	  for(var i = 0; i < 128; ++i) {
	    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
	    // else Z_{i+1} = Z_i ^ V_i
	    // get x_i by finding 32-bit int position, then left shift 1 by remainder
	    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
	    if(x_i) {
	      z_i[0] ^= v_i[0];
	      z_i[1] ^= v_i[1];
	      z_i[2] ^= v_i[2];
	      z_i[3] ^= v_i[3];
	    }

	    // if LSB(V_i) is 1, V_i = V_i >> 1
	    // else V_i = (V_i >> 1) ^ R
	    this.pow(v_i, v_i);
	  }

	  return z_i;
	};

	modes.gcm.prototype.pow = function(x, out) {
	  // if LSB(x) is 1, x = x >>> 1
	  // else x = (x >>> 1) ^ R
	  var lsb = x[3] & 1;

	  // always do x >>> 1:
	  // starting with the rightmost integer, shift each integer to the right
	  // one bit, pulling in the bit from the integer to the left as its top
	  // most bit (do this for the last 3 integers)
	  for(var i = 3; i > 0; --i) {
	    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
	  }
	  // shift the first integer normally
	  out[0] = x[0] >>> 1;

	  // if lsb was not set, then polynomial had a degree of 127 and doesn't
	  // need to divided; otherwise, XOR with R to find the remainder; we only
	  // need to XOR the first integer since R technically ends w/120 zero bits
	  if(lsb) {
	    out[0] ^= this._R;
	  }
	};

	modes.gcm.prototype.tableMultiply = function(x) {
	  // assumes 4-bit tables are used
	  var z = [0, 0, 0, 0];
	  for(var i = 0; i < 32; ++i) {
	    var idx = (i / 8) | 0;
	    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;
	    var ah = this._m[i][x_i];
	    z[0] ^= ah[0];
	    z[1] ^= ah[1];
	    z[2] ^= ah[2];
	    z[3] ^= ah[3];
	  }
	  return z;
	};

	/**
	 * A continuing version of the GHASH algorithm that operates on a single
	 * block. The hash block, last hash value (Ym) and the new block to hash
	 * are given.
	 *
	 * @param h the hash block.
	 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
	 * @param x the block to hash.
	 *
	 * @return the hashed value (Ym).
	 */
	modes.gcm.prototype.ghash = function(h, y, x) {
	  y[0] ^= x[0];
	  y[1] ^= x[1];
	  y[2] ^= x[2];
	  y[3] ^= x[3];
	  return this.tableMultiply(y);
	  //return this.multiply(y, h);
	};

	/**
	 * Precomputes a table for multiplying against the hash subkey. This
	 * mechanism provides a substantial speed increase over multiplication
	 * performed without a table. The table-based multiplication this table is
	 * for solves X * H by multiplying each component of X by H and then
	 * composing the results together using XOR.
	 *
	 * This function can be used to generate tables with different bit sizes
	 * for the components, however, this implementation assumes there are
	 * 32 components of X (which is a 16 byte vector), therefore each component
	 * takes 4-bits (so the table is constructed with bits=4).
	 *
	 * @param h the hash subkey.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateHashTable = function(h, bits) {
	  // TODO: There are further optimizations that would use only the
	  // first table M_0 (or some variant) along with a remainder table;
	  // this can be explored in the future
	  var multiplier = 8 / bits;
	  var perInt = 4 * multiplier;
	  var size = 16 * multiplier;
	  var m = new Array(size);
	  for(var i = 0; i < size; ++i) {
	    var tmp = [0, 0, 0, 0];
	    var idx = (i / perInt) | 0;
	    var shft = ((perInt - 1 - (i % perInt)) * bits);
	    tmp[idx] = (1 << (bits - 1)) << shft;
	    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
	  }
	  return m;
	};

	/**
	 * Generates a table for multiplying against the hash subkey for one
	 * particular component (out of all possible component values).
	 *
	 * @param mid the pre-multiplied value for the middle key of the table.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
	  // compute the table quickly by minimizing the number of
	  // POW operations -- they only need to be performed for powers of 2,
	  // all other entries can be composed from those powers using XOR
	  var size = 1 << bits;
	  var half = size >>> 1;
	  var m = new Array(size);
	  m[half] = mid.slice(0);
	  var i = half >>> 1;
	  while(i > 0) {
	    // raise m0[2 * i] and store in m0[i]
	    this.pow(m[2 * i], m[i] = []);
	    i >>= 1;
	  }
	  i = 2;
	  while(i < half) {
	    for(var j = 1; j < i; ++j) {
	      var m_i = m[i];
	      var m_j = m[j];
	      m[i + j] = [
	        m_i[0] ^ m_j[0],
	        m_i[1] ^ m_j[1],
	        m_i[2] ^ m_j[2],
	        m_i[3] ^ m_j[3]
	      ];
	    }
	    i *= 2;
	  }
	  m[0] = [0, 0, 0, 0];
	  /* Note: We could avoid storing these by doing composition during multiply
	  calculate top half using composition by speed is preferred. */
	  for(i = half + 1; i < size; ++i) {
	    var c = m[i ^ half];
	    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
	  }
	  return m;
	};


	/** Utility functions */

	function transformIV(iv) {
	  if(typeof iv === 'string') {
	    // convert iv string into byte buffer
	    iv = forge.util.createBuffer(iv);
	  }

	  if(forge.util.isArray(iv) && iv.length > 4) {
	    // convert iv byte array into byte buffer
	    var tmp = iv;
	    iv = forge.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      iv.putByte(tmp[i]);
	    }
	  }
	  if(!forge.util.isArray(iv)) {
	    // convert iv byte buffer into 32-bit integer array
	    iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];
	  }

	  return iv;
	}

	function inc32(block) {
	  // increment last 32 bits of block only
	  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;
	}

	function from64To32(num) {
	  // convert 64-bit number to two BE Int32s
	  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];
	}


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'cipherModes';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/cipherModes',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Advanced Encryption Standard (AES) implementation.
	 *
	 * This implementation is based on the public domain library 'jscrypto' which
	 * was written by:
	 *
	 * Emily Stark (estark@stanford.edu)
	 * Mike Hamburg (mhamburg@stanford.edu)
	 * Dan Boneh (dabo@cs.stanford.edu)
	 *
	 * Parts of this code are based on the OpenSSL implementation of AES:
	 * http://www.openssl.org
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* AES API */
	forge.aes = forge.aes || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.createEncryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.createDecryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new AES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the AES algorithm object.
	 */
	forge.aes.Algorithm = function(name, mode) {
	  if(!init) {
	    initialize();
	  }
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 16,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._w, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._w, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this AES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge.aes.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = options.key;
	  var tmp;

	  /* Note: The key may be a string of bytes, an array of bytes, a byte
	    buffer, or an array of 32-bit integers. If the key is in bytes, then
	    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
	    integers, it must be 4, 6, or 8 integers long. */

	  if(typeof key === 'string' &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key string into byte buffer
	    key = forge.util.createBuffer(key);
	  } else if(forge.util.isArray(key) &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key integer array into byte buffer
	    tmp = key;
	    key = forge.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      key.putByte(tmp[i]);
	    }
	  }

	  // convert key byte buffer into 32-bit integer array
	  if(!forge.util.isArray(key)) {
	    tmp = key;
	    key = [];

	    // key lengths of 16, 24, 32 bytes allowed
	    var len = tmp.length();
	    if(len === 16 || len === 24 || len === 32) {
	      len = len >>> 2;
	      for(var i = 0; i < len; ++i) {
	        key.push(tmp.getInt32());
	      }
	    }
	  }

	  // key must be an array of 32-bit integers by now
	  if(!forge.util.isArray(key) ||
	    !(key.length === 4 || key.length === 6 || key.length === 8)) {
	    throw new Error('Invalid key parameter.');
	  }

	  // encryption operation is always used for these modes
	  var mode = this.mode.name;
	  var encryptOp = (['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1);

	  // do key expansion
	  this._w = _expandKey(key, options.decrypt && !encryptOp);
	  this._init = true;
	};

	/**
	 * Expands a key. Typically only used for testing.
	 *
	 * @param key the symmetric key to expand, as an array of 32-bit words.
	 * @param decrypt true to expand for decryption, false for encryption.
	 *
	 * @return the expanded key.
	 */
	forge.aes._expandKey = function(key, decrypt) {
	  if(!init) {
	    initialize();
	  }
	  return _expandKey(key, decrypt);
	};

	/**
	 * Updates a single block. Typically only used for testing.
	 *
	 * @param w the expanded key to use.
	 * @param input an array of block-size 32-bit words.
	 * @param output an array of block-size 32-bit words.
	 * @param decrypt true to decrypt, false to encrypt.
	 */
	forge.aes._updateBlock = _updateBlock;


	/** Register AES algorithms **/

	registerAlgorithm('AES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('AES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('AES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('AES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('AES-CTR', forge.cipher.modes.ctr);
	registerAlgorithm('AES-GCM', forge.cipher.modes.gcm);

	function registerAlgorithm(name, mode) {
	  var factory = function() {
	    return new forge.aes.Algorithm(name, mode);
	  };
	  forge.cipher.registerAlgorithm(name, factory);
	}


	/** AES implementation **/

	var init = false; // not yet initialized
	var Nb = 4;       // number of words comprising the state (AES = 4)
	var sbox;         // non-linear substitution table used in key expansion
	var isbox;        // inversion of sbox
	var rcon;         // round constant word array
	var mix;          // mix-columns table
	var imix;         // inverse mix-columns table

	/**
	 * Performs initialization, ie: precomputes tables to optimize for speed.
	 *
	 * One way to understand how AES works is to imagine that 'addition' and
	 * 'multiplication' are interfaces that require certain mathematical
	 * properties to hold true (ie: they are associative) but they might have
	 * different implementations and produce different kinds of results ...
	 * provided that their mathematical properties remain true. AES defines
	 * its own methods of addition and multiplication but keeps some important
	 * properties the same, ie: associativity and distributivity. The
	 * explanation below tries to shed some light on how AES defines addition
	 * and multiplication of bytes and 32-bit words in order to perform its
	 * encryption and decryption algorithms.
	 *
	 * The basics:
	 *
	 * The AES algorithm views bytes as binary representations of polynomials
	 * that have either 1 or 0 as the coefficients. It defines the addition
	 * or subtraction of two bytes as the XOR operation. It also defines the
	 * multiplication of two bytes as a finite field referred to as GF(2^8)
	 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
	 * number of elements so GF(2^8) has 256 elements).
	 *
	 * This means that any two bytes can be represented as binary polynomials;
	 * when they multiplied together and modularly reduced by an irreducible
	 * polynomial of the 8th degree, the results are the field GF(2^8). The
	 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
	 * This multiplication is associative with 0x01 as the identity:
	 *
	 * (b * 0x01 = GF(b, 0x01) = b).
	 *
	 * The operation GF(b, 0x02) can be performed at the byte level by left
	 * shifting b once and then XOR'ing it (to perform the modular reduction)
	 * with 0x11b if b is >= 128. Repeated application of the multiplication
	 * of 0x02 can be used to implement the multiplication of any two bytes.
	 *
	 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
	 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
	 * factors can each be multiplied by 0x57 and then added together. To do
	 * the multiplication, values for 0x57 multiplied by each of these 3 factors
	 * can be precomputed and stored in a table. To add them, the values from
	 * the table are XOR'd together.
	 *
	 * AES also defines addition and multiplication of words, that is 4-byte
	 * numbers represented as polynomials of 3 degrees where the coefficients
	 * are the values of the bytes.
	 *
	 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
	 *
	 * Addition is performed by XOR'ing like powers of x. Multiplication
	 * is performed in two steps, the first is an algebriac expansion as
	 * you would do normally (where addition is XOR). But the result is
	 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
	 * next the result is modularly reduced by an AES-specific polynomial of
	 * degree 4 which will always produce a polynomial of less than 4 degrees
	 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
	 *
	 * The modular product of two polynomials 'a' and 'b' is thus:
	 *
	 * d(x) = d3x^3 + d2x^2 + d1x + d0
	 * with
	 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
	 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
	 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
	 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
	 *
	 * As a matrix:
	 *
	 * [d0] = [a0 a3 a2 a1][b0]
	 * [d1]   [a1 a0 a3 a2][b1]
	 * [d2]   [a2 a1 a0 a3][b2]
	 * [d3]   [a3 a2 a1 a0][b3]
	 *
	 * Special polynomials defined by AES (0x02 == {02}):
	 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
	 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
	 *
	 * These polynomials are used in the MixColumns() and InverseMixColumns()
	 * operations, respectively, to cause each element in the state to affect
	 * the output (referred to as diffusing).
	 *
	 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
	 * polynomial x3.
	 *
	 * The ShiftRows() method modifies the last 3 rows in the state (where
	 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
	 * The 1st byte in the second row is moved to the end of the row. The 1st
	 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
	 * 2nd, and 3rd bytes are moved in the fourth row.
	 *
	 * More details on how AES arithmetic works:
	 *
	 * In the polynomial representation of binary numbers, XOR performs addition
	 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
	 * corresponds with the multiplication of polynomials modulo an irreducible
	 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
	 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
	 * an AES-specific irreducible polynomial of degree 8.
	 *
	 * A polynomial is irreducible if its only divisors are one and itself. For
	 * the AES algorithm, this irreducible polynomial is:
	 *
	 * m(x) = x^8 + x^4 + x^3 + x + 1,
	 *
	 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
	 * 100011011 = 283 = 0x11b.
	 *
	 * For example, GF(0x57, 0x83) = 0xc1 because
	 *
	 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
	 * 0x85 = 131 = 10000101 = x^7 + x + 1
	 *
	 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
	 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
	 *    x^7 + x^5 + x^3 + x^2 + x +
	 *    x^6 + x^4 + x^2 + x + 1
	 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
	 *    y modulo (x^8 + x^4 + x^3 + x + 1)
	 * =  x^7 + x^6 + 1.
	 *
	 * The modular reduction by m(x) guarantees the result will be a binary
	 * polynomial of less than degree 8, so that it can fit in a byte.
	 *
	 * The operation to multiply a binary polynomial b with x (the polynomial
	 * x in binary representation is 00000010) is:
	 *
	 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
	 *
	 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
	 * most significant bit is 0 in b) then the result is already reduced. If
	 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
	 *
	 * It follows that multiplication by x (00000010 or 0x02) can be implemented
	 * by performing a left shift followed by a conditional bitwise XOR with
	 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
	 * higher powers of x can be implemented by repeated application of xtime().
	 *
	 * By adding intermediate results, multiplication by any constant can be
	 * implemented. For instance:
	 *
	 * GF(0x57, 0x13) = 0xfe because:
	 *
	 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
	 *
	 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
	 * datatype for b can be larger than 1 byte, so a left shift will not
	 * automatically eliminate bits that overflow a byte ... by XOR'ing the
	 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
	 *
	 * GF(0x57, 0x02) = xtime(0x57) = 0xae
	 * GF(0x57, 0x04) = xtime(0xae) = 0x47
	 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
	 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
	 *
	 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
	 *
	 * And by the distributive property (since XOR is addition and GF() is
	 * multiplication):
	 *
	 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
	 * = 0x57 ^ 0xae ^ 0x07
	 * = 0xfe.
	 */
	function initialize() {
	  init = true;

	  /* Populate the Rcon table. These are the values given by
	    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
	    in the field of GF(2^8), where i starts at 1.

	    rcon[0] = [0x00, 0x00, 0x00, 0x00]
	    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
	    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
	    ...
	    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
	    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

	    We only store the first byte because it is the only one used.
	  */
	  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

	  // compute xtime table which maps i onto GF(i, 0x02)
	  var xtime = new Array(256);
	  for(var i = 0; i < 128; ++i) {
	    xtime[i] = i << 1;
	    xtime[i + 128] = (i + 128) << 1 ^ 0x11B;
	  }

	  // compute all other tables
	  sbox = new Array(256);
	  isbox = new Array(256);
	  mix = new Array(4);
	  imix = new Array(4);
	  for(var i = 0; i < 4; ++i) {
	    mix[i] = new Array(256);
	    imix[i] = new Array(256);
	  }
	  var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
	  for(var i = 0; i < 256; ++i) {
	    /* We need to generate the SubBytes() sbox and isbox tables so that
	      we can perform byte substitutions. This requires us to traverse
	      all of the elements in GF, find their multiplicative inverses,
	      and apply to each the following affine transformation:

	      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
	            b(i + 7) mod 8 ^ ci
	      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
	      ith bit of a byte c with the value {63} or {01100011}.

	      It is possible to traverse every possible value in a Galois field
	      using what is referred to as a 'generator'. There are many
	      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
	      traverse GF we iterate 255 times, multiplying by our generator
	      each time.

	      On each iteration we can determine the multiplicative inverse for
	      the current element.

	      Suppose there is an element in GF 'e'. For a given generator 'g',
	      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
	      out that if use the inverse of a generator as another generator
	      it will produce all of the corresponding multiplicative inverses
	      at the same time. For this reason, we choose 5 as our inverse
	      generator because it only requires 2 multiplies and 1 add and its
	      inverse, 82, requires relatively few operations as well.

	      In order to apply the affine transformation, the multiplicative
	      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
	      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
	      'x'. Then 's' is left shifted and the high bit of 's' is made the
	      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
	      with 's' and stored in 'x'. On each subsequent iteration the same
	      operation is performed. When 4 iterations are complete, 'x' is
	      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
	      For example:

	      s = 01000001
	      x = 01000001

	      iteration 1: s = 10000010, x ^= s
	      iteration 2: s = 00000101, x ^= s
	      iteration 3: s = 00001010, x ^= s
	      iteration 4: s = 00010100, x ^= s
	      x ^= 0x63

	      This can be done with a loop where s = (s << 1) | (s >> 7). However,
	      it can also be done by using a single 16-bit (in this case 32-bit)
	      number 'sx'. Since XOR is an associative operation, we can set 'sx'
	      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
	      The most significant bits will flow into the high 8 bit positions
	      and be correctly XOR'd with one another. All that remains will be
	      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
	      afterwards.

	      At the same time we're populating sbox and isbox we can precompute
	      the multiplication we'll need to do to do MixColumns() later.
	    */

	    // apply affine transformation
	    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
	    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

	    // update tables
	    sbox[e] = sx;
	    isbox[sx] = e;

	    /* Mixing columns is done using matrix multiplication. The columns
	      that are to be mixed are each a single word in the current state.
	      The state has Nb columns (4 columns). Therefore each column is a
	      4 byte word. So to mix the columns in a single column 'c' where
	      its rows are r0, r1, r2, and r3, we use the following matrix
	      multiplication:

	      [2 3 1 1]*[r0,c]=[r'0,c]
	      [1 2 3 1] [r1,c] [r'1,c]
	      [1 1 2 3] [r2,c] [r'2,c]
	      [3 1 1 2] [r3,c] [r'3,c]

	      r0, r1, r2, and r3 are each 1 byte of one of the words in the
	      state (a column). To do matrix multiplication for each mixed
	      column c' we multiply the corresponding row from the left matrix
	      with the corresponding column from the right matrix. In total, we
	      get 4 equations:

	      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
	      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
	      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
	      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

	      As usual, the multiplication is as previously defined and the
	      addition is XOR. In order to optimize mixing columns we can store
	      the multiplication results in tables. If you think of the whole
	      column as a word (it might help to visualize by mentally rotating
	      the equations above by counterclockwise 90 degrees) then you can
	      see that it would be useful to map the multiplications performed on
	      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
	      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
	      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
	      respectively in the middle). This means that a table can be
	      constructed that uses r0 as an index to the word. We can do the
	      same with r1, r2, and r3, creating a total of 4 tables.

	      To construct a full c', we can just look up each byte of c in
	      their respective tables and XOR the results together.

	      Also, to build each table we only have to calculate the word
	      for 2,1,1,3 for every byte ... which we can do on each iteration
	      of this loop since we will iterate over every byte. After we have
	      calculated 2,1,1,3 we can get the results for the other tables
	      by cycling the byte at the end to the beginning. For instance
	      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
	      by moving the right most byte to the left most position just like
	      how you can imagine the 3 moved out of 2,1,1,3 and to the front
	      to produce 3,2,1,1.

	      There is another optimization in that the same multiples of
	      the current element we need in order to advance our generator
	      to the next iteration can be reused in performing the 2,1,1,3
	      calculation. We also calculate the inverse mix column tables,
	      with e,9,d,b being the inverse of 2,1,1,3.

	      When we're done, and we need to actually mix columns, the first
	      byte of each state word should be put through mix[0] (2,1,1,3),
	      the second through mix[1] (3,2,1,1) and so forth. Then they should
	      be XOR'd together to produce the fully mixed column.
	    */

	    // calculate mix and imix table values
	    sx2 = xtime[sx];
	    e2 = xtime[e];
	    e4 = xtime[e2];
	    e8 = xtime[e4];
	    me =
	      (sx2 << 24) ^  // 2
	      (sx << 16) ^   // 1
	      (sx << 8) ^    // 1
	      (sx ^ sx2);    // 3
	    ime =
	      (e2 ^ e4 ^ e8) << 24 ^  // E (14)
	      (e ^ e8) << 16 ^        // 9
	      (e ^ e4 ^ e8) << 8 ^    // D (13)
	      (e ^ e2 ^ e8);          // B (11)
	    // produce each of the mix tables by rotating the 2,1,1,3 value
	    for(var n = 0; n < 4; ++n) {
	      mix[n][e] = me;
	      imix[n][sx] = ime;
	      // cycle the right most byte to the left most position
	      // ie: 2,1,1,3 becomes 3,2,1,1
	      me = me << 24 | me >>> 8;
	      ime = ime << 24 | ime >>> 8;
	    }

	    // get next element and inverse
	    if(e === 0) {
	      // 1 is the inverse of 1
	      e = ei = 1;
	    } else {
	      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
	      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
	      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
	      ei ^= xtime[xtime[ei]];
	    }
	  }
	}

	/**
	 * Generates a key schedule using the AES key expansion algorithm.
	 *
	 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
	 * routine to generate a key schedule. The Key Expansion generates a total
	 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
	 * and each of the Nr rounds requires Nb words of key data. The resulting
	 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
	 * with i in the range 0 ≤ i < Nb(Nr + 1).
	 *
	 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
	 * AES-128 (Nb=4, Nk=4, Nr=10)
	 * AES-192 (Nb=4, Nk=6, Nr=12)
	 * AES-256 (Nb=4, Nk=8, Nr=14)
	 * Note: Nr=Nk+6.
	 *
	 * Nb is the number of columns (32-bit words) comprising the State (or
	 * number of bytes in a block). For AES, Nb=4.
	 *
	 * @param key the key to schedule (as an array of 32-bit words).
	 * @param decrypt true to modify the key schedule to decrypt, false not to.
	 *
	 * @return the generated key schedule.
	 */
	function _expandKey(key, decrypt) {
	  // copy the key's words to initialize the key schedule
	  var w = key.slice(0);

	  /* RotWord() will rotate a word, moving the first byte to the last
	    byte's position (shifting the other bytes left).

	    We will be getting the value of Rcon at i / Nk. 'i' will iterate
	    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
	    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
	    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
	    increase by 1. We use a counter iNk to keep track of this.
	   */

	  // go through the rounds expanding the key
	  var temp, iNk = 1;
	  var Nk = w.length;
	  var Nr1 = Nk + 6 + 1;
	  var end = Nb * Nr1;
	  for(var i = Nk; i < end; ++i) {
	    temp = w[i - 1];
	    if(i % Nk === 0) {
	      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
	      temp =
	        sbox[temp >>> 16 & 255] << 24 ^
	        sbox[temp >>> 8 & 255] << 16 ^
	        sbox[temp & 255] << 8 ^
	        sbox[temp >>> 24] ^ (rcon[iNk] << 24);
	      iNk++;
	    } else if(Nk > 6 && (i % Nk === 4)) {
	      // temp = SubWord(temp)
	      temp =
	        sbox[temp >>> 24] << 24 ^
	        sbox[temp >>> 16 & 255] << 16 ^
	        sbox[temp >>> 8 & 255] << 8 ^
	        sbox[temp & 255];
	    }
	    w[i] = w[i - Nk] ^ temp;
	  }

	   /* When we are updating a cipher block we always use the code path for
	     encryption whether we are decrypting or not (to shorten code and
	     simplify the generation of look up tables). However, because there
	     are differences in the decryption algorithm, other than just swapping
	     in different look up tables, we must transform our key schedule to
	     account for these changes:

	     1. The decryption algorithm gets its key rounds in reverse order.
	     2. The decryption algorithm adds the round key before mixing columns
	       instead of afterwards.

	     We don't need to modify our key schedule to handle the first case,
	     we can just traverse the key schedule in reverse order when decrypting.

	     The second case requires a little work.

	     The tables we built for performing rounds will take an input and then
	     perform SubBytes() and MixColumns() or, for the decrypt version,
	     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
	     us to AddRoundKey() before InvMixColumns(). This means we'll need to
	     apply some transformations to the round key to inverse-mix its columns
	     so they'll be correct for moving AddRoundKey() to after the state has
	     had its columns inverse-mixed.

	     To inverse-mix the columns of the state when we're decrypting we use a
	     lookup table that will apply InvSubBytes() and InvMixColumns() at the
	     same time. However, the round key's bytes are not inverse-substituted
	     in the decryption algorithm. To get around this problem, we can first
	     substitute the bytes in the round key so that when we apply the
	     transformation via the InvSubBytes()+InvMixColumns() table, it will
	     undo our substitution leaving us with the original value that we
	     want -- and then inverse-mix that value.

	     This change will correctly alter our key schedule so that we can XOR
	     each round key with our already transformed decryption state. This
	     allows us to use the same code path as the encryption algorithm.

	     We make one more change to the decryption key. Since the decryption
	     algorithm runs in reverse from the encryption algorithm, we reverse
	     the order of the round keys to avoid having to iterate over the key
	     schedule backwards when running the encryption algorithm later in
	     decryption mode. In addition to reversing the order of the round keys,
	     we also swap each round key's 2nd and 4th rows. See the comments
	     section where rounds are performed for more details about why this is
	     done. These changes are done inline with the other substitution
	     described above.
	  */
	  if(decrypt) {
	    var tmp;
	    var m0 = imix[0];
	    var m1 = imix[1];
	    var m2 = imix[2];
	    var m3 = imix[3];
	    var wnew = w.slice(0);
	    end = w.length;
	    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
	      // do not sub the first or last round key (round keys are Nb
	      // words) as no column mixing is performed before they are added,
	      // but do change the key order
	      if(i === 0 || i === (end - Nb)) {
	        wnew[i] = w[wi];
	        wnew[i + 1] = w[wi + 3];
	        wnew[i + 2] = w[wi + 2];
	        wnew[i + 3] = w[wi + 1];
	      } else {
	        // substitute each round key byte because the inverse-mix
	        // table will inverse-substitute it (effectively cancel the
	        // substitution because round key bytes aren't sub'd in
	        // decryption mode) and swap indexes 3 and 1
	        for(var n = 0; n < Nb; ++n) {
	          tmp = w[wi + n];
	          wnew[i + (3&-n)] =
	            m0[sbox[tmp >>> 24]] ^
	            m1[sbox[tmp >>> 16 & 255]] ^
	            m2[sbox[tmp >>> 8 & 255]] ^
	            m3[sbox[tmp & 255]];
	        }
	      }
	    }
	    w = wnew;
	  }

	  return w;
	}

	/**
	 * Updates a single block (16 bytes) using AES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param w the key schedule.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock(w, input, output, decrypt) {
	  /*
	  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[0, Nb-1])
	    for round = 1 step 1 to Nr–1
	      SubBytes(state)
	      ShiftRows(state)
	      MixColumns(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	    end for
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    out = state
	  end

	  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    for round = Nr-1 step -1 downto 1
	      InvShiftRows(state)
	      InvSubBytes(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	      InvMixColumns(state)
	    end for
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	    out = state
	  end
	  */

	  // Encrypt: AddRoundKey(state, w[0, Nb-1])
	  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	  var Nr = w.length / 4 - 1;
	  var m0, m1, m2, m3, sub;
	  if(decrypt) {
	    m0 = imix[0];
	    m1 = imix[1];
	    m2 = imix[2];
	    m3 = imix[3];
	    sub = isbox;
	  } else {
	    m0 = mix[0];
	    m1 = mix[1];
	    m2 = mix[2];
	    m3 = mix[3];
	    sub = sbox;
	  }
	  var a, b, c, d, a2, b2, c2;
	  a = input[0] ^ w[0];
	  b = input[decrypt ? 3 : 1] ^ w[1];
	  c = input[2] ^ w[2];
	  d = input[decrypt ? 1 : 3] ^ w[3];
	  var i = 3;

	  /* In order to share code we follow the encryption algorithm when both
	    encrypting and decrypting. To account for the changes required in the
	    decryption algorithm, we use different lookup tables when decrypting
	    and use a modified key schedule to account for the difference in the
	    order of transformations applied when performing rounds. We also get
	    key rounds in reverse order (relative to encryption). */
	  for(var round = 1; round < Nr; ++round) {
	    /* As described above, we'll be using table lookups to perform the
	      column mixing. Each column is stored as a word in the state (the
	      array 'input' has one column as a word at each index). In order to
	      mix a column, we perform these transformations on each row in c,
	      which is 1 byte in each word. The new column for c0 is c'0:

	               m0      m1      m2      m3
	      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
	      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
	      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
	      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

	      So using mix tables where c0 is a word with r0 being its upper
	      8 bits and r3 being its lower 8 bits:

	      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
	      ...
	      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

	      Therefore to mix the columns in each word in the state we
	      do the following (& 255 omitted for brevity):
	      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

	      However, before mixing, the algorithm requires us to perform
	      ShiftRows(). The ShiftRows() transformation cyclically shifts the
	      last 3 rows of the state over different offsets. The first row
	      (r = 0) is not shifted.

	      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
	      for 0 < r < 4 and 0 <= c < Nb and
	      shift(1, 4) = 1
	      shift(2, 4) = 2
	      shift(3, 4) = 3.

	      This causes the first byte in r = 1 to be moved to the end of
	      the row, the first 2 bytes in r = 2 to be moved to the end of
	      the row, the first 3 bytes in r = 3 to be moved to the end of
	      the row:

	      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
	      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
	      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

	      We can make these substitutions inline with our column mixing to
	      generate an updated set of equations to produce each word in the
	      state (note the columns have changed positions):

	      c0 c1 c2 c3 => c0 c1 c2 c3
	      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
	      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
	      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

	      Therefore:

	      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
	      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

	      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
	      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

	      ... and so forth for c'2 and c'3. The important distinction is
	      that the columns are cycling, with c0 being used with the m0
	      map when calculating c0, but c1 being used with the m0 map when
	      calculating c1 ... and so forth.

	      When performing the inverse we transform the mirror image and
	      skip the bottom row, instead of the top one, and move upwards:

	      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
	      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
	      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
	      c3 c2 c1 c0    c3 c2 c1 c0

	      If you compare the resulting matrices for ShiftRows()+MixColumns()
	      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
	      different (in encrypt mode vs. decrypt mode). So in order to use
	      the same code to handle both encryption and decryption, we will
	      need to do some mapping.

	      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
	      a row number in the state, then the resulting matrix in encryption
	      mode for applying the above transformations would be:

	      r1: a b c d
	      r2: b c d a
	      r3: c d a b
	      r4: d a b c

	      If we did the same in decryption mode we would get:

	      r1: a d c b
	      r2: b a d c
	      r3: c b a d
	      r4: d c b a

	      If instead we swap d and b (set b=c3 and d=c1), then we get:

	      r1: a b c d
	      r2: d a b c
	      r3: c d a b
	      r4: b c d a

	      Now the 1st and 3rd rows are the same as the encryption matrix. All
	      we need to do then to make the mapping exactly the same is to swap
	      the 2nd and 4th rows when in decryption mode. To do this without
	      having to do it on each iteration, we swapped the 2nd and 4th rows
	      in the decryption key schedule. We also have to do the swap above
	      when we first pull in the input and when we set the final output. */
	    a2 =
	      m0[a >>> 24] ^
	      m1[b >>> 16 & 255] ^
	      m2[c >>> 8 & 255] ^
	      m3[d & 255] ^ w[++i];
	    b2 =
	      m0[b >>> 24] ^
	      m1[c >>> 16 & 255] ^
	      m2[d >>> 8 & 255] ^
	      m3[a & 255] ^ w[++i];
	    c2 =
	      m0[c >>> 24] ^
	      m1[d >>> 16 & 255] ^
	      m2[a >>> 8 & 255] ^
	      m3[b & 255] ^ w[++i];
	    d =
	      m0[d >>> 24] ^
	      m1[a >>> 16 & 255] ^
	      m2[b >>> 8 & 255] ^
	      m3[c & 255] ^ w[++i];
	    a = a2;
	    b = b2;
	    c = c2;
	  }

	  /*
	    Encrypt:
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

	    Decrypt:
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	   */
	   // Note: rows are shifted inline
	  output[0] =
	    (sub[a >>> 24] << 24) ^
	    (sub[b >>> 16 & 255] << 16) ^
	    (sub[c >>> 8 & 255] << 8) ^
	    (sub[d & 255]) ^ w[++i];
	  output[decrypt ? 3 : 1] =
	    (sub[b >>> 24] << 24) ^
	    (sub[c >>> 16 & 255] << 16) ^
	    (sub[d >>> 8 & 255] << 8) ^
	    (sub[a & 255]) ^ w[++i];
	  output[2] =
	    (sub[c >>> 24] << 24) ^
	    (sub[d >>> 16 & 255] << 16) ^
	    (sub[a >>> 8 & 255] << 8) ^
	    (sub[b & 255]) ^ w[++i];
	  output[decrypt ? 1 : 3] =
	    (sub[d >>> 24] << 24) ^
	    (sub[a >>> 16 & 255] << 16) ^
	    (sub[b >>> 8 & 255] << 8) ^
	    (sub[c & 255]) ^ w[++i];
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('AES-<mode>', key);
	 * forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates a deprecated AES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use.
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'AES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'aes';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/aes',['require', 'module', './cipher', './cipherModes', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Object IDs for ASN.1.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.pki = forge.pki || {};
	var oids = forge.pki.oids = forge.oids = forge.oids || {};

	// algorithm OIDs
	oids['1.2.840.113549.1.1.1'] = 'rsaEncryption';
	oids['rsaEncryption'] = '1.2.840.113549.1.1.1';
	// Note: md2 & md4 not implemented
	//oids['1.2.840.113549.1.1.2'] = 'md2WithRSAEncryption';
	//oids['md2WithRSAEncryption'] = '1.2.840.113549.1.1.2';
	//oids['1.2.840.113549.1.1.3'] = 'md4WithRSAEncryption';
	//oids['md4WithRSAEncryption'] = '1.2.840.113549.1.1.3';
	oids['1.2.840.113549.1.1.4'] = 'md5WithRSAEncryption';
	oids['md5WithRSAEncryption'] = '1.2.840.113549.1.1.4';
	oids['1.2.840.113549.1.1.5'] = 'sha1WithRSAEncryption';
	oids['sha1WithRSAEncryption'] = '1.2.840.113549.1.1.5';
	oids['1.2.840.113549.1.1.7'] = 'RSAES-OAEP';
	oids['RSAES-OAEP'] = '1.2.840.113549.1.1.7';
	oids['1.2.840.113549.1.1.8'] = 'mgf1';
	oids['mgf1'] = '1.2.840.113549.1.1.8';
	oids['1.2.840.113549.1.1.9'] = 'pSpecified';
	oids['pSpecified'] = '1.2.840.113549.1.1.9';
	oids['1.2.840.113549.1.1.10'] = 'RSASSA-PSS';
	oids['RSASSA-PSS'] = '1.2.840.113549.1.1.10';
	oids['1.2.840.113549.1.1.11'] = 'sha256WithRSAEncryption';
	oids['sha256WithRSAEncryption'] = '1.2.840.113549.1.1.11';
	oids['1.2.840.113549.1.1.12'] = 'sha384WithRSAEncryption';
	oids['sha384WithRSAEncryption'] = '1.2.840.113549.1.1.12';
	oids['1.2.840.113549.1.1.13'] = 'sha512WithRSAEncryption';
	oids['sha512WithRSAEncryption'] = '1.2.840.113549.1.1.13';

	oids['1.3.14.3.2.7'] = 'desCBC';
	oids['desCBC'] = '1.3.14.3.2.7';

	oids['1.3.14.3.2.26'] = 'sha1';
	oids['sha1'] = '1.3.14.3.2.26';
	oids['2.16.840.1.101.3.4.2.1'] = 'sha256';
	oids['sha256'] = '2.16.840.1.101.3.4.2.1';
	oids['2.16.840.1.101.3.4.2.2'] = 'sha384';
	oids['sha384'] = '2.16.840.1.101.3.4.2.2';
	oids['2.16.840.1.101.3.4.2.3'] = 'sha512';
	oids['sha512'] = '2.16.840.1.101.3.4.2.3';
	oids['1.2.840.113549.2.5'] = 'md5';
	oids['md5'] = '1.2.840.113549.2.5';

	// pkcs#7 content types
	oids['1.2.840.113549.1.7.1'] = 'data';
	oids['data'] = '1.2.840.113549.1.7.1';
	oids['1.2.840.113549.1.7.2'] = 'signedData';
	oids['signedData'] = '1.2.840.113549.1.7.2';
	oids['1.2.840.113549.1.7.3'] = 'envelopedData';
	oids['envelopedData'] = '1.2.840.113549.1.7.3';
	oids['1.2.840.113549.1.7.4'] = 'signedAndEnvelopedData';
	oids['signedAndEnvelopedData'] = '1.2.840.113549.1.7.4';
	oids['1.2.840.113549.1.7.5'] = 'digestedData';
	oids['digestedData'] = '1.2.840.113549.1.7.5';
	oids['1.2.840.113549.1.7.6'] = 'encryptedData';
	oids['encryptedData'] = '1.2.840.113549.1.7.6';

	// pkcs#9 oids
	oids['1.2.840.113549.1.9.1'] = 'emailAddress';
	oids['emailAddress'] = '1.2.840.113549.1.9.1';
	oids['1.2.840.113549.1.9.2'] = 'unstructuredName';
	oids['unstructuredName'] = '1.2.840.113549.1.9.2';
	oids['1.2.840.113549.1.9.3'] = 'contentType';
	oids['contentType'] = '1.2.840.113549.1.9.3';
	oids['1.2.840.113549.1.9.4'] = 'messageDigest';
	oids['messageDigest'] = '1.2.840.113549.1.9.4';
	oids['1.2.840.113549.1.9.5'] = 'signingTime';
	oids['signingTime'] = '1.2.840.113549.1.9.5';
	oids['1.2.840.113549.1.9.6'] = 'counterSignature';
	oids['counterSignature'] = '1.2.840.113549.1.9.6';
	oids['1.2.840.113549.1.9.7'] = 'challengePassword';
	oids['challengePassword'] = '1.2.840.113549.1.9.7';
	oids['1.2.840.113549.1.9.8'] = 'unstructuredAddress';
	oids['unstructuredAddress'] = '1.2.840.113549.1.9.8';
	oids['1.2.840.113549.1.9.14'] = 'extensionRequest';
	oids['extensionRequest'] = '1.2.840.113549.1.9.14';

	oids['1.2.840.113549.1.9.20'] = 'friendlyName';
	oids['friendlyName'] = '1.2.840.113549.1.9.20';
	oids['1.2.840.113549.1.9.21'] = 'localKeyId';
	oids['localKeyId'] = '1.2.840.113549.1.9.21';
	oids['1.2.840.113549.1.9.22.1'] = 'x509Certificate';
	oids['x509Certificate'] = '1.2.840.113549.1.9.22.1';

	// pkcs#12 safe bags
	oids['1.2.840.113549.1.12.10.1.1'] = 'keyBag';
	oids['keyBag'] = '1.2.840.113549.1.12.10.1.1';
	oids['1.2.840.113549.1.12.10.1.2'] = 'pkcs8ShroudedKeyBag';
	oids['pkcs8ShroudedKeyBag'] = '1.2.840.113549.1.12.10.1.2';
	oids['1.2.840.113549.1.12.10.1.3'] = 'certBag';
	oids['certBag'] = '1.2.840.113549.1.12.10.1.3';
	oids['1.2.840.113549.1.12.10.1.4'] = 'crlBag';
	oids['crlBag'] = '1.2.840.113549.1.12.10.1.4';
	oids['1.2.840.113549.1.12.10.1.5'] = 'secretBag';
	oids['secretBag'] = '1.2.840.113549.1.12.10.1.5';
	oids['1.2.840.113549.1.12.10.1.6'] = 'safeContentsBag';
	oids['safeContentsBag'] = '1.2.840.113549.1.12.10.1.6';

	// password-based-encryption for pkcs#12
	oids['1.2.840.113549.1.5.13'] = 'pkcs5PBES2';
	oids['pkcs5PBES2'] = '1.2.840.113549.1.5.13';
	oids['1.2.840.113549.1.5.12'] = 'pkcs5PBKDF2';
	oids['pkcs5PBKDF2'] = '1.2.840.113549.1.5.12';

	oids['1.2.840.113549.1.12.1.1'] = 'pbeWithSHAAnd128BitRC4';
	oids['pbeWithSHAAnd128BitRC4'] = '1.2.840.113549.1.12.1.1';
	oids['1.2.840.113549.1.12.1.2'] = 'pbeWithSHAAnd40BitRC4';
	oids['pbeWithSHAAnd40BitRC4'] = '1.2.840.113549.1.12.1.2';
	oids['1.2.840.113549.1.12.1.3'] = 'pbeWithSHAAnd3-KeyTripleDES-CBC';
	oids['pbeWithSHAAnd3-KeyTripleDES-CBC'] = '1.2.840.113549.1.12.1.3';
	oids['1.2.840.113549.1.12.1.4'] = 'pbeWithSHAAnd2-KeyTripleDES-CBC';
	oids['pbeWithSHAAnd2-KeyTripleDES-CBC'] = '1.2.840.113549.1.12.1.4';
	oids['1.2.840.113549.1.12.1.5'] = 'pbeWithSHAAnd128BitRC2-CBC';
	oids['pbeWithSHAAnd128BitRC2-CBC'] = '1.2.840.113549.1.12.1.5';
	oids['1.2.840.113549.1.12.1.6'] = 'pbewithSHAAnd40BitRC2-CBC';
	oids['pbewithSHAAnd40BitRC2-CBC'] = '1.2.840.113549.1.12.1.6';

	// symmetric key algorithm oids
	oids['1.2.840.113549.3.7'] = 'des-EDE3-CBC';
	oids['des-EDE3-CBC'] = '1.2.840.113549.3.7';
	oids['2.16.840.1.101.3.4.1.2'] = 'aes128-CBC';
	oids['aes128-CBC'] = '2.16.840.1.101.3.4.1.2';
	oids['2.16.840.1.101.3.4.1.22'] = 'aes192-CBC';
	oids['aes192-CBC'] = '2.16.840.1.101.3.4.1.22';
	oids['2.16.840.1.101.3.4.1.42'] = 'aes256-CBC';
	oids['aes256-CBC'] = '2.16.840.1.101.3.4.1.42';

	// certificate issuer/subject OIDs
	oids['2.5.4.3'] = 'commonName';
	oids['commonName'] = '2.5.4.3';
	oids['2.5.4.5'] = 'serialName';
	oids['serialName'] = '2.5.4.5';
	oids['2.5.4.6'] = 'countryName';
	oids['countryName'] = '2.5.4.6';
	oids['2.5.4.7'] = 'localityName';
	oids['localityName'] = '2.5.4.7';
	oids['2.5.4.8'] = 'stateOrProvinceName';
	oids['stateOrProvinceName'] = '2.5.4.8';
	oids['2.5.4.10'] = 'organizationName';
	oids['organizationName'] = '2.5.4.10';
	oids['2.5.4.11'] = 'organizationalUnitName';
	oids['organizationalUnitName'] = '2.5.4.11';

	// X.509 extension OIDs
	oids['2.16.840.1.113730.1.1'] = 'nsCertType';
	oids['nsCertType'] = '2.16.840.1.113730.1.1';
	oids['2.5.29.1'] = 'authorityKeyIdentifier'; // deprecated, use .35
	oids['2.5.29.2'] = 'keyAttributes'; // obsolete use .37 or .15
	oids['2.5.29.3'] = 'certificatePolicies'; // deprecated, use .32
	oids['2.5.29.4'] = 'keyUsageRestriction'; // obsolete use .37 or .15
	oids['2.5.29.5'] = 'policyMapping'; // deprecated use .33
	oids['2.5.29.6'] = 'subtreesConstraint'; // obsolete use .30
	oids['2.5.29.7'] = 'subjectAltName'; // deprecated use .17
	oids['2.5.29.8'] = 'issuerAltName'; // deprecated use .18
	oids['2.5.29.9'] = 'subjectDirectoryAttributes';
	oids['2.5.29.10'] = 'basicConstraints'; // deprecated use .19
	oids['2.5.29.11'] = 'nameConstraints'; // deprecated use .30
	oids['2.5.29.12'] = 'policyConstraints'; // deprecated use .36
	oids['2.5.29.13'] = 'basicConstraints'; // deprecated use .19
	oids['2.5.29.14'] = 'subjectKeyIdentifier';
	oids['subjectKeyIdentifier'] = '2.5.29.14';
	oids['2.5.29.15'] = 'keyUsage';
	oids['keyUsage'] = '2.5.29.15';
	oids['2.5.29.16'] = 'privateKeyUsagePeriod';
	oids['2.5.29.17'] = 'subjectAltName';
	oids['subjectAltName'] = '2.5.29.17';
	oids['2.5.29.18'] = 'issuerAltName';
	oids['issuerAltName'] = '2.5.29.18';
	oids['2.5.29.19'] = 'basicConstraints';
	oids['basicConstraints'] = '2.5.29.19';
	oids['2.5.29.20'] = 'cRLNumber';
	oids['2.5.29.21'] = 'cRLReason';
	oids['2.5.29.22'] = 'expirationDate';
	oids['2.5.29.23'] = 'instructionCode';
	oids['2.5.29.24'] = 'invalidityDate';
	oids['2.5.29.25'] = 'cRLDistributionPoints'; // deprecated use .31
	oids['2.5.29.26'] = 'issuingDistributionPoint'; // deprecated use .28
	oids['2.5.29.27'] = 'deltaCRLIndicator';
	oids['2.5.29.28'] = 'issuingDistributionPoint';
	oids['2.5.29.29'] = 'certificateIssuer';
	oids['2.5.29.30'] = 'nameConstraints';
	oids['2.5.29.31'] = 'cRLDistributionPoints';
	oids['2.5.29.32'] = 'certificatePolicies';
	oids['2.5.29.33'] = 'policyMappings';
	oids['2.5.29.34'] = 'policyConstraints'; // deprecated use .36
	oids['2.5.29.35'] = 'authorityKeyIdentifier';
	oids['2.5.29.36'] = 'policyConstraints';
	oids['2.5.29.37'] = 'extKeyUsage';
	oids['extKeyUsage'] = '2.5.29.37';
	oids['2.5.29.46'] = 'freshestCRL';
	oids['2.5.29.54'] = 'inhibitAnyPolicy';

	// extKeyUsage purposes
	oids['1.3.6.1.5.5.7.3.1'] = 'serverAuth';
	oids['serverAuth'] = '1.3.6.1.5.5.7.3.1';
	oids['1.3.6.1.5.5.7.3.2'] = 'clientAuth';
	oids['clientAuth'] = '1.3.6.1.5.5.7.3.2';
	oids['1.3.6.1.5.5.7.3.3'] = 'codeSigning';
	oids['codeSigning'] = '1.3.6.1.5.5.7.3.3';
	oids['1.3.6.1.5.5.7.3.4'] = 'emailProtection';
	oids['emailProtection'] = '1.3.6.1.5.5.7.3.4';
	oids['1.3.6.1.5.5.7.3.8'] = 'timeStamping';
	oids['timeStamping'] = '1.3.6.1.5.5.7.3.8';

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'oids';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/oids',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of Abstract Syntax Notation Number One.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 *
	 * An API for storing data using the Abstract Syntax Notation Number One
	 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
	 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
	 * implementation exists for that purpose.
	 *
	 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
	 * syntax of information without restricting the way the information is encoded
	 * for transmission. It provides a standard that allows for open systems
	 * communication. ASN.1 defines the syntax of information data and a number of
	 * simple data types as well as a notation for describing them and specifying
	 * values for them.
	 *
	 * The RSA algorithm creates public and private keys that are often stored in
	 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
	 * class provides the most basic functionality required to store and load DSA
	 * keys that are encoded according to ASN.1.
	 *
	 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
	 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
	 * has stricter requirements for how data must be encoded.
	 *
	 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
	 * and a byte array for the value of this ASN1 structure which may be data or a
	 * list of ASN.1 structures.
	 *
	 * Each ASN.1 structure using BER is (Tag-Length-Value):
	 *
	 * | byte 0 | bytes X | bytes Y |
	 * |--------|---------|----------
	 * |  tag   | length  |  value  |
	 *
	 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
	 * be two or more octets, but that is not supported by this class. A tag is
	 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
	 * particular 'class'), 6 indicates whether or not the ASN.1 value is
	 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
	 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
	 * then the class is APPLICATION. If only bit 8 is set, then the class is
	 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
	 * The tag numbers for the data types for the class UNIVERSAL are listed below:
	 *
	 * UNIVERSAL 0 Reserved for use by the encoding rules
	 * UNIVERSAL 1 Boolean type
	 * UNIVERSAL 2 Integer type
	 * UNIVERSAL 3 Bitstring type
	 * UNIVERSAL 4 Octetstring type
	 * UNIVERSAL 5 Null type
	 * UNIVERSAL 6 Object identifier type
	 * UNIVERSAL 7 Object descriptor type
	 * UNIVERSAL 8 External type and Instance-of type
	 * UNIVERSAL 9 Real type
	 * UNIVERSAL 10 Enumerated type
	 * UNIVERSAL 11 Embedded-pdv type
	 * UNIVERSAL 12 UTF8String type
	 * UNIVERSAL 13 Relative object identifier type
	 * UNIVERSAL 14-15 Reserved for future editions
	 * UNIVERSAL 16 Sequence and Sequence-of types
	 * UNIVERSAL 17 Set and Set-of types
	 * UNIVERSAL 18-22, 25-30 Character string types
	 * UNIVERSAL 23-24 Time types
	 *
	 * The length of an ASN.1 structure is specified after the tag identifier.
	 * There is a definite form and an indefinite form. The indefinite form may
	 * be used if the encoding is constructed and not all immediately available.
	 * The indefinite form is encoded using a length byte with only the 8th bit
	 * set. The end of the constructed object is marked using end-of-contents
	 * octets (two zero bytes).
	 *
	 * The definite form looks like this:
	 *
	 * The length may take up 1 or more bytes, it depends on the length of the
	 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
	 * structure has a value that has a length greater than 127, more than 1 byte
	 * will be used to store its length, otherwise just one byte will be used.
	 * This is strict.
	 *
	 * In the case that the length of the ASN.1 value is less than 127, 1 octet
	 * (byte) is used to store the "short form" length. The 8th bit has a value of
	 * 0 indicating the length is "short form" and not "long form" and bits 7-1
	 * give the length of the data. (The 8th bit is the left-most, most significant
	 * bit: also known as big endian or network format).
	 *
	 * In the case that the length of the ASN.1 value is greater than 127, 2 to
	 * 127 octets (bytes) are used to store the "long form" length. The first
	 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
	 * give the number of additional octets. All following octets are in base 256
	 * with the most significant digit first (typical big-endian binary unsigned
	 * integer storage). So, for instance, if the length of a value was 257, the
	 * first byte would be set to:
	 *
	 * 10000010 = 130 = 0x82.
	 *
	 * This indicates there are 2 octets (base 256) for the length. The second and
	 * third bytes (the octets just mentioned) would store the length in base 256:
	 *
	 * octet 2: 00000001 = 1 * 256^1 = 256
	 * octet 3: 00000001 = 1 * 256^0 = 1
	 * total = 257
	 *
	 * The algorithm for converting a js integer value of 257 to base-256 is:
	 *
	 * var value = 257;
	 * var bytes = [];
	 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
	 * bytes[1] = value & 0xFF;        // least significant byte last
	 *
	 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
	 *
	 * An OID can be written like: "value1.value2.value3...valueN"
	 *
	 * The DER encoding rules:
	 *
	 * The first byte has the value 40 * value1 + value2.
	 * The following bytes, if any, encode the remaining values. Each value is
	 * encoded in base 128, most significant digit first (big endian), with as
	 * few digits as possible, and the most significant bit of each byte set
	 * to 1 except the last in each value's encoding. For example: Given the
	 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
	 * last one in each encoding is OR'd with 0x80):
	 *
	 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
	 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
	 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
	 *
	 * The final value is: 0x2A864886F70D.
	 * The full OID (including ASN.1 tag and length of 6 bytes) is:
	 * 0x06062A864886F70D
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* ASN.1 API */
	var asn1 = forge.asn1 = forge.asn1 || {};

	/**
	 * ASN.1 classes.
	 */
	asn1.Class = {
	  UNIVERSAL:        0x00,
	  APPLICATION:      0x40,
	  CONTEXT_SPECIFIC: 0x80,
	  PRIVATE:          0xC0
	};

	/**
	 * ASN.1 types. Not all types are supported by this implementation, only
	 * those necessary to implement a simple PKI are implemented.
	 */
	asn1.Type = {
	  NONE:             0,
	  BOOLEAN:          1,
	  INTEGER:          2,
	  BITSTRING:        3,
	  OCTETSTRING:      4,
	  NULL:             5,
	  OID:              6,
	  ODESC:            7,
	  EXTERNAL:         8,
	  REAL:             9,
	  ENUMERATED:      10,
	  EMBEDDED:        11,
	  UTF8:            12,
	  ROID:            13,
	  SEQUENCE:        16,
	  SET:             17,
	  PRINTABLESTRING: 19,
	  IA5STRING:       22,
	  UTCTIME:         23,
	  GENERALIZEDTIME: 24,
	  BMPSTRING:       30
	};

	/**
	 * Creates a new asn1 object.
	 *
	 * @param tagClass the tag class for the object.
	 * @param type the data type (tag number) for the object.
	 * @param constructed true if the asn1 object is in constructed form.
	 * @param value the value for the object, if it is not constructed.
	 *
	 * @return the asn1 object.
	 */
	asn1.create = function(tagClass, type, constructed, value) {
	  /* An asn1 object has a tagClass, a type, a constructed flag, and a
	    value. The value's type depends on the constructed flag. If
	    constructed, it will contain a list of other asn1 objects. If not,
	    it will contain the ASN.1 value as an array of bytes formatted
	    according to the ASN.1 data type. */

	  // remove undefined values
	  if(forge.util.isArray(value)) {
	    var tmp = [];
	    for(var i = 0; i < value.length; ++i) {
	      if(value[i] !== undefined) {
	        tmp.push(value[i]);
	      }
	    }
	    value = tmp;
	  }

	  return {
	    tagClass: tagClass,
	    type: type,
	    constructed: constructed,
	    composed: constructed || forge.util.isArray(value),
	    value: value
	  };
	};

	/**
	 * Gets the length of a BER-encoded ASN.1 value.
	 *
	 * In case the length is not specified, undefined is returned.
	 *
	 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
	 *          length byte.
	 *
	 * @return the length of the BER-encoded ASN.1 value or undefined.
	 */
	var _getValueLength = asn1.getBerValueLength = function(b) {
	  // TODO: move this function and related DER/BER functions to a der.js
	  // file; better abstract ASN.1 away from der/ber.
	  var b2 = b.getByte();
	  if(b2 === 0x80) {
	    return undefined;
	  }

	  // see if the length is "short form" or "long form" (bit 8 set)
	  var length;
	  var longForm = b2 & 0x80;
	  if(!longForm) {
	    // length is just the first byte
	    length = b2;
	  } else {
	    // the number of bytes the length is specified in bits 7 through 1
	    // and each length byte is in big-endian base-256
	    length = b.getInt((b2 & 0x7F) << 3);
	  }
	  return length;
	};

	/**
	 * Parses an asn1 object from a byte buffer in DER format.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param strict true to be strict when checking value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the parsed asn1 object.
	 */
	asn1.fromDer = function(bytes, strict) {
	  if(strict === undefined) {
	    strict = true;
	  }

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  // minimum length for ASN.1 DER structure is 2
	  if(bytes.length() < 2) {
	    var error = new Error('Too few bytes to parse DER.');
	    error.bytes = bytes.length();
	    throw error;
	  }

	  // get the first byte
	  var b1 = bytes.getByte();

	  // get the tag class
	  var tagClass = (b1 & 0xC0);

	  // get the type (bits 1-5)
	  var type = b1 & 0x1F;

	  // get the value length
	  var length = _getValueLength(bytes);

	  // ensure there are enough bytes to get the value
	  if(bytes.length() < length) {
	    if(strict) {
	      var error = new Error('Too few bytes to read ASN.1 value.');
	      error.detail = bytes.length() + ' < ' + length;
	      throw error;
	    }
	    // Note: be lenient with truncated values
	    length = bytes.length();
	  }

	  // prepare to get value
	  var value;

	  // constructed flag is bit 6 (32 = 0x20) of the first byte
	  var constructed = ((b1 & 0x20) === 0x20);

	  // determine if the value is composed of other ASN.1 objects (if its
	  // constructed it will be and if its a BITSTRING it may be)
	  var composed = constructed;
	  if(!composed && tagClass === asn1.Class.UNIVERSAL &&
	    type === asn1.Type.BITSTRING && length > 1) {
	    /* The first octet gives the number of bits by which the length of the
	      bit string is less than the next multiple of eight (this is called
	      the "number of unused bits").

	      The second and following octets give the value of the bit string
	      converted to an octet string. */
	    // if there are no unused bits, maybe the bitstring holds ASN.1 objs
	    var read = bytes.read;
	    var unused = bytes.getByte();
	    if(unused === 0) {
	      // if the first byte indicates UNIVERSAL or CONTEXT_SPECIFIC,
	      // and the length is valid, assume we've got an ASN.1 object
	      b1 = bytes.getByte();
	      var tc = (b1 & 0xC0);
	      if(tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC) {
	        try {
	          var len = _getValueLength(bytes);
	          composed = (len === length - (bytes.read - read));
	          if(composed) {
	            // adjust read/length to account for unused bits byte
	            ++read;
	            --length;
	          }
	        } catch(ex) {}
	      }
	    }
	    // restore read pointer
	    bytes.read = read;
	  }

	  if(composed) {
	    // parse child asn1 objects from the value
	    value = [];
	    if(length === undefined) {
	      // asn1 object of indefinite length, read until end tag
	      for(;;) {
	        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {
	          bytes.getBytes(2);
	          break;
	        }
	        value.push(asn1.fromDer(bytes, strict));
	      }
	    } else {
	      // parsing asn1 object of definite length
	      var start = bytes.length();
	      while(length > 0) {
	        value.push(asn1.fromDer(bytes, strict));
	        length -= start - bytes.length();
	        start = bytes.length();
	      }
	    }
	  } else {
	    // asn1 not composed, get raw value
	    // TODO: do DER to OID conversion and vice-versa in .toDer?

	    if(length === undefined) {
	      if(strict) {
	        throw new Error('Non-constructed ASN.1 object of indefinite length.');
	      }
	      // be lenient and use remaining bytes
	      length = bytes.length();
	    }

	    if(type === asn1.Type.BMPSTRING) {
	      value = '';
	      for(var i = 0; i < length; i += 2) {
	        value += String.fromCharCode(bytes.getInt16());
	      }
	    } else {
	      value = bytes.getBytes(length);
	    }
	  }

	  // create and return asn1 object
	  return asn1.create(tagClass, type, constructed, value);
	};

	/**
	 * Converts the given asn1 object to a buffer of bytes in DER format.
	 *
	 * @param asn1 the asn1 object to convert to bytes.
	 *
	 * @return the buffer of bytes.
	 */
	asn1.toDer = function(obj) {
	  var bytes = forge.util.createBuffer();

	  // build the first byte
	  var b1 = obj.tagClass | obj.type;

	  // for storing the ASN.1 value
	  var value = forge.util.createBuffer();

	  // if composed, use each child asn1 object's DER bytes as value
	  if(obj.composed) {
	    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
	    // from other asn1 objects
	    if(obj.constructed) {
	      b1 |= 0x20;
	    } else {
	      // type is a bit string, add unused bits of 0x00
	      value.putByte(0x00);
	    }

	    // add all of the child DER bytes together
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        value.putBuffer(asn1.toDer(obj.value[i]));
	      }
	    }
	  } else {
	    // use asn1.value directly
	    if(obj.type === asn1.Type.BMPSTRING) {
	      for(var i = 0; i < obj.value.length; ++i) {
	        value.putInt16(obj.value.charCodeAt(i));
	      }
	    } else {
	      value.putBytes(obj.value);
	    }
	  }

	  // add tag byte
	  bytes.putByte(b1);

	  // use "short form" encoding
	  if(value.length() <= 127) {
	    // one byte describes the length
	    // bit 8 = 0 and bits 7-1 = length
	    bytes.putByte(value.length() & 0x7F);
	  } else {
	    // use "long form" encoding
	    // 2 to 127 bytes describe the length
	    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
	    // other bytes: length in base 256, big-endian
	    var len = value.length();
	    var lenBytes = '';
	    do {
	      lenBytes += String.fromCharCode(len & 0xFF);
	      len = len >>> 8;
	    } while(len > 0);

	    // set first byte to # bytes used to store the length and turn on
	    // bit 8 to indicate long-form length is used
	    bytes.putByte(lenBytes.length | 0x80);

	    // concatenate length bytes in reverse since they were generated
	    // little endian and we need big endian
	    for(var i = lenBytes.length - 1; i >= 0; --i) {
	      bytes.putByte(lenBytes.charCodeAt(i));
	    }
	  }

	  // concatenate value bytes
	  bytes.putBuffer(value);
	  return bytes;
	};

	/**
	 * Converts an OID dot-separated string to a byte buffer. The byte buffer
	 * contains only the DER-encoded value, not any tag or length bytes.
	 *
	 * @param oid the OID dot-separated string.
	 *
	 * @return the byte buffer.
	 */
	asn1.oidToDer = function(oid) {
	  // split OID into individual values
	  var values = oid.split('.');
	  var bytes = forge.util.createBuffer();

	  // first byte is 40 * value1 + value2
	  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var last, valueBytes, value, b;
	  for(var i = 2; i < values.length; ++i) {
	    // produce value bytes in reverse because we don't know how many
	    // bytes it will take to store the value
	    last = true;
	    valueBytes = [];
	    value = parseInt(values[i], 10);
	    do {
	      b = value & 0x7F;
	      value = value >>> 7;
	      // if value is not last, then turn on 8th bit
	      if(!last) {
	        b |= 0x80;
	      }
	      valueBytes.push(b);
	      last = false;
	    } while(value > 0);

	    // add value bytes in reverse (needs to be in big endian)
	    for(var n = valueBytes.length - 1; n >= 0; --n) {
	      bytes.putByte(valueBytes[n]);
	    }
	  }

	  return bytes;
	};

	/**
	 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
	 * byte buffer should contain only the DER-encoded value, not any tag or
	 * length bytes.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the OID dot-separated string.
	 */
	asn1.derToOid = function(bytes) {
	  var oid;

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  // first byte is 40 * value1 + value2
	  var b = bytes.getByte();
	  oid = Math.floor(b / 40) + '.' + (b % 40);

	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var value = 0;
	  while(bytes.length() > 0) {
	    b = bytes.getByte();
	    value = value << 7;
	    // not the last byte for the value
	    if(b & 0x80) {
	      value += b & 0x7F;
	    } else {
	      // last byte
	      oid += '.' + (value + b);
	      value = 0;
	    }
	  }

	  return oid;
	};

	/**
	 * Converts a UTCTime value to a date.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates passed 2049. Parsing that structure hasn't been implemented yet.
	 *
	 * @param utc the UTCTime value to convert.
	 *
	 * @return the date.
	 */
	asn1.utcTimeToDate = function(utc) {
	  /* The following formats can be used:

	    YYMMDDhhmmZ
	    YYMMDDhhmm+hh'mm'
	    YYMMDDhhmm-hh'mm'
	    YYMMDDhhmmssZ
	    YYMMDDhhmmss+hh'mm'
	    YYMMDDhhmmss-hh'mm'

	    Where:

	    YY is the least significant two digits of the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  // if YY >= 50 use 19xx, if YY < 50 use 20xx
	  var year = parseInt(utc.substr(0, 2), 10);
	  year = (year >= 50) ? 1900 + year : 2000 + year;
	  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(utc.substr(4, 2), 10);
	  var hh = parseInt(utc.substr(6, 2), 10);
	  var mm = parseInt(utc.substr(8, 2), 10);
	  var ss = 0;

	  // not just YYMMDDhhmmZ
	  if(utc.length > 11) {
	    // get character after minutes
	    var c = utc.charAt(10);
	    var end = 10;

	    // see if seconds are present
	    if(c !== '+' && c !== '-') {
	      // get seconds
	      ss = parseInt(utc.substr(10, 2), 10);
	      end += 2;
	    }
	  }

	  // update date
	  date.setUTCFullYear(year, MM, DD);
	  date.setUTCHours(hh, mm, ss, 0);

	  if(end) {
	    // get +/- after end of time
	    c = utc.charAt(end);
	    if(c === '+' || c === '-') {
	      // get hours+minutes offset
	      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
	      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

	      // calculate offset in milliseconds
	      var offset = hhoffset * 60 + mmoffset;
	      offset *= 60000;

	      // apply offset
	      if(c === '+') {
	        date.setTime(+date - offset);
	      } else {
	        date.setTime(+date + offset);
	      }
	    }
	  }

	  return date;
	};

	/**
	 * Converts a GeneralizedTime value to a date.
	 *
	 * @param gentime the GeneralizedTime value to convert.
	 *
	 * @return the date.
	 */
	asn1.generalizedTimeToDate = function(gentime) {
	  /* The following formats can be used:

	    YYYYMMDDHHMMSS
	    YYYYMMDDHHMMSS.fff
	    YYYYMMDDHHMMSSZ
	    YYYYMMDDHHMMSS.fffZ
	    YYYYMMDDHHMMSS+hh'mm'
	    YYYYMMDDHHMMSS.fff+hh'mm'
	    YYYYMMDDHHMMSS-hh'mm'
	    YYYYMMDDHHMMSS.fff-hh'mm'

	    Where:

	    YYYY is the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    .fff is the second fraction, accurate to three decimal places
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  var YYYY = parseInt(gentime.substr(0, 4), 10);
	  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(gentime.substr(6, 2), 10);
	  var hh = parseInt(gentime.substr(8, 2), 10);
	  var mm = parseInt(gentime.substr(10, 2), 10);
	  var ss = parseInt(gentime.substr(12, 2), 10);
	  var fff = 0;
	  var offset = 0;
	  var isUTC = false;

	  if(gentime.charAt(gentime.length - 1) === 'Z') {
	    isUTC = true;
	  }

	  var end = gentime.length - 5, c = gentime.charAt(end);
	  if(c === '+' || c === '-') {
	    // get hours+minutes offset
	    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
	    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

	    // calculate offset in milliseconds
	    offset = hhoffset * 60 + mmoffset;
	    offset *= 60000;

	    // apply offset
	    if(c === '+') {
	      offset *= -1;
	    }

	    isUTC = true;
	  }

	  // check for second fraction
	  if(gentime.charAt(14) === '.') {
	    fff = parseFloat(gentime.substr(14), 10) * 1000;
	  }

	  if(isUTC) {
	    date.setUTCFullYear(YYYY, MM, DD);
	    date.setUTCHours(hh, mm, ss, fff);

	    // apply offset
	    date.setTime(+date + offset);
	  } else {
	    date.setFullYear(YYYY, MM, DD);
	    date.setHours(hh, mm, ss, fff);
	  }

	  return date;
	};

	/**
	 * Converts a date to a UTCTime value.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates passed 2049. Converting to a GeneralizedTime hasn't been
	 * implemented yet.
	 *
	 * @param date the date to convert.
	 *
	 * @return the UTCTime value.
	 */
	asn1.dateToUtcTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYMMDDhhmmssZ
	  var format = [];
	  format.push(('' + date.getUTCFullYear()).substr(2));
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a date to a GeneralizedTime value.
	 *
	 * @param date the date to convert.
	 *
	 * @return the GeneralizedTime value as a string.
	 */
	asn1.dateToGeneralizedTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYYYMMDDHHMMSSZ
	  var format = [];
	  format.push('' + date.getUTCFullYear());
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a javascript integer to a DER-encoded byte buffer to be used
	 * as the value for an INTEGER type.
	 *
	 * @param x the integer.
	 *
	 * @return the byte buffer.
	 */
	asn1.integerToDer = function(x) {
	  var rval = forge.util.createBuffer();
	  if(x >= -0x80 && x < 0x80) {
	    return rval.putSignedInt(x, 8);
	  }
	  if(x >= -0x8000 && x < 0x8000) {
	    return rval.putSignedInt(x, 16);
	  }
	  if(x >= -0x800000 && x < 0x800000) {
	    return rval.putSignedInt(x, 24);
	  }
	  if(x >= -0x80000000 && x < 0x80000000) {
	    return rval.putSignedInt(x, 32);
	  }
	  var error = new Error('Integer too large; max is 32-bits.');
	  error.integer = x;
	  throw error;
	};

	/**
	 * Converts a DER-encoded byte buffer to a javascript integer. This is
	 * typically used to decode the value of an INTEGER type.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the integer.
	 */
	asn1.derToInteger = function(bytes) {
	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  var n = bytes.length() * 8;
	  if(n > 32) {
	    throw new Error('Integer too large; max is 32-bits.');
	  }
	  return bytes.getSignedInt(n);
	};

	/**
	 * Validates the that given ASN.1 object is at least a super set of the
	 * given ASN.1 structure. Only tag classes and types are checked. An
	 * optional map may also be provided to capture ASN.1 values while the
	 * structure is checked.
	 *
	 * To capture an ASN.1 value, set an object in the validator's 'capture'
	 * parameter to the key to use in the capture map. To capture the full
	 * ASN.1 object, specify 'captureAsn1'.
	 *
	 * Objects in the validator may set a field 'optional' to true to indicate
	 * that it isn't necessary to pass validation.
	 *
	 * @param obj the ASN.1 object to validate.
	 * @param v the ASN.1 structure validator.
	 * @param capture an optional map to capture values in.
	 * @param errors an optional array for storing validation errors.
	 *
	 * @return true on success, false on failure.
	 */
	asn1.validate = function(obj, v, capture, errors) {
	  var rval = false;

	  // ensure tag class and type are the same if specified
	  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&
	    (obj.type === v.type || typeof(v.type) === 'undefined')) {
	    // ensure constructed flag is the same if specified
	    if(obj.constructed === v.constructed ||
	      typeof(v.constructed) === 'undefined') {
	      rval = true;

	      // handle sub values
	      if(v.value && forge.util.isArray(v.value)) {
	        var j = 0;
	        for(var i = 0; rval && i < v.value.length; ++i) {
	          rval = v.value[i].optional || false;
	          if(obj.value[j]) {
	            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);
	            if(rval) {
	              ++j;
	            } else if(v.value[i].optional) {
	              rval = true;
	            }
	          }
	          if(!rval && errors) {
	            errors.push(
	              '[' + v.name + '] ' +
	              'Tag class "' + v.tagClass + '", type "' +
	              v.type + '" expected value length "' +
	              v.value.length + '", got "' +
	              obj.value.length + '"');
	          }
	        }
	      }

	      if(rval && capture) {
	        if(v.capture) {
	          capture[v.capture] = obj.value;
	        }
	        if(v.captureAsn1) {
	          capture[v.captureAsn1] = obj;
	        }
	      }
	    } else if(errors) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected constructed "' + v.constructed + '", got "' +
	        obj.constructed + '"');
	    }
	  } else if(errors) {
	    if(obj.tagClass !== v.tagClass) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected tag class "' + v.tagClass + '", got "' +
	        obj.tagClass + '"');
	    }
	    if(obj.type !== v.type) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected type "' + v.type + '", got "' + obj.type + '"');
	    }
	  }
	  return rval;
	};

	// regex for testing for non-latin characters
	var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

	/**
	 * Pretty prints an ASN.1 object to a string.
	 *
	 * @param obj the object to write out.
	 * @param level the level in the tree.
	 * @param indentation the indentation to use.
	 *
	 * @return the string.
	 */
	asn1.prettyPrint = function(obj, level, indentation) {
	  var rval = '';

	  // set default level and indentation
	  level = level || 0;
	  indentation = indentation || 2;

	  // start new line for deep levels
	  if(level > 0) {
	    rval += '\n';
	  }

	  // create indent
	  var indent = '';
	  for(var i = 0; i < level * indentation; ++i) {
	    indent += ' ';
	  }

	  // print class:type
	  rval += indent + 'Tag: ';
	  switch(obj.tagClass) {
	  case asn1.Class.UNIVERSAL:
	    rval += 'Universal:';
	    break;
	  case asn1.Class.APPLICATION:
	    rval += 'Application:';
	    break;
	  case asn1.Class.CONTEXT_SPECIFIC:
	    rval += 'Context-Specific:';
	    break;
	  case asn1.Class.PRIVATE:
	    rval += 'Private:';
	    break;
	  }

	  if(obj.tagClass === asn1.Class.UNIVERSAL) {
	    rval += obj.type;

	    // known types
	    switch(obj.type) {
	    case asn1.Type.NONE:
	      rval += ' (None)';
	      break;
	    case asn1.Type.BOOLEAN:
	      rval += ' (Boolean)';
	      break;
	    case asn1.Type.BITSTRING:
	      rval += ' (Bit string)';
	      break;
	    case asn1.Type.INTEGER:
	      rval += ' (Integer)';
	      break;
	    case asn1.Type.OCTETSTRING:
	      rval += ' (Octet string)';
	      break;
	    case asn1.Type.NULL:
	      rval += ' (Null)';
	      break;
	    case asn1.Type.OID:
	      rval += ' (Object Identifier)';
	      break;
	    case asn1.Type.ODESC:
	      rval += ' (Object Descriptor)';
	      break;
	    case asn1.Type.EXTERNAL:
	      rval += ' (External or Instance of)';
	      break;
	    case asn1.Type.REAL:
	      rval += ' (Real)';
	      break;
	    case asn1.Type.ENUMERATED:
	      rval += ' (Enumerated)';
	      break;
	    case asn1.Type.EMBEDDED:
	      rval += ' (Embedded PDV)';
	      break;
	    case asn1.Type.UTF8:
	      rval += ' (UTF8)';
	      break;
	    case asn1.Type.ROID:
	      rval += ' (Relative Object Identifier)';
	      break;
	    case asn1.Type.SEQUENCE:
	      rval += ' (Sequence)';
	      break;
	    case asn1.Type.SET:
	      rval += ' (Set)';
	      break;
	    case asn1.Type.PRINTABLESTRING:
	      rval += ' (Printable String)';
	      break;
	    case asn1.Type.IA5String:
	      rval += ' (IA5String (ASCII))';
	      break;
	    case asn1.Type.UTCTIME:
	      rval += ' (UTC time)';
	      break;
	    case asn1.Type.GENERALIZEDTIME:
	      rval += ' (Generalized time)';
	      break;
	    case asn1.Type.BMPSTRING:
	      rval += ' (BMP String)';
	      break;
	    }
	  } else {
	    rval += obj.type;
	  }

	  rval += '\n';
	  rval += indent + 'Constructed: ' + obj.constructed + '\n';

	  if(obj.composed) {
	    var subvalues = 0;
	    var sub = '';
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        subvalues += 1;
	        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
	        if((i + 1) < obj.value.length) {
	          sub += ',';
	        }
	      }
	    }
	    rval += indent + 'Sub values: ' + subvalues + sub;
	  } else {
	    rval += indent + 'Value: ';
	    if(obj.type === asn1.Type.OID) {
	      var oid = asn1.derToOid(obj.value);
	      rval += oid;
	      if(forge.pki && forge.pki.oids) {
	        if(oid in forge.pki.oids) {
	          rval += ' (' + forge.pki.oids[oid] + ') ';
	        }
	      }
	    }
	    if(obj.type === asn1.Type.INTEGER) {
	      try {
	        rval += asn1.derToInteger(obj.value);
	      } catch(ex) {
	        rval += '0x' + forge.util.bytesToHex(obj.value);
	      }
	    } else if(obj.type === asn1.Type.OCTETSTRING) {
	      if(!_nonLatinRegex.test(obj.value)) {
	        rval += '(' + obj.value + ') ';
	      }
	      rval += '0x' + forge.util.bytesToHex(obj.value);
	    } else if(obj.type === asn1.Type.UTF8) {
	      rval += forge.util.decodeUtf8(obj.value);
	    } else if(obj.type === asn1.Type.PRINTABLESTRING ||
	      obj.type === asn1.Type.IA5String) {
	      rval += obj.value;
	    } else if(_nonLatinRegex.test(obj.value)) {
	      rval += '0x' + forge.util.bytesToHex(obj.value);
	    } else if(obj.value.length === 0) {
	      rval += '[null]';
	    } else {
	      rval += obj.value;
	    }
	  }

	  return rval;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'asn1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/asn1',['require', 'module', './util', './oids'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var md5 = forge.md5 = forge.md5 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.md5 = forge.md.algorithms.md5 = md5;

	/**
	 * Creates an MD5 message digest object.
	 *
	 * @return a message digest object.
	 */
	md5.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // MD5 state contains four 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(16);

	  // message digest object
	  var md = {
	    algorithm: 'md5',
	    blockLength: 64,
	    digestLength: 16,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x67452301,
	      h1: 0xEFCDAB89,
	      h2: 0x98BADCFE,
	      h3: 0x10325476
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate MD5 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in little-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry
	    var bits, carry = 0;
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      bits = md.fullMessageLength[i] * 8 + carry;
	      carry = (bits / 0x100000000) >>> 0;
	      finalBlock.putInt32Le(bits >>> 0);
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32Le(s2.h0);
	    rval.putInt32Le(s2.h1);
	    rval.putInt32Le(s2.h2);
	    rval.putInt32Le(s2.h3);
	    return rval;
	  };

	  return md;
	};

	// padding, constant tables for calculating md5
	var _padding = null;
	var _g = null;
	var _r = null;
	var _k = null;
	var _initialized = false;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // g values
	  _g = [
	    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,
	    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,
	    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];

	  // rounds table
	  _r = [
	    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
	    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
	    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
	    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];

	  // get the result of abs(sin(i + 1)) as a 32-bit integer
	  _k = new Array(64);
	  for(var i = 0; i < 64; ++i) {
	    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
	  }

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates an MD5 state with the given byte buffer.
	 *
	 * @param s the MD5 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, f, r, i;
	  var len = bytes.length();
	  while(len >= 64) {
	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;

	    // round 1
	    for(i = 0; i < 16; ++i) {
	      w[i] = bytes.getInt32Le();
	      f = d ^ (b & (c ^ d));
	      t = (a + f + _k[i] + w[i]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      f = c ^ (d & (b ^ c));
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 3
	    for(; i < 48; ++i) {
	      f = b ^ c ^ d;
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 4
	    for(; i < 64; ++i) {
	      f = c ^ (b | ~d);
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;

	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'md5';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/md5',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha1 = forge.sha1 = forge.sha1 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

	/**
	 * Creates a SHA-1 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha1.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // SHA-1 state contains five 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(80);

	  // message digest object
	  var md = {
	    algorithm: 'sha1',
	    blockLength: 64,
	    digestLength: 20,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x67452301,
	      h1: 0xEFCDAB89,
	      h2: 0x98BADCFE,
	      h3: 0x10325476,
	      h4: 0xC3D2E1F0
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	   /**
	    * Produces the digest.
	    *
	    * @return a byte buffer containing the digest value.
	    */
	   md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-1 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    return rval;
	  };

	  return md;
	};

	// sha-1 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-1 state with the given byte buffer.
	 *
	 * @param s the SHA-1 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, e, f, i;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 80 32-bit words according to SHA-1 algorithm
	    // and for 32-79 using Max Locktyukhin's optimization

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;

	    // round 1
	    for(i = 0; i < 16; ++i) {
	      t = bytes.getInt32();
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 20; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 40; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 3
	    for(; i < 60; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = (b & c) | (d & (b ^ c));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 4
	    for(; i < 80; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;

	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha1',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
	 *
	 * See FIPS 180-2 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha256 = forge.sha256 = forge.sha256 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

	/**
	 * Creates a SHA-256 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha256.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // SHA-256 state contains eight 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(64);

	  // message digest object
	  var md = {
	    algorithm: 'sha256',
	    blockLength: 64,
	    digestLength: 32,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x6A09E667,
	      h1: 0xBB67AE85,
	      h2: 0x3C6EF372,
	      h3: 0xA54FF53A,
	      h4: 0x510E527F,
	      h5: 0x9B05688C,
	      h6: 0x1F83D9AB,
	      h7: 0x5BE0CD19
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-256 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4,
	      h5: _state.h5,
	      h6: _state.h6,
	      h7: _state.h7
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    rval.putInt32(s2.h5);
	    rval.putInt32(s2.h6);
	    rval.putInt32(s2.h7);
	    return rval;
	  };

	  return md;
	};

	// sha-256 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	// table of constants
	var _k = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // create K table for SHA-256
	  _k = [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-256 state with the given byte buffer.
	 *
	 * @param s the SHA-256 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 64 32-bit words according to SHA-256
	    for(i = 0; i < 16; ++i) {
	      w[i] = bytes.getInt32();
	    }
	    for(; i < 64; ++i) {
	      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
	      t1 = w[i - 2];
	      t1 =
	        ((t1 >>> 17) | (t1 << 15)) ^
	        ((t1 >>> 19) | (t1 << 13)) ^
	        (t1 >>> 10);
	      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
	      t2 = w[i - 15];
	      t2 =
	        ((t2 >>> 7) | (t2 << 25)) ^
	        ((t2 >>> 18) | (t2 << 14)) ^
	        (t2 >>> 3);
	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
	      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
	    }

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;
	    f = s.h5;
	    g = s.h6;
	    h = s.h7;

	    // round function
	    for(i = 0; i < 64; ++i) {
	      // Sum1(e)
	      s1 =
	        ((e >>> 6) | (e << 26)) ^
	        ((e >>> 11) | (e << 21)) ^
	        ((e >>> 25) | (e << 7));
	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch = g ^ (e & (f ^ g));
	      // Sum0(a)
	      s0 =
	        ((a >>> 2) | (a << 30)) ^
	        ((a >>> 13) | (a << 19)) ^
	        ((a >>> 22) | (a << 10));
	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj = (a & b) | (c & (a ^ b));

	      // main algorithm
	      t1 = h + s1 + ch + _k[i] + w[i];
	      t2 = s0 + maj;
	      h = g;
	      g = f;
	      f = e;
	      e = (d + t1) | 0;
	      d = c;
	      c = b;
	      b = a;
	      a = (t1 + t2) | 0;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;
	    s.h5 = (s.h5 + f) | 0;
	    s.h6 = (s.h6 + g) | 0;
	    s.h7 = (s.h7 + h) | 0;
	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha256';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha256',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with a 1024-bit block size implementation.
	 *
	 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
	 * SHA-256 (block size 512 bits), see sha256.js.
	 *
	 * See FIPS 180-4 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha512 = forge.sha512 = forge.sha512 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};

	// SHA-512
	forge.md.sha512 = forge.md.algorithms.sha512 = sha512;

	// SHA-384
	var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
	sha384.create = function() {
	  return sha512.create('SHA-384');
	};
	forge.md.sha384 = forge.md.algorithms.sha384 = sha384;

	// SHA-512/256
	forge.sha512.sha256 = forge.sha512.sha256 || {
	  create: function() {
	    return sha512.create('SHA-512/256');
	  }
	};
	forge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =
	  forge.sha512.sha256;

	// SHA-512/224
	forge.sha512.sha224 = forge.sha512.sha224 || {
	  create: function() {
	    return sha512.create('SHA-512/224');
	  }
	};
	forge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =
	  forge.sha512.sha224;

	/**
	 * Creates a SHA-2 message digest object.
	 *
	 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
	 *          SHA-512/256).
	 *
	 * @return a message digest object.
	 */
	sha512.create = function(algorithm) {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  if(typeof algorithm === 'undefined') {
	    algorithm = 'SHA-512';
	  }

	  if(!(algorithm in _states)) {
	    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
	  }

	  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
	  var _state = _states[algorithm];
	  var _h = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for 64-bit word storage
	  var _w = new Array(80);
	  for(var wi = 0; wi < 80; ++wi) {
	    _w[wi] = new Array(2);
	  }

	  // message digest object
	  var md = {
	    // SHA-512 => sha512
	    algorithm: algorithm.replace('-', '').toLowerCase(),
	    blockLength: 128,
	    digestLength: 64,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 16
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength128 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength128 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _h = new Array(_state.length);
	    for(var i = 0; i < _state.length; ++i) {
	      _h[i] = _state[i].slice(0);
	    }
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_h, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-512 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 896 mod 1024. In other words,
	    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 16 bytes (128
	    bits), that means that the last segment of the data must have 112 bytes
	    (896 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 896 mod 1024 because
	    1024 - 128 = 896.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 896 mod 1024, then 1024 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var h = new Array(_h.length);
	    for(var i = 0; i < _h.length; ++i) {
	      h[i] = _h[i].slice(0);
	    }
	    _update(h, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    var hlen;
	    if(algorithm === 'SHA-512') {
	      hlen = h.length;
	    } else if(algorithm === 'SHA-384') {
	      hlen = h.length - 2;
	    } else {
	      hlen = h.length - 4;
	    }
	    for(var i = 0; i < hlen; ++i) {
	      rval.putInt32(h[i][0]);
	      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {
	        rval.putInt32(h[i][1]);
	      }
	    }
	    return rval;
	  };

	  return md;
	};

	// sha-512 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	// table of constants
	var _k = null;

	// initial hash states
	var _states = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 128);

	  // create K table for SHA-512
	  _k = [
	    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],
	    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],
	    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],
	    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],
	    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],
	    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],
	    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],
	    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],
	    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],
	    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],
	    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],
	    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],
	    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],
	    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],
	    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],
	    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],
	    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],
	    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],
	    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],
	    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],
	    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],
	    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],
	    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],
	    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],
	    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],
	    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],
	    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],
	    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],
	    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],
	    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],
	    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],
	    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],
	    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],
	    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],
	    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],
	    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],
	    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],
	    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],
	    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],
	    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]
	  ];

	  // initial hash states
	  _states = {};
	  _states['SHA-512'] = [
	    [0x6a09e667, 0xf3bcc908],
	    [0xbb67ae85, 0x84caa73b],
	    [0x3c6ef372, 0xfe94f82b],
	    [0xa54ff53a, 0x5f1d36f1],
	    [0x510e527f, 0xade682d1],
	    [0x9b05688c, 0x2b3e6c1f],
	    [0x1f83d9ab, 0xfb41bd6b],
	    [0x5be0cd19, 0x137e2179]
	  ];
	  _states['SHA-384'] = [
	    [0xcbbb9d5d, 0xc1059ed8],
	    [0x629a292a, 0x367cd507],
	    [0x9159015a, 0x3070dd17],
	    [0x152fecd8, 0xf70e5939],
	    [0x67332667, 0xffc00b31],
	    [0x8eb44a87, 0x68581511],
	    [0xdb0c2e0d, 0x64f98fa7],
	    [0x47b5481d, 0xbefa4fa4]
	  ];
	  _states['SHA-512/256'] = [
	    [0x22312194, 0xFC2BF72C],
	    [0x9F555FA3, 0xC84C64C2],
	    [0x2393B86B, 0x6F53B151],
	    [0x96387719, 0x5940EABD],
	    [0x96283EE2, 0xA88EFFE3],
	    [0xBE5E1E25, 0x53863992],
	    [0x2B0199FC, 0x2C85B8AA],
	    [0x0EB72DDC, 0x81C52CA2]
	  ];
	  _states['SHA-512/224'] = [
	    [0x8C3D37C8, 0x19544DA2],
	    [0x73E19966, 0x89DCD4D6],
	    [0x1DFAB7AE, 0x32FF9C82],
	    [0x679DD514, 0x582F9FCF],
	    [0x0F6D2B69, 0x7BD44DA8],
	    [0x77E36F73, 0x04C48942],
	    [0x3F9D85A8, 0x6A1D36C8],
	    [0x1112E6AD, 0x91D692A1]
	  ];

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-512 state with the given byte buffer.
	 *
	 * @param s the SHA-512 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (128 byte) chunks
	  var t1_hi, t1_lo;
	  var t2_hi, t2_lo;
	  var s0_hi, s0_lo;
	  var s1_hi, s1_lo;
	  var ch_hi, ch_lo;
	  var maj_hi, maj_lo;
	  var a_hi, a_lo;
	  var b_hi, b_lo;
	  var c_hi, c_lo;
	  var d_hi, d_lo;
	  var e_hi, e_lo;
	  var f_hi, f_lo;
	  var g_hi, g_lo;
	  var h_hi, h_lo;
	  var i, hi, lo, w2, w7, w15, w16;
	  var len = bytes.length();
	  while(len >= 128) {
	    // the w array will be populated with sixteen 64-bit big-endian words
	    // and then extended into 64 64-bit words according to SHA-512
	    for(i = 0; i < 16; ++i) {
	      w[i][0] = bytes.getInt32() >>> 0;
	      w[i][1] = bytes.getInt32() >>> 0;
	    }
	    for(; i < 80; ++i) {
	      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
	      w2 = w[i - 2];
	      hi = w2[0];
	      lo = w2[1];

	      // high bits
	      t1_hi = (
	        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19
	        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
	        (hi >>> 6)) >>> 0; // SHR 6
	      // low bits
	      t1_lo = (
	        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19
	        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
	        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6

	      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
	      w15 = w[i - 15];
	      hi = w15[0];
	      lo = w15[1];

	      // high bits
	      t2_hi = (
	        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1
	        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
	        (hi >>> 7)) >>> 0; // SHR 7
	      // low bits
	      t2_lo = (
	        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1
	        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
	        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7

	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
	      w7 = w[i - 7];
	      w16 = w[i - 16];
	      lo = (t1_lo + w7[1] + t2_lo + w16[1]);
	      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      w[i][1] = lo >>> 0;
	    }

	    // initialize hash value for this chunk
	    a_hi = s[0][0];
	    a_lo = s[0][1];
	    b_hi = s[1][0];
	    b_lo = s[1][1];
	    c_hi = s[2][0];
	    c_lo = s[2][1];
	    d_hi = s[3][0];
	    d_lo = s[3][1];
	    e_hi = s[4][0];
	    e_lo = s[4][1];
	    f_hi = s[5][0];
	    f_lo = s[5][1];
	    g_hi = s[6][0];
	    g_lo = s[6][1];
	    h_hi = s[7][0];
	    h_lo = s[7][1];

	    // round function
	    for(i = 0; i < 80; ++i) {
	      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
	      s1_hi = (
	        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
	        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
	        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)
	      s1_lo = (
	        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
	        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
	        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)

	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
	      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

	      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
	      s0_hi = (
	        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
	        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)
	      s0_lo = (
	        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
	        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)

	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
	      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

	      // main algorithm
	      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
	      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);
	      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      t1_lo = lo >>> 0;

	      // t2 = s0 + maj modulo 2^64 (carry lo overflow)
	      lo = s0_lo + maj_lo;
	      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      t2_lo = lo >>> 0;

	      h_hi = g_hi;
	      h_lo = g_lo;

	      g_hi = f_hi;
	      g_lo = f_lo;

	      f_hi = e_hi;
	      f_lo = e_lo;

	      // e = (d + t1) modulo 2^64 (carry lo overflow)
	      lo = d_lo + t1_lo;
	      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      e_lo = lo >>> 0;

	      d_hi = c_hi;
	      d_lo = c_lo;

	      c_hi = b_hi;
	      c_lo = b_lo;

	      b_hi = a_hi;
	      b_lo = a_lo;

	      // a = (t1 + t2) modulo 2^64 (carry lo overflow)
	      lo = t1_lo + t2_lo;
	      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      a_lo = lo >>> 0;
	    }

	    // update hash state (additional modulo 2^64)
	    lo = s[0][1] + a_lo;
	    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[0][1] = lo >>> 0;

	    lo = s[1][1] + b_lo;
	    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[1][1] = lo >>> 0;

	    lo = s[2][1] + c_lo;
	    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[2][1] = lo >>> 0;

	    lo = s[3][1] + d_lo;
	    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[3][1] = lo >>> 0;

	    lo = s[4][1] + e_lo;
	    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[4][1] = lo >>> 0;

	    lo = s[5][1] + f_lo;
	    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[5][1] = lo >>> 0;

	    lo = s[6][1] + g_lo;
	    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[6][1] = lo >>> 0;

	    lo = s[7][1] + h_lo;
	    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[7][1] = lo >>> 0;

	    len -= 128;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha512';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha512',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge message digests.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.md = forge.md || {};
	forge.md.algorithms = {
	  md5: forge.md5,
	  sha1: forge.sha1,
	  sha256: forge.sha256
	};
	forge.md.md5 = forge.md5;
	forge.md.sha1 = forge.sha1;
	forge.md.sha256 = forge.sha256;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'md';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/md',['require', 'module', './md5', './sha1', './sha256', './sha512'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Hash-based Message Authentication Code implementation. Requires a message
	 * digest object that can be obtained, for example, from forge.md.sha1 or
	 * forge.md.md5.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* HMAC API */
	var hmac = forge.hmac = forge.hmac || {};

	/**
	 * Creates an HMAC object that uses the given message digest object.
	 *
	 * @return an HMAC object.
	 */
	hmac.create = function() {
	  // the hmac key to use
	  var _key = null;

	  // the message digest to use
	  var _md = null;

	  // the inner padding
	  var _ipadding = null;

	  // the outer padding
	  var _opadding = null;

	  // hmac context
	  var ctx = {};

	  /**
	   * Starts or restarts the HMAC with the given key and message digest.
	   *
	   * @param md the message digest to use, null to reuse the previous one,
	   *           a string to use builtin 'sha1', 'md5', 'sha256'.
	   * @param key the key to use as a string, array of bytes, byte buffer,
	   *           or null to reuse the previous key.
	   */
	  ctx.start = function(md, key) {
	    if(md !== null) {
	      if(typeof md === 'string') {
	        // create builtin message digest
	        md = md.toLowerCase();
	        if(md in forge.md.algorithms) {
	          _md = forge.md.algorithms[md].create();
	        } else {
	          throw new Error('Unknown hash algorithm "' + md + '"');
	        }
	      } else {
	        // store message digest
	        _md = md;
	      }
	    }

	    if(key === null) {
	      // reuse previous key
	      key = _key;
	    } else {
	      if(typeof key === 'string') {
	        // convert string into byte buffer
	        key = forge.util.createBuffer(key);
	      } else if(forge.util.isArray(key)) {
	        // convert byte array into byte buffer
	        var tmp = key;
	        key = forge.util.createBuffer();
	        for(var i = 0; i < tmp.length; ++i) {
	          key.putByte(tmp[i]);
	        }
	      }

	      // if key is longer than blocksize, hash it
	      var keylen = key.length();
	      if(keylen > _md.blockLength) {
	        _md.start();
	        _md.update(key.bytes());
	        key = _md.digest();
	      }

	      // mix key into inner and outer padding
	      // ipadding = [0x36 * blocksize] ^ key
	      // opadding = [0x5C * blocksize] ^ key
	      _ipadding = forge.util.createBuffer();
	      _opadding = forge.util.createBuffer();
	      keylen = key.length();
	      for(var i = 0; i < keylen; ++i) {
	        var tmp = key.at(i);
	        _ipadding.putByte(0x36 ^ tmp);
	        _opadding.putByte(0x5C ^ tmp);
	      }

	      // if key is shorter than blocksize, add additional padding
	      if(keylen < _md.blockLength) {
	        var tmp = _md.blockLength - keylen;
	        for(var i = 0; i < tmp; ++i) {
	          _ipadding.putByte(0x36);
	          _opadding.putByte(0x5C);
	        }
	      }
	      _key = key;
	      _ipadding = _ipadding.bytes();
	      _opadding = _opadding.bytes();
	    }

	    // digest is done like so: hash(opadding | hash(ipadding | message))

	    // prepare to do inner hash
	    // hash(ipadding | message)
	    _md.start();
	    _md.update(_ipadding);
	  };

	  /**
	   * Updates the HMAC with the given message bytes.
	   *
	   * @param bytes the bytes to update with.
	   */
	  ctx.update = function(bytes) {
	    _md.update(bytes);
	  };

	  /**
	   * Produces the Message Authentication Code (MAC).
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  ctx.getMac = function() {
	    // digest is done like so: hash(opadding | hash(ipadding | message))
	    // here we do the outer hashing
	    var inner = _md.digest().bytes();
	    _md.start();
	    _md.update(_opadding);
	    _md.update(inner);
	    return _md.digest();
	  };
	  // alias for getMac
	  ctx.digest = ctx.getMac;

	  return ctx;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'hmac';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/hmac',['require', 'module', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
	 *
	 * See: RFC 1421.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 *
	 * A Forge PEM object has the following fields:
	 *
	 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
	 *
	 * procType: identifies the type of processing performed on the message,
	 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
	 *
	 * contentDomain: identifies the type of content in the message, typically
	 *   only uses the value: "RFC822".
	 *
	 * dekInfo: identifies the message encryption algorithm and mode and includes
	 *   any parameters for the algorithm, it has two subfields: algorithm and
	 *   parameters, eg: DES-CBC,F8143EDE5960C597.
	 *
	 * headers: contains all other PEM encapsulated headers -- where order is
	 *   significant (for pairing data like recipient ID + key info).
	 *
	 * body: the binary-encoded body.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for pem API
	var pem = forge.pem = forge.pem || {};

	/**
	 * Encodes (serializes) the given PEM object.
	 *
	 * @param msg the PEM message object to encode.
	 * @param options the options to use:
	 *          maxline the maximum characters per line for the body, (default: 64).
	 *
	 * @return the PEM-formatted string.
	 */
	pem.encode = function(msg, options) {
	  options = options || {};
	  var rval = '-----BEGIN ' + msg.type + '-----\r\n';

	  // encode special headers
	  var header;
	  if(msg.procType) {
	    header = {
	      name: 'Proc-Type',
	      values: [String(msg.procType.version), msg.procType.type]
	    };
	    rval += foldHeader(header);
	  }
	  if(msg.contentDomain) {
	    header = {name: 'Content-Domain', values: [msg.contentDomain]};
	    rval += foldHeader(header);
	  }
	  if(msg.dekInfo) {
	    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};
	    if(msg.dekInfo.parameters) {
	      header.values.push(msg.dekInfo.parameters);
	    }
	    rval += foldHeader(header);
	  }

	  if(msg.headers) {
	    // encode all other headers
	    for(var i = 0; i < msg.headers.length; ++i) {
	      rval += foldHeader(msg.headers[i]);
	    }
	  }

	  // terminate header
	  if(msg.procType) {
	    rval += '\r\n';
	  }

	  // add body
	  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';

	  rval += '-----END ' + msg.type + '-----\r\n';
	  return rval;
	};

	/**
	 * Decodes (deserializes) all PEM messages found in the given string.
	 *
	 * @param str the PEM-formatted string to decode.
	 *
	 * @return the PEM message objects in an array.
	 */
	pem.decode = function(str) {
	  var rval = [];

	  // split string into PEM messages (be lenient w/EOF on BEGIN line)
	  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
	  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
	  var rCRLF = /\r?\n/;
	  var match;
	  while(true) {
	    match = rMessage.exec(str);
	    if(!match) {
	      break;
	    }

	    var msg = {
	      type: match[1],
	      procType: null,
	      contentDomain: null,
	      dekInfo: null,
	      headers: [],
	      body: forge.util.decode64(match[3])
	    };
	    rval.push(msg);

	    // no headers
	    if(!match[2]) {
	      continue;
	    }

	    // parse headers
	    var lines = match[2].split(rCRLF);
	    var li = 0;
	    while(match && li < lines.length) {
	      // get line, trim any rhs whitespace
	      var line = lines[li].replace(/\s+$/, '');

	      // RFC2822 unfold any following folded lines
	      for(var nl = li + 1; nl < lines.length; ++nl) {
	        var next = lines[nl];
	        if(!/\s/.test(next[0])) {
	          break;
	        }
	        line += next;
	        li = nl;
	      }

	      // parse header
	      match = line.match(rHeader);
	      if(match) {
	        var header = {name: match[1], values: []};
	        var values = match[2].split(',');
	        for(var vi = 0; vi < values.length; ++vi) {
	          header.values.push(ltrim(values[vi]));
	        }

	        // Proc-Type must be the first header
	        if(!msg.procType) {
	          if(header.name !== 'Proc-Type') {
	            throw new Error('Invalid PEM formatted message. The first ' +
	              'encapsulated header must be "Proc-Type".');
	          } else if(header.values.length !== 2) {
	            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' +
	              'header must have two subfields.');
	          }
	          msg.procType = {version: values[0], type: values[1]};
	        } else if(!msg.contentDomain && header.name === 'Content-Domain') {
	          // special-case Content-Domain
	          msg.contentDomain = values[0] || '';
	        } else if(!msg.dekInfo && header.name === 'DEK-Info') {
	          // special-case DEK-Info
	          if(header.values.length === 0) {
	            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	              'header must have at least one subfield.');
	          }
	          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};
	        } else {
	          msg.headers.push(header);
	        }
	      }

	      ++li;
	    }

	    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
	      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	        'header must be present if "Proc-Type" is "ENCRYPTED".');
	    }
	  }

	  if(rval.length === 0) {
	    throw new Error('Invalid PEM formatted message.');
	  }

	  return rval;
	};

	function foldHeader(header) {
	  var rval = header.name + ': ';

	  // ensure values with CRLF are folded
	  var values = [];
	  var insertSpace = function(match, $1) {
	    return ' ' + $1;
	  };
	  for(var i = 0; i < header.values.length; ++i) {
	    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
	  }
	  rval += values.join(',') + '\r\n';

	  // do folding
	  var length = 0;
	  var candidate = -1;
	  for(var i = 0; i < rval.length; ++i, ++length) {
	    if(length > 65 && candidate !== -1) {
	      var insert = rval[candidate];
	      if(insert === ',') {
	        ++candidate;
	        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
	      } else {
	        rval = rval.substr(0, candidate) +
	          '\r\n' + insert + rval.substr(candidate + 1);
	      }
	      length = (i - candidate - 1);
	      candidate = -1;
	      ++i;
	    } else if(rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
	      candidate = i;
	    }
	  }

	  return rval;
	}

	function ltrim(str) {
	  return str.replace(/^\s+/, '');
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pem';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pem',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * DES (Data Encryption Standard) implementation.
	 *
	 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
	 * It is based on the BSD-licensed implementation by Paul Tero:
	 *
	 * Paul Tero, July 2001
	 * http://www.tero.co.uk/des/
	 *
	 * Optimised for performance with large blocks by Michael Hayworth, November 2001
	 * http://www.netdealing.com
	 *
	 * THIS SOFTWARE IS PROVIDED "AS IS" AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
	 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
	 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
	 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
	 * SUCH DAMAGE.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* DES API */
	forge.des = forge.des || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge.des.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.des.createEncryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge.des.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.des.createDecryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new DES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the DES algorithm object.
	 */
	forge.des.Algorithm = function(name, mode) {
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 8,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this DES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge.des.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = forge.util.createBuffer(options.key);
	  if(this.name.indexOf('3DES') === 0) {
	    if(key.length() !== 24) {
	      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
	    }
	  }

	  // do key expansion to 16 or 48 subkeys (single or triple DES)
	  this._keys = _createKeys(key);
	  this._init = true;
	};


	/** Register DES algorithms **/

	registerAlgorithm('DES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('DES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('DES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('DES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('DES-CTR', forge.cipher.modes.ctr);

	registerAlgorithm('3DES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('3DES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('3DES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('3DES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('3DES-CTR', forge.cipher.modes.ctr);

	function registerAlgorithm(name, mode) {
	  var factory = function() {
	    return new forge.des.Algorithm(name, mode);
	  };
	  forge.cipher.registerAlgorithm(name, factory);
	}


	/** DES implementation **/

	var spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];
	var spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];
	var spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];
	var spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];
	var spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];
	var spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];
	var spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];
	var spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];

	/**
	 * Create necessary sub keys.
	 *
	 * @param key the 64-bit or 192-bit key.
	 *
	 * @return the expanded keys.
	 */
	function _createKeys(key) {
	  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],
	      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],
	      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],
	      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],
	      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],
	      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],
	      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],
	      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],
	      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],
	      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],
	      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],
	      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],
	      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],
	      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];

	  // how many iterations (1 for des, 3 for triple des)
	  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
	  var iterations = key.length() > 8 ? 3 : 1;

	  // stores the return keys
	  var keys = [];

	  // now define the left shifts which need to be done
	  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

	  var n = 0, tmp;
	  for(var j = 0; j < iterations; j ++) {
	    var left = key.getInt32();
	    var right = key.getInt32();

	    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	    right ^= tmp;
	    left ^= (tmp << 4);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 2) ^ right) & 0x33333333;
	    right ^= tmp;
	    left ^= (tmp << 2);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	    left ^= tmp;
	    right ^= (tmp << 8);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    // right needs to be shifted and OR'd with last four bits of left
	    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

	    // left needs to be put upside down
	    left = ((right << 24) | ((right << 8) & 0xff0000) |
	      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));
	    right = tmp;

	    // now go through and perform these shifts on the left and right keys
	    for(var i = 0; i < shifts.length; ++i) {
	      //shift the keys either one or two bits to the left
	      if(shifts[i]) {
	        left = (left << 2) | (left >>> 26);
	        right = (right << 2) | (right >>> 26);
	      } else {
	        left = (left << 1) | (left >>> 27);
	        right = (right << 1) | (right >>> 27);
	      }
	      left &= -0xf;
	      right &= -0xf;

	      // now apply PC-2, in such a way that E is easier when encrypting or
	      // decrypting this conversion will look like PC-2 except only the last 6
	      // bits of each byte are used rather than 48 consecutive bits and the
	      // order of lines will be according to how the S selection functions will
	      // be applied: S2, S4, S6, S8, S1, S3, S5, S7
	      var lefttmp = (
	        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |
	        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |
	        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |
	        pc2bytes6[(left >>> 4) & 0xf]);
	      var righttmp = (
	        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |
	        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |
	        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |
	        pc2bytes13[(right >>> 4) & 0xf]);
	      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
	      keys[n++] = lefttmp ^ tmp;
	      keys[n++] = righttmp ^ (tmp << 16);
	    }
	  }

	  return keys;
	}

	/**
	 * Updates a single block (1 byte) using DES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param keys the expanded keys.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock(keys, input, output, decrypt) {
	  // set up loops for single or triple DES
	  var iterations = keys.length === 32 ? 3 : 9;
	  var looping;
	  if(iterations === 3) {
	    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
	  } else {
	    looping = (decrypt ?
	      [94, 62, -2, 32, 64, 2, 30, -2, -2] :
	      [0, 32, 2, 62, 30, -2, 64, 96, 2]);
	  }

	  var tmp;

	  var left = input[0];
	  var right = input[1];

	  // first each 64 bit chunk of the message must be permuted according to IP
	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  // rotate left 1 bit
	  left = ((left << 1) | (left >>> 31));
	  right = ((right << 1) | (right >>> 31));

	  for(var j = 0; j < iterations; j += 3) {
	    var endloop = looping[j + 1];
	    var loopinc = looping[j + 2];

	    // now go through and perform the encryption or decryption
	    for(var i = looping[j]; i != endloop; i += loopinc) {
	      var right1 = right ^ keys[i];
	      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

	      // passing these bytes through the S selection functions
	      tmp = left;
	      left = right;
	      right = tmp ^ (
	        spfunction2[(right1 >>> 24) & 0x3f] |
	        spfunction4[(right1 >>> 16) & 0x3f] |
	        spfunction6[(right1 >>>  8) & 0x3f] |
	        spfunction8[right1 & 0x3f] |
	        spfunction1[(right2 >>> 24) & 0x3f] |
	        spfunction3[(right2 >>> 16) & 0x3f] |
	        spfunction5[(right2 >>>  8) & 0x3f] |
	        spfunction7[right2 & 0x3f]);
	    }
	    // unreverse left and right
	    tmp = left;
	    left = right;
	    right = tmp;
	  }

	  // rotate right 1 bit
	  left = ((left >>> 1) | (left << 31));
	  right = ((right >>> 1) | (right << 31));

	  // now perform IP-1, which is IP in the opposite direction
	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  output[0] = left;
	  output[1] = right;
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('DES-<mode>', key);
	 * forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates a deprecated DES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use (64 or 192 bits).
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'DES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'des';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/des',['require', 'module', './cipher', './cipherModes', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Password-Based Key-Derivation Function #2 implementation.
	 *
	 * See RFC 2898 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};

	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var crypto;
	if(_nodejs && !forge.disableNativeCode) {
	  crypto = require('crypto');
	}

	/**
	 * Derives a key from a password.
	 *
	 * @param p the password as a binary-encoded string of bytes.
	 * @param s the salt as a binary-encoded string of bytes.
	 * @param c the iteration count, a positive integer.
	 * @param dkLen the intended length, in bytes, of the derived key,
	 *          (max: 2^32 - 1) * hash length of the PRF.
	 * @param [md] the message digest (or algorithm identifier as a string) to use
	 *          in the PRF, defaults to SHA-1.
	 * @param [callback(err, key)] presence triggers asynchronous version, called
	 *          once the operation completes.
	 *
	 * @return the derived key, as a binary-encoded string of bytes, for the
	 *           synchronous version (if no callback is specified).
	 */
	forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {
	  if(typeof md === 'function') {
	    callback = md;
	    md = null;
	  }

	  // use native implementation if possible and not disabled, note that
	  // some node versions only support SHA-1, others allow digest to be changed
	  if(_nodejs && !forge.disableNativeCode && crypto.pbkdf2 &&
	    (md === null || typeof md !== 'object') &&
	    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {
	    if(typeof md !== 'string') {
	      // default prf to SHA-1
	      md = 'sha1';
	    }
	    s = new Buffer(s, 'binary');
	    if(!callback) {
	      if(crypto.pbkdf2Sync.length === 4) {
	        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');
	      }
	      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
	    }
	    if(crypto.pbkdf2Sync.length === 4) {
	      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, key.toString('binary'));
	      });
	    }
	    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {
	      if(err) {
	        return callback(err);
	      }
	      callback(null, key.toString('binary'));
	    });
	  }

	  if(typeof md === 'undefined' || md === null) {
	    // default prf to SHA-1
	    md = forge.md.sha1.create();
	  }
	  if(typeof md === 'string') {
	    if(!(md in forge.md.algorithms)) {
	      throw new Error('Unknown hash algorithm: ' + md);
	    }
	    md = forge.md[md].create();
	  }

	  var hLen = md.digestLength;

	  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
	    stop. */
	  if(dkLen > (0xFFFFFFFF * hLen)) {
	    var err = new Error('Derived key is too long.');
	    if(callback) {
	      return callback(err);
	    }
	    throw err;
	  }

	  /* 2. Let len be the number of hLen-octet blocks in the derived key,
	    rounding up, and let r be the number of octets in the last
	    block:

	    len = CEIL(dkLen / hLen),
	    r = dkLen - (len - 1) * hLen. */
	  var len = Math.ceil(dkLen / hLen);
	  var r = dkLen - (len - 1) * hLen;

	  /* 3. For each block of the derived key apply the function F defined
	    below to the password P, the salt S, the iteration count c, and
	    the block index to compute the block:

	    T_1 = F(P, S, c, 1),
	    T_2 = F(P, S, c, 2),
	    ...
	    T_len = F(P, S, c, len),

	    where the function F is defined as the exclusive-or sum of the
	    first c iterates of the underlying pseudorandom function PRF
	    applied to the password P and the concatenation of the salt S
	    and the block index i:

	    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

	    where

	    u_1 = PRF(P, S || INT(i)),
	    u_2 = PRF(P, u_1),
	    ...
	    u_c = PRF(P, u_{c-1}).

	    Here, INT(i) is a four-octet encoding of the integer i, most
	    significant octet first. */
	  var prf = forge.hmac.create();
	  prf.start(md, p);
	  var dk = '';
	  var xor, u_c, u_c1;

	  // sync version
	  if(!callback) {
	    for(var i = 1; i <= len; ++i) {
	      // PRF(P, S || INT(i)) (first iteration)
	      prf.start(null, null);
	      prf.update(s);
	      prf.update(forge.util.int32ToBytes(i));
	      xor = u_c1 = prf.digest().getBytes();

	      // PRF(P, u_{c-1}) (other iterations)
	      for(var j = 2; j <= c; ++j) {
	        prf.start(null, null);
	        prf.update(u_c1);
	        u_c = prf.digest().getBytes();
	        // F(p, s, c, i)
	        xor = forge.util.xorBytes(xor, u_c, hLen);
	        u_c1 = u_c;
	      }

	      /* 4. Concatenate the blocks and extract the first dkLen octets to
	        produce a derived key DK:

	        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	      dk += (i < len) ? xor : xor.substr(0, r);
	    }
	    /* 5. Output the derived key DK. */
	    return dk;
	  }

	  // async version
	  var i = 1, j;
	  function outer() {
	    if(i > len) {
	      // done
	      return callback(null, dk);
	    }

	    // PRF(P, S || INT(i)) (first iteration)
	    prf.start(null, null);
	    prf.update(s);
	    prf.update(forge.util.int32ToBytes(i));
	    xor = u_c1 = prf.digest().getBytes();

	    // PRF(P, u_{c-1}) (other iterations)
	    j = 2;
	    inner();
	  }

	  function inner() {
	    if(j <= c) {
	      prf.start(null, null);
	      prf.update(u_c1);
	      u_c = prf.digest().getBytes();
	      // F(p, s, c, i)
	      xor = forge.util.xorBytes(xor, u_c, hLen);
	      u_c1 = u_c;
	      ++j;
	      return forge.util.setImmediate(inner);
	    }

	    /* 4. Concatenate the blocks and extract the first dkLen octets to
	      produce a derived key DK:

	      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	    dk += (i < len) ? xor : xor.substr(0, r);

	    ++i;
	    outer();
	  }

	  outer();
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pbkdf2';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pbkdf2',['require', 'module', './hmac', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A javascript implementation of a cryptographically-secure
	 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
	 * here though the use of SHA-256 is not enforced; when generating an
	 * a PRNG context, the hashing algorithm and block cipher used for
	 * the generator are specified via a plugin.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var _crypto = null;
	if(!forge.disableNativeCode && _nodejs && !process.versions['node-webkit']) {
	  _crypto = require('crypto');
	}

	/* PRNG API */
	var prng = forge.prng = forge.prng || {};

	/**
	 * Creates a new PRNG context.
	 *
	 * A PRNG plugin must be passed in that will provide:
	 *
	 * 1. A function that initializes the key and seed of a PRNG context. It
	 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
	 *   or transformation of the seed from a byte string into an array of
	 *   integers (or similar) should be performed.
	 * 2. The cryptographic function used by the generator. It takes a key and
	 *   a seed.
	 * 3. A seed increment function. It takes the seed and returns seed + 1.
	 * 4. An api to create a message digest.
	 *
	 * For an example, see random.js.
	 *
	 * @param plugin the PRNG plugin to use.
	 */
	prng.create = function(plugin) {
	  var ctx = {
	    plugin: plugin,
	    key: null,
	    seed: null,
	    time: null,
	    // number of reseeds so far
	    reseeds: 0,
	    // amount of data generated so far
	    generated: 0
	  };

	  // create 32 entropy pools (each is a message digest)
	  var md = plugin.md;
	  var pools = new Array(32);
	  for(var i = 0; i < 32; ++i) {
	    pools[i] = md.create();
	  }
	  ctx.pools = pools;

	  // entropy pools are written to cyclically, starting at index 0
	  ctx.pool = 0;

	  /**
	   * Generates random bytes. The bytes may be generated synchronously or
	   * asynchronously. Web workers must use the asynchronous interface or
	   * else the behavior is undefined.
	   *
	   * @param count the number of random bytes to generate.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generate = function(count, callback) {
	    // do synchronously
	    if(!callback) {
	      return ctx.generateSync(count);
	    }

	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;
	    var b = forge.util.createBuffer();

	    // reset key for every request
	    ctx.key = null;

	    generate();

	    function generate(err) {
	      if(err) {
	        return callback(err);
	      }

	      // sufficient bytes generated
	      if(b.length() >= count) {
	        return callback(null, b.getBytes(count));
	      }

	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        // prevent stack overflow
	        return forge.util.nextTick(function() {
	          _reseed(generate);
	        });
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

	      forge.util.setImmediate(generate);
	    }
	  };

	  /**
	   * Generates random bytes synchronously.
	   *
	   * @param count the number of random bytes to generate.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generateSync = function(count) {
	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;

	    // reset key for every request
	    ctx.key = null;

	    var b = forge.util.createBuffer();
	    while(b.length() < count) {
	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        _reseedSync();
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
	    }

	    return b.getBytes(count);
	  };

	  /**
	   * Private function that asynchronously reseeds a generator.
	   *
	   * @param callback(err) called once the operation completes.
	   */
	  function _reseed(callback) {
	    if(ctx.pools[0].messageLength >= 32) {
	      _seed();
	      return callback();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.seedFile(needed, function(err, bytes) {
	      if(err) {
	        return callback(err);
	      }
	      ctx.collect(bytes);
	      _seed();
	      callback();
	    });
	  }

	  /**
	   * Private function that synchronously reseeds a generator.
	   */
	  function _reseedSync() {
	    if(ctx.pools[0].messageLength >= 32) {
	      return _seed();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.collect(ctx.seedFileSync(needed));
	    _seed();
	  }

	  /**
	   * Private function that seeds a generator once enough bytes are available.
	   */
	  function _seed() {
	    // create a plugin-based message digest
	    var md = ctx.plugin.md.create();

	    // digest pool 0's entropy and restart it
	    md.update(ctx.pools[0].digest().getBytes());
	    ctx.pools[0].start();

	    // digest the entropy of other pools whose index k meet the
	    // condition '2^k mod n == 0' where n is the number of reseeds
	    var k = 1;
	    for(var i = 1; i < 32; ++i) {
	      // prevent signed numbers from being used
	      k = (k === 31) ? 0x80000000 : (k << 2);
	      if(k % ctx.reseeds === 0) {
	        md.update(ctx.pools[i].digest().getBytes());
	        ctx.pools[i].start();
	      }
	    }

	    // get digest for key bytes and iterate again for seed bytes
	    var keyBytes = md.digest().getBytes();
	    md.start();
	    md.update(keyBytes);
	    var seedBytes = md.digest().getBytes();

	    // update
	    ctx.key = ctx.plugin.formatKey(keyBytes);
	    ctx.seed = ctx.plugin.formatSeed(seedBytes);
	    ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;
	    ctx.generated = 0;
	  }

	  /**
	   * The built-in default seedFile. This seedFile is used when entropy
	   * is needed immediately.
	   *
	   * @param needed the number of bytes that are needed.
	   *
	   * @return the random bytes.
	   */
	  function defaultSeedFile(needed) {
	    // use window.crypto.getRandomValues strong source of entropy if available
	    var getRandomValues = null;
	    if(typeof window !== 'undefined') {
	      var _crypto = window.crypto || window.msCrypto;
	      if(_crypto && _crypto.getRandomValues) {
	        getRandomValues = function(arr) {
	          return _crypto.getRandomValues(arr);
	        };
	      }
	    }

	    var b = forge.util.createBuffer();
	    if(getRandomValues) {
	      while(b.length() < needed) {
	        // max byte length is 65536 before QuotaExceededError is thrown
	        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
	        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
	        var entropy = new Uint32Array(Math.floor(count));
	        try {
	          getRandomValues(entropy);
	          for(var i = 0; i < entropy.length; ++i) {
	            b.putInt32(entropy[i]);
	          }
	        } catch(e) {
	          /* only ignore QuotaExceededError */
	          if(!(typeof QuotaExceededError !== 'undefined' &&
	            e instanceof QuotaExceededError)) {
	            throw e;
	          }
	        }
	      }
	    }

	    // be sad and add some weak random data
	    if(b.length() < needed) {
	      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
	      implemented with David G. Carta's optimization: with 32 bit math
	      and without division (Public Domain). */
	      var hi, lo, next;
	      var seed = Math.floor(Math.random() * 0x010000);
	      while(b.length() < needed) {
	        lo = 16807 * (seed & 0xFFFF);
	        hi = 16807 * (seed >> 16);
	        lo += (hi & 0x7FFF) << 16;
	        lo += hi >> 15;
	        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
	        seed = lo & 0xFFFFFFFF;

	        // consume lower 3 bytes of seed
	        for(var i = 0; i < 3; ++i) {
	          // throw in more pseudo random
	          next = seed >>> (i << 3);
	          next ^= Math.floor(Math.random() * 0x0100);
	          b.putByte(String.fromCharCode(next & 0xFF));
	        }
	      }
	    }

	    return b.getBytes(needed);
	  }
	  // initialize seed file APIs
	  if(_crypto) {
	    // use nodejs async API
	    ctx.seedFile = function(needed, callback) {
	      _crypto.randomBytes(needed, function(err, bytes) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, bytes.toString());
	      });
	    };
	    // use nodejs sync API
	    ctx.seedFileSync = function(needed) {
	      return _crypto.randomBytes(needed).toString();
	    };
	  } else {
	    ctx.seedFile = function(needed, callback) {
	      try {
	        callback(null, defaultSeedFile(needed));
	      } catch(e) {
	        callback(e);
	      }
	    };
	    ctx.seedFileSync = defaultSeedFile;
	  }

	  /**
	   * Adds entropy to a prng ctx's accumulator.
	   *
	   * @param bytes the bytes of entropy as a string.
	   */
	  ctx.collect = function(bytes) {
	    // iterate over pools distributing entropy cyclically
	    var count = bytes.length;
	    for(var i = 0; i < count; ++i) {
	      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
	      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;
	    }
	  };

	  /**
	   * Collects an integer of n bits.
	   *
	   * @param i the integer entropy.
	   * @param n the number of bits in the integer.
	   */
	  ctx.collectInt = function(i, n) {
	    var bytes = '';
	    for(var x = 0; x < n; x += 8) {
	      bytes += String.fromCharCode((i >> x) & 0xFF);
	    }
	    ctx.collect(bytes);
	  };

	  /**
	   * Registers a Web Worker to receive immediate entropy from the main thread.
	   * This method is required until Web Workers can access the native crypto
	   * API. This method should be called twice for each created worker, once in
	   * the main thread, and once in the worker itself.
	   *
	   * @param worker the worker to register.
	   */
	  ctx.registerWorker = function(worker) {
	    // worker receives random bytes
	    if(worker === self) {
	      ctx.seedFile = function(needed, callback) {
	        function listener(e) {
	          var data = e.data;
	          if(data.forge && data.forge.prng) {
	            self.removeEventListener('message', listener);
	            callback(data.forge.prng.err, data.forge.prng.bytes);
	          }
	        }
	        self.addEventListener('message', listener);
	        self.postMessage({forge: {prng: {needed: needed}}});
	      };
	    } else {
	      // main thread sends random bytes upon request
	      var listener = function(e) {
	        var data = e.data;
	        if(data.forge && data.forge.prng) {
	          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
	            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});
	          });
	        }
	      };
	      // TODO: do we need to remove the event listener when the worker dies?
	      worker.addEventListener('message', listener);
	    }
	  };

	  return ctx;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'prng';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/prng',['require', 'module', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});

	})();

	/**
	 * An API for getting cryptographically-secure random bytes. The bytes are
	 * generated using the Fortuna algorithm devised by Bruce Schneier and
	 * Niels Ferguson.
	 *
	 * Getting strong random bytes is not yet easy to do in javascript. The only
	 * truish random entropy that can be collected is from the mouse, keyboard, or
	 * from timing with respect to page loads, etc. This generator makes a poor
	 * attempt at providing random bytes when those sources haven't yet provided
	 * enough entropy to initially seed or to reseed the PRNG.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// forge.random already defined
	if(forge.random && forge.random.getBytes) {
	  return;
	}

	(function(jQuery) {

	// the default prng plugin, uses AES-128
	var prng_aes = {};
	var _prng_aes_output = new Array(4);
	var _prng_aes_buffer = forge.util.createBuffer();
	prng_aes.formatKey = function(key) {
	  // convert the key into 32-bit integers
	  var tmp = forge.util.createBuffer(key);
	  key = new Array(4);
	  key[0] = tmp.getInt32();
	  key[1] = tmp.getInt32();
	  key[2] = tmp.getInt32();
	  key[3] = tmp.getInt32();

	  // return the expanded key
	  return forge.aes._expandKey(key, false);
	};
	prng_aes.formatSeed = function(seed) {
	  // convert seed into 32-bit integers
	  var tmp = forge.util.createBuffer(seed);
	  seed = new Array(4);
	  seed[0] = tmp.getInt32();
	  seed[1] = tmp.getInt32();
	  seed[2] = tmp.getInt32();
	  seed[3] = tmp.getInt32();
	  return seed;
	};
	prng_aes.cipher = function(key, seed) {
	  forge.aes._updateBlock(key, seed, _prng_aes_output, false);
	  _prng_aes_buffer.putInt32(_prng_aes_output[0]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[1]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[2]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[3]);
	  return _prng_aes_buffer.getBytes();
	};
	prng_aes.increment = function(seed) {
	  // FIXME: do we care about carry or signed issues?
	  ++seed[3];
	  return seed;
	};
	prng_aes.md = forge.md.sha256;

	/**
	 * Creates a new PRNG.
	 */
	function spawnPrng() {
	  var ctx = forge.prng.create(prng_aes);

	  /**
	   * Gets random bytes. If a native secure crypto API is unavailable, this
	   * method tries to make the bytes more unpredictable by drawing from data that
	   * can be collected from the user of the browser, eg: mouse movement.
	   *
	   * If a callback is given, this method will be called asynchronously.
	   *
	   * @param count the number of random bytes to get.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytes = function(count, callback) {
	    return ctx.generate(count, callback);
	  };

	  /**
	   * Gets random bytes asynchronously. If a native secure crypto API is
	   * unavailable, this method tries to make the bytes more unpredictable by
	   * drawing from data that can be collected from the user of the browser,
	   * eg: mouse movement.
	   *
	   * @param count the number of random bytes to get.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytesSync = function(count) {
	    return ctx.generate(count);
	  };

	  return ctx;
	}

	// create default prng context
	var _ctx = spawnPrng();

	// add other sources of entropy only if window.crypto.getRandomValues is not
	// available -- otherwise this source will be automatically used by the prng
	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var getRandomValues = null;
	if(typeof window !== 'undefined') {
	  var _crypto = window.crypto || window.msCrypto;
	  if(_crypto && _crypto.getRandomValues) {
	    getRandomValues = function(arr) {
	      return _crypto.getRandomValues(arr);
	    };
	  }
	}
	if(forge.disableNativeCode || (!_nodejs && !getRandomValues)) {
	  // if this is a web worker, do not use weak entropy, instead register to
	  // receive strong entropy asynchronously from the main thread
	  if(typeof window === 'undefined' || window.document === undefined) {
	    // FIXME:
	  }

	  // get load time entropy
	  _ctx.collectInt(+new Date(), 32);

	  // add some entropy from navigator object
	  if(typeof(navigator) !== 'undefined') {
	    var _navBytes = '';
	    for(var key in navigator) {
	      try {
	        if(typeof(navigator[key]) == 'string') {
	          _navBytes += navigator[key];
	        }
	      } catch(e) {
	        /* Some navigator keys might not be accessible, e.g. the geolocation
	          attribute throws an exception if touched in Mozilla chrome://
	          context.

	          Silently ignore this and just don't use this as a source of
	          entropy. */
	      }
	    }
	    _ctx.collect(_navBytes);
	    _navBytes = null;
	  }

	  // add mouse and keyboard collectors if jquery is available
	  if(jQuery) {
	    // set up mouse entropy capture
	    jQuery().mousemove(function(e) {
	      // add mouse coords
	      _ctx.collectInt(e.clientX, 16);
	      _ctx.collectInt(e.clientY, 16);
	    });

	    // set up keyboard entropy capture
	    jQuery().keypress(function(e) {
	      _ctx.collectInt(e.charCode, 8);
	    });
	  }
	}

	/* Random API */
	if(!forge.random) {
	  forge.random = _ctx;
	} else {
	  // extend forge.random with _ctx
	  for(var key in _ctx) {
	    forge.random[key] = _ctx[key];
	  }
	}

	// expose spawn PRNG
	forge.random.createInstance = spawnPrng;

	})(typeof(jQuery) !== 'undefined' ? jQuery : null);

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'random';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/random',['require', 'module', './aes', './md', './prng', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * RC2 implementation.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Information on the RC2 cipher is available from RFC #2268,
	 * http://www.ietf.org/rfc/rfc2268.txt
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var piTable = [
	  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
	  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
	  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
	  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
	  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
	  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
	  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
	  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
	  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
	  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
	  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
	  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
	  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
	  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
	  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
	  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
	];

	var s = [1, 2, 3, 5];


	/**
	 * Rotate a word left by given number of bits.
	 *
	 * Bits that are shifted out on the left are put back in on the right
	 * hand side.
	 *
	 * @param word The word to shift left.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var rol = function(word, bits) {
	  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
	};

	/**
	 * Rotate a word right by given number of bits.
	 *
	 * Bits that are shifted out on the right are put back in on the left
	 * hand side.
	 *
	 * @param word The word to shift right.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var ror = function(word, bits) {
	  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
	};


	/* RC2 API */
	forge.rc2 = forge.rc2 || {};

	/**
	 * Perform RC2 key expansion as per RFC #2268, section 2.
	 *
	 * @param key variable-length user key (between 1 and 128 bytes)
	 * @param effKeyBits number of effective key bits (default: 128)
	 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
	 */
	forge.rc2.expandKey = function(key, effKeyBits) {
	  if(typeof key === 'string') {
	    key = forge.util.createBuffer(key);
	  }
	  effKeyBits = effKeyBits || 128;

	  /* introduce variables that match the names used in RFC #2268 */
	  var L = key;
	  var T = key.length();
	  var T1 = effKeyBits;
	  var T8 = Math.ceil(T1 / 8);
	  var TM = 0xff >> (T1 & 0x07);
	  var i;

	  for(i = T; i < 128; i ++) {
	    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
	  }

	  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

	  for(i = 127 - T8; i >= 0; i --) {
	    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
	  }

	  return L;
	};


	/**
	 * Creates a RC2 cipher object.
	 *
	 * @param key the symmetric key to use (as base for key generation).
	 * @param bits the number of effective key bits.
	 * @param encrypt false for decryption, true for encryption.
	 *
	 * @return the cipher.
	 */
	var createCipher = function(key, bits, encrypt) {
	  var _finish = false, _input = null, _output = null, _iv = null;
	  var mixRound, mashRound;
	  var i, j, K = [];

	  /* Expand key and fill into K[] Array */
	  key = forge.rc2.expandKey(key, bits);
	  for(i = 0; i < 64; i ++) {
	    K.push(key.getInt16Le());
	  }

	  if(encrypt) {
	    /**
	     * Perform one mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 0; i < 4; i++) {
	        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        R[i] = rol(R[i], s[i]);
	        j ++;
	      }
	    };

	    /**
	     * Perform one mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 0; i < 4; i ++) {
	        R[i] += K[R[(i + 3) % 4] & 63];
	      }
	    };
	  } else {
	    /**
	     * Perform one r-mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] = ror(R[i], s[i]);
	        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        j --;
	      }
	    };

	    /**
	     * Perform one r-mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] -= K[R[(i + 3) % 4] & 63];
	      }
	    };
	  }

	  /**
	   * Run the specified cipher execution plan.
	   *
	   * This function takes four words from the input buffer, applies the IV on
	   * it (if requested) and runs the provided execution plan.
	   *
	   * The plan must be put together in form of a array of arrays.  Where the
	   * outer one is simply a list of steps to perform and the inner one needs
	   * to have two elements: the first one telling how many rounds to perform,
	   * the second one telling what to do (i.e. the function to call).
	   *
	   * @param {Array} plan The plan to execute.
	   */
	  var runPlan = function(plan) {
	    var R = [];

	    /* Get data from input buffer and fill the four words into R */
	    for(i = 0; i < 4; i ++) {
	      var val = _input.getInt16Le();

	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting, apply the IV first. */
	          val ^= _iv.getInt16Le();
	        } else {
	          /* We're decryption, keep cipher text for next block. */
	          _iv.putInt16Le(val);
	        }
	      }

	      R.push(val & 0xffff);
	    }

	    /* Reset global "j" variable as per spec. */
	    j = encrypt ? 0 : 63;

	    /* Run execution plan. */
	    for(var ptr = 0; ptr < plan.length; ptr ++) {
	      for(var ctr = 0; ctr < plan[ptr][0]; ctr ++) {
	        plan[ptr][1](R);
	      }
	    }

	    /* Write back result to output buffer. */
	    for(i = 0; i < 4; i ++) {
	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting in CBC-mode, feed back encrypted bytes into
	             IV buffer to carry it forward to next block. */
	          _iv.putInt16Le(R[i]);
	        } else {
	          R[i] ^= _iv.getInt16Le();
	        }
	      }

	      _output.putInt16Le(R[i]);
	    }
	  };


	  /* Create cipher object */
	  var cipher = null;
	  cipher = {
	    /**
	     * Starts or restarts the encryption or decryption process, whichever
	     * was previously configured.
	     *
	     * To use the cipher in CBC mode, iv may be given either as a string
	     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
	     *
	     * @param iv the initialization vector to use, null for ECB mode.
	     * @param output the output the buffer to write to, null to create one.
	     */
	    start: function(iv, output) {
	      if(iv) {
	        /* CBC mode */
	        if(typeof iv === 'string') {
	          iv = forge.util.createBuffer(iv);
	        }
	      }

	      _finish = false;
	      _input = forge.util.createBuffer();
	      _output = output || new forge.util.createBuffer();
	      _iv = iv;

	      cipher.output = _output;
	    },

	    /**
	     * Updates the next block.
	     *
	     * @param input the buffer to read from.
	     */
	    update: function(input) {
	      if(!_finish) {
	        // not finishing, so fill the input buffer with more input
	        _input.putBuffer(input);
	      }

	      while(_input.length() >= 8) {
	        runPlan([
	            [ 5, mixRound ],
	            [ 1, mashRound ],
	            [ 6, mixRound ],
	            [ 1, mashRound ],
	            [ 5, mixRound ]
	          ]);
	      }
	    },

	    /**
	     * Finishes encrypting or decrypting.
	     *
	     * @param pad a padding function to use, null for PKCS#7 padding,
	     *           signature(blockSize, buffer, decrypt).
	     *
	     * @return true if successful, false on error.
	     */
	    finish: function(pad) {
	      var rval = true;

	      if(encrypt) {
	        if(pad) {
	          rval = pad(8, _input, !encrypt);
	        } else {
	          // add PKCS#7 padding to block (each pad byte is the
	          // value of the number of pad bytes)
	          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());
	          _input.fillWithByte(padding, padding);
	        }
	      }

	      if(rval) {
	        // do final update
	        _finish = true;
	        cipher.update();
	      }

	      if(!encrypt) {
	        // check for error: input data not a multiple of block size
	        rval = (_input.length() === 0);
	        if(rval) {
	          if(pad) {
	            rval = pad(8, _output, !encrypt);
	          } else {
	            // ensure padding byte count is valid
	            var len = _output.length();
	            var count = _output.at(len - 1);

	            if(count > len) {
	              rval = false;
	            } else {
	              // trim off padding bytes
	              _output.truncate(count);
	            }
	          }
	        }
	      }

	      return rval;
	    }
	  };

	  return cipher;
	};


	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge.rc2.startEncrypting = function(key, iv, output) {
	  var cipher = forge.rc2.createEncryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start encrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge.rc2.createEncryptionCipher = function(key, bits) {
	  return createCipher(key, bits, true);
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge.rc2.startDecrypting = function(key, iv, output) {
	  var cipher = forge.rc2.createDecryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start decrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge.rc2.createDecryptionCipher = function(key, bits) {
	  return createCipher(key, bits, false);
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'rc2';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/rc2',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	// Copyright (c) 2005  Tom Wu
	// All Rights Reserved.
	// See "LICENSE" for details.

	// Basic JavaScript BN library - subset useful for RSA encryption.

	/*
	Licensing (LICENSE)
	-------------------

	This software is covered under the following copyright:
	*/
	/*
	 * Copyright (c) 2003-2005  Tom Wu
	 * All Rights Reserved.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
	 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
	 *
	 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
	 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
	 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
	 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
	 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 *
	 * In addition, the following condition applies:
	 *
	 * All redistributions must retain an intact copy of this copyright notice
	 * and disclaimer.
	 */
	/*
	Address all questions regarding this license to:

	  Tom Wu
	  tjw@cs.Stanford.EDU
	*/

	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// Bits per digit
	var dbits;

	// JavaScript engine analysis
	var canary = 0xdeadbeefcafe;
	var j_lm = ((canary&0xffffff)==0xefcafe);

	// (public) Constructor
	function BigInteger(a,b,c) {
	  this.data = [];
	  if(a != null)
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	}

	// return new, unset BigInteger
	function nbi() { return new BigInteger(null); }

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n) {
	  while(--n >= 0) {
	    var v = x*this.data[i++]+w.data[j]+c;
	    c = Math.floor(v/0x4000000);
	    w.data[j++] = v&0x3ffffff;
	  }
	  return c;
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n) {
	  var xl = x&0x7fff, xh = x>>15;
	  while(--n >= 0) {
	    var l = this.data[i]&0x7fff;
	    var h = this.data[i++]>>15;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);
	    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	    w.data[j++] = l&0x3fffffff;
	  }
	  return c;
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n) {
	  var xl = x&0x3fff, xh = x>>14;
	  while(--n >= 0) {
	    var l = this.data[i]&0x3fff;
	    var h = this.data[i++]>>14;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;
	    c = (l>>28)+(m>>14)+xh*h;
	    w.data[j++] = l&0xfffffff;
	  }
	  return c;
	}

	// node.js (no browser)
	if(typeof(navigator) === 'undefined')
	{
	   BigInteger.prototype.am = am3;
	   dbits = 28;
	} else if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	  BigInteger.prototype.am = am2;
	  dbits = 30;
	} else if(j_lm && (navigator.appName != "Netscape")) {
	  BigInteger.prototype.am = am1;
	  dbits = 26;
	} else { // Mozilla/Netscape seems to prefer am3
	  BigInteger.prototype.am = am3;
	  dbits = 28;
	}

	BigInteger.prototype.DB = dbits;
	BigInteger.prototype.DM = ((1<<dbits)-1);
	BigInteger.prototype.DV = (1<<dbits);

	var BI_FP = 52;
	BigInteger.prototype.FV = Math.pow(2,BI_FP);
	BigInteger.prototype.F1 = BI_FP-dbits;
	BigInteger.prototype.F2 = 2*dbits-BI_FP;

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this.data[0] = x;
	  else if(x < -1) this.data[0] = x+this.DV;
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { this.fromRadix(s,b); return; }
	  this.t = 0;
	  this.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      this.data[this.t++] = x;
	    else if(sh+k > this.DB) {
	      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	      this.data[this.t++] = (x>>(this.DB-sh));
	    } else
	      this.data[this.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= this.DB) sh -= this.DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    this.s = -1;
	    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	  }
	  this.clamp();
	  if(mi) BigInteger.ZERO.subTo(this,this);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s&this.DM;
	  while(this.t > 0 && this.data[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  if(this.s < 0) return "-"+this.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return this.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	  var p = this.DB-(i*this.DB)%k;
	  if(i-- > 0) {
	    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (this.data[i]&((1<<p)-1))<<(k-p);
	        d |= this.data[--i]>>(p+=this.DB-k);
	      } else {
	        d = (this.data[i]>>(p-=k))&km;
	        if(p <= 0) { p += this.DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return (this.s<0)?-r:r;
	  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if(this.t <= 0) return 0;
	  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var i;
	  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];
	  for(i = n-1; i >= 0; --i) r.data[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	  for(i = this.t-1; i >= 0; --i) {
	    r.data[i+ds+1] = (this.data[i]>>cbs)|c;
	    c = (this.data[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r.data[i] = 0;
	  r.data[ds] = c;
	  r.t = this.t+ds+1;
	  r.s = this.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  r.s = this.s;
	  var ds = Math.floor(n/this.DB);
	  if(ds >= this.t) { r.t = 0; return; }
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<bs)-1;
	  r.data[0] = this.data[ds]>>bs;
	  for(var i = ds+1; i < this.t; ++i) {
	    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;
	    r.data[i-ds] = this.data[i]>>bs;
	  }
	  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;
	  r.t = this.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this.data[i]-a.data[i];
	    r.data[i++] = c&this.DM;
	    c >>= this.DB;
	  }
	  if(a.t < this.t) {
	    c -= a.s;
	    while(i < this.t) {
	      c += this.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c += this.s;
	  } else {
	    c += this.s;
	    while(i < a.t) {
	      c -= a.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r.data[i++] = this.DV+c;
	  else if(c > 0) r.data[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var x = this.abs(), y = a.abs();
	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var i = r.t = 2*x.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x.data[i],r,2*i,0,1);
	    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	      r.data[i+x.t] -= x.DV;
	      r.data[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = this.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) this.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = this.s, ms = m.s;
	  var nsh = this.DB-nbits(pm.data[pm.t-1]);	// normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;
	  var y0 = y.data[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);
	  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);
	  if(r.compareTo(t) >= 0) {
	    r.data[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y);	// "negative" y so we can replace sub with am later
	  while(y.t < ys) y.data[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);
	    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r.data[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	  if(ts < 0) BigInteger.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if(this.t < 1) return 0;
	  var x = this.data[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;		// y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?this.DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(m.DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while(x.t <= this.mt2)	// pad x so am has enough room later
	    x.data[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x.data[i]*mp mod DV
	    var j = x.data[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	BigInteger.prototype.copyTo = bnpCopyTo;
	BigInteger.prototype.fromInt = bnpFromInt;
	BigInteger.prototype.fromString = bnpFromString;
	BigInteger.prototype.clamp = bnpClamp;
	BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger.prototype.lShiftTo = bnpLShiftTo;
	BigInteger.prototype.rShiftTo = bnpRShiftTo;
	BigInteger.prototype.subTo = bnpSubTo;
	BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger.prototype.squareTo = bnpSquareTo;
	BigInteger.prototype.divRemTo = bnpDivRemTo;
	BigInteger.prototype.invDigit = bnpInvDigit;
	BigInteger.prototype.isEven = bnpIsEven;
	BigInteger.prototype.exp = bnpExp;

	// public
	BigInteger.prototype.toString = bnToString;
	BigInteger.prototype.negate = bnNegate;
	BigInteger.prototype.abs = bnAbs;
	BigInteger.prototype.compareTo = bnCompareTo;
	BigInteger.prototype.bitLength = bnBitLength;
	BigInteger.prototype.mod = bnMod;
	BigInteger.prototype.modPowInt = bnModPowInt;

	// "constants"
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);

	// jsbn2 lib

	//Copyright (c) 2005-2009  Tom Wu
	//All Rights Reserved.
	//See "LICENSE" for details (See jsbn.js for LICENSE).

	//Extended JavaScript BN functions, required for RSA private ops.

	//Version 1.1: new BigInteger("0", 10) returns "proper" zero

	//(public)
	function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	//(public) return value as integer
	function bnIntValue() {
	if(this.s < 0) {
	 if(this.t == 1) return this.data[0]-this.DV;
	 else if(this.t == 0) return -1;
	} else if(this.t == 1) return this.data[0];
	else if(this.t == 0) return 0;
	// assumes 16 < DB < 32
	return ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];
	}

	//(public) return value as byte
	function bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }

	//(public) return value as short (assumes DB>=16)
	function bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }

	//(protected) return x s.t. r^x < DV
	function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	//(public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	if(this.s < 0) return -1;
	else if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
	else return 1;
	}

	//(protected) convert to radix string
	function bnpToRadix(b) {
	if(b == null) b = 10;
	if(this.signum() == 0 || b < 2 || b > 36) return "0";
	var cs = this.chunkSize(b);
	var a = Math.pow(b,cs);
	var d = nbv(a), y = nbi(), z = nbi(), r = "";
	this.divRemTo(d,y,z);
	while(y.signum() > 0) {
	 r = (a+z.intValue()).toString(b).substr(1) + r;
	 y.divRemTo(d,y,z);
	}
	return z.intValue().toString(b) + r;
	}

	//(protected) convert from radix string
	function bnpFromRadix(s,b) {
	this.fromInt(0);
	if(b == null) b = 10;
	var cs = this.chunkSize(b);
	var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	for(var i = 0; i < s.length; ++i) {
	 var x = intAt(s,i);
	 if(x < 0) {
	   if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	   continue;
	 }
	 w = b*w+x;
	 if(++j >= cs) {
	   this.dMultiply(d);
	   this.dAddOffset(w,0);
	   j = 0;
	   w = 0;
	 }
	}
	if(j > 0) {
	 this.dMultiply(Math.pow(b,j));
	 this.dAddOffset(w,0);
	}
	if(mi) BigInteger.ZERO.subTo(this,this);
	}

	//(protected) alternate constructor
	function bnpFromNumber(a,b,c) {
	if("number" == typeof b) {
	 // new BigInteger(int,int,RNG)
	 if(a < 2) this.fromInt(1);
	 else {
	   this.fromNumber(a,c);
	   if(!this.testBit(a-1))  // force MSB set
	     this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
	   if(this.isEven()) this.dAddOffset(1,0); // force odd
	   while(!this.isProbablePrime(b)) {
	     this.dAddOffset(2,0);
	     if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
	   }
	 }
	} else {
	 // new BigInteger(int,RNG)
	 var x = new Array(), t = a&7;
	 x.length = (a>>3)+1;
	 b.nextBytes(x);
	 if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	 this.fromString(x,256);
	}
	}

	//(public) convert to bigendian byte array
	function bnToByteArray() {
	var i = this.t, r = new Array();
	r[0] = this.s;
	var p = this.DB-(i*this.DB)%8, d, k = 0;
	if(i-- > 0) {
	 if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)
	   r[k++] = d|(this.s<<(this.DB-p));
	 while(i >= 0) {
	   if(p < 8) {
	     d = (this.data[i]&((1<<p)-1))<<(8-p);
	     d |= this.data[--i]>>(p+=this.DB-8);
	   } else {
	     d = (this.data[i]>>(p-=8))&0xff;
	     if(p <= 0) { p += this.DB; --i; }
	   }
	   if((d&0x80) != 0) d |= -256;
	   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	   if(k > 0 || d != this.s) r[k++] = d;
	 }
	}
	return r;
	}

	function bnEquals(a) { return(this.compareTo(a)==0); }
	function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
	function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

	//(protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r) {
	var i, f, m = Math.min(a.t,this.t);
	for(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);
	if(a.t < this.t) {
	 f = a.s&this.DM;
	 for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);
	 r.t = this.t;
	} else {
	 f = this.s&this.DM;
	 for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);
	 r.t = a.t;
	}
	r.s = op(this.s,a.s);
	r.clamp();
	}

	//(public) this & a
	function op_and(x,y) { return x&y; }
	function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	//(public) this | a
	function op_or(x,y) { return x|y; }
	function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	//(public) this ^ a
	function op_xor(x,y) { return x^y; }
	function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	//(public) this & ~a
	function op_andnot(x,y) { return x&~y; }
	function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	//(public) ~this
	function bnNot() {
	var r = nbi();
	for(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];
	r.t = this.t;
	r.s = ~this.s;
	return r;
	}

	//(public) this << n
	function bnShiftLeft(n) {
	var r = nbi();
	if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	return r;
	}

	//(public) this >> n
	function bnShiftRight(n) {
	var r = nbi();
	if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	return r;
	}

	//return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	if(x == 0) return -1;
	var r = 0;
	if((x&0xffff) == 0) { x >>= 16; r += 16; }
	if((x&0xff) == 0) { x >>= 8; r += 8; }
	if((x&0xf) == 0) { x >>= 4; r += 4; }
	if((x&3) == 0) { x >>= 2; r += 2; }
	if((x&1) == 0) ++r;
	return r;
	}

	//(public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	for(var i = 0; i < this.t; ++i)
	 if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);
	if(this.s < 0) return this.t*this.DB;
	return -1;
	}

	//return number of 1 bits in x
	function cbit(x) {
	var r = 0;
	while(x != 0) { x &= x-1; ++r; }
	return r;
	}

	//(public) return number of set bits
	function bnBitCount() {
	var r = 0, x = this.s&this.DM;
	for(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);
	return r;
	}

	//(public) true iff nth bit is set
	function bnTestBit(n) {
	var j = Math.floor(n/this.DB);
	if(j >= this.t) return(this.s!=0);
	return((this.data[j]&(1<<(n%this.DB)))!=0);
	}

	//(protected) this op (1<<n)
	function bnpChangeBit(n,op) {
	var r = BigInteger.ONE.shiftLeft(n);
	this.bitwiseTo(r,op,r);
	return r;
	}

	//(public) this | (1<<n)
	function bnSetBit(n) { return this.changeBit(n,op_or); }

	//(public) this & ~(1<<n)
	function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	//(public) this ^ (1<<n)
	function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	//(protected) r = this + a
	function bnpAddTo(a,r) {
	var i = 0, c = 0, m = Math.min(a.t,this.t);
	while(i < m) {
	 c += this.data[i]+a.data[i];
	 r.data[i++] = c&this.DM;
	 c >>= this.DB;
	}
	if(a.t < this.t) {
	 c += a.s;
	 while(i < this.t) {
	   c += this.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += this.s;
	} else {
	 c += this.s;
	 while(i < a.t) {
	   c += a.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += a.s;
	}
	r.s = (c<0)?-1:0;
	if(c > 0) r.data[i++] = c;
	else if(c < -1) r.data[i++] = this.DV+c;
	r.t = i;
	r.clamp();
	}

	//(public) this + a
	function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	//(public) this - a
	function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	//(public) this * a
	function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	//(public) this / a
	function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	//(public) this % a
	function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	//(public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	var q = nbi(), r = nbi();
	this.divRemTo(a,q,r);
	return new Array(q,r);
	}

	//(protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	this.data[this.t] = this.am(0,n-1,this,0,0,this.t);
	++this.t;
	this.clamp();
	}

	//(protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w) {
	if(n == 0) return;
	while(this.t <= w) this.data[this.t++] = 0;
	this.data[w] += n;
	while(this.data[w] >= this.DV) {
	 this.data[w] -= this.DV;
	 if(++w >= this.t) this.data[this.t++] = 0;
	 ++this.data[w];
	}
	}

	//A "null" reducer
	function NullExp() {}
	function nNop(x) { return x; }
	function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	function nSqrTo(x,r) { x.squareTo(r); }

	NullExp.prototype.convert = nNop;
	NullExp.prototype.revert = nNop;
	NullExp.prototype.mulTo = nMulTo;
	NullExp.prototype.sqrTo = nSqrTo;

	//(public) this^e
	function bnPow(e) { return this.exp(e,new NullExp()); }

	//(protected) r = lower n words of "this * a", a.t <= n
	//"this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r) {
	var i = Math.min(this.t+a.t,n);
	r.s = 0; // assumes a,this >= 0
	r.t = i;
	while(i > 0) r.data[--i] = 0;
	var j;
	for(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);
	for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);
	r.clamp();
	}

	//(protected) r = "this * a" without lower n words, n > 0
	//"this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r) {
	--n;
	var i = r.t = this.t+a.t-n;
	r.s = 0; // assumes a,this >= 0
	while(--i >= 0) r.data[i] = 0;
	for(i = Math.max(n-this.t,0); i < a.t; ++i)
	 r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);
	r.clamp();
	r.drShiftTo(1,r);
	}

	//Barrett modular reduction
	function Barrett(m) {
	// setup Barrett
	this.r2 = nbi();
	this.q3 = nbi();
	BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	this.mu = this.r2.divide(m);
	this.m = m;
	}

	function barrettConvert(x) {
	if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	else if(x.compareTo(this.m) < 0) return x;
	else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	}

	function barrettRevert(x) { return x; }

	//x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	x.drShiftTo(this.m.t-1,this.r2);
	if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	x.subTo(this.r2,x);
	while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	//r = x^2 mod m; x != r
	function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	//r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Barrett.prototype.convert = barrettConvert;
	Barrett.prototype.revert = barrettRevert;
	Barrett.prototype.reduce = barrettReduce;
	Barrett.prototype.mulTo = barrettMulTo;
	Barrett.prototype.sqrTo = barrettSqrTo;

	//(public) this^e % m (HAC 14.85)
	function bnModPow(e,m) {
	var i = e.bitLength(), k, r = nbv(1), z;
	if(i <= 0) return r;
	else if(i < 18) k = 1;
	else if(i < 48) k = 3;
	else if(i < 144) k = 4;
	else if(i < 768) k = 5;
	else k = 6;
	if(i < 8)
	 z = new Classic(m);
	else if(m.isEven())
	 z = new Barrett(m);
	else
	 z = new Montgomery(m);

	// precomputation
	var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	g[1] = z.convert(this);
	if(k > 1) {
	 var g2 = nbi();
	 z.sqrTo(g[1],g2);
	 while(n <= km) {
	   g[n] = nbi();
	   z.mulTo(g2,g[n-2],g[n]);
	   n += 2;
	 }
	}

	var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	i = nbits(e.data[j])-1;
	while(j >= 0) {
	 if(i >= k1) w = (e.data[j]>>(i-k1))&km;
	 else {
	   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);
	   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);
	 }

	 n = k;
	 while((w&1) == 0) { w >>= 1; --n; }
	 if((i -= n) < 0) { i += this.DB; --j; }
	 if(is1) {  // ret == 1, don't bother squaring or multiplying it
	   g[w].copyTo(r);
	   is1 = false;
	 } else {
	   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	   z.mulTo(r2,g[w],r);
	 }

	 while(j >= 0 && (e.data[j]&(1<<i)) == 0) {
	   z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	   if(--i < 0) { i = this.DB-1; --j; }
	 }
	}
	return z.revert(r);
	}

	//(public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	var x = (this.s<0)?this.negate():this.clone();
	var y = (a.s<0)?a.negate():a.clone();
	if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	if(g < 0) return x;
	if(i < g) g = i;
	if(g > 0) {
	 x.rShiftTo(g,x);
	 y.rShiftTo(g,y);
	}
	while(x.signum() > 0) {
	 if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	 if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	 if(x.compareTo(y) >= 0) {
	   x.subTo(y,x);
	   x.rShiftTo(1,x);
	 } else {
	   y.subTo(x,y);
	   y.rShiftTo(1,y);
	 }
	}
	if(g > 0) y.lShiftTo(g,y);
	return y;
	}

	//(protected) this % n, n < 2^26
	function bnpModInt(n) {
	if(n <= 0) return 0;
	var d = this.DV%n, r = (this.s<0)?n-1:0;
	if(this.t > 0)
	 if(d == 0) r = this.data[0]%n;
	 else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;
	return r;
	}

	//(public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	var ac = m.isEven();
	if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	var u = m.clone(), v = this.clone();
	var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	while(u.signum() != 0) {
	 while(u.isEven()) {
	   u.rShiftTo(1,u);
	   if(ac) {
	     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	     a.rShiftTo(1,a);
	   } else if(!b.isEven()) b.subTo(m,b);
	   b.rShiftTo(1,b);
	 }
	 while(v.isEven()) {
	   v.rShiftTo(1,v);
	   if(ac) {
	     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	     c.rShiftTo(1,c);
	   } else if(!d.isEven()) d.subTo(m,d);
	   d.rShiftTo(1,d);
	 }
	 if(u.compareTo(v) >= 0) {
	   u.subTo(v,u);
	   if(ac) a.subTo(c,a);
	   b.subTo(d,b);
	 } else {
	   v.subTo(u,v);
	   if(ac) c.subTo(a,c);
	   d.subTo(b,d);
	 }
	}
	if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	if(d.compareTo(m) >= 0) return d.subtract(m);
	if(d.signum() < 0) d.addTo(m,d); else return d;
	if(d.signum() < 0) return d.add(m); else return d;
	}

	var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
	var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	//(public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	var i, x = this.abs();
	if(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {
	 for(i = 0; i < lowprimes.length; ++i)
	   if(x.data[0] == lowprimes[i]) return true;
	 return false;
	}
	if(x.isEven()) return false;
	i = 1;
	while(i < lowprimes.length) {
	 var m = lowprimes[i], j = i+1;
	 while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	 m = x.modInt(m);
	 while(i < j) if(m%lowprimes[i++] == 0) return false;
	}
	return x.millerRabin(t);
	}

	//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	var n1 = this.subtract(BigInteger.ONE);
	var k = n1.getLowestSetBit();
	if(k <= 0) return false;
	var r = n1.shiftRight(k);
	var prng = bnGetPrng();
	var a;
	for(var i = 0; i < t; ++i) {
	 // select witness 'a' at random from between 1 and n1
	 do {
	   a = new BigInteger(this.bitLength(), prng);
	 }
	 while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
	 var y = a.modPow(r,this);
	 if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	   var j = 1;
	   while(j++ < k && y.compareTo(n1) != 0) {
	     y = y.modPowInt(2,this);
	     if(y.compareTo(BigInteger.ONE) == 0) return false;
	   }
	   if(y.compareTo(n1) != 0) return false;
	 }
	}
	return true;
	}

	// get pseudo random number generator
	function bnGetPrng() {
	  // create prng with api that matches BigInteger secure random
	  return {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = Math.floor(Math.random() * 0x0100);
	      }
	    }
	  };
	}

	//protected
	BigInteger.prototype.chunkSize = bnpChunkSize;
	BigInteger.prototype.toRadix = bnpToRadix;
	BigInteger.prototype.fromRadix = bnpFromRadix;
	BigInteger.prototype.fromNumber = bnpFromNumber;
	BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	BigInteger.prototype.changeBit = bnpChangeBit;
	BigInteger.prototype.addTo = bnpAddTo;
	BigInteger.prototype.dMultiply = bnpDMultiply;
	BigInteger.prototype.dAddOffset = bnpDAddOffset;
	BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	BigInteger.prototype.modInt = bnpModInt;
	BigInteger.prototype.millerRabin = bnpMillerRabin;

	//public
	BigInteger.prototype.clone = bnClone;
	BigInteger.prototype.intValue = bnIntValue;
	BigInteger.prototype.byteValue = bnByteValue;
	BigInteger.prototype.shortValue = bnShortValue;
	BigInteger.prototype.signum = bnSigNum;
	BigInteger.prototype.toByteArray = bnToByteArray;
	BigInteger.prototype.equals = bnEquals;
	BigInteger.prototype.min = bnMin;
	BigInteger.prototype.max = bnMax;
	BigInteger.prototype.and = bnAnd;
	BigInteger.prototype.or = bnOr;
	BigInteger.prototype.xor = bnXor;
	BigInteger.prototype.andNot = bnAndNot;
	BigInteger.prototype.not = bnNot;
	BigInteger.prototype.shiftLeft = bnShiftLeft;
	BigInteger.prototype.shiftRight = bnShiftRight;
	BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	BigInteger.prototype.bitCount = bnBitCount;
	BigInteger.prototype.testBit = bnTestBit;
	BigInteger.prototype.setBit = bnSetBit;
	BigInteger.prototype.clearBit = bnClearBit;
	BigInteger.prototype.flipBit = bnFlipBit;
	BigInteger.prototype.add = bnAdd;
	BigInteger.prototype.subtract = bnSubtract;
	BigInteger.prototype.multiply = bnMultiply;
	BigInteger.prototype.divide = bnDivide;
	BigInteger.prototype.remainder = bnRemainder;
	BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	BigInteger.prototype.modPow = bnModPow;
	BigInteger.prototype.modInverse = bnModInverse;
	BigInteger.prototype.pow = bnPow;
	BigInteger.prototype.gcd = bnGCD;
	BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

	//BigInteger interfaces not implemented in jsbn:

	//BigInteger(int signum, byte[] magnitude)
	//double doubleValue()
	//float floatValue()
	//int hashCode()
	//long longValue()
	//static BigInteger valueOf(long val)

	forge.jsbn = forge.jsbn || {};
	forge.jsbn.BigInteger = BigInteger;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'jsbn';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/jsbn',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
	 *
	 * Modified but based on the following MIT and BSD licensed code:
	 *
	 * https://github.com/kjur/jsjws/blob/master/rsa.js:
	 *
	 * The 'jsjws'(JSON Web Signature JavaScript Library) License
	 *
	 * Copyright (c) 2012 Kenji Urushima
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
	 *
	 * RSAES-OAEP.js
	 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
	 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
	 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
	 * Contact: ellis@nukinetics.com
	 * Distributed under the BSD License.
	 *
	 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
	 *
	 * @author Evan Jones (http://evanjones.ca/)
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for PKCS#1 API
	var pkcs1 = forge.pkcs1 = forge.pkcs1 || {};

	/**
	 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
	 * and seed.
	 *
	 * This method does not perform RSA encryption, it only encodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param message the message to encode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          seed the seed to use.
	 *          md the message digest object to use, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the encoded message bytes.
	 */
	pkcs1.encode_rsa_oaep = function(key, message, options) {
	  // parse arguments
	  var label;
	  var seed;
	  var md;
	  var mgf1Md;
	  // legacy args (label, seed, md)
	  if(typeof options === 'string') {
	    label = options;
	    seed = arguments[3] || undefined;
	    md = arguments[4] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    seed = options.seed || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // default OAEP to SHA-1 message digest
	  if(!md) {
	    md = forge.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  // compute length in bytes and check output
	  var keyLength = Math.ceil(key.n.bitLength() / 8);
	  var maxLength = keyLength - 2 * md.digestLength - 2;
	  if(message.length > maxLength) {
	    var error = new Error('RSAES-OAEP input message length is too long.');
	    error.length = message.length;
	    error.maxLength = maxLength;
	    throw error;
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest();

	  var PS = '';
	  var PS_length = maxLength - message.length;
	  for (var i = 0; i < PS_length; i++) {
	    PS += '\x00';
	  }

	  var DB = lHash.getBytes() + PS + '\x01' + message;

	  if(!seed) {
	    seed = forge.random.getBytes(md.digestLength);
	  } else if(seed.length !== md.digestLength) {
	    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +
	      'match the digest length.')
	    error.seedLength = seed.length;
	    error.digestLength = md.digestLength;
	    throw error;
	  }

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);

	  // return encoded message
	  return '\x00' + maskedSeed + maskedDB;
	};

	/**
	 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
	 * label (L).
	 *
	 * This method does not perform RSA decryption, it only decodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param em the encoded message to decode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          md the message digest object to use for OAEP, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the decoded message bytes.
	 */
	pkcs1.decode_rsa_oaep = function(key, em, options) {
	  // parse args
	  var label;
	  var md;
	  var mgf1Md;
	  // legacy args
	  if(typeof options === 'string') {
	    label = options;
	    md = arguments[3] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // compute length in bytes
	  var keyLength = Math.ceil(key.n.bitLength() / 8);

	  if(em.length !== keyLength) {
	    var error = new Error('RSAES-OAEP encoded message length is invalid.');
	    error.length = em.length;
	    error.expectedLength = keyLength;
	    throw error;
	  }

	  // default OAEP to SHA-1 message digest
	  if(md === undefined) {
	    md = forge.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  if(keyLength < 2 * md.digestLength + 2) {
	    throw new Error('RSAES-OAEP key is too short for the hash function.');
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest().getBytes();

	  // split the message into its parts
	  var y = em.charAt(0);
	  var maskedSeed = em.substring(1, md.digestLength + 1);
	  var maskedDB = em.substring(1 + md.digestLength);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);

	  var lHashPrime = db.substring(0, md.digestLength);

	  // constant time check that all values match what is expected
	  var error = (y !== '\x00');

	  // constant time check lHash vs lHashPrime
	  for(var i = 0; i < md.digestLength; ++i) {
	    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));
	  }

	  // "constant time" find the 0x1 byte separating the padding (zeros) from the
	  // message
	  // TODO: It must be possible to do this in a better/smarter way?
	  var in_ps = 1;
	  var index = md.digestLength;
	  for(var j = md.digestLength; j < db.length; j++) {
	    var code = db.charCodeAt(j);

	    var is_0 = (code & 0x1) ^ 0x1;

	    // non-zero if not 0 or 1 in the ps section
	    var error_mask = in_ps ? 0xfffe : 0x0000;
	    error |= (code & error_mask);

	    // latch in_ps to zero after we find 0x1
	    in_ps = in_ps & is_0;
	    index += in_ps;
	  }

	  if(error || db.charCodeAt(index) !== 0x1) {
	    throw new Error('Invalid RSAES-OAEP padding.');
	  }

	  return db.substring(index + 1);
	};

	function rsa_mgf1(seed, maskLength, hash) {
	  // default to SHA-1 message digest
	  if(!hash) {
	    hash = forge.md.sha1.create();
	  }
	  var t = '';
	  var count = Math.ceil(maskLength / hash.digestLength);
	  for(var i = 0; i < count; ++i) {
	    var c = String.fromCharCode(
	      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);
	    hash.start();
	    hash.update(seed + c);
	    t += hash.digest().getBytes();
	  }
	  return t.substring(0, maskLength);
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs1',['require', 'module', './util', './random', './sha1'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Prime number generation API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// forge.prime already defined
	if(forge.prime) {
	  return;
	}

	/* PRIME API */
	var prime = forge.prime = forge.prime || {};

	var BigInteger = forge.jsbn.BigInteger;

	// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
	var THIRTY = new BigInteger(null);
	THIRTY.fromInt(30);
	var op_or = function(x, y) {return x|y;};

	/**
	 * Generates a random probable prime with the given number of bits.
	 *
	 * Alternative algorithms can be specified by name as a string or as an
	 * object with custom options like so:
	 *
	 * {
	 *   name: 'PRIMEINC',
	 *   options: {
	 *     maxBlockTime: <the maximum amount of time to block the main
	 *       thread before allowing I/O other JS to run>,
	 *     millerRabinTests: <the number of miller-rabin tests to run>,
	 *     workerScript: <the worker script URL>,
	 *     workers: <the number of web workers (if supported) to use,
	 *       -1 to use estimated cores minus one>.
	 *     workLoad: the size of the work load, ie: number of possible prime
	 *       numbers for each web worker to check per work assignment,
	 *       (default: 100).
	 *   }
	 * }
	 *
	 * @param bits the number of bits for the prime number.
	 * @param options the options to use.
	 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
	 *          [prng] a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *
	 * @return callback(err, num) called once the operation completes.
	 */
	prime.generateProbablePrime = function(bits, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  // default to PRIMEINC algorithm
	  var algorithm = options.algorithm || 'PRIMEINC';
	  if(typeof algorithm === 'string') {
	    algorithm = {name: algorithm};
	  }
	  algorithm.options = algorithm.options || {};

	  // create prng with api that matches BigInteger secure random
	  var prng = options.prng || forge.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  if(algorithm.name === 'PRIMEINC') {
	    return primeincFindPrime(bits, rng, algorithm.options, callback);
	  }

	  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
	};

	function primeincFindPrime(bits, rng, options, callback) {
	  if('workers' in options) {
	    return primeincFindPrimeWithWorkers(bits, rng, options, callback);
	  }
	  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	}

	function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
	  // initialize random number
	  var num = generateRandom(bits, rng);

	  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
	  number we are given is always aligned at 30k + 1. Each time the number is
	  determined not to be prime we add to get to the next 'i', eg: if the number
	  was at 30k + 1 we add 6. */
	  var deltaIdx = 0;

	  // get required number of MR tests
	  var mrTests = getMillerRabinTests(num.bitLength());
	  if('millerRabinTests' in options) {
	    mrTests = options.millerRabinTests;
	  }

	  // find prime nearest to 'num' for maxBlockTime ms
	  // 10 ms gives 5ms of leeway for other calculations before dropping
	  // below 60fps (1000/60 == 16.67), but in reality, the number will
	  // likely be higher due to an 'atomic' big int modPow
	  var maxBlockTime = 10;
	  if('maxBlockTime' in options) {
	    maxBlockTime = options.maxBlockTime;
	  }
	  var start = +new Date();
	  do {
	    // overflow, regenerate random number
	    if(num.bitLength() > bits) {
	      num = generateRandom(bits, rng);
	    }
	    // do primality test
	    if(num.isProbablePrime(mrTests)) {
	      return callback(null, num);
	    }
	    // get next potential prime
	    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));

	  // keep trying (setImmediate would be better here)
	  forge.util.setImmediate(function() {
	    primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	  });
	}

	function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
	  // web workers unavailable
	  if(typeof Worker === 'undefined') {
	    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	  }

	  // initialize random number
	  var num = generateRandom(bits, rng);

	  // use web workers to generate keys
	  var numWorkers = options.workers;
	  var workLoad = options.workLoad || 100;
	  var range = workLoad * 30 / 8;
	  var workerScript = options.workerScript || 'forge/prime.worker.js';
	  if(numWorkers === -1) {
	    return forge.util.estimateCores(function(err, cores) {
	      if(err) {
	        // default to 2
	        cores = 2;
	      }
	      numWorkers = cores - 1;
	      generate();
	    });
	  }
	  generate();

	  function generate() {
	    // require at least 1 worker
	    numWorkers = Math.max(1, numWorkers);

	    // TODO: consider optimizing by starting workers outside getPrime() ...
	    // note that in order to clean up they will have to be made internally
	    // asynchronous which may actually be slower

	    // start workers immediately
	    var workers = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      // FIXME: fix path or use blob URLs
	      workers[i] = new Worker(workerScript);
	    }
	    var running = numWorkers;

	    // listen for requests from workers and assign ranges to find prime
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].addEventListener('message', workerMessage);
	    }

	    /* Note: The distribution of random numbers is unknown. Therefore, each
	    web worker is continuously allocated a range of numbers to check for a
	    random number until one is found.

	    Every 30 numbers will be checked just 8 times, because prime numbers
	    have the form:

	    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

	    Therefore, if we want a web worker to run N checks before asking for
	    a new range of numbers, each range must contain N*30/8 numbers.

	    For 100 checks (workLoad), this is a range of 375. */

	    var found = false;
	    function workerMessage(e) {
	      // ignore message, prime already found
	      if(found) {
	        return;
	      }

	      --running;
	      var data = e.data;
	      if(data.found) {
	        // terminate all workers
	        for(var i = 0; i < workers.length; ++i) {
	          workers[i].terminate();
	        }
	        found = true;
	        return callback(null, new BigInteger(data.prime, 16));
	      }

	      // overflow, regenerate random number
	      if(num.bitLength() > bits) {
	        num = generateRandom(bits, rng);
	      }

	      // assign new range to check
	      var hex = num.toString(16);

	      // start prime search
	      e.target.postMessage({
	        hex: hex,
	        workLoad: workLoad
	      });

	      num.dAddOffset(range, 0);
	    }
	  }
	}

	/**
	 * Generates a random number using the given number of bits and RNG.
	 *
	 * @param bits the number of bits for the number.
	 * @param rng the random number generator to use.
	 *
	 * @return the random number.
	 */
	function generateRandom(bits, rng) {
	  var num = new BigInteger(bits, rng);
	  // force MSB set
	  var bits1 = bits - 1;
	  if(!num.testBit(bits1)) {
	    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
	  }
	  // align number on 30k+1 boundary
	  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
	  return num;
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'prime';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/prime',['require', 'module', './util', './jsbn', './random'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});

	})();

	/**
	 * Javascript implementation of basic RSA algorithms.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The only algorithm currently supported for PKI is RSA.
	 *
	 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
	 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
	 * and a subjectPublicKey of type bit string.
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of RSA, there aren't any.
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm AlgorithmIdentifier,
	 *   subjectPublicKey BIT STRING
	 * }
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * For an RSA public key, the subjectPublicKey is:
	 *
	 * RSAPublicKey ::= SEQUENCE {
	 *   modulus            INTEGER,    -- n
	 *   publicExponent     INTEGER     -- e
	 * }
	 *
	 * PrivateKeyInfo ::= SEQUENCE {
	 *   version                   Version,
	 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
	 *   privateKey                PrivateKey,
	 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * Version ::= INTEGER
	 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
	 * PrivateKey ::= OCTET STRING
	 * Attributes ::= SET OF Attribute
	 *
	 * An RSA private key as the following structure:
	 *
	 * RSAPrivateKey ::= SEQUENCE {
	 *   version Version,
	 *   modulus INTEGER, -- n
	 *   publicExponent INTEGER, -- e
	 *   privateExponent INTEGER, -- d
	 *   prime1 INTEGER, -- p
	 *   prime2 INTEGER, -- q
	 *   exponent1 INTEGER, -- d mod (p-1)
	 *   exponent2 INTEGER, -- d mod (q-1)
	 *   coefficient INTEGER -- (inverse of q) mod p
	 * }
	 *
	 * Version ::= INTEGER
	 *
	 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
	 */
	(function() {
	function initModule(forge) {
	/* ########## Begin module implementation ########## */

	if(typeof BigInteger === 'undefined') {
	  var BigInteger = forge.jsbn.BigInteger;
	}

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/*
	 * RSA encryption and decryption, see RFC 2313.
	 */
	forge.pki = forge.pki || {};
	forge.pki.rsa = forge.rsa = forge.rsa || {};
	var pki = forge.pki;

	// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

	// validator for a PrivateKeyInfo structure
	var privateKeyValidator = {
	  // PrivateKeyInfo
	  name: 'PrivateKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'PrivateKeyInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // privateKeyAlgorithm
	    name: 'PrivateKeyInfo.privateKeyAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'privateKeyOid'
	    }]
	  }, {
	    // PrivateKey
	    name: 'PrivateKeyInfo',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'privateKey'
	  }]
	};

	// validator for an RSA private key
	var rsaPrivateKeyValidator = {
	  // RSAPrivateKey
	  name: 'RSAPrivateKey',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'RSAPrivateKey.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // modulus (n)
	    name: 'RSAPrivateKey.modulus',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPrivateKey.publicExponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPublicExponent'
	  }, {
	    // privateExponent (d)
	    name: 'RSAPrivateKey.privateExponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrivateExponent'
	  }, {
	    // prime1 (p)
	    name: 'RSAPrivateKey.prime1',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime1'
	  }, {
	    // prime2 (q)
	    name: 'RSAPrivateKey.prime2',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime2'
	  }, {
	    // exponent1 (d mod (p-1))
	    name: 'RSAPrivateKey.exponent1',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent1'
	  }, {
	    // exponent2 (d mod (q-1))
	    name: 'RSAPrivateKey.exponent2',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent2'
	  }, {
	    // coefficient ((inverse of q) mod p)
	    name: 'RSAPrivateKey.coefficient',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyCoefficient'
	  }]
	};

	// validator for an RSA public key
	var rsaPublicKeyValidator = {
	  // RSAPublicKey
	  name: 'RSAPublicKey',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // modulus (n)
	    name: 'RSAPublicKey.modulus',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPublicKey.exponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyExponent'
	  }]
	};

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
	  name: 'SubjectPublicKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'subjectPublicKeyInfo',
	  value: [{
	    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'publicKeyOid'
	    }]
	  }, {
	    // subjectPublicKey
	    name: 'SubjectPublicKeyInfo.subjectPublicKey',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    value: [{
	      // RSAPublicKey
	      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      optional: true,
	      captureAsn1: 'rsaPublicKey'
	    }]
	  }]
	};

	/**
	 * Wrap digest in DigestInfo object.
	 *
	 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
	 *
	 * DigestInfo ::= SEQUENCE {
	 *   digestAlgorithm DigestAlgorithmIdentifier,
	 *   digest Digest
	 * }
	 *
	 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	 * Digest ::= OCTET STRING
	 *
	 * @param md the message digest object with the hash to sign.
	 *
	 * @return the encoded message (ready for RSA encrytion)
	 */
	var emsaPkcs1v15encode = function(md) {
	  // get the oid for the algorithm
	  var oid;
	  if(md.algorithm in pki.oids) {
	    oid = pki.oids[md.algorithm];
	  } else {
	    var error = new Error('Unknown message digest algorithm.');
	    error.algorithm = md.algorithm;
	    throw error;
	  }
	  var oidBytes = asn1.oidToDer(oid).getBytes();

	  // create the digest info
	  var digestInfo = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  var digestAlgorithm = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  digestAlgorithm.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
	  digestAlgorithm.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));
	  var digest = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
	    false, md.digest().getBytes());
	  digestInfo.value.push(digestAlgorithm);
	  digestInfo.value.push(digest);

	  // encode digest info
	  return asn1.toDer(digestInfo).getBytes();
	};

	/**
	 * Performs x^c mod n (RSA encryption or decryption operation).
	 *
	 * @param x the number to raise and mod.
	 * @param key the key to use.
	 * @param pub true if the key is public, false if private.
	 *
	 * @return the result of x^c mod n.
	 */
	var _modPow = function(x, key, pub) {
	  if(pub) {
	    return x.modPow(key.e, key.n);
	  }

	  if(!key.p || !key.q) {
	    // allow calculation without CRT params (slow)
	    return x.modPow(key.d, key.n);
	  }

	  // pre-compute dP, dQ, and qInv if necessary
	  if(!key.dP) {
	    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
	  }
	  if(!key.dQ) {
	    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
	  }
	  if(!key.qInv) {
	    key.qInv = key.q.modInverse(key.p);
	  }

	  /* Chinese remainder theorem (CRT) states:

	    Suppose n1, n2, ..., nk are positive integers which are pairwise
	    coprime (n1 and n2 have no common factors other than 1). For any
	    integers x1, x2, ..., xk there exists an integer x solving the
	    system of simultaneous congruences (where ~= means modularly
	    congruent so a ~= b mod n means a mod n = b mod n):

	    x ~= x1 mod n1
	    x ~= x2 mod n2
	    ...
	    x ~= xk mod nk

	    This system of congruences has a single simultaneous solution x
	    between 0 and n - 1. Furthermore, each xk solution and x itself
	    is congruent modulo the product n = n1*n2*...*nk.
	    So x1 mod n = x2 mod n = xk mod n = x mod n.

	    The single simultaneous solution x can be solved with the following
	    equation:

	    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

	    Where x is less than n, xi = x mod ni.

	    For RSA we are only concerned with k = 2. The modulus n = pq, where
	    p and q are coprime. The RSA decryption algorithm is:

	    y = x^d mod n

	    Given the above:

	    x1 = x^d mod p
	    r1 = n/p = q
	    s1 = q^-1 mod p
	    x2 = x^d mod q
	    r2 = n/q = p
	    s2 = p^-1 mod q

	    So y = (x1r1s1 + x2r2s2) mod n
	         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

	    According to Fermat's Little Theorem, if the modulus P is prime,
	    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
	    Since A is not divisible by P it follows that if:
	    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

	    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
	    to calculate). In order to calculate x^d mod p more quickly the
	    exponent d mod (p - 1) is stored in the RSA private key (the same
	    is done for x^d mod q). These values are referred to as dP and dQ
	    respectively. Therefore we now have:

	    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

	    Since we'll be reducing x^dP by modulo p (same for q) we can also
	    reduce x by p (and q respectively) before hand. Therefore, let

	    xp = ((x mod p)^dP mod p), and
	    xq = ((x mod q)^dQ mod q), yielding:

	    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

	    This can be further reduced to a simple algorithm that only
	    requires 1 inverse (the q inverse is used) to be used and stored.
	    The algorithm is called Garner's algorithm. If qInv is the
	    inverse of q, we simply calculate:

	    y = (qInv*(xp - xq) mod p) * q + xq

	    However, there are two further complications. First, we need to
	    ensure that xp > xq to prevent signed BigIntegers from being used
	    so we add p until this is true (since we will be mod'ing with
	    p anyway). Then, there is a known timing attack on algorithms
	    using the CRT. To mitigate this risk, "cryptographic blinding"
	    should be used. This requires simply generating a random number r
	    between 0 and n-1 and its inverse and multiplying x by r^e before
	    calculating y and then multiplying y by r^-1 afterwards. Note that
	    r must be coprime with n (gcd(r, n) === 1) in order to have an
	    inverse.
	  */

	  // cryptographic blinding
	  var r;
	  do {
	    r = new BigInteger(
	      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),
	      16);
	  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));
	  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

	  // calculate xp and xq
	  var xp = x.mod(key.p).modPow(key.dP, key.p);
	  var xq = x.mod(key.q).modPow(key.dQ, key.q);

	  // xp must be larger than xq to avoid signed bit usage
	  while(xp.compareTo(xq) < 0) {
	    xp = xp.add(key.p);
	  }

	  // do last step
	  var y = xp.subtract(xq)
	    .multiply(key.qInv).mod(key.p)
	    .multiply(key.q).add(xq);

	  // remove effect of random for cryptographic blinding
	  y = y.multiply(r.modInverse(key.n)).mod(key.n);

	  return y;
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
	 * 'encrypt' on a public key object instead.
	 *
	 * Performs RSA encryption.
	 *
	 * The parameter bt controls whether to put padding bytes before the
	 * message passed in. Set bt to either true or false to disable padding
	 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
	 * signaling whether the encryption operation is a public key operation
	 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
	 *
	 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
	 * (for signing) or 0x02 (for encryption). The key operation mode (private
	 * or public) is derived from this flag in that case).
	 *
	 * @param m the message to encrypt as a byte string.
	 * @param key the RSA key to use.
	 * @param bt for PKCS#1 v1.5 padding, the block type to use
	 *   (0x01 for private key, 0x02 for public),
	 *   to disable padding: true = public key, false = private key.
	 *
	 * @return the encrypted bytes as a string.
	 */
	pki.rsa.encrypt = function(m, key, bt) {
	  var pub = bt;
	  var eb;

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  if(bt !== false && bt !== true) {
	    // legacy, default to PKCS#1 v1.5 padding
	    pub = (bt === 0x02);
	    eb = _encodePkcs1_v1_5(m, key, bt);
	  } else {
	    eb = forge.util.createBuffer();
	    eb.putBytes(m);
	  }

	  // load encryption block as big integer 'x'
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var x = new BigInteger(eb.toHex(), 16);

	  // do RSA encryption
	  var y = _modPow(x, key, pub);

	  // convert y into the encrypted data byte string, if y is shorter in
	  // bytes than k, then prepend zero bytes to fill up ed
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var yhex = y.toString(16);
	  var ed = forge.util.createBuffer();
	  var zeros = k - Math.ceil(yhex.length / 2);
	  while(zeros > 0) {
	    ed.putByte(0x00);
	    --zeros;
	  }
	  ed.putBytes(forge.util.hexToBytes(yhex));
	  return ed.getBytes();
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
	 * 'verify' on a public key object instead.
	 *
	 * Performs RSA decryption.
	 *
	 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
	 * or not.  Set ml = false to disable padding removal completely
	 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
	 * the RSA encryption block.
	 *
	 * @param ed the encrypted data to decrypt in as a byte string.
	 * @param key the RSA key to use.
	 * @param pub true for a public key operation, false for private.
	 * @param ml the message length, if known, false to disable padding.
	 *
	 * @return the decrypted message as a byte string.
	 */
	pki.rsa.decrypt = function(ed, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  // error if the length of the encrypted data ED is not k
	  if(ed.length !== k) {
	    var error = new Error('Encrypted message length is invalid.');
	    error.length = ed.length;
	    error.expected = k;
	    throw error;
	  }

	  // convert encrypted data into a big integer
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);

	  // y must be less than the modulus or it wasn't the result of
	  // a previous mod operation (encryption) using that modulus
	  if(y.compareTo(key.n) >= 0) {
	    throw new Error('Encrypted message is invalid.');
	  }

	  // do RSA decryption
	  var x = _modPow(y, key, pub);

	  // create the encryption block, if x is shorter in bytes than k, then
	  // prepend zero bytes to fill up eb
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var xhex = x.toString(16);
	  var eb = forge.util.createBuffer();
	  var zeros = k - Math.ceil(xhex.length / 2);
	  while(zeros > 0) {
	    eb.putByte(0x00);
	    --zeros;
	  }
	  eb.putBytes(forge.util.hexToBytes(xhex));

	  if(ml !== false) {
	    // legacy, default to PKCS#1 v1.5 padding
	    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
	  }

	  // return message
	  return eb.getBytes();
	};

	/**
	 * Creates an RSA key-pair generation state object. It is used to allow
	 * key-generation to be performed in steps. It also allows for a UI to
	 * display progress updates.
	 *
	 * @param bits the size for the private key in bits, defaults to 2048.
	 * @param e the public exponent to use, defaults to 65537 (0x10001).
	 * @param [options] the options to use.
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 *
	 * @return the state object to use to generate the key-pair.
	 */
	pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
	  // TODO: migrate step-based prime generation code to forge.prime

	  // set default bits
	  if(typeof(bits) === 'string') {
	    bits = parseInt(bits, 10);
	  }
	  bits = bits || 2048;

	  // create prng with api that matches BigInteger secure random
	  options = options || {};
	  var prng = options.prng || forge.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  var algorithm = options.algorithm || 'PRIMEINC';

	  // create PRIMEINC algorithm state
	  var rval;
	  if(algorithm === 'PRIMEINC') {
	    rval = {
	      algorithm: algorithm,
	      state: 0,
	      bits: bits,
	      rng: rng,
	      eInt: e || 65537,
	      e: new BigInteger(null),
	      p: null,
	      q: null,
	      qBits: bits >> 1,
	      pBits: bits - (bits >> 1),
	      pqState: 0,
	      num: null,
	      keys: null
	    };
	    rval.e.fromInt(rval.eInt);
	  } else {
	    throw new Error('Invalid key generation algorithm: ' + algorithm);
	  }

	  return rval;
	};

	/**
	 * Attempts to runs the key-generation algorithm for at most n seconds
	 * (approximately) using the given state. When key-generation has completed,
	 * the keys will be stored in state.keys.
	 *
	 * To use this function to update a UI while generating a key or to prevent
	 * causing browser lockups/warnings, set "n" to a value other than 0. A
	 * simple pattern for generating a key and showing a progress indicator is:
	 *
	 * var state = pki.rsa.createKeyPairGenerationState(2048);
	 * var step = function() {
	 *   // step key-generation, run algorithm for 100 ms, repeat
	 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
	 *     setTimeout(step, 1);
	 *   } else {
	 *     // key-generation complete
	 *     // TODO: turn off progress indicator here
	 *     // TODO: use the generated key-pair in "state.keys"
	 *   }
	 * };
	 * // TODO: turn on progress indicator here
	 * setTimeout(step, 0);
	 *
	 * @param state the state to use.
	 * @param n the maximum number of milliseconds to run the algorithm for, 0
	 *          to run the algorithm to completion.
	 *
	 * @return true if the key-generation completed, false if not.
	 */
	pki.rsa.stepKeyPairGenerationState = function(state, n) {
	  // set default algorithm if not set
	  if(!('algorithm' in state)) {
	    state.algorithm = 'PRIMEINC';
	  }

	  // TODO: migrate step-based prime generation code to forge.prime
	  // TODO: abstract as PRIMEINC algorithm

	  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
	  // with some minor optimizations and designed to run in steps

	  // local state vars
	  var THIRTY = new BigInteger(null);
	  THIRTY.fromInt(30);
	  var deltaIdx = 0;
	  var op_or = function(x,y) { return x|y; };

	  // keep stepping until time limit is reached or done
	  var t1 = +new Date();
	  var t2;
	  var total = 0;
	  while(state.keys === null && (n <= 0 || total < n)) {
	    // generate p or q
	    if(state.state === 0) {
	      /* Note: All primes are of the form:

	        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

	        When we generate a random number, we always align it at 30k + 1. Each
	        time the number is determined not to be prime we add to get to the
	        next 'i', eg: if the number was at 30k + 1 we add 6. */
	      var bits = (state.p === null) ? state.pBits : state.qBits;
	      var bits1 = bits - 1;

	      // get a random number
	      if(state.pqState === 0) {
	        state.num = new BigInteger(bits, state.rng);
	        // force MSB set
	        if(!state.num.testBit(bits1)) {
	          state.num.bitwiseTo(
	            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
	        }
	        // align number on 30k+1 boundary
	        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
	        deltaIdx = 0;

	        ++state.pqState;
	      } else if(state.pqState === 1) {
	        // try to make the number a prime
	        if(state.num.bitLength() > bits) {
	          // overflow, try again
	          state.pqState = 0;
	          // do primality test
	        } else if(state.num.isProbablePrime(
	          _getMillerRabinTests(state.num.bitLength()))) {
	          ++state.pqState;
	        } else {
	          // get next potential prime
	          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	        }
	      } else if(state.pqState === 2) {
	        // ensure number is coprime with e
	        state.pqState =
	          (state.num.subtract(BigInteger.ONE).gcd(state.e)
	          .compareTo(BigInteger.ONE) === 0) ? 3 : 0;
	      } else if(state.pqState === 3) {
	        // store p or q
	        state.pqState = 0;
	        if(state.p === null) {
	          state.p = state.num;
	        } else {
	          state.q = state.num;
	        }

	        // advance state if both p and q are ready
	        if(state.p !== null && state.q !== null) {
	          ++state.state;
	        }
	        state.num = null;
	      }
	    } else if(state.state === 1) {
	      // ensure p is larger than q (swap them if not)
	      if(state.p.compareTo(state.q) < 0) {
	        state.num = state.p;
	        state.p = state.q;
	        state.q = state.num;
	      }
	      ++state.state;
	    } else if(state.state === 2) {
	      // compute phi: (p - 1)(q - 1) (Euler's totient function)
	      state.p1 = state.p.subtract(BigInteger.ONE);
	      state.q1 = state.q.subtract(BigInteger.ONE);
	      state.phi = state.p1.multiply(state.q1);
	      ++state.state;
	    } else if(state.state === 3) {
	      // ensure e and phi are coprime
	      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
	        // phi and e are coprime, advance
	        ++state.state;
	      } else {
	        // phi and e aren't coprime, so generate a new p and q
	        state.p = null;
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 4) {
	      // create n, ensure n is has the right number of bits
	      state.n = state.p.multiply(state.q);

	      // ensure n is right number of bits
	      if(state.n.bitLength() === state.bits) {
	        // success, advance
	        ++state.state;
	      } else {
	        // failed, get new q
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 5) {
	      // set keys
	      var d = state.e.modInverse(state.phi);
	      state.keys = {
	        privateKey: pki.rsa.setPrivateKey(
	          state.n, state.e, d, state.p, state.q,
	          d.mod(state.p1), d.mod(state.q1),
	          state.q.modInverse(state.p)),
	        publicKey: pki.rsa.setPublicKey(state.n, state.e)
	      };
	    }

	    // update timing
	    t2 = +new Date();
	    total += t2 - t1;
	    t1 = t2;
	  }

	  return state.keys !== null;
	};

	/**
	 * Generates an RSA public-private key pair in a single call.
	 *
	 * To generate a key-pair in steps (to allow for progress updates and to
	 * prevent blocking or warnings in slow browsers) then use the key-pair
	 * generation state functions.
	 *
	 * To generate a key-pair asynchronously (either through web-workers, if
	 * available, or by breaking up the work on the main thread), pass a
	 * callback function.
	 *
	 * @param [bits] the size for the private key in bits, defaults to 2048.
	 * @param [e] the public exponent to use, defaults to 65537.
	 * @param [options] options for key-pair generation, if given then 'bits'
	 *          and 'e' must *not* be given:
	 *          bits the size for the private key in bits, (default: 2048).
	 *          e the public exponent to use, (default: 65537 (0x10001)).
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 *          e the public exponent to use, defaults to 65537.
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 * @param [callback(err, keypair)] called once the operation completes.
	 *
	 * @return an object with privateKey and publicKey properties.
	 */
	pki.rsa.generateKeyPair = function(bits, e, options, callback) {
	  // (bits), (options), (callback)
	  if(arguments.length === 1) {
	    if(typeof bits === 'object') {
	      options = bits;
	      bits = undefined;
	    } else if(typeof bits === 'function') {
	      callback = bits;
	      bits = undefined;
	    }
	  } else if(arguments.length === 2) {
	    // (bits, e), (bits, options), (bits, callback), (options, callback)
	    if(typeof bits === 'number') {
	      if(typeof e === 'function') {
	        callback = e;
	        e = undefined;
	      } else if(typeof e !== 'number') {
	        options = e;
	        e = undefined;
	      }
	    } else {
	      options = bits;
	      callback = e;
	      bits = undefined;
	      e = undefined;
	    }
	  } else if(arguments.length === 3) {
	    // (bits, e, options), (bits, e, callback), (bits, options, callback)
	    if(typeof e === 'number') {
	      if(typeof options === 'function') {
	        callback = options;
	        options = undefined;
	      }
	    } else {
	      callback = options;
	      options = e;
	      e = undefined;
	    }
	  }
	  options = options || {};
	  if(bits === undefined) {
	    bits = options.bits || 2048;
	  }
	  if(e === undefined) {
	    e = options.e || 0x10001;
	  }
	  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);
	  if(!callback) {
	    pki.rsa.stepKeyPairGenerationState(state, 0);
	    return state.keys;
	  }
	  _generateKeyPair(state, options, callback);
	};

	/**
	 * Sets an RSA public key from BigIntegers modulus and exponent.
	 *
	 * @param n the modulus.
	 * @param e the exponent.
	 *
	 * @return the public key.
	 */
	pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {
	  var key = {
	    n: n,
	    e: e
	  };

	  /**
	   * Encrypts the given data with this public key. Newer applications
	   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
	   * legacy applications.
	   *
	   * @param data the byte string to encrypt.
	   * @param scheme the encryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA encryption,
	   *          an object with an 'encode' property set to a function
	   *          with the signature 'function(data, key)' that returns
	   *          a binary-encoded string representing the encoded data.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the encrypted byte string.
	   */
	  key.encrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = {
	        encode: function(m, key, pub) {
	          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
	        }
	      };
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        encode: function(m, key) {
	          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = { encode: function(e) { return e; } };
	    } else if(typeof scheme === 'string') {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // do scheme-based encoding then rsa encryption
	    var e = scheme.encode(data, key, true);
	    return pki.rsa.encrypt(e, key, true);
	  };

	  /**
	   * Verifies the given signature against the given digest.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
	   * signature is an OCTET STRING that holds a DigestInfo.
	   *
	   * DigestInfo ::= SEQUENCE {
	   *   digestAlgorithm DigestAlgorithmIdentifier,
	   *   digest Digest
	   * }
	   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	   * Digest ::= OCTET STRING
	   *
	   * To perform PSS signature verification, provide an instance
	   * of Forge PSS object as the scheme parameter.
	   *
	   * @param digest the message digest hash to compare against the signature,
	   *          as a binary-encoded string.
	   * @param signature the signature to verify, as a binary-encoded string.
	   * @param scheme signature verification scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be expected, but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	   key.verify = function(digest, signature, scheme) {
	     if(typeof scheme === 'string') {
	       scheme = scheme.toUpperCase();
	     } else if(scheme === undefined) {
	       scheme = 'RSASSA-PKCS1-V1_5';
	     }

	     if(scheme === 'RSASSA-PKCS1-V1_5') {
	       scheme = {
	         verify: function(digest, d) {
	           // remove padding
	           d = _decodePkcs1_v1_5(d, key, true);
	           // d is ASN.1 BER-encoded DigestInfo
	           var obj = asn1.fromDer(d);
	           // compare the given digest to the decrypted one
	           return digest === obj.value[1].value;
	         }
	       };
	     } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	       scheme = {
	         verify: function(digest, d) {
	           // remove padding
	           d = _decodePkcs1_v1_5(d, key, true);
	           return digest === d;
	         }
	       };
	     }

	     // do rsa decryption w/o any decoding, then verify -- which does decoding
	     var d = pki.rsa.decrypt(signature, key, true, false);
	     return scheme.verify(digest, d, key.n.bitLength());
	  };

	  return key;
	};

	/**
	 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
	 * prime exponents, and modular multiplicative inverse.
	 *
	 * @param n the modulus.
	 * @param e the public exponent.
	 * @param d the private exponent ((inverse of e) mod n).
	 * @param p the first prime.
	 * @param q the second prime.
	 * @param dP exponent1 (d mod (p-1)).
	 * @param dQ exponent2 (d mod (q-1)).
	 * @param qInv ((inverse of q) mod p)
	 *
	 * @return the private key.
	 */
	pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(
	  n, e, d, p, q, dP, dQ, qInv) {
	  var key = {
	    n: n,
	    e: e,
	    d: d,
	    p: p,
	    q: q,
	    dP: dP,
	    dQ: dQ,
	    qInv: qInv
	  };

	  /**
	   * Decrypts the given data with this private key. The decryption scheme
	   * must match the one used to encrypt the data.
	   *
	   * @param data the byte string to decrypt.
	   * @param scheme the decryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA decryption.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the decrypted byte string.
	   */
	  key.decrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    // do rsa decryption w/o any decoding
	    var d = pki.rsa.decrypt(data, key, false, false);

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = { decode: _decodePkcs1_v1_5 };
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        decode: function(d, key) {
	          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = { decode: function(d) { return d; } };
	    } else {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // decode according to scheme
	    return scheme.decode(d, key, false);
	  };

	  /**
	   * Signs the given digest, producing a signature.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
	   * an instance of Forge PSS object as the scheme parameter.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param scheme the signature scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be used but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return the signature as a byte string.
	   */
	  key.sign = function(md, scheme) {
	    /* Note: The internal implementation of RSA operations is being
	      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
	      code like the use of an encoding block identifier 'bt' will eventually
	      be removed. */

	    // private key operation
	    var bt = false;

	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    }

	    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
	      scheme = { encode: emsaPkcs1v15encode };
	      bt = 0x01;
	    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	      scheme = { encode: function() { return md; } };
	      bt = 0x01;
	    }

	    // encode and then encrypt
	    var d = scheme.encode(md, key.n.bitLength());
	    return pki.rsa.encrypt(d, key, bt);
	  };

	  return key;
	};

	/**
	 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
	 *
	 * @param rsaKey the ASN.1 RSAPrivateKey.
	 *
	 * @return the ASN.1 PrivateKeyInfo.
	 */
	pki.wrapRsaPrivateKey = function(rsaKey) {
	  // PrivateKeyInfo
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (0)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(0).getBytes()),
	    // privateKeyAlgorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // PrivateKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      asn1.toDer(rsaKey).getBytes())
	    ]);
	};

	/**
	 * Converts a private key from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
	 *          RSAPrivateKey or an RSAPrivateKey.
	 *
	 * @return the private key.
	 */
	pki.privateKeyFromAsn1 = function(obj) {
	  // get PrivateKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {
	    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
	  }

	  // get RSAPrivateKey
	  capture = {};
	  errors = [];
	  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read private key. ' +
	      'ASN.1 object does not contain an RSAPrivateKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // Note: Version is currently ignored.
	  // capture.privateKeyVersion
	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n, e, d, p, q, dP, dQ, qInv;
	  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
	  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
	  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
	  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
	  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
	  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
	  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
	  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();

	  // set private key
	  return pki.setRsaPrivateKey(
	    new BigInteger(n, 16),
	    new BigInteger(e, 16),
	    new BigInteger(d, 16),
	    new BigInteger(p, 16),
	    new BigInteger(q, 16),
	    new BigInteger(dP, 16),
	    new BigInteger(dQ, 16),
	    new BigInteger(qInv, 16));
	};

	/**
	 * Converts a private key to an ASN.1 RSAPrivateKey.
	 *
	 * @param key the private key.
	 *
	 * @return the ASN.1 representation of an RSAPrivateKey.
	 */
	pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
	  // RSAPrivateKey
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (0 = only 2 primes, 1 multiple primes)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(0).getBytes()),
	    // modulus (n)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.e)),
	    // privateExponent (d)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.d)),
	    // privateKeyPrime1 (p)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.p)),
	    // privateKeyPrime2 (q)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.q)),
	    // privateKeyExponent1 (dP)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.dP)),
	    // privateKeyExponent2 (dQ)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.dQ)),
	    // coefficient (qInv)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.qInv))
	  ]);
	};

	/**
	 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @return the public key.
	 */
	pki.publicKeyFromAsn1 = function(obj) {
	  // get SubjectPublicKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {
	    // get oid
	    var oid = asn1.derToOid(capture.publicKeyOid);
	    if(oid !== pki.oids.rsaEncryption) {
	      var error = new Error('Cannot read public key. Unknown OID.');
	      error.oid = oid;
	      throw error;
	    }
	    obj = capture.rsaPublicKey;
	  }

	  // get RSA params
	  errors = [];
	  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read public key. ' +
	      'ASN.1 object does not contain an RSAPublicKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
	  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();

	  // set public key
	  return pki.setRsaPublicKey(
	    new BigInteger(n, 16),
	    new BigInteger(e, 16));
	};

	/**
	 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a SubjectPublicKeyInfo.
	 */
	pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {
	  // SubjectPublicKeyInfo
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // AlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
	      // parameters (null)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // subjectPublicKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
	      pki.publicKeyToRSAPublicKey(key)
	    ])
	  ]);
	};

	/**
	 * Converts a public key to an ASN.1 RSAPublicKey.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a RSAPublicKey.
	 */
	pki.publicKeyToRSAPublicKey = function(key) {
	  // RSAPublicKey
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // modulus (n)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.e))
	  ]);
	};

	/**
	 * Encodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param m the message to encode.
	 * @param key the RSA key to use.
	 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
	 *          (for encryption).
	 *
	 * @return the padded byte buffer.
	 */
	function _encodePkcs1_v1_5(m, key, bt) {
	  var eb = forge.util.createBuffer();

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* use PKCS#1 v1.5 padding */
	  if(m.length > (k - 11)) {
	    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
	    error.length = m.length;
	    error.max = k - 11;
	    throw error;
	  }

	  /* A block type BT, a padding string PS, and the data D shall be
	    formatted into an octet string EB, the encryption block:

	    EB = 00 || BT || PS || 00 || D

	    The block type BT shall be a single octet indicating the structure of
	    the encryption block. For this version of the document it shall have
	    value 00, 01, or 02. For a private-key operation, the block type
	    shall be 00 or 01. For a public-key operation, it shall be 02.

	    The padding string PS shall consist of k-3-||D|| octets. For block
	    type 00, the octets shall have value 00; for block type 01, they
	    shall have value FF; and for block type 02, they shall be
	    pseudorandomly generated and nonzero. This makes the length of the
	    encryption block EB equal to k. */

	  // build the encryption block
	  eb.putByte(0x00);
	  eb.putByte(bt);

	  // create the padding
	  var padNum = k - 3 - m.length;
	  var padByte;
	  // private key op
	  if(bt === 0x00 || bt === 0x01) {
	    padByte = (bt === 0x00) ? 0x00 : 0xFF;
	    for(var i = 0; i < padNum; ++i) {
	      eb.putByte(padByte);
	    }
	  } else {
	    // public key op
	    // pad with random non-zero values
	    while(padNum > 0) {
	      var numZeros = 0;
	      var padBytes = forge.random.getBytes(padNum);
	      for(var i = 0; i < padNum; ++i) {
	        padByte = padBytes.charCodeAt(i);
	        if(padByte === 0) {
	          ++numZeros;
	        } else {
	          eb.putByte(padByte);
	        }
	      }
	      padNum = numZeros;
	    }
	  }

	  // zero followed by message
	  eb.putByte(0x00);
	  eb.putBytes(m);

	  return eb;
	}

	/**
	 * Decodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param em the message to decode.
	 * @param key the RSA key to use.
	 * @param pub true if the key is a public key, false if it is private.
	 * @param ml the message length, if specified.
	 *
	 * @return the decoded bytes.
	 */
	function _decodePkcs1_v1_5(em, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* It is an error if any of the following conditions occurs:

	    1. The encryption block EB cannot be parsed unambiguously.
	    2. The padding string PS consists of fewer than eight octets
	      or is inconsisent with the block type BT.
	    3. The decryption process is a public-key operation and the block
	      type BT is not 00 or 01, or the decryption process is a
	      private-key operation and the block type is not 02.
	   */

	  // parse the encryption block
	  var eb = forge.util.createBuffer(em);
	  var first = eb.getByte();
	  var bt = eb.getByte();
	  if(first !== 0x00 ||
	    (pub && bt !== 0x00 && bt !== 0x01) ||
	    (!pub && bt != 0x02) ||
	    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {
	    throw new Error('Encryption block is invalid.');
	  }

	  var padNum = 0;
	  if(bt === 0x00) {
	    // check all padding bytes for 0x00
	    padNum = k - 3 - ml;
	    for(var i = 0; i < padNum; ++i) {
	      if(eb.getByte() !== 0x00) {
	        throw new Error('Encryption block is invalid.');
	      }
	    }
	  } else if(bt === 0x01) {
	    // find the first byte that isn't 0xFF, should be after all padding
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() !== 0xFF) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  } else if(bt === 0x02) {
	    // look for 0x00 byte
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() === 0x00) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  }

	  // zero must be 0x00 and padNum must be (k - 3 - message length)
	  var zero = eb.getByte();
	  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {
	    throw new Error('Encryption block is invalid.');
	  }

	  return eb.getBytes();
	}

	/**
	 * Runs the key-generation algorithm asynchronously, either in the background
	 * via Web Workers, or using the main thread and setImmediate.
	 *
	 * @param state the key-pair generation state.
	 * @param [options] options for key-pair generation:
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2, -1 to use estimated cores minus one).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 * @param callback(err, keypair) called once the operation completes.
	 */
	function _generateKeyPair(state, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  var opts = {
	    algorithm: {
	      name: options.algorithm || 'PRIMEINC',
	      options: {
	        workers: options.workers || 2,
	        workLoad: options.workLoad || 100,
	        workerScript: options.workerScript
	      }
	    }
	  };
	  if('prng' in options) {
	    opts.prng = options.prng;
	  }

	  generate();

	  function generate() {
	    // find p and then q (done in series to simplify)
	    getPrime(state.pBits, function(err, num) {
	      if(err) {
	        return callback(err);
	      }
	      state.p = num;
	      if(state.q !== null) {
	        return finish(err, state.q);
	      }
	      getPrime(state.qBits, finish);
	    });
	  }

	  function getPrime(bits, callback) {
	    forge.prime.generateProbablePrime(bits, opts, callback);
	  }

	  function finish(err, num) {
	    if(err) {
	      return callback(err);
	    }

	    // set q
	    state.q = num;

	    // ensure p is larger than q (swap them if not)
	    if(state.p.compareTo(state.q) < 0) {
	      var tmp = state.p;
	      state.p = state.q;
	      state.q = tmp;
	    }

	    // ensure p is coprime with e
	    if(state.p.subtract(BigInteger.ONE).gcd(state.e)
	      .compareTo(BigInteger.ONE) !== 0) {
	      state.p = null;
	      generate();
	      return;
	    }

	    // ensure q is coprime with e
	    if(state.q.subtract(BigInteger.ONE).gcd(state.e)
	      .compareTo(BigInteger.ONE) !== 0) {
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // compute phi: (p - 1)(q - 1) (Euler's totient function)
	    state.p1 = state.p.subtract(BigInteger.ONE);
	    state.q1 = state.q.subtract(BigInteger.ONE);
	    state.phi = state.p1.multiply(state.q1);

	    // ensure e and phi are coprime
	    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
	      // phi and e aren't coprime, so generate a new p and q
	      state.p = state.q = null;
	      generate();
	      return;
	    }

	    // create n, ensure n is has the right number of bits
	    state.n = state.p.multiply(state.q);
	    if(state.n.bitLength() !== state.bits) {
	      // failed, get new q
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // set keys
	    var d = state.e.modInverse(state.phi);
	    state.keys = {
	      privateKey: pki.rsa.setPrivateKey(
	        state.n, state.e, d, state.p, state.q,
	        d.mod(state.p1), d.mod(state.q1),
	        state.q.modInverse(state.p)),
	      publicKey: pki.rsa.setPublicKey(state.n, state.e)
	    };

	    callback(null, state.keys);
	  }
	}

	/**
	 * Converts a positive BigInteger into 2's-complement big-endian bytes.
	 *
	 * @param b the big integer to convert.
	 *
	 * @return the bytes.
	 */
	function _bnToBytes(b) {
	  // prepend 0x00 if first byte >= 0x80
	  var hex = b.toString(16);
	  if(hex[0] >= '8') {
	    hex = '00' + hex;
	  }
	  return forge.util.hexToBytes(hex);
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function _getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'rsa';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/rsa',[
	  'require',
	  'module',
	  './asn1',
	  './jsbn',
	  './oids',
	  './pkcs1',
	  './prime',
	  './random',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Password-based encryption functions.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * An EncryptedPrivateKeyInfo:
	 *
	 * EncryptedPrivateKeyInfo ::= SEQUENCE {
	 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
	 *   encryptedData        EncryptedData }
	 *
	 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedData ::= OCTET STRING
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	if(typeof BigInteger === 'undefined') {
	  var BigInteger = forge.jsbn.BigInteger;
	}

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Password-based encryption implementation. */
	var pki = forge.pki = forge.pki || {};
	pki.pbe = forge.pbe = forge.pbe || {};
	var oids = pki.oids;

	// validator for an EncryptedPrivateKeyInfo structure
	// Note: Currently only works w/algorithm params
	var encryptedPrivateKeyValidator = {
	  name: 'EncryptedPrivateKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encryptionOid'
	    }, {
	      name: 'AlgorithmIdentifier.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'encryptionParams'
	    }]
	  }, {
	    // encryptedData
	    name: 'EncryptedPrivateKeyInfo.encryptedData',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encryptedData'
	  }]
	};

	// validator for a PBES2Algorithms structure
	// Note: Currently only works w/PBKDF2 + AES encryption schemes
	var PBES2AlgorithmsValidator = {
	  name: 'PBES2Algorithms',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'PBES2Algorithms.keyDerivationFunc',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.keyDerivationFunc.oid',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'kdfOid'
	    }, {
	      name: 'PBES2Algorithms.params',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'PBES2Algorithms.params.salt',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OCTETSTRING,
	        constructed: false,
	        capture: 'kdfSalt'
	      }, {
	        name: 'PBES2Algorithms.params.iterationCount',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.INTEGER,
	        onstructed: true,
	        capture: 'kdfIterationCount'
	      }]
	    }]
	  }, {
	    name: 'PBES2Algorithms.encryptionScheme',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.encryptionScheme.oid',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encOid'
	    }, {
	      name: 'PBES2Algorithms.encryptionScheme.iv',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OCTETSTRING,
	      constructed: false,
	      capture: 'encIv'
	    }]
	  }]
	};

	var pkcs12PbeParamsValidator = {
	  name: 'pkcs-12PbeParams',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'pkcs-12PbeParams.salt',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'salt'
	  }, {
	    name: 'pkcs-12PbeParams.iterations',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'iterations'
	  }]
	};

	/**
	 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
	 *
	 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
	 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
	 *
	 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
	 *
	 * PBES2-params ::= SEQUENCE {
	 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
	 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
	 * }
	 *
	 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
	 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
	 *
	 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
	 *
	 * PBKDF2-params ::= SEQUENCE {
	 *   salt CHOICE {
	 *     specified OCTET STRING,
	 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
	 *   },
	 *   iterationCount INTEGER (1..MAX),
	 *   keyLength INTEGER (1..MAX) OPTIONAL,
	 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
	 * }
	 *
	 * @param obj the ASN.1 PrivateKeyInfo object.
	 * @param password the password to encrypt with.
	 * @param options:
	 *          algorithm the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
	 *          count the iteration count to use.
	 *          saltSize the salt size to use.
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptPrivateKeyInfo = function(obj, password, options) {
	  // set default options
	  options = options || {};
	  options.saltSize = options.saltSize || 8;
	  options.count = options.count || 2048;
	  options.algorithm = options.algorithm || 'aes128';

	  // generate PBE params
	  var salt = forge.random.getBytesSync(options.saltSize);
	  var count = options.count;
	  var countBytes = asn1.integerToDer(count);
	  var dkLen;
	  var encryptionAlgorithm;
	  var encryptedData;
	  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
	    // Do PBES2
	    var ivLen, encOid, cipherFn;
	    switch(options.algorithm) {
	    case 'aes128':
	      dkLen = 16;
	      ivLen = 16;
	      encOid = oids['aes128-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'aes192':
	      dkLen = 24;
	      ivLen = 16;
	      encOid = oids['aes192-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'aes256':
	      dkLen = 32;
	      ivLen = 16;
	      encOid = oids['aes256-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'des':
	      dkLen = 8;
	      ivLen = 8;
	      encOid = oids['desCBC'];
	      cipherFn = forge.des.createEncryptionCipher;
	      break;
	    default:
	      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	      error.algorithm = options.algorithm;
	      throw error;
	    }

	    // encrypt private key using pbe SHA-1 and AES/DES
	    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen);
	    var iv = forge.random.getBytesSync(ivLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(asn1.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    encryptionAlgorithm = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // keyDerivationFunc
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),
	          // PBKDF2-params
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // salt
	            asn1.create(
	              asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
	            // iteration count
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	              countBytes.getBytes())
	          ])
	        ]),
	        // encryptionScheme
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(encOid).getBytes()),
	          // iv
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)
	        ])
	      ])
	    ]);
	  } else if(options.algorithm === '3des') {
	    // Do PKCS12 PBE
	    dkLen = 24;

	    var saltBytes = new forge.util.ByteBuffer(salt);
	    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
	    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
	    var cipher = forge.des.createEncryptionCipher(dk);
	    cipher.start(iv);
	    cipher.update(asn1.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    encryptionAlgorithm = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),
	      // pkcs-12PbeParams
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // salt
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
	        // iteration count
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	          countBytes.getBytes())
	      ])
	    ]);
	  } else {
	    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // EncryptedPrivateKeyInfo
	  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // encryptionAlgorithm
	    encryptionAlgorithm,
	    // encryptedData
	    asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)
	  ]);
	  return rval;
	};

	/**
	 * Decrypts a ASN.1 PrivateKeyInfo object.
	 *
	 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
	 * @param password the password to decrypt with.
	 *
	 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
	 */
	pki.decryptPrivateKeyInfo = function(obj, password) {
	  var rval = null;

	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // get cipher
	  var oid = asn1.derToOid(capture.encryptionOid);
	  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);

	  // get encrypted data
	  var encrypted = forge.util.createBuffer(capture.encryptedData);

	  cipher.update(encrypted);
	  if(cipher.finish()) {
	    rval = asn1.fromDer(cipher.output);
	  }

	  return rval;
	};

	/**
	 * Converts a EncryptedPrivateKeyInfo to PEM format.
	 *
	 * @param epki the EncryptedPrivateKeyInfo.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted encrypted private key.
	 */
	pki.encryptedPrivateKeyToPem = function(epki, maxline) {
	  // convert to DER, then PEM-encode
	  var msg = {
	    type: 'ENCRYPTED PRIVATE KEY',
	    body: asn1.toDer(epki).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
	 * is not performed.
	 *
	 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptedPrivateKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {
	    var error = new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM header type is "ENCRYPTED PRIVATE KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  return asn1.fromDer(msg.body);
	};

	/**
	 * Encrypts an RSA private key. By default, the key will be wrapped in
	 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
	 * This is the standard, preferred way to encrypt a private key.
	 *
	 * To produce a non-standard PEM-encrypted private key that uses encapsulated
	 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
	 * private key encryption), set the 'legacy' option to true. Note: Using this
	 * option will cause the iteration count to be forced to 1.
	 *
	 * Note: The 'des' algorithm is supported, but it is not considered to be
	 * secure because it only uses a single 56-bit key. If possible, it is highly
	 * recommended that a different algorithm be used.
	 *
	 * @param rsaKey the RSA key to encrypt.
	 * @param password the password to use.
	 * @param options:
	 *          algorithm: the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
	 *          count: the iteration count to use.
	 *          saltSize: the salt size to use.
	 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
	 *            headers (DEK-Info) private key.
	 *
	 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
	  // standard PKCS#8
	  options = options || {};
	  if(!options.legacy) {
	    // encrypt PrivateKeyInfo
	    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
	    rval = pki.encryptPrivateKeyInfo(rval, password, options);
	    return pki.encryptedPrivateKeyToPem(rval);
	  }

	  // legacy non-PKCS#8
	  var algorithm;
	  var iv;
	  var dkLen;
	  var cipherFn;
	  switch(options.algorithm) {
	  case 'aes128':
	    algorithm = 'AES-128-CBC';
	    dkLen = 16;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case 'aes192':
	    algorithm = 'AES-192-CBC';
	    dkLen = 24;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case 'aes256':
	    algorithm = 'AES-256-CBC';
	    dkLen = 32;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case '3des':
	    algorithm = 'DES-EDE3-CBC';
	    dkLen = 24;
	    iv = forge.random.getBytesSync(8);
	    cipherFn = forge.des.createEncryptionCipher;
	    break;
	  case 'des':
	    algorithm = 'DES-CBC';
	    dkLen = 8;
	    iv = forge.random.getBytesSync(8);
	    cipherFn = forge.des.createEncryptionCipher;
	    break;
	  default:
	    var error = new Error('Could not encrypt RSA private key; unsupported ' +
	      'encryption algorithm "' + options.algorithm + '".');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // encrypt private key using OpenSSL legacy key derivation
	  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	  var cipher = cipherFn(dk);
	  cipher.start(iv);
	  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
	  cipher.finish();

	  var msg = {
	    type: 'RSA PRIVATE KEY',
	    procType: {
	      version: '4',
	      type: 'ENCRYPTED'
	    },
	    dekInfo: {
	      algorithm: algorithm,
	      parameters: forge.util.bytesToHex(iv).toUpperCase()
	    },
	    body: cipher.output.getBytes()
	  };
	  return forge.pem.encode(msg);
	};

	/**
	 * Decrypts an RSA private key.
	 *
	 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
	 * @param password the password to use.
	 *
	 * @return the RSA key on success, null on failure.
	 */
	pki.decryptRsaPrivateKey = function(pem, password) {
	  var rval = null;

	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&
	    msg.type !== 'PRIVATE KEY' &&
	    msg.type !== 'RSA PRIVATE KEY') {
	    var error = new Error('Could not convert private key from PEM; PEM header type ' +
	      'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
	    error.headerType = error;
	    throw error;
	  }

	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    var dkLen;
	    var cipherFn;
	    switch(msg.dekInfo.algorithm) {
	    case 'DES-CBC':
	      dkLen = 8;
	      cipherFn = forge.des.createDecryptionCipher;
	      break;
	    case 'DES-EDE3-CBC':
	      dkLen = 24;
	      cipherFn = forge.des.createDecryptionCipher;
	      break;
	    case 'AES-128-CBC':
	      dkLen = 16;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'AES-192-CBC':
	      dkLen = 24;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'AES-256-CBC':
	      dkLen = 32;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'RC2-40-CBC':
	      dkLen = 5;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 40);
	      };
	      break;
	    case 'RC2-64-CBC':
	      dkLen = 8;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 64);
	      };
	      break;
	    case 'RC2-128-CBC':
	      dkLen = 16;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 128);
	      };
	      break;
	    default:
	      var error = new Error('Could not decrypt private key; unsupported ' +
	        'encryption algorithm "' + msg.dekInfo.algorithm + '".');
	      error.algorithm = msg.dekInfo.algorithm;
	      throw error;
	    }

	    // use OpenSSL legacy key derivation
	    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
	    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(forge.util.createBuffer(msg.body));
	    if(cipher.finish()) {
	      rval = cipher.output.getBytes();
	    } else {
	      return rval;
	    }
	  } else {
	    rval = msg.body;
	  }

	  if(msg.type === 'ENCRYPTED PRIVATE KEY') {
	    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
	  } else {
	    // decryption already performed above
	    rval = asn1.fromDer(rval);
	  }

	  if(rval !== null) {
	    rval = pki.privateKeyFromAsn1(rval);
	  }

	  return rval;
	};

	/**
	 * Derives a PKCS#12 key.
	 *
	 * @param password the password to derive the key material from, null or
	 *          undefined for none.
	 * @param salt the salt, as a ByteBuffer, to use.
	 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
	 * @param iter the iteration count.
	 * @param n the number of bytes to derive from the password.
	 * @param md the message digest to use, defaults to SHA-1.
	 *
	 * @return a ByteBuffer with the bytes derived from the password.
	 */
	pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
	  var j, l;

	  if(typeof md === 'undefined' || md === null) {
	    md = forge.md.sha1.create();
	  }

	  var u = md.digestLength;
	  var v = md.blockLength;
	  var result = new forge.util.ByteBuffer();

	  /* Convert password to Unicode byte buffer + trailing 0-byte. */
	  var passBuf = new forge.util.ByteBuffer();
	  if(password !== null && password !== undefined) {
	    for(l = 0; l < password.length; l++) {
	      passBuf.putInt16(password.charCodeAt(l));
	    }
	    passBuf.putInt16(0);
	  }

	  /* Length of salt and password in BYTES. */
	  var p = passBuf.length();
	  var s = salt.length();

	  /* 1. Construct a string, D (the "diversifier"), by concatenating
	        v copies of ID. */
	  var D = new forge.util.ByteBuffer();
	  D.fillWithByte(id, v);

	  /* 2. Concatenate copies of the salt together to create a string S of length
	        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
	        to create S).
	        Note that if the salt is the empty string, then so is S. */
	  var Slen = v * Math.ceil(s / v);
	  var S = new forge.util.ByteBuffer();
	  for(l = 0; l < Slen; l ++) {
	    S.putByte(salt.at(l % s));
	  }

	  /* 3. Concatenate copies of the password together to create a string P of
	        length v * ceil(p / v) bytes (the final copy of the password may be
	        truncated to create P).
	        Note that if the password is the empty string, then so is P. */
	  var Plen = v * Math.ceil(p / v);
	  var P = new forge.util.ByteBuffer();
	  for(l = 0; l < Plen; l ++) {
	    P.putByte(passBuf.at(l % p));
	  }

	  /* 4. Set I=S||P to be the concatenation of S and P. */
	  var I = S;
	  I.putBuffer(P);

	  /* 5. Set c=ceil(n / u). */
	  var c = Math.ceil(n / u);

	  /* 6. For i=1, 2, ..., c, do the following: */
	  for(var i = 1; i <= c; i ++) {
	    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
	    var buf = new forge.util.ByteBuffer();
	    buf.putBytes(D.bytes());
	    buf.putBytes(I.bytes());
	    for(var round = 0; round < iter; round ++) {
	      md.start();
	      md.update(buf.getBytes());
	      buf = md.digest();
	    }

	    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
	          final copy of Ai may be truncated to create B). */
	    var B = new forge.util.ByteBuffer();
	    for(l = 0; l < v; l ++) {
	      B.putByte(buf.at(l % u));
	    }

	    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
	          where k=ceil(s / v) + ceil(p / v), modify I by setting
	          Ij=(Ij+B+1) mod 2v for each j.  */
	    var k = Math.ceil(s / v) + Math.ceil(p / v);
	    var Inew = new forge.util.ByteBuffer();
	    for(j = 0; j < k; j ++) {
	      var chunk = new forge.util.ByteBuffer(I.getBytes(v));
	      var x = 0x1ff;
	      for(l = B.length() - 1; l >= 0; l --) {
	        x = x >> 8;
	        x += B.at(l) + chunk.at(l);
	        chunk.setAt(l, x & 0xff);
	      }
	      Inew.putBuffer(chunk);
	    }
	    I = Inew;

	    /* Add Ai to A. */
	    result.putBuffer(buf);
	  }

	  result.truncate(result.length() - n);
	  return result;
	};

	/**
	 * Get new Forge cipher object instance.
	 *
	 * @param oid the OID (in string notation).
	 * @param params the ASN.1 params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki.pbe.getCipher = function(oid, params, password) {
	  switch(oid) {
	  case pki.oids['pkcs5PBES2']:
	    return pki.pbe.getCipherForPBES2(oid, params, password);

	  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
	    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

	  default:
	    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'pkcs5PBES2',
	      'pbeWithSHAAnd3-KeyTripleDES-CBC',
	      'pbewithSHAAnd40BitRC2-CBC'
	    ];
	    throw error;
	  }
	};

	/**
	 * Get new Forge cipher object instance according to PBES2 params block.
	 *
	 * The returned cipher instance is already started using the IV
	 * from PBES2 parameter block.
	 *
	 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
	 * @param params the ASN.1 PBES2-params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki.pbe.getCipherForPBES2 = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // check oids
	  oid = asn1.derToOid(capture.kdfOid);
	  if(oid !== pki.oids['pkcs5PBKDF2']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported key derivation function OID.');
	    error.oid = oid;
	    error.supportedOids = ['pkcs5PBKDF2'];
	    throw error;
	  }
	  oid = asn1.derToOid(capture.encOid);
	  if(oid !== pki.oids['aes128-CBC'] &&
	    oid !== pki.oids['aes192-CBC'] &&
	    oid !== pki.oids['aes256-CBC'] &&
	    oid !== pki.oids['des-EDE3-CBC'] &&
	    oid !== pki.oids['desCBC']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported encryption scheme OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
	    throw error;
	  }

	  // set PBE params
	  var salt = capture.kdfSalt;
	  var count = forge.util.createBuffer(capture.kdfIterationCount);
	  count = count.getInt(count.length() << 3);
	  var dkLen;
	  var cipherFn;
	  switch(pki.oids[oid]) {
	  case 'aes128-CBC':
	    dkLen = 16;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'aes192-CBC':
	    dkLen = 24;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'aes256-CBC':
	    dkLen = 32;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'des-EDE3-CBC':
	    dkLen = 24;
	    cipherFn = forge.des.createDecryptionCipher;
	    break;
	  case 'desCBC':
	    dkLen = 8;
	    cipherFn = forge.des.createDecryptionCipher;
	    break;
	  }

	  // decrypt private key using pbe SHA-1 and AES/DES
	  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen);
	  var iv = capture.encIv;
	  var cipher = cipherFn(dk);
	  cipher.start(iv);

	  return cipher;
	};

	/**
	 * Get new Forge cipher object instance for PKCS#12 PBE.
	 *
	 * The returned cipher instance is already started using the key & IV
	 * derived from the provided password and PKCS#12 PBE salt.
	 *
	 * @param oid The PKCS#12 PBE OID (in string notation).
	 * @param params The ASN.1 PKCS#12 PBE-params object.
	 * @param password The password to decrypt with.
	 *
	 * @return the new cipher object instance.
	 */
	pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var salt = forge.util.createBuffer(capture.salt);
	  var count = forge.util.createBuffer(capture.iterations);
	  count = count.getInt(count.length() << 3);

	  var dkLen, dIvLen, cipherFn;
	  switch(oid) {
	    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	      dkLen = 24;
	      dIvLen = 8;
	      cipherFn = forge.des.startDecrypting;
	      break;

	    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
	      dkLen = 5;
	      dIvLen = 8;
	      cipherFn = function(key, iv) {
	        var cipher = forge.rc2.createDecryptionCipher(key, 40);
	        cipher.start(iv, null);
	        return cipher;
	      };
	      break;

	    default:
	      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
	      error.oid = oid;
	      throw error;
	  }

	  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen);
	  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen);

	  return cipherFn(key, iv);
	};

	/**
	 * OpenSSL's legacy key derivation function.
	 *
	 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
	 *
	 * @param password the password to derive the key from.
	 * @param salt the salt to use, null for none.
	 * @param dkLen the number of bytes needed for the derived key.
	 * @param [options] the options to use:
	 *          [md] an optional message digest object to use.
	 */
	pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
	  if(typeof md === 'undefined' || md === null) {
	    md = forge.md.md5.create();
	  }
	  if(salt === null) {
	    salt = '';
	  }
	  var digests = [hash(md, password + salt)];
	  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {
	    digests.push(hash(md, digests[i - 1] + password + salt));
	  }
	  return digests.join('').substr(0, dkLen);
	};

	function hash(md, bytes) {
	  return md.start().update(bytes).digest().getBytes();
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pbe';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pbe',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './md',
	  './oids',
	  './pem',
	  './pbkdf2',
	  './random',
	  './rc2',
	  './rsa',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * The ASN.1 representation of PKCS#7 is as follows
	 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
	 *
	 * A PKCS#7 message consists of a ContentInfo on root level, which may
	 * contain any number of further ContentInfo nested into it.
	 *
	 * ContentInfo ::= SEQUENCE {
	 *   contentType                ContentType,
	 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
	 * }
	 *
	 * ContentType ::= OBJECT IDENTIFIER
	 *
	 * EnvelopedData ::= SEQUENCE {
	 *   version                    Version,
	 *   recipientInfos             RecipientInfos,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * EncryptedData ::= SEQUENCE {
	 *   version                    Version,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
	 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
	 *
	 * SignedData ::= SEQUENCE {
	 *   version           INTEGER,
	 *   digestAlgorithms  DigestAlgorithmIdentifiers,
	 *   contentInfo       ContentInfo,
	 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
	 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
	 *   signerInfos       SignerInfos
	 * }
	 *
	 * SignerInfos ::= SET OF SignerInfo
	 *
	 * SignerInfo ::= SEQUENCE {
	 *   version                    Version,
	 *   issuerAndSerialNumber      IssuerAndSerialNumber,
	 *   digestAlgorithm            DigestAlgorithmIdentifier,
	 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
	 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
	 *   encryptedDigest            EncryptedDigest,
	 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * EncryptedDigest ::= OCTET STRING
	 *
	 * Attributes ::= SET OF Attribute
	 *
	 * Attribute ::= SEQUENCE {
	 *   attrType    OBJECT IDENTIFIER,
	 *   attrValues  SET OF AttributeValue
	 * }
	 *
	 * AttributeValue ::= ANY
	 *
	 * Version ::= INTEGER
	 *
	 * RecipientInfos ::= SET OF RecipientInfo
	 *
	 * EncryptedContentInfo ::= SEQUENCE {
	 *   contentType                 ContentType,
	 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
	 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
	 * }
	 *
	 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of AES and DES3, there is only one,
	 * the IV.
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *    algorithm OBJECT IDENTIFIER,
	 *    parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * EncryptedContent ::= OCTET STRING
	 *
	 * RecipientInfo ::= SEQUENCE {
	 *   version                     Version,
	 *   issuerAndSerialNumber       IssuerAndSerialNumber,
	 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
	 *   encryptedKey                EncryptedKey
	 * }
	 *
	 * IssuerAndSerialNumber ::= SEQUENCE {
	 *   issuer                      Name,
	 *   serialNumber                CertificateSerialNumber
	 * }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedKey ::= OCTET STRING
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for ASN.1 API
	var asn1 = forge.asn1;

	// shortcut for PKCS#7 API
	var p7v = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
	forge.pkcs7 = forge.pkcs7 || {};
	forge.pkcs7.asn1 = p7v;

	var contentInfoValidator = {
	  name: 'ContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'ContentInfo.ContentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'ContentInfo.content',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    captureAsn1: 'content'
	  }]
	};
	p7v.contentInfoValidator = contentInfoValidator;

	var encryptedContentInfoValidator = {
	  name: 'EncryptedContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedContentInfo.contentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      captureAsn1: 'encParameter'
	    }]
	  }, {
	    name: 'EncryptedContentInfo.encryptedContent',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
	     * other implementations do generate.
	     *
	     * OpenSSL generates a structure like this:
	     * SEQUENCE {
	     *    ...
	     *    [0]
	     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *       ...
	     * }
	     *
	     * Whereas other implementations (and this PKCS#7 module) generate:
	     * SEQUENCE {
	     *    ...
	     *    [0] {
	     *       OCTET STRING
	     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *          ...
	     *    }
	     * }
	     *
	     * In order to support both, we just capture the context specific
	     * field here.  The OCTET STRING bit is removed below.
	     */
	    capture: 'encryptedContent',
	    captureAsn1: 'encryptedContentAsn1'
	  }]
	};

	p7v.envelopedDataValidator = {
	  name: 'EnvelopedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EnvelopedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'EnvelopedData.RecipientInfos',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    captureAsn1: 'recipientInfos'
	  }].concat(encryptedContentInfoValidator)
	};

	p7v.encryptedDataValidator = {
	  name: 'EncryptedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }].concat(encryptedContentInfoValidator)
	};

	var signerValidator = {
	  name: 'SignerInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignerInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false
	  }, {
	    name: 'SignerInfo.issuerAndSerialNumber',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.issuerAndSerialNumber.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'SignerInfo.digestAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.digestAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'digestAlgorithm'
	    }, {
	      name: 'SignerInfo.digestAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'digestParameter',
	      optional: true
	    }]
	  }, {
	    name: 'SignerInfo.authenticatedAttributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'authenticatedAttributes'
	  }, {
	    name: 'SignerInfo.digestEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    capture: 'signatureAlgorithm'
	  }, {
	    name: 'SignerInfo.encryptedDigest',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'signature'
	  }, {
	    name: 'SignerInfo.unauthenticatedAttributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    optional: true,
	    capture: 'unauthenticatedAttributes'
	  }]
	};

	p7v.signedDataValidator = {
	  name: 'SignedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'SignedData.DigestAlgorithms',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    captureAsn1: 'digestAlgorithms'
	  },
	  contentInfoValidator,
	  {
	    name: 'SignedData.Certificates',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    optional: true,
	    captureAsn1: 'certificates'
	  }, {
	    name: 'SignedData.CertificateRevocationLists',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    optional: true,
	    captureAsn1: 'crls'
	  }, {
	    name: 'SignedData.SignerInfos',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    capture: 'signerInfos',
	    optional: true,
	    value: [signerValidator]
	  }]
	};

	p7v.recipientInfoValidator = {
	  name: 'RecipientInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'RecipientInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'RecipientInfo.issuerAndSerial',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.issuerAndSerial.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'RecipientInfo.issuerAndSerial.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'RecipientInfo.keyEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'encParameter'
	    }]
	  }, {
	    name: 'RecipientInfo.encryptedKey',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encKey'
	  }]
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs7asn1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs7asn1',['require', 'module', './asn1', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of mask generation function MGF1.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.mgf = forge.mgf || {};
	var mgf1 = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};

	/**
	 * Creates a MGF1 mask generation function object.
	 *
	 * @param md the message digest API to use (eg: forge.md.sha1.create()).
	 *
	 * @return a mask generation function object.
	 */
	mgf1.create = function(md) {
	  var mgf = {
	    /**
	     * Generate mask of specified length.
	     *
	     * @param {String} seed The seed for mask generation.
	     * @param maskLen Number of bytes to generate.
	     * @return {String} The generated mask.
	     */
	    generate: function(seed, maskLen) {
	      /* 2. Let T be the empty octet string. */
	      var t = new forge.util.ByteBuffer();

	      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */
	      var len = Math.ceil(maskLen / md.digestLength);
	      for(var i = 0; i < len; i++) {
	        /* a. Convert counter to an octet string C of length 4 octets */
	        var c = new forge.util.ByteBuffer();
	        c.putInt32(i);

	        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
	         * string T: */
	        md.start();
	        md.update(seed + c.getBytes());
	        t.putBuffer(md.digest());
	      }

	      /* Output the leading maskLen octets of T as the octet string mask. */
	      t.truncate(t.length() - maskLen);
	      return t.getBytes();
	    }
	  };

	  return mgf;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'mgf1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/mgf1',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge mask generation functions.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.mgf = forge.mgf || {};
	forge.mgf.mgf1 = forge.mgf1;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'mgf';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/mgf',['require', 'module', './mgf1'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#1 PSS signature padding.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for PSS API
	var pss = forge.pss = forge.pss || {};

	/**
	 * Creates a PSS signature scheme object.
	 *
	 * There are several ways to provide a salt for encoding:
	 *
	 * 1. Specify the saltLength only and the built-in PRNG will generate it.
	 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
	 *   will be used.
	 * 3. Specify the salt itself as a forge.util.ByteBuffer.
	 *
	 * @param options the options to use:
	 *          md the message digest object to use, a forge md instance.
	 *          mgf the mask generation function to use, a forge mgf instance.
	 *          [saltLength] the length of the salt in octets.
	 *          [prng] the pseudo-random number generator to use to produce a salt.
	 *          [salt] the salt to use when encoding.
	 *
	 * @return a signature scheme object.
	 */
	pss.create = function(options) {
	  // backwards compatibility w/legacy args: hash, mgf, sLen
	  if(arguments.length === 3) {
	    options = {
	      md: arguments[0],
	      mgf: arguments[1],
	      saltLength: arguments[2]
	    };
	  }

	  var hash = options.md;
	  var mgf = options.mgf;
	  var hLen = hash.digestLength;

	  var salt_ = options.salt || null;
	  if(typeof salt_ === 'string') {
	    // assume binary-encoded string
	    salt_ = forge.util.createBuffer(salt_);
	  }

	  var sLen;
	  if('saltLength' in options) {
	    sLen = options.saltLength;
	  } else if(salt_ !== null) {
	    sLen = salt_.length();
	  } else {
	    throw new Error('Salt length not specified or specific salt not given.');
	  }

	  if(salt_ !== null && salt_.length() !== sLen) {
	    throw new Error('Given salt length does not match length of given salt.');
	  }

	  var prng = options.prng || forge.random;

	  var pssobj = {};

	  /**
	   * Encodes a PSS signature.
	   *
	   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return the encoded message as a binary-encoded string of length
	   *           ceil((modBits - 1) / 8).
	   */
	  pssobj.encode = function(md, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* 2. Let mHash = Hash(M), an octet string of length hLen. */
	    var mHash = md.digest().getBytes();

	    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Message is too long to encrypt.');
	    }

	    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
	     *    then salt is the empty string. */
	    var salt;
	    if(salt_ === null) {
	      salt = prng.getBytesSync(sLen);
	    } else {
	      salt = salt_.bytes();
	    }

	    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */
	    var m_ = new forge.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 6. Let H = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h = hash.digest().getBytes();

	    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
	     *    zero octets.  The length of PS may be 0. */
	    var ps = new forge.util.ByteBuffer();
	    ps.fillWithByte(0, emLen - sLen - hLen - 2);

	    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
	     *    emLen - hLen - 1. */
	    ps.putByte(0x01);
	    ps.putBytes(salt);
	    var db = ps.getBytes();

	    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var maskLen = emLen - hLen - 1;
	    var dbMask = mgf.generate(h, maskLen);

	    /* 10. Let maskedDB = DB \xor dbMask. */
	    var maskedDB = '';
	    for(i = 0; i < maskLen; i ++) {
	      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
	     *     maskedDB to zero. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +
	      maskedDB.substr(1);

	    /* 12. Let EM = maskedDB || H || 0xbc.
	     * 13. Output EM. */
	    return maskedDB + h + String.fromCharCode(0xbc);
	  };

	  /**
	   * Verifies a PSS signature.
	   *
	   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
	   *
	   * @param mHash the message digest hash, as a binary-encoded string, to
	   *         compare against the signature.
	   * @param em the encoded message, as a binary-encoded string
	   *          (RSA decryption result).
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	  pssobj.verify = function(mHash, em, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* c. Convert the message representative m to an encoded message EM
	     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
	     *    is the length in bits of the RSA modulus n */
	    em = em.substr(-emLen);

	    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Inconsistent parameters to PSS signature verification.');
	    }

	    /* 4. If the rightmost octet of EM does not have hexadecimal value
	     *    0xbc, output "inconsistent" and stop. */
	    if(em.charCodeAt(emLen - 1) !== 0xbc) {
	      throw new Error('Encoded message does not end in 0xBC.');
	    }

	    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
	     *    let H be the next hLen octets. */
	    var maskLen = emLen - hLen - 1;
	    var maskedDB = em.substr(0, maskLen);
	    var h = em.substr(maskLen, hLen);

	    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
	     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    if((maskedDB.charCodeAt(0) & mask) !== 0) {
	      throw new Error('Bits beyond keysize not zero as expected.');
	    }

	    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var dbMask = mgf.generate(h, maskLen);

	    /* 8. Let DB = maskedDB \xor dbMask. */
	    var db = '';
	    for(i = 0; i < maskLen; i ++) {
	      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
	     * in DB to zero. */
	    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);

	    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
	     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
	     * position is "position 1") does not have hexadecimal value 0x01,
	     * output "inconsistent" and stop. */
	    var checkLen = emLen - hLen - sLen - 2;
	    for(i = 0; i < checkLen; i ++) {
	      if(db.charCodeAt(i) !== 0x00) {
	        throw new Error('Leftmost octets not zero as expected');
	      }
	    }

	    if(db.charCodeAt(checkLen) !== 0x01) {
	      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
	    }

	    /* 11. Let salt be the last sLen octets of DB. */
	    var salt = db.substr(-sLen);

	    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */
	    var m_ = new forge.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 13. Let H' = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h_ = hash.digest().getBytes();

	    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */
	    return h === h_;
	  };

	  return pssobj;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pss';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pss',['require', 'module', './random', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of X.509 and related components (such as
	 * Certification Signing Requests) of a Public Key Infrastructure.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The ASN.1 representation of an X.509v3 certificate is as follows
	 * (see RFC 2459):
	 *
	 * Certificate ::= SEQUENCE {
	 *   tbsCertificate       TBSCertificate,
	 *   signatureAlgorithm   AlgorithmIdentifier,
	 *   signatureValue       BIT STRING
	 * }
	 *
	 * TBSCertificate ::= SEQUENCE {
	 *   version         [0]  EXPLICIT Version DEFAULT v1,
	 *   serialNumber         CertificateSerialNumber,
	 *   signature            AlgorithmIdentifier,
	 *   issuer               Name,
	 *   validity             Validity,
	 *   subject              Name,
	 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
	 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
	 *                        -- If present, version shall be v3
	 * }
	 *
	 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * Name ::= CHOICE {
	 *   // only one possible choice for now
	 *   RDNSequence
	 * }
	 *
	 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
	 *
	 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
	 *
	 * AttributeTypeAndValue ::= SEQUENCE {
	 *   type     AttributeType,
	 *   value    AttributeValue
	 * }
	 * AttributeType ::= OBJECT IDENTIFIER
	 * AttributeValue ::= ANY DEFINED BY AttributeType
	 *
	 * Validity ::= SEQUENCE {
	 *   notBefore      Time,
	 *   notAfter       Time
	 * }
	 *
	 * Time ::= CHOICE {
	 *   utcTime        UTCTime,
	 *   generalTime    GeneralizedTime
	 * }
	 *
	 * UniqueIdentifier ::= BIT STRING
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm            AlgorithmIdentifier,
	 *   subjectPublicKey     BIT STRING
	 * }
	 *
	 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
	 *
	 * Extension ::= SEQUENCE {
	 *   extnID      OBJECT IDENTIFIER,
	 *   critical    BOOLEAN DEFAULT FALSE,
	 *   extnValue   OCTET STRING
	 * }
	 *
	 * The only key algorithm currently supported for PKI is RSA.
	 *
	 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
	 *
	 * PKCS#10 v1.7 describes certificate signing requests:
	 *
	 * CertificationRequestInfo:
	 *
	 * CertificationRequestInfo ::= SEQUENCE {
	 *   version       INTEGER { v1(0) } (v1,...),
	 *   subject       Name,
	 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
	 *   attributes    [0] Attributes{{ CRIAttributes }}
	 * }
	 *
	 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
	 *
	 * CRIAttributes  ATTRIBUTE  ::= {
	 *   ... -- add any locally defined attributes here -- }
	 *
	 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
	 *   type   ATTRIBUTE.&id({IOSet}),
	 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
	 * }
	 *
	 * CertificationRequest ::= SEQUENCE {
	 *   certificationRequestInfo CertificationRequestInfo,
	 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
	 *   signature          BIT STRING
	 * }
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Public Key Infrastructure (PKI) implementation. */
	var pki = forge.pki = forge.pki || {};
	var oids = pki.oids;

	// short name OID mappings
	var _shortNames = {};
	_shortNames['CN'] = oids['commonName'];
	_shortNames['commonName'] = 'CN';
	_shortNames['C'] = oids['countryName'];
	_shortNames['countryName'] = 'C';
	_shortNames['L'] = oids['localityName'];
	_shortNames['localityName'] = 'L';
	_shortNames['ST'] = oids['stateOrProvinceName'];
	_shortNames['stateOrProvinceName'] = 'ST';
	_shortNames['O'] = oids['organizationName'];
	_shortNames['organizationName'] = 'O';
	_shortNames['OU'] = oids['organizationalUnitName'];
	_shortNames['organizationalUnitName'] = 'OU';
	_shortNames['E'] = oids['emailAddress'];
	_shortNames['emailAddress'] = 'E';

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator = forge.pki.rsa.publicKeyValidator;

	// validator for an X.509v3 certificate
	var x509CertificateValidator = {
	  name: 'Certificate',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'Certificate.TBSCertificate',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'tbsCertificate',
	    value: [{
	      name: 'Certificate.TBSCertificate.version',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 0,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.version.integer',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.INTEGER,
	        constructed: false,
	        capture: 'certVersion'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'certSerialNumber'
	    }, {
	      name: 'Certificate.TBSCertificate.signature',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.signature.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'certinfoSignatureOid'
	      }, {
	        name: 'Certificate.TBSCertificate.signature.parameters',
	        tagClass: asn1.Class.UNIVERSAL,
	        optional: true,
	        captureAsn1: 'certinfoSignatureParams'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certIssuer'
	    }, {
	      name: 'Certificate.TBSCertificate.validity',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      // Note: UTC and generalized times may both appear so the capture
	      // names are based on their detected order, the names used below
	      // are only for the common case, which validity time really means
	      // "notBefore" and which means "notAfter" will be determined by order
	      value: [{
	        // notBefore (Time) (UTC time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity1UTCTime'
	      }, {
	        // notBefore (Time) (generalized time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity2GeneralizedTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity3UTCTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity4GeneralizedTime'
	      }]
	    }, {
	      // Name (subject) (RDNSequence)
	      name: 'Certificate.TBSCertificate.subject',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certSubject'
	    },
	      // SubjectPublicKeyInfo
	      publicKeyValidator,
	    {
	      // issuerUniqueID (optional)
	      name: 'Certificate.TBSCertificate.issuerUniqueID',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 1,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.BITSTRING,
	        constructed: false,
	        capture: 'certIssuerUniqueId'
	      }]
	    }, {
	      // subjectUniqueID (optional)
	      name: 'Certificate.TBSCertificate.subjectUniqueID',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 2,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.BITSTRING,
	        constructed: false,
	        capture: 'certSubjectUniqueId'
	      }]
	    }, {
	      // Extensions (optional)
	      name: 'Certificate.TBSCertificate.extensions',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 3,
	      constructed: true,
	      captureAsn1: 'certExtensions',
	      optional: true
	    }]
	  }, {
	    // AlgorithmIdentifier (signature algorithm)
	    name: 'Certificate.signatureAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      // algorithm
	      name: 'Certificate.signatureAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'certSignatureOid'
	    }, {
	      name: 'Certificate.TBSCertificate.signature.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      optional: true,
	      captureAsn1: 'certSignatureParams'
	    }]
	  }, {
	    // SignatureValue
	    name: 'Certificate.signatureValue',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    capture: 'certSignature'
	  }]
	};

	var rsassaPssParameterValidator = {
	  name: 'rsapss',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'rsapss.hashAlgorithm',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    value: [{
	      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'hashOid'
	        /* parameter block omitted, for SHA1 NULL anyhow. */
	      }]
	    }]
	  }, {
	    name: 'rsapss.maskGenAlgorithm',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    value: [{
	      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'maskGenOid'
	      }, {
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SEQUENCE,
	        constructed: true,
	        value: [{
	          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
	          tagClass: asn1.Class.UNIVERSAL,
	          type: asn1.Type.OID,
	          constructed: false,
	          capture: 'maskGenHashOid'
	          /* parameter block omitted, for SHA1 NULL anyhow. */
	        }]
	      }]
	    }]
	  }, {
	    name: 'rsapss.saltLength',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 2,
	    optional: true,
	    value: [{
	      name: 'rsapss.saltLength.saltLength',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.INTEGER,
	      constructed: false,
	      capture: 'saltLength'
	    }]
	  }, {
	    name: 'rsapss.trailerField',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 3,
	    optional: true,
	    value: [{
	      name: 'rsapss.trailer.trailer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.INTEGER,
	      constructed: false,
	      capture: 'trailer'
	    }]
	  }]
	};

	// validator for a CertificationRequestInfo structure
	var certificationRequestInfoValidator = {
	  name: 'CertificationRequestInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'certificationRequestInfo',
	  value: [{
	    name: 'CertificationRequestInfo.integer',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'certificationRequestInfoVersion'
	  }, {
	    // Name (subject) (RDNSequence)
	    name: 'CertificationRequestInfo.subject',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'certificationRequestInfoSubject'
	  },
	  // SubjectPublicKeyInfo
	  publicKeyValidator,
	  {
	    name: 'CertificationRequestInfo.attributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'certificationRequestInfoAttributes',
	    value: [{
	      name: 'CertificationRequestInfo.attributes',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'CertificationRequestInfo.attributes.type',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false
	      }, {
	        name: 'CertificationRequestInfo.attributes.value',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SET,
	        constructed: true
	      }]
	    }]
	  }]
	};

	// validator for a CertificationRequest structure
	var certificationRequestValidator = {
	  name: 'CertificationRequest',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'csr',
	  value: [
	    certificationRequestInfoValidator, {
	    // AlgorithmIdentifier (signature algorithm)
	    name: 'CertificationRequest.signatureAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      // algorithm
	      name: 'CertificationRequest.signatureAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'csrSignatureOid'
	    }, {
	      name: 'CertificationRequest.signatureAlgorithm.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      optional: true,
	      captureAsn1: 'csrSignatureParams'
	    }]
	  }, {
	    // signature
	    name: 'CertificationRequest.signature',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    capture: 'csrSignature'
	  }]
	};

	/**
	 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
	 * sets into an array with objects that have type and value properties.
	 *
	 * @param rdn the RDNSequence to convert.
	 * @param md a message digest to append type and value to if provided.
	 */
	pki.RDNAttributesAsArray = function(rdn, md) {
	  var rval = [];

	  // each value in 'rdn' in is a SET of RelativeDistinguishedName
	  var set, attr, obj;
	  for(var si = 0; si < rdn.value.length; ++si) {
	    // get the RelativeDistinguishedName set
	    set = rdn.value[si];

	    // each value in the SET is an AttributeTypeAndValue sequence
	    // containing first a type (an OID) and second a value (defined by
	    // the OID)
	    for(var i = 0; i < set.value.length; ++i) {
	      obj = {};
	      attr = set.value[i];
	      obj.type = asn1.derToOid(attr.value[0].value);
	      obj.value = attr.value[1].value;
	      obj.valueTagClass = attr.value[1].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      if(md) {
	        md.update(obj.type);
	        md.update(obj.value);
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Converts ASN.1 CRIAttributes into an array with objects that have type and
	 * value properties.
	 *
	 * @param attributes the CRIAttributes to convert.
	 */
	pki.CRIAttributesAsArray = function(attributes) {
	  var rval = [];

	  // each value in 'attributes' in is a SEQUENCE with an OID and a SET
	  for(var si = 0; si < attributes.length; ++si) {
	    // get the attribute sequence
	    var seq = attributes[si];

	    // each value in the SEQUENCE containing first a type (an OID) and
	    // second a set of values (defined by the OID)
	    var type = asn1.derToOid(seq.value[0].value);
	    var values = seq.value[1].value;
	    for(var vi = 0; vi < values.length; ++vi) {
	      var obj = {};
	      obj.type = type;
	      obj.value = values[vi].value;
	      obj.valueTagClass = values[vi].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      // parse extensions
	      if(obj.type === oids.extensionRequest) {
	        obj.extensions = [];
	        for(var ei = 0; ei < obj.value.length; ++ei) {
	          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
	        }
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Gets an issuer or subject attribute from its name, type, or short name.
	 *
	 * @param obj the issuer or subject object.
	 * @param options a short name string or an object with:
	 *          shortName the short name for the attribute.
	 *          name the name for the attribute.
	 *          type the type for the attribute.
	 *
	 * @return the attribute.
	 */
	function _getAttribute(obj, options) {
	  if(typeof options === 'string') {
	    options = {shortName: options};
	  }

	  var rval = null;
	  var attr;
	  for(var i = 0; rval === null && i < obj.attributes.length; ++i) {
	    attr = obj.attributes[i];
	    if(options.type && options.type === attr.type) {
	      rval = attr;
	    } else if(options.name && options.name === attr.name) {
	      rval = attr;
	    } else if(options.shortName && options.shortName === attr.shortName) {
	      rval = attr;
	    }
	  }
	  return rval;
	}

	/**
	 * Converts signature parameters from ASN.1 structure.
	 *
	 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
	 * no parameters.
	 *
	 * RSASSA-PSS-params  ::=  SEQUENCE  {
	 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
	 *                             sha1Identifier,
	 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
	 *                             mgf1SHA1Identifier,
	 *   saltLength         [2] INTEGER DEFAULT 20,
	 *   trailerField       [3] INTEGER DEFAULT 1
	 * }
	 *
	 * HashAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * @param oid The OID specifying the signature algorithm
	 * @param obj The ASN.1 structure holding the parameters
	 * @param fillDefaults Whether to use return default values where omitted
	 * @return signature parameter object
	 */
	var _readSignatureParameters = function(oid, obj, fillDefaults) {
	  var params = {};

	  if(oid !== oids['RSASSA-PSS']) {
	    return params;
	  }

	  if(fillDefaults) {
	    params = {
	      hash: {
	        algorithmOid: oids['sha1']
	      },
	      mgf: {
	        algorithmOid: oids['mgf1'],
	        hash: {
	          algorithmOid: oids['sha1']
	        }
	      },
	      saltLength: 20
	    };
	  }

	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
	    var error = new Error('Cannot read RSASSA-PSS parameter block.');
	    error.errors = errors;
	    throw error;
	  }

	  if(capture.hashOid !== undefined) {
	    params.hash = params.hash || {};
	    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
	  }

	  if(capture.maskGenOid !== undefined) {
	    params.mgf = params.mgf || {};
	    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
	    params.mgf.hash = params.mgf.hash || {};
	    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
	  }

	  if(capture.saltLength !== undefined) {
	    params.saltLength = capture.saltLength.charCodeAt(0);
	  }

	  return params;
	};

	/**
	 * Converts an X.509 certificate from PEM format.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. This will scan the TBSCertificate part of the ASN.1
	 * object while it is converted so it doesn't need to be converted back
	 * to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certificate.
	 */
	pki.certificateFromPem = function(pem, computeHash, strict) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE' &&
	    msg.type !== 'X509 CERTIFICATE' &&
	    msg.type !== 'TRUSTED CERTIFICATE') {
	    var error = new Error('Could not convert certificate from PEM; PEM header type ' +
	      'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body, strict);

	  return pki.certificateFromAsn1(obj, computeHash);
	};

	/**
	 * Converts an X.509 certificate to PEM format.
	 *
	 * @param cert the certificate.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certificate.
	 */
	pki.certificateToPem = function(cert, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE',
	    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key from PEM format.
	 *
	 * @param pem the PEM-formatted public key.
	 *
	 * @return the public key.
	 */
	pki.publicKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
	    var error = new Error('Could not convert public key from PEM; PEM header ' +
	      'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return pki.publicKeyFromAsn1(obj);
	};

	/**
	 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki.publicKeyToPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'PUBLIC KEY',
	    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key to PEM format (using an RSAPublicKey).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'RSA PUBLIC KEY',
	    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Gets a fingerprint for the given public key.
	 *
	 * @param options the options to use.
	 *          [md] the message digest object to use (defaults to forge.md.sha1).
	 *          [type] the type of fingerprint, such as 'RSAPublicKey',
	 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
	 *          [encoding] an alternative output encoding, such as 'hex'
	 *            (defaults to none, outputs a byte buffer).
	 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
	 *            output, eg: ':' (defaults to none).
	 *
	 * @return the fingerprint as a byte buffer or other encoding based on options.
	 */
	pki.getPublicKeyFingerprint = function(key, options) {
	  options = options || {};
	  var md = options.md || forge.md.sha1.create();
	  var type = options.type || 'RSAPublicKey';

	  var bytes;
	  switch(type) {
	  case 'RSAPublicKey':
	    bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
	    break;
	  case 'SubjectPublicKeyInfo':
	    bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
	    break;
	  default:
	    throw new Error('Unknown fingerprint type "' + options.type + '".');
	  }

	  // hash public key bytes
	  md.start();
	  md.update(bytes);
	  var digest = md.digest();
	  if(options.encoding === 'hex') {
	    var hex = digest.toHex();
	    if(options.delimiter) {
	      return hex.match(/.{2}/g).join(options.delimiter);
	    }
	    return hex;
	  } else if(options.encoding === 'binary') {
	    return digest.getBytes();
	  } else if(options.encoding) {
	    throw new Error('Unknown encoding "' + options.encoding + '".');
	  }
	  return digest;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from PEM format.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. This will scan the CertificationRequestInfo part of
	 * the ASN.1 object while it is converted so it doesn't need to be converted
	 * back to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certification request (CSR).
	 */
	pki.certificationRequestFromPem = function(pem, computeHash, strict) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE REQUEST') {
	    var error = new Error('Could not convert certification request from PEM; ' +
	      'PEM header type is not "CERTIFICATE REQUEST".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert certification request from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body, strict);

	  return pki.certificationRequestFromAsn1(obj, computeHash);
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) to PEM format.
	 *
	 * @param csr the certification request.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certification request.
	 */
	pki.certificationRequestToPem = function(csr, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE REQUEST',
	    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Creates an empty X.509v3 RSA certificate.
	 *
	 * @return the certificate.
	 */
	pki.createCertificate = function() {
	  var cert = {};
	  cert.version = 0x02;
	  cert.serialNumber = '00';
	  cert.signatureOid = null;
	  cert.signature = null;
	  cert.siginfo = {};
	  cert.siginfo.algorithmOid = null;
	  cert.validity = {};
	  cert.validity.notBefore = new Date();
	  cert.validity.notAfter = new Date();

	  cert.issuer = {};
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = [];
	  cert.issuer.hash = null;

	  cert.subject = {};
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = [];
	  cert.subject.hash = null;

	  cert.extensions = [];
	  cert.publicKey = null;
	  cert.md = null;

	  /**
	   * Sets the subject of this certificate.
	   *
	   * @param attrs the array of subject attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setSubject = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.subject.attributes = attrs;
	    delete cert.subject.uniqueId;
	    if(uniqueId) {
	      cert.subject.uniqueId = uniqueId;
	    }
	    cert.subject.hash = null;
	  };

	  /**
	   * Sets the issuer of this certificate.
	   *
	   * @param attrs the array of issuer attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setIssuer = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.issuer.attributes = attrs;
	    delete cert.issuer.uniqueId;
	    if(uniqueId) {
	      cert.issuer.uniqueId = uniqueId;
	    }
	    cert.issuer.hash = null;
	  };

	  /**
	   * Sets the extensions of this certificate.
	   *
	   * @param exts the array of extensions to use.
	   */
	  cert.setExtensions = function(exts) {
	    for(var i = 0; i < exts.length; ++i) {
	      _fillMissingExtensionFields(exts[i], {cert: cert});
	    }
	    // set new extensions
	    cert.extensions = exts;
	  };

	  /**
	   * Gets an extension by its name or id.
	   *
	   * @param options the name to use or an object with:
	   *          name the name to use.
	   *          id the id to use.
	   *
	   * @return the extension or null if not found.
	   */
	  cert.getExtension = function(options) {
	    if(typeof options === 'string') {
	      options = {name: options};
	    }

	    var rval = null;
	    var ext;
	    for(var i = 0; rval === null && i < cert.extensions.length; ++i) {
	      ext = cert.extensions[i];
	      if(options.id && ext.id === options.id) {
	        rval = ext;
	      } else if(options.name && ext.name === options.name) {
	        rval = ext;
	      }
	    }
	    return rval;
	  };

	  /**
	   * Signs this certificate using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  cert.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    cert.md = md || forge.md.sha1.create();
	    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certificate digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = cert.md.algorithm;
	      throw error;
	    }
	    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;

	    // get TBSCertificate, convert to DER
	    cert.tbsCertificate = pki.getTBSCertificate(cert);
	    var bytes = asn1.toDer(cert.tbsCertificate);

	    // digest and sign
	    cert.md.update(bytes.getBytes());
	    cert.signature = key.sign(cert.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certificate using this
	   * certificate's public key.
	   *
	   * @param child the certificate to verify.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verify = function(child) {
	    var rval = false;

	    if(!cert.issued(child)) {
	      var issuer = child.issuer;
	      var subject = cert.subject;
	      var error = new Error('The parent certificate did not issue the given child ' +
	        'certificate; the child certificate\'s issuer does not match the ' +
	        'parent\'s subject.');
	      error.expectedIssuer = issuer.attributes;
	      error.actualIssuer = subject.attributes;
	      throw error;
	    }

	    var md = child.md;
	    if(md === null) {
	      // check signature OID for supported signature types
	      if(child.signatureOid in oids) {
	        var oid = oids[child.signatureOid];
	        switch(oid) {
	        case 'sha1WithRSAEncryption':
	          md = forge.md.sha1.create();
	          break;
	        case 'md5WithRSAEncryption':
	          md = forge.md.md5.create();
	          break;
	        case 'sha256WithRSAEncryption':
	          md = forge.md.sha256.create();
	          break;
	        case 'sha512WithRSAEncryption':
	          md = forge.md.sha512.create();
	          break;
	        case 'RSASSA-PSS':
	          md = forge.md.sha256.create();
	          break;
	        }
	      }
	      if(md === null) {
	        var error = new Error('Could not compute certificate digest. ' +
	          'Unknown signature OID.');
	        error.signatureOid = child.signatureOid;
	        throw error;
	      }

	      // produce DER formatted TBSCertificate and digest it
	      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
	      var bytes = asn1.toDer(tbsCertificate);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      var scheme;

	      switch(child.signatureOid) {
	      case oids.sha1WithRSAEncryption:
	        scheme = undefined;  /* use PKCS#1 v1.5 padding scheme */
	        break;
	      case oids['RSASSA-PSS']:
	        var hash, mgf;

	        /* initialize mgf */
	        hash = oids[child.signatureParameters.mgf.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported MGF hash function.');
	          error.oid = child.signatureParameters.mgf.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        mgf = oids[child.signatureParameters.mgf.algorithmOid];
	        if(mgf === undefined || forge.mgf[mgf] === undefined) {
	          var error = new Error('Unsupported MGF function.');
	          error.oid = child.signatureParameters.mgf.algorithmOid;
	          error.name = mgf;
	          throw error;
	        }

	        mgf = forge.mgf[mgf].create(forge.md[hash].create());

	        /* initialize hash function */
	        hash = oids[child.signatureParameters.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          throw {
	            message: 'Unsupported RSASSA-PSS hash function.',
	            oid: child.signatureParameters.hash.algorithmOid,
	            name: hash
	          };
	        }

	        scheme = forge.pss.create(forge.md[hash].create(), mgf,
	          child.signatureParameters.saltLength);
	        break;
	      }

	      // verify signature on cert using public key
	      rval = cert.publicKey.verify(
	        md.digest().getBytes(), child.signature, scheme);
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's issuer matches the passed
	   * certificate's subject. Note that no signature check is performed.
	   *
	   * @param parent the certificate to check.
	   *
	   * @return true if this certificate's issuer matches the passed certificate's
	   *         subject.
	   */
	  cert.isIssuer = function(parent) {
	    var rval = false;

	    var i = cert.issuer;
	    var s = parent.subject;

	    // compare hashes if present
	    if(i.hash && s.hash) {
	      rval = (i.hash === s.hash);
	    } else if(i.attributes.length === s.attributes.length) {
	      // all attributes are the same so issuer matches subject
	      rval = true;
	      var iattr, sattr;
	      for(var n = 0; rval && n < i.attributes.length; ++n) {
	        iattr = i.attributes[n];
	        sattr = s.attributes[n];
	        if(iattr.type !== sattr.type || iattr.value !== sattr.value) {
	          // attribute mismatch
	          rval = false;
	        }
	      }
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's subject matches the issuer of the
	   * given certificate). Note that not signature check is performed.
	   *
	   * @param child the certificate to check.
	   *
	   * @return true if this certificate's subject matches the passed
	   *         certificate's issuer.
	   */
	  cert.issued = function(child) {
	    return child.isIssuer(cert);
	  };

	  /**
	   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
	   *
	   * @return the subjectKeyIdentifier for this certificate as byte buffer.
	   */
	  cert.generateSubjectKeyIdentifier = function() {
	    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

	      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
	        value of the BIT STRING subjectPublicKey (excluding the tag,
	        length, and number of unused bits).

	      (2) The keyIdentifier is composed of a four bit type field with
	        the value 0100 followed by the least significant 60 bits of the
	        SHA-1 hash of the value of the BIT STRING subjectPublicKey
	        (excluding the tag, length, and number of unused bit string bits).
	    */

	    // skipping the tag, length, and number of unused bits is the same
	    // as just using the RSAPublicKey (for RSA keys, which are the
	    // only ones supported)
	    return pki.getPublicKeyFingerprint(cert.publicKey, {type: 'RSAPublicKey'});
	  };

	  /**
	   * Verifies the subjectKeyIdentifier extension value for this certificate
	   * against its public key. If no extension is found, false will be
	   * returned.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verifySubjectKeyIdentifier = function() {
	    var oid = oids['subjectKeyIdentifier'];
	    for(var i = 0; i < cert.extensions.length; ++i) {
	      var ext = cert.extensions[i];
	      if(ext.id === oid) {
	        var ski = cert.generateSubjectKeyIdentifier().getBytes();
	        return (forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski);
	      }
	    }
	    return false;
	  };

	  return cert;
	};

	/**
	 * Converts an X.509v3 RSA certificate from an ASN.1 object.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
	 * object needs to be scanned before the cert object is created.
	 *
	 * @param obj the asn1 representation of an X.509v3 RSA certificate.
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certificate.
	 */
	pki.certificateFromAsn1 = function(obj, computeHash) {
	  // validate certificate and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
	    var error = new Error('Cannot read X.509 certificate. ' +
	      'ASN.1 object is not an X509v3 Certificate.');
	    error.errors = errors;
	    throw error;
	  }

	  // ensure signature is not interpreted as an embedded ASN.1 object
	  if(typeof capture.certSignature !== 'string') {
	    var certSignature = '\x00';
	    for(var i = 0; i < capture.certSignature.length; ++i) {
	      certSignature += asn1.toDer(capture.certSignature[i]).getBytes();
	    }
	    capture.certSignature = certSignature;
	  }

	  // get oid
	  var oid = asn1.derToOid(capture.publicKeyOid);
	  if(oid !== pki.oids['rsaEncryption']) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certificate
	  var cert = pki.createCertificate();
	  cert.version = capture.certVersion ?
	    capture.certVersion.charCodeAt(0) : 0;
	  var serial = forge.util.createBuffer(capture.certSerialNumber);
	  cert.serialNumber = serial.toHex();
	  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
	  cert.signatureParameters = _readSignatureParameters(
	    cert.signatureOid, capture.certSignatureParams, true);
	  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
	  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid,
	    capture.certinfoSignatureParams, false);
	  // skip "unused bits" in signature value BITSTRING
	  var signature = forge.util.createBuffer(capture.certSignature);
	  ++signature.read;
	  cert.signature = signature.getBytes();

	  var validity = [];
	  if(capture.certValidity1UTCTime !== undefined) {
	    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
	  }
	  if(capture.certValidity2GeneralizedTime !== undefined) {
	    validity.push(asn1.generalizedTimeToDate(
	      capture.certValidity2GeneralizedTime));
	  }
	  if(capture.certValidity3UTCTime !== undefined) {
	    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
	  }
	  if(capture.certValidity4GeneralizedTime !== undefined) {
	    validity.push(asn1.generalizedTimeToDate(
	      capture.certValidity4GeneralizedTime));
	  }
	  if(validity.length > 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; more ' +
	      'than two times were provided in the certificate.');
	  }
	  if(validity.length < 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; they ' +
	      'were not provided as either UTCTime or GeneralizedTime.');
	  }
	  cert.validity.notBefore = validity[0];
	  cert.validity.notAfter = validity[1];

	  // keep TBSCertificate to preserve signature when exporting
	  cert.tbsCertificate = capture.tbsCertificate;

	  if(computeHash) {
	    // check signature OID for supported signature types
	    cert.md = null;
	    if(cert.signatureOid in oids) {
	      var oid = oids[cert.signatureOid];
	      switch(oid) {
	      case 'sha1WithRSAEncryption':
	        cert.md = forge.md.sha1.create();
	        break;
	      case 'md5WithRSAEncryption':
	        cert.md = forge.md.md5.create();
	        break;
	      case 'sha256WithRSAEncryption':
	        cert.md = forge.md.sha256.create();
	        break;
	      case 'sha512WithRSAEncryption':
	        cert.md = forge.md.sha512.create();
	        break;
	      case 'RSASSA-PSS':
	        cert.md = forge.md.sha256.create();
	        break;
	      }
	    }
	    if(cert.md === null) {
	      var error = new Error('Could not compute certificate digest. ' +
	        'Unknown signature OID.');
	      error.signatureOid = cert.signatureOid;
	      throw error;
	    }

	    // produce DER formatted TBSCertificate and digest it
	    var bytes = asn1.toDer(cert.tbsCertificate);
	    cert.md.update(bytes.getBytes());
	  }

	  // handle issuer, build issuer message digest
	  var imd = forge.md.sha1.create();
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer, imd);
	  if(capture.certIssuerUniqueId) {
	    cert.issuer.uniqueId = capture.certIssuerUniqueId;
	  }
	  cert.issuer.hash = imd.digest().toHex();

	  // handle subject, build subject message digest
	  var smd = forge.md.sha1.create();
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject, smd);
	  if(capture.certSubjectUniqueId) {
	    cert.subject.uniqueId = capture.certSubjectUniqueId;
	  }
	  cert.subject.hash = smd.digest().toHex();

	  // handle extensions
	  if(capture.certExtensions) {
	    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
	  } else {
	    cert.extensions = [];
	  }

	  // convert RSA public key from ASN.1
	  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  return cert;
	};

	/**
	 * Converts an ASN.1 extensions object (with extension sequences as its
	 * values) into an array of extension objects with types and values.
	 *
	 * Supported extensions:
	 *
	 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
	 * KeyUsage ::= BIT STRING {
	 *   digitalSignature        (0),
	 *   nonRepudiation          (1),
	 *   keyEncipherment         (2),
	 *   dataEncipherment        (3),
	 *   keyAgreement            (4),
	 *   keyCertSign             (5),
	 *   cRLSign                 (6),
	 *   encipherOnly            (7),
	 *   decipherOnly            (8)
	 * }
	 *
	 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
	 * BasicConstraints ::= SEQUENCE {
	 *   cA                      BOOLEAN DEFAULT FALSE,
	 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
	 * }
	 *
	 * subjectAltName EXTENSION ::= {
	 *   SYNTAX GeneralNames
	 *   IDENTIFIED BY id-ce-subjectAltName
	 * }
	 *
	 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
	 *
	 * GeneralName ::= CHOICE {
	 *   otherName      [0] INSTANCE OF OTHER-NAME,
	 *   rfc822Name     [1] IA5String,
	 *   dNSName        [2] IA5String,
	 *   x400Address    [3] ORAddress,
	 *   directoryName  [4] Name,
	 *   ediPartyName   [5] EDIPartyName,
	 *   uniformResourceIdentifier [6] IA5String,
	 *   IPAddress      [7] OCTET STRING,
	 *   registeredID   [8] OBJECT IDENTIFIER
	 * }
	 *
	 * OTHER-NAME ::= TYPE-IDENTIFIER
	 *
	 * EDIPartyName ::= SEQUENCE {
	 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
	 *   partyName    [1] DirectoryString {ub-name}
	 * }
	 *
	 * @param exts the extensions ASN.1 with extension sequences to parse.
	 *
	 * @return the array.
	 */
	pki.certificateExtensionsFromAsn1 = function(exts) {
	  var rval = [];
	  for(var i = 0; i < exts.value.length; ++i) {
	    // get extension sequence
	    var extseq = exts.value[i];
	    for(var ei = 0; ei < extseq.value.length; ++ei) {
	      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
	    }
	  }

	  return rval;
	};

	/**
	 * Parses a single certificate extension from ASN.1.
	 *
	 * @param ext the extension in ASN.1 format.
	 *
	 * @return the parsed extension as an object.
	 */
	pki.certificateExtensionFromAsn1 = function(ext) {
	  // an extension has:
	  // [0] extnID      OBJECT IDENTIFIER
	  // [1] critical    BOOLEAN DEFAULT FALSE
	  // [2] extnValue   OCTET STRING
	  var e = {};
	  e.id = asn1.derToOid(ext.value[0].value);
	  e.critical = false;
	  if(ext.value[1].type === asn1.Type.BOOLEAN) {
	    e.critical = (ext.value[1].value.charCodeAt(0) !== 0x00);
	    e.value = ext.value[2].value;
	  } else {
	    e.value = ext.value[1].value;
	  }
	  // if the oid is known, get its name
	  if(e.id in oids) {
	    e.name = oids[e.id];

	    // handle key usage
	    if(e.name === 'keyUsage') {
	      // get value as BIT STRING
	      var ev = asn1.fromDer(e.value);
	      var b2 = 0x00;
	      var b3 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
	      }
	      // set flags
	      e.digitalSignature = (b2 & 0x80) === 0x80;
	      e.nonRepudiation = (b2 & 0x40) === 0x40;
	      e.keyEncipherment = (b2 & 0x20) === 0x20;
	      e.dataEncipherment = (b2 & 0x10) === 0x10;
	      e.keyAgreement = (b2 & 0x08) === 0x08;
	      e.keyCertSign = (b2 & 0x04) === 0x04;
	      e.cRLSign = (b2 & 0x02) === 0x02;
	      e.encipherOnly = (b2 & 0x01) === 0x01;
	      e.decipherOnly = (b3 & 0x80) === 0x80;
	    } else if(e.name === 'basicConstraints') {
	      // handle basic constraints
	      // get value as SEQUENCE
	      var ev = asn1.fromDer(e.value);
	      // get cA BOOLEAN flag (defaults to false)
	      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
	        e.cA = (ev.value[0].value.charCodeAt(0) !== 0x00);
	      } else {
	        e.cA = false;
	      }
	      // get path length constraint
	      var value = null;
	      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
	        value = ev.value[0].value;
	      } else if(ev.value.length > 1) {
	        value = ev.value[1].value;
	      }
	      if(value !== null) {
	        e.pathLenConstraint = asn1.derToInteger(value);
	      }
	    } else if(e.name === 'extKeyUsage') {
	      // handle extKeyUsage
	      // value is a SEQUENCE of OIDs
	      var ev = asn1.fromDer(e.value);
	      for(var vi = 0; vi < ev.value.length; ++vi) {
	        var oid = asn1.derToOid(ev.value[vi].value);
	        if(oid in oids) {
	          e[oids[oid]] = true;
	        } else {
	          e[oid] = true;
	        }
	      }
	    } else if(e.name === 'nsCertType') {
	      // handle nsCertType
	      // get value as BIT STRING
	      var ev = asn1.fromDer(e.value);
	      var b2 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	      }
	      // set flags
	      e.client = (b2 & 0x80) === 0x80;
	      e.server = (b2 & 0x40) === 0x40;
	      e.email = (b2 & 0x20) === 0x20;
	      e.objsign = (b2 & 0x10) === 0x10;
	      e.reserved = (b2 & 0x08) === 0x08;
	      e.sslCA = (b2 & 0x04) === 0x04;
	      e.emailCA = (b2 & 0x02) === 0x02;
	      e.objCA = (b2 & 0x01) === 0x01;
	    } else if(
	      e.name === 'subjectAltName' ||
	      e.name === 'issuerAltName') {
	      // handle subjectAltName/issuerAltName
	      e.altNames = [];

	      // ev is a SYNTAX SEQUENCE
	      var gn;
	      var ev = asn1.fromDer(e.value);
	      for(var n = 0; n < ev.value.length; ++n) {
	        // get GeneralName
	        gn = ev.value[n];

	        var altName = {
	          type: gn.type,
	          value: gn.value
	        };
	        e.altNames.push(altName);

	        // Note: Support for types 1,2,6,7,8
	        switch(gn.type) {
	        // rfc822Name
	        case 1:
	        // dNSName
	        case 2:
	        // uniformResourceIdentifier (URI)
	        case 6:
	          break;
	        // IPAddress
	        case 7:
	          // convert to IPv4/IPv6 string representation
	          altName.ip = forge.util.bytesToIP(gn.value);
	          break;
	        // registeredID
	        case 8:
	          altName.oid = asn1.derToOid(gn.value);
	          break;
	        default:
	          // unsupported
	        }
	      }
	    } else if(e.name === 'subjectKeyIdentifier') {
	      // value is an OCTETSTRING w/the hash of the key-type specific
	      // public key structure (eg: RSAPublicKey)
	      var ev = asn1.fromDer(e.value);
	      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
	    }
	  }
	  return e;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
	 * ASN.1 object needs to be scanned before the csr object is created.
	 *
	 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certification request (CSR).
	 */
	pki.certificationRequestFromAsn1 = function(obj, computeHash) {
	  // validate certification request and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#10 certificate request. ' +
	      'ASN.1 object is not a PKCS#10 CertificationRequest.');
	    error.errors = errors;
	    throw error;
	  }

	  // ensure signature is not interpreted as an embedded ASN.1 object
	  if(typeof capture.csrSignature !== 'string') {
	    var csrSignature = '\x00';
	    for(var i = 0; i < capture.csrSignature.length; ++i) {
	      csrSignature += asn1.toDer(capture.csrSignature[i]).getBytes();
	    }
	    capture.csrSignature = csrSignature;
	  }

	  // get oid
	  var oid = asn1.derToOid(capture.publicKeyOid);
	  if(oid !== pki.oids.rsaEncryption) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certification request
	  var csr = pki.createCertificationRequest();
	  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
	  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
	  csr.signatureParameters = _readSignatureParameters(
	    csr.signatureOid, capture.csrSignatureParams, true);
	  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
	  csr.siginfo.parameters = _readSignatureParameters(
	    csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
	  // skip "unused bits" in signature value BITSTRING
	  var signature = forge.util.createBuffer(capture.csrSignature);
	  ++signature.read;
	  csr.signature = signature.getBytes();

	  // keep CertificationRequestInfo to preserve signature when exporting
	  csr.certificationRequestInfo = capture.certificationRequestInfo;

	  if(computeHash) {
	    // check signature OID for supported signature types
	    csr.md = null;
	    if(csr.signatureOid in oids) {
	      var oid = oids[csr.signatureOid];
	      switch(oid) {
	      case 'sha1WithRSAEncryption':
	        csr.md = forge.md.sha1.create();
	        break;
	      case 'md5WithRSAEncryption':
	        csr.md = forge.md.md5.create();
	        break;
	      case 'sha256WithRSAEncryption':
	        csr.md = forge.md.sha256.create();
	        break;
	      case 'sha512WithRSAEncryption':
	        csr.md = forge.md.sha512.create();
	        break;
	      case 'RSASSA-PSS':
	        csr.md = forge.md.sha256.create();
	        break;
	      }
	    }
	    if(csr.md === null) {
	      var error = new Error('Could not compute certification request digest. ' +
	        'Unknown signature OID.');
	      error.signatureOid = csr.signatureOid;
	      throw error;
	    }

	    // produce DER formatted CertificationRequestInfo and digest it
	    var bytes = asn1.toDer(csr.certificationRequestInfo);
	    csr.md.update(bytes.getBytes());
	  }

	  // handle subject, build subject message digest
	  var smd = forge.md.sha1.create();
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = pki.RDNAttributesAsArray(
	    capture.certificationRequestInfoSubject, smd);
	  csr.subject.hash = smd.digest().toHex();

	  // convert RSA public key from ASN.1
	  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  // convert attributes from ASN.1
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.attributes = pki.CRIAttributesAsArray(
	    capture.certificationRequestInfoAttributes || []);

	  return csr;
	};

	/**
	 * Creates an empty certification request (a CSR or certificate signing
	 * request). Once created, its public key and attributes can be set and then
	 * it can be signed.
	 *
	 * @return the empty certification request.
	 */
	pki.createCertificationRequest = function() {
	  var csr = {};
	  csr.version = 0x00;
	  csr.signatureOid = null;
	  csr.signature = null;
	  csr.siginfo = {};
	  csr.siginfo.algorithmOid = null;

	  csr.subject = {};
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = [];
	  csr.subject.hash = null;

	  csr.publicKey = null;
	  csr.attributes = [];
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.md = null;

	  /**
	   * Sets the subject of this certification request.
	   *
	   * @param attrs the array of subject attributes to use.
	   */
	  csr.setSubject = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.subject.attributes = attrs;
	    csr.subject.hash = null;
	  };

	  /**
	   * Sets the attributes of this certification request.
	   *
	   * @param attrs the array of attributes to use.
	   */
	  csr.setAttributes = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.attributes = attrs;
	  };

	  /**
	   * Signs this certification request using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  csr.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    csr.md = md || forge.md.sha1.create();
	    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certification request digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = csr.md.algorithm;
	      throw error;
	    }
	    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;

	    // get CertificationRequestInfo, convert to DER
	    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
	    var bytes = asn1.toDer(csr.certificationRequestInfo);

	    // digest and sign
	    csr.md.update(bytes.getBytes());
	    csr.signature = key.sign(csr.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certification request using
	   * its public key.
	   *
	   * A CSR that has been exported to a file in PEM format can be verified using
	   * OpenSSL using this command:
	   *
	   * openssl req -in <the-csr-pem-file> -verify -noout -text
	   *
	   * @return true if verified, false if not.
	   */
	  csr.verify = function() {
	    var rval = false;

	    var md = csr.md;
	    if(md === null) {
	      // check signature OID for supported signature types
	      if(csr.signatureOid in oids) {
	        // TODO: create DRY `OID to md` function
	        var oid = oids[csr.signatureOid];
	        switch(oid) {
	        case 'sha1WithRSAEncryption':
	          md = forge.md.sha1.create();
	          break;
	        case 'md5WithRSAEncryption':
	          md = forge.md.md5.create();
	          break;
	        case 'sha256WithRSAEncryption':
	          md = forge.md.sha256.create();
	          break;
	        case 'sha512WithRSAEncryption':
	          md = forge.md.sha512.create();
	          break;
	        case 'RSASSA-PSS':
	          md = forge.md.sha256.create();
	          break;
	        }
	      }
	      if(md === null) {
	        var error = new Error('Could not compute certification request digest. ' +
	          'Unknown signature OID.');
	        error.signatureOid = csr.signatureOid;
	        throw error;
	      }

	      // produce DER formatted CertificationRequestInfo and digest it
	      var cri = csr.certificationRequestInfo ||
	        pki.getCertificationRequestInfo(csr);
	      var bytes = asn1.toDer(cri);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      var scheme;

	      switch(csr.signatureOid) {
	      case oids.sha1WithRSAEncryption:
	        /* use PKCS#1 v1.5 padding scheme */
	        break;
	      case oids['RSASSA-PSS']:
	        var hash, mgf;

	        /* initialize mgf */
	        hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported MGF hash function.');
	          error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        mgf = oids[csr.signatureParameters.mgf.algorithmOid];
	        if(mgf === undefined || forge.mgf[mgf] === undefined) {
	          var error = new Error('Unsupported MGF function.');
	          error.oid = csr.signatureParameters.mgf.algorithmOid;
	          error.name = mgf;
	          throw error;
	        }

	        mgf = forge.mgf[mgf].create(forge.md[hash].create());

	        /* initialize hash function */
	        hash = oids[csr.signatureParameters.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported RSASSA-PSS hash function.');
	          error.oid = csr.signatureParameters.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        scheme = forge.pss.create(forge.md[hash].create(), mgf,
	          csr.signatureParameters.saltLength);
	        break;
	      }

	      // verify signature on csr using its public key
	      rval = csr.publicKey.verify(
	        md.digest().getBytes(), csr.signature, scheme);
	    }

	    return rval;
	  };

	  return csr;
	};

	/**
	 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
	 *
	 * @param obj the subject or issuer (distinguished name).
	 *
	 * @return the ASN.1 RDNSequence.
	 */
	function _dnToAsn1(obj) {
	  // create an empty RDNSequence
	  var rval = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	  // iterate over attributes
	  var attr, set;
	  var attrs = obj.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1.Type.PRINTABLESTRING;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;

	      if(valueTagClass === asn1.Type.UTF8) {
	        value = forge.util.encodeUtf8(value);
	      }
	      // FIXME: handle more encodings
	    }

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // AttributeType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(attr.type).getBytes()),
	        // AttributeValue
	        asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
	      ])
	    ]);
	    rval.value.push(set);
	  }

	  return rval;
	}

	/**
	 * Gets all printable attributes (typically of an issuer or subject) in a
	 * simplified JSON format for display.
	 *
	 * @param attrs the attributes.
	 *
	 * @return the JSON for display.
	 */
	function _getAttributesAsJson(attrs) {
	  var rval = {};
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    if(attr.shortName && (
	      attr.valueTagClass === asn1.Type.UTF8 ||
	      attr.valueTagClass === asn1.Type.PRINTABLESTRING ||
	      attr.valueTagClass === asn1.Type.IA5STRING)) {
	      var value = attr.value;
	      if(attr.valueTagClass === asn1.Type.UTF8) {
	        value = forge.util.encodeUtf8(attr.value);
	      }
	      if(!(attr.shortName in rval)) {
	        rval[attr.shortName] = value;
	      } else if(forge.util.isArray(rval[attr.shortName])) {
	        rval[attr.shortName].push(value);
	      } else {
	        rval[attr.shortName] = [rval[attr.shortName], value];
	      }
	    }
	  }
	  return rval;
	}

	/**
	 * Fills in missing fields in attributes.
	 *
	 * @param attrs the attributes to fill missing fields in.
	 */
	function _fillMissingFields(attrs) {
	  var attr;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];

	    // populate missing name
	    if(typeof attr.name === 'undefined') {
	      if(attr.type && attr.type in pki.oids) {
	        attr.name = pki.oids[attr.type];
	      } else if(attr.shortName && attr.shortName in _shortNames) {
	        attr.name = pki.oids[_shortNames[attr.shortName]];
	      }
	    }

	    // populate missing type (OID)
	    if(typeof attr.type === 'undefined') {
	      if(attr.name && attr.name in pki.oids) {
	        attr.type = pki.oids[attr.name];
	      } else {
	        var error = new Error('Attribute type not specified.');
	        error.attribute = attr;
	        throw error;
	      }
	    }

	    // populate missing shortname
	    if(typeof attr.shortName === 'undefined') {
	      if(attr.name && attr.name in _shortNames) {
	        attr.shortName = _shortNames[attr.name];
	      }
	    }

	    // convert extensions to value
	    if(attr.type === oids.extensionRequest) {
	      attr.valueConstructed = true;
	      attr.valueTagClass = asn1.Type.SEQUENCE;
	      if(!attr.value && attr.extensions) {
	        attr.value = [];
	        for(var ei = 0; ei < attr.extensions.length; ++ei) {
	          attr.value.push(pki.certificateExtensionToAsn1(
	            _fillMissingExtensionFields(attr.extensions[ei])));
	        }
	      }
	    }

	    if(typeof attr.value === 'undefined') {
	      var error = new Error('Attribute value not specified.');
	      error.attribute = attr;
	      throw error;
	    }
	  }
	}

	/**
	 * Fills in missing fields in certificate extensions.
	 *
	 * @param e the extension.
	 * @param [options] the options to use.
	 *          [cert] the certificate the extensions are for.
	 *
	 * @return the extension.
	 */
	function _fillMissingExtensionFields(e, options) {
	  options = options || {};

	  // populate missing name
	  if(typeof e.name === 'undefined') {
	    if(e.id && e.id in pki.oids) {
	      e.name = pki.oids[e.id];
	    }
	  }

	  // populate missing id
	  if(typeof e.id === 'undefined') {
	    if(e.name && e.name in pki.oids) {
	      e.id = pki.oids[e.name];
	    } else {
	      var error = new Error('Extension ID not specified.');
	      error.extension = e;
	      throw error;
	    }
	  }

	  if(typeof e.value !== 'undefined') {
	    return e;
	  }

	  // handle missing value:

	  // value is a BIT STRING
	  if(e.name === 'keyUsage') {
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;
	    var b3 = 0x00;
	    if(e.digitalSignature) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.nonRepudiation) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.keyEncipherment) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.dataEncipherment) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.keyAgreement) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.keyCertSign) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.cRLSign) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.encipherOnly) {
	      b2 |= 0x01;
	      unused = 0;
	    }
	    if(e.decipherOnly) {
	      b3 |= 0x80;
	      unused = 7;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b3 !== 0) {
	      value += String.fromCharCode(b2) + String.fromCharCode(b3);
	    } else if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
	  } else if(e.name === 'basicConstraints') {
	    // basicConstraints is a SEQUENCE
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	    // cA BOOLEAN flag defaults to false
	    if(e.cA) {
	      e.value.value.push(asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
	        String.fromCharCode(0xFF)));
	    }
	    if('pathLenConstraint' in e) {
	      e.value.value.push(asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(e.pathLenConstraint).getBytes()));
	    }
	  } else if(e.name === 'extKeyUsage') {
	    // extKeyUsage is a SEQUENCE of OIDs
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	    var seq = e.value.value;
	    for(var key in e) {
	      if(e[key] !== true) {
	        continue;
	      }
	      // key is name in OID map
	      if(key in oids) {
	        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
	          false, asn1.oidToDer(oids[key]).getBytes()));
	      } else if(key.indexOf('.') !== -1) {
	        // assume key is an OID
	        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
	          false, asn1.oidToDer(key).getBytes()));
	      }
	    }
	  } else if(e.name === 'nsCertType') {
	    // nsCertType is a BIT STRING
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;

	    if(e.client) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.server) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.email) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.objsign) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.reserved) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.sslCA) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.emailCA) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.objCA) {
	      b2 |= 0x01;
	      unused = 0;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
	  } else if(e.name === 'subjectAltName' || e.name === 'issuerAltName') {
	    // SYNTAX SEQUENCE
	    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	    var altName;
	    for(var n = 0; n < e.altNames.length; ++n) {
	      altName = e.altNames[n];
	      var value = altName.value;
	      // handle IP
	      if(altName.type === 7 && altName.ip) {
	        value = forge.util.bytesFromIP(altName.ip);
	        if(value === null) {
	          var error = new Error(
	            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
	          error.extension = e;
	          throw error;
	        }
	      } else if(altName.type === 8) {
	        // handle OID
	        if(altName.oid) {
	          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
	        } else {
	          // deprecated ... convert value to OID
	          value = asn1.oidToDer(value);
	        }
	      }
	      e.value.value.push(asn1.create(
	        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,
	        value));
	    }
	  } else if(e.name === 'subjectKeyIdentifier' && options.cert) {
	    var ski = options.cert.generateSubjectKeyIdentifier();
	    e.subjectKeyIdentifier = ski.toHex();
	    // OCTETSTRING w/digest
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
	  }

	  // ensure value has been defined by now
	  if(typeof e.value === 'undefined') {
	    var error = new Error('Extension value not specified.');
	    error.extension = e;
	    throw error;
	  }

	  return e;
	}

	/**
	 * Convert signature parameters object to ASN.1
	 *
	 * @param {String} oid Signature algorithm OID
	 * @param params The signature parametrs object
	 * @return ASN.1 object representing signature parameters
	 */
	function _signatureParametersToAsn1(oid, params) {
	  switch(oid) {
	  case oids['RSASSA-PSS']:
	    var parts = [];

	    if(params.hash.algorithmOid !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(params.hash.algorithmOid).getBytes()),
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ])
	      ]));
	    }

	    if(params.mgf.algorithmOid !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(params.mgf.algorithmOid).getBytes()),
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	          ])
	        ])
	      ]));
	    }

	    if(params.saltLength !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	          asn1.integerToDer(params.saltLength).getBytes())
	      ]));
	    }

	    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);

	  default:
	    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');
	  }
	}

	/**
	 * Converts a certification request's attributes to an ASN.1 set of
	 * CRIAttributes.
	 *
	 * @param csr certification request.
	 *
	 * @return the ASN.1 set of CRIAttributes.
	 */
	function _CRIAttributesToAsn1(csr) {
	  // create an empty context-specific container
	  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

	  // no attributes, return empty container
	  if(csr.attributes.length === 0) {
	    return rval;
	  }

	  // each attribute has a sequence with a type and a set of values
	  var attrs = csr.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1.Type.UTF8;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;
	    }
	    if(valueTagClass === asn1.Type.UTF8) {
	      value = forge.util.encodeUtf8(value);
	    }
	    var valueConstructed = false;
	    if('valueConstructed' in attr) {
	      valueConstructed = attr.valueConstructed;
	    }
	    // FIXME: handle more encodings

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // AttributeType
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(attr.type).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	        // AttributeValue
	        asn1.create(
	          asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)
	      ])
	    ]);
	    rval.value.push(seq);
	  }

	  return rval;
	}

	/**
	 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 TBSCertificate.
	 */
	pki.getTBSCertificate = function(cert) {
	  // TBSCertificate
	  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	      // integer
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(cert.version).getBytes())
	    ]),
	    // serialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      forge.util.hexToBytes(cert.serialNumber)),
	    // signature
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(
	        cert.siginfo.algorithmOid, cert.siginfo.parameters)
	    ]),
	    // issuer
	    _dnToAsn1(cert.issuer),
	    // validity
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // notBefore
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(cert.validity.notBefore)),
	      // notAfter
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(cert.validity.notAfter))
	    ]),
	    // subject
	    _dnToAsn1(cert.subject),
	    // SubjectPublicKeyInfo
	    pki.publicKeyToAsn1(cert.publicKey)
	  ]);

	  if(cert.issuer.uniqueId) {
	    // issuerUniqueID (optional)
	    tbs.value.push(
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	          String.fromCharCode(0x00) +
	          cert.issuer.uniqueId
	        )
	      ])
	    );
	  }
	  if(cert.subject.uniqueId) {
	    // subjectUniqueID (optional)
	    tbs.value.push(
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	          String.fromCharCode(0x00) +
	          cert.subject.uniqueId
	        )
	      ])
	    );
	  }

	  if(cert.extensions.length > 0) {
	    // extensions (optional)
	    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
	  }

	  return tbs;
	};

	/**
	 * Gets the ASN.1 CertificationRequestInfo part of a
	 * PKCS#10 CertificationRequest.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 CertificationRequestInfo.
	 */
	pki.getCertificationRequestInfo = function(csr) {
	  // CertificationRequestInfo
	  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(csr.version).getBytes()),
	    // subject
	    _dnToAsn1(csr.subject),
	    // SubjectPublicKeyInfo
	    pki.publicKeyToAsn1(csr.publicKey),
	    // attributes
	    _CRIAttributesToAsn1(csr)
	  ]);

	  return cri;
	};

	/**
	 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
	 *
	 * @param dn the DistinguishedName.
	 *
	 * @return the asn1 representation of a DistinguishedName.
	 */
	pki.distinguishedNameToAsn1 = function(dn) {
	  return _dnToAsn1(dn);
	};

	/**
	 * Converts an X.509v3 RSA certificate to an ASN.1 object.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 representation of an X.509v3 RSA certificate.
	 */
	pki.certificateToAsn1 = function(cert) {
	  // prefer cached TBSCertificate over generating one
	  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);

	  // Certificate
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // TBSCertificate
	    tbsCertificate,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(cert.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
	    ]),
	    // SignatureValue
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + cert.signature)
	  ]);
	};

	/**
	 * Converts X.509v3 certificate extensions to ASN.1.
	 *
	 * @param exts the extensions to convert.
	 *
	 * @return the extensions in ASN.1 format.
	 */
	pki.certificateExtensionsToAsn1 = function(exts) {
	  // create top-level extension container
	  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);

	  // create extension sequence (stores a sequence for each extension)
	  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  rval.value.push(seq);

	  for(var i = 0; i < exts.length; ++i) {
	    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
	  }

	  return rval;
	};

	/**
	 * Converts a single certificate extension to ASN.1.
	 *
	 * @param ext the extension to convert.
	 *
	 * @return the extension in ASN.1 format.
	 */
	pki.certificateExtensionToAsn1 = function(ext) {
	  // create a sequence for each extension
	  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	  // extnID (OID)
	  extseq.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	    asn1.oidToDer(ext.id).getBytes()));

	  // critical defaults to false
	  if(ext.critical) {
	    // critical BOOLEAN DEFAULT FALSE
	    extseq.value.push(asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
	      String.fromCharCode(0xFF)));
	  }

	  var value = ext.value;
	  if(typeof ext.value !== 'string') {
	    // value is asn.1
	    value = asn1.toDer(value).getBytes();
	  }

	  // extnValue (OCTET STRING)
	  extseq.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));

	  return extseq;
	};

	/**
	 * Converts a PKCS#10 certification request to an ASN.1 object.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 representation of a certification request.
	 */
	pki.certificationRequestToAsn1 = function(csr) {
	  // prefer cached CertificationRequestInfo over generating one
	  var cri = csr.certificationRequestInfo ||
	    pki.getCertificationRequestInfo(csr);

	  // Certificate
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // CertificationRequestInfo
	    cri,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(csr.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
	    ]),
	    // signature
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + csr.signature)
	  ]);
	};

	/**
	 * Creates a CA store.
	 *
	 * @param certs an optional array of certificate objects or PEM-formatted
	 *          certificate strings to add to the CA store.
	 *
	 * @return the CA store.
	 */
	pki.createCaStore = function(certs) {
	  // create CA store
	  var caStore = {
	    // stored certificates
	    certs: {}
	  };

	  /**
	   * Gets the certificate that issued the passed certificate or its
	   * 'parent'.
	   *
	   * @param cert the certificate to get the parent for.
	   *
	   * @return the parent certificate or null if none was found.
	   */
	  caStore.getIssuer = function(cert) {
	    var rval = getBySubject(cert.issuer);

	    // see if there are multiple matches
	    /*if(forge.util.isArray(rval)) {
	      // TODO: resolve multiple matches by checking
	      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
	      // FIXME: or alternatively do authority key mapping
	      // if possible (X.509v1 certs can't work?)
	      throw new Error('Resolving multiple issuer matches not implemented yet.');
	    }*/

	    return rval;
	  };

	  /**
	   * Adds a trusted certificate to the store.
	   *
	   * @param cert the certificate to add as a trusted certificate (either a
	   *          pki.certificate object or a PEM-formatted certificate).
	   */
	  caStore.addCertificate = function(cert) {
	    // convert from pem if necessary
	    if(typeof cert === 'string') {
	      cert = forge.pki.certificateFromPem(cert);
	    }

	    // produce subject hash if it doesn't exist
	    if(!cert.subject.hash) {
	      var md = forge.md.sha1.create();
	      cert.subject.attributes =  pki.RDNAttributesAsArray(
	        _dnToAsn1(cert.subject), md);
	      cert.subject.hash = md.digest().toHex();
	    }

	    if(cert.subject.hash in caStore.certs) {
	      // subject hash already exists, append to array
	      var tmp = caStore.certs[cert.subject.hash];
	      if(!forge.util.isArray(tmp)) {
	        tmp = [tmp];
	      }
	      tmp.push(cert);
	    } else {
	      caStore.certs[cert.subject.hash] = cert;
	    }
	  };

	  /**
	   * Checks to see if the given certificate is in the store.
	   *
	   * @param cert the certificate to check.
	   *
	   * @return true if the certificate is in the store, false if not.
	   */
	  caStore.hasCertificate = function(cert) {
	    var match = getBySubject(cert.subject);
	    if(!match) {
	      return false;
	    }
	    if(!forge.util.isArray(match)) {
	      match = [match];
	    }
	    // compare DER-encoding of certificates
	    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
	    for(var i = 0; i < match.length; ++i) {
	      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
	      if(der1 === der2) {
	        return true;
	      }
	    }
	    return false;
	  };

	  function getBySubject(subject) {
	    // produce subject hash if it doesn't exist
	    if(!subject.hash) {
	      var md = forge.md.sha1.create();
	      subject.attributes =  pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
	      subject.hash = md.digest().toHex();
	    }
	    return caStore.certs[subject.hash] || null;
	  }

	  // auto-add passed in certs
	  if(certs) {
	    // parse PEM-formatted certificates as necessary
	    for(var i = 0; i < certs.length; ++i) {
	      var cert = certs[i];
	      caStore.addCertificate(cert);
	    }
	  }

	  return caStore;
	};

	/**
	 * Certificate verification errors, based on TLS.
	 */
	pki.certificateError = {
	  bad_certificate: 'forge.pki.BadCertificate',
	  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
	  certificate_revoked: 'forge.pki.CertificateRevoked',
	  certificate_expired: 'forge.pki.CertificateExpired',
	  certificate_unknown: 'forge.pki.CertificateUnknown',
	  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
	};

	/**
	 * Verifies a certificate chain against the given Certificate Authority store
	 * with an optional custom verify callback.
	 *
	 * @param caStore a certificate store to verify against.
	 * @param chain the certificate chain to verify, with the root or highest
	 *          authority at the end (an array of certificates).
	 * @param verify called for every certificate in the chain.
	 *
	 * The verify callback has the following signature:
	 *
	 * verified - Set to true if certificate was verified, otherwise the
	 *   pki.certificateError for why the certificate failed.
	 * depth - The current index in the chain, where 0 is the end point's cert.
	 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
	 *   end point.
	 *
	 * The function returns true on success and on failure either the appropriate
	 * pki.certificateError or an object with 'error' set to the appropriate
	 * pki.certificateError and 'message' set to a custom error message.
	 *
	 * @return true if successful, error thrown if not.
	 */
	pki.verifyCertificateChain = function(caStore, chain, verify) {
	  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
	    Section 6: Certification Path Validation
	    See inline parentheticals related to this particular implementation.

	    The primary goal of path validation is to verify the binding between
	    a subject distinguished name or a subject alternative name and subject
	    public key, as represented in the end entity certificate, based on the
	    public key of the trust anchor. This requires obtaining a sequence of
	    certificates that support that binding. That sequence should be provided
	    in the passed 'chain'. The trust anchor should be in the given CA
	    store. The 'end entity' certificate is the certificate provided by the
	    end point (typically a server) and is the first in the chain.

	    To meet this goal, the path validation process verifies, among other
	    things, that a prospective certification path (a sequence of n
	    certificates or a 'chain') satisfies the following conditions:

	    (a) for all x in {1, ..., n-1}, the subject of certificate x is
	          the issuer of certificate x+1;

	    (b) certificate 1 is issued by the trust anchor;

	    (c) certificate n is the certificate to be validated; and

	    (d) for all x in {1, ..., n}, the certificate was valid at the
	          time in question.

	    Note that here 'n' is index 0 in the chain and 1 is the last certificate
	    in the chain and it must be signed by a certificate in the connection's
	    CA store.

	    The path validation process also determines the set of certificate
	    policies that are valid for this path, based on the certificate policies
	    extension, policy mapping extension, policy constraints extension, and
	    inhibit any-policy extension.

	    Note: Policy mapping extension not supported (Not Required).

	    Note: If the certificate has an unsupported critical extension, then it
	    must be rejected.

	    Note: A certificate is self-issued if the DNs that appear in the subject
	    and issuer fields are identical and are not empty.

	    The path validation algorithm assumes the following seven inputs are
	    provided to the path processing logic. What this specific implementation
	    will use is provided parenthetically:

	    (a) a prospective certification path of length n (the 'chain')
	    (b) the current date/time: ('now').
	    (c) user-initial-policy-set: A set of certificate policy identifiers
	          naming the policies that are acceptable to the certificate user.
	          The user-initial-policy-set contains the special value any-policy
	          if the user is not concerned about certificate policy
	          (Not implemented. Any policy is accepted).
	    (d) trust anchor information, describing a CA that serves as a trust
	          anchor for the certification path. The trust anchor information
	          includes:

	      (1)  the trusted issuer name,
	      (2)  the trusted public key algorithm,
	      (3)  the trusted public key, and
	      (4)  optionally, the trusted public key parameters associated
	             with the public key.

	      (Trust anchors are provided via certificates in the CA store).

	      The trust anchor information may be provided to the path processing
	      procedure in the form of a self-signed certificate. The trusted anchor
	      information is trusted because it was delivered to the path processing
	      procedure by some trustworthy out-of-band procedure. If the trusted
	      public key algorithm requires parameters, then the parameters are
	      provided along with the trusted public key (No parameters used in this
	      implementation).

	    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
	          allowed in the certification path.
	          (Not implemented, no policy checking)

	    (f) initial-explicit-policy, which indicates if the path must be valid
	          for at least one of the certificate policies in the user-initial-
	          policy-set.
	          (Not implemented, no policy checking)

	    (g) initial-any-policy-inhibit, which indicates whether the
	          anyPolicy OID should be processed if it is included in a
	          certificate.
	          (Not implemented, so any policy is valid provided that it is
	          not marked as critical) */

	  /* Basic Path Processing:

	    For each certificate in the 'chain', the following is checked:

	    1. The certificate validity period includes the current time.
	    2. The certificate was signed by its parent (where the parent is either
	       the next in the chain or from the CA store). Allow processing to
	       continue to the next step if no parent is found but the certificate is
	       in the CA store.
	    3. TODO: The certificate has not been revoked.
	    4. The certificate issuer name matches the parent's subject name.
	    5. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is within one of the permitted subtrees of X.500 distinguished names
	       and that each of the alternative names in the subjectAltName extension
	       (critical or non-critical) is within one of the permitted subtrees for
	       that name type.
	    6. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is not within one of the excluded subtrees for X.500 distinguished
	       names and none of the subjectAltName extension names are excluded for
	       that name type.
	    7. The other steps in the algorithm for basic path processing involve
	       handling the policy extension which is not presently supported in this
	       implementation. Instead, if a critical policy extension is found, the
	       certificate is rejected as not supported.
	    8. If the certificate is not the first or if its the only certificate in
	       the chain (having no parent from the CA store or is self-signed) and it
	       has a critical key usage extension, verify that the keyCertSign bit is
	       set. If the key usage extension exists, verify that the basic
	       constraints extension exists. If the basic constraints extension exists,
	       verify that the cA flag is set. If pathLenConstraint is set, ensure that
	       the number of certificates that precede in the chain (come earlier
	       in the chain as implemented below), excluding the very first in the
	       chain (typically the end-entity one), isn't greater than the
	       pathLenConstraint. This constraint limits the number of intermediate
	       CAs that may appear below a CA before only end-entity certificates
	       may be issued. */

	  // copy cert chain references to another array to protect against changes
	  // in verify callback
	  chain = chain.slice(0);
	  var certs = chain.slice(0);

	  // get current date
	  var now = new Date();

	  // verify each cert in the chain using its parent, where the parent
	  // is either the next in the chain or from the CA store
	  var first = true;
	  var error = null;
	  var depth = 0;
	  do {
	    var cert = chain.shift();
	    var parent = null;
	    var selfSigned = false;

	    // 1. check valid time
	    if(now < cert.validity.notBefore || now > cert.validity.notAfter) {
	      error = {
	        message: 'Certificate is not valid yet or has expired.',
	        error: pki.certificateError.certificate_expired,
	        notBefore: cert.validity.notBefore,
	        notAfter: cert.validity.notAfter,
	        now: now
	      };
	    }

	    // 2. verify with parent from chain or CA store
	    if(error === null) {
	      parent = chain[0] || caStore.getIssuer(cert);
	      if(parent === null) {
	        // check for self-signed cert
	        if(cert.isIssuer(cert)) {
	          selfSigned = true;
	          parent = cert;
	        }
	      }

	      if(parent) {
	        // FIXME: current CA store implementation might have multiple
	        // certificates where the issuer can't be determined from the
	        // certificate (happens rarely with, eg: old certificates) so normalize
	        // by always putting parents into an array
	        // TODO: there's may be an extreme degenerate case currently uncovered
	        // where an old intermediate certificate seems to have a matching parent
	        // but none of the parents actually verify ... but the intermediate
	        // is in the CA and it should pass this check; needs investigation
	        var parents = parent;
	        if(!forge.util.isArray(parents)) {
	          parents = [parents];
	        }

	        // try to verify with each possible parent (typically only one)
	        var verified = false;
	        while(!verified && parents.length > 0) {
	          parent = parents.shift();
	          try {
	            verified = parent.verify(cert);
	          } catch(ex) {
	            // failure to verify, don't care why, try next one
	          }
	        }

	        if(!verified) {
	          error = {
	            message: 'Certificate signature is invalid.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }

	      if(error === null && (!parent || selfSigned) &&
	        !caStore.hasCertificate(cert)) {
	        // no parent issuer and certificate itself is not trusted
	        error = {
	          message: 'Certificate is not trusted.',
	          error: pki.certificateError.unknown_ca
	        };
	      }
	    }

	    // TODO: 3. check revoked

	    // 4. check for matching issuer/subject
	    if(error === null && parent && !cert.isIssuer(parent)) {
	      // parent is not issuer
	      error = {
	        message: 'Certificate issuer is invalid.',
	        error: pki.certificateError.bad_certificate
	      };
	    }

	    // 5. TODO: check names with permitted names tree

	    // 6. TODO: check names against excluded names tree

	    // 7. check for unsupported critical extensions
	    if(error === null) {
	      // supported extensions
	      var se = {
	        keyUsage: true,
	        basicConstraints: true
	      };
	      for(var i = 0; error === null && i < cert.extensions.length; ++i) {
	        var ext = cert.extensions[i];
	        if(ext.critical && !(ext.name in se)) {
	          error = {
	            message:
	              'Certificate has an unsupported critical extension.',
	            error: pki.certificateError.unsupported_certificate
	          };
	        }
	      }
	    }

	    // 8. check for CA if cert is not first or is the only certificate
	    // remaining in chain with no parent or is self-signed
	    if(error === null &&
	      (!first || (chain.length === 0 && (!parent || selfSigned)))) {
	      // first check keyUsage extension and then basic constraints
	      var bcExt = cert.getExtension('basicConstraints');
	      var keyUsageExt = cert.getExtension('keyUsage');
	      if(keyUsageExt !== null) {
	        // keyCertSign must be true and there must be a basic
	        // constraints extension
	        if(!keyUsageExt.keyCertSign || bcExt === null) {
	          // bad certificate
	          error = {
	            message:
	              'Certificate keyUsage or basicConstraints conflict ' +
	              'or indicate that the certificate is not a CA. ' +
	              'If the certificate is the only one in the chain or ' +
	              'isn\'t the first then the certificate must be a ' +
	              'valid CA.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }
	      // basic constraints cA flag must be set
	      if(error === null && bcExt !== null && !bcExt.cA) {
	        // bad certificate
	        error = {
	          message:
	            'Certificate basicConstraints indicates the certificate ' +
	            'is not a CA.',
	          error: pki.certificateError.bad_certificate
	        };
	      }
	      // if error is not null and keyUsage is available, then we know it
	      // has keyCertSign and there is a basic constraints extension too,
	      // which means we can check pathLenConstraint (if it exists)
	      if(error === null && keyUsageExt !== null &&
	        'pathLenConstraint' in bcExt) {
	        // pathLen is the maximum # of intermediate CA certs that can be
	        // found between the current certificate and the end-entity (depth 0)
	        // certificate; this number does not include the end-entity (depth 0,
	        // last in the chain) even if it happens to be a CA certificate itself
	        var pathLen = depth - 1;
	        if(pathLen > bcExt.pathLenConstraint) {
	          // pathLenConstraint violated, bad certificate
	          error = {
	            message:
	              'Certificate basicConstraints pathLenConstraint violated.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }
	    }

	    // call application callback
	    var vfd = (error === null) ? true : error.error;
	    var ret = verify ? verify(vfd, depth, certs) : vfd;
	    if(ret === true) {
	      // clear any set error
	      error = null;
	    } else {
	      // if passed basic tests, set default message and alert
	      if(vfd === true) {
	        error = {
	          message: 'The application rejected the certificate.',
	          error: pki.certificateError.bad_certificate
	        };
	      }

	      // check for custom error info
	      if(ret || ret === 0) {
	        // set custom message and error
	        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	          if(ret.message) {
	             error.message = ret.message;
	          }
	          if(ret.error) {
	            error.error = ret.error;
	          }
	        } else if(typeof ret === 'string') {
	          // set custom error
	          error.error = ret;
	        }
	      }

	      // throw error
	      throw error;
	    }

	    // no longer first cert in chain
	    first = false;
	    ++depth;
	  } while(chain.length > 0);

	  return true;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'x509';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge.pki;
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/x509',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './md',
	  './mgf',
	  './oids',
	  './pem',
	  './pss',
	  './rsa',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#12.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * The ASN.1 representation of PKCS#12 is as follows
	 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
	 *
	 * PFX ::= SEQUENCE {
	 *   version  INTEGER {v3(3)}(v3,...),
	 *   authSafe ContentInfo,
	 *   macData  MacData OPTIONAL
	 * }
	 *
	 * MacData ::= SEQUENCE {
	 *   mac DigestInfo,
	 *   macSalt OCTET STRING,
	 *   iterations INTEGER DEFAULT 1
	 * }
	 * Note: The iterations default is for historical reasons and its use is
	 * deprecated. A higher value, like 1024, is recommended.
	 *
	 * DigestInfo is defined in PKCS#7 as follows:
	 *
	 * DigestInfo ::= SEQUENCE {
	 *   digestAlgorithm DigestAlgorithmIdentifier,
	 *   digest Digest
	 * }
	 *
	 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of SHA1 there is none.
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *    algorithm OBJECT IDENTIFIER,
	 *    parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * Digest ::= OCTET STRING
	 *
	 *
	 * ContentInfo ::= SEQUENCE {
	 *   contentType ContentType,
	 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
	 * }
	 *
	 * ContentType ::= OBJECT IDENTIFIER
	 *
	 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
	 * -- Data if unencrypted
	 * -- EncryptedData if password-encrypted
	 * -- EnvelopedData if public key-encrypted
	 *
	 *
	 * SafeContents ::= SEQUENCE OF SafeBag
	 *
	 * SafeBag ::= SEQUENCE {
	 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
	 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
	 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
	 * }
	 *
	 * PKCS12Attribute ::= SEQUENCE {
	 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
	 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
	 * } -- This type is compatible with the X.500 type ’Attribute’
	 *
	 * PKCS12AttrSet ATTRIBUTE ::= {
	 *   friendlyName | -- from PKCS #9
	 *   localKeyId, -- from PKCS #9
	 *   ... -- Other attributes are allowed
	 * }
	 *
	 * CertBag ::= SEQUENCE {
	 *   certId    BAG-TYPE.&id   ({CertTypes}),
	 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
	 * }
	 *
	 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
	 *   -- DER-encoded X.509 certificate stored in OCTET STRING
	 *
	 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
	 * -- Base64-encoded SDSI certificate stored in IA5String
	 *
	 * CertTypes BAG-TYPE ::= {
	 *   x509Certificate |
	 *   sdsiCertificate,
	 *   ... -- For future extensions
	 * }
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 & PKI API
	var asn1 = forge.asn1;
	var pki = forge.pki;

	// shortcut for PKCS#12 API
	var p12 = forge.pkcs12 = forge.pkcs12 || {};

	var contentInfoValidator = {
	  name: 'ContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,  // a ContentInfo
	  constructed: true,
	  value: [{
	    name: 'ContentInfo.contentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'ContentInfo.content',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    captureAsn1: 'content'
	  }]
	};

	var pfxValidator = {
	  name: 'PFX',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'PFX.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  },
	  contentInfoValidator, {
	    name: 'PFX.macData',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    optional: true,
	    captureAsn1: 'mac',
	    value: [{
	      name: 'PFX.macData.mac',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,  // DigestInfo
	      constructed: true,
	      value: [{
	        name: 'PFX.macData.mac.digestAlgorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SEQUENCE,  // DigestAlgorithmIdentifier
	        constructed: true,
	        value: [{
	          name: 'PFX.macData.mac.digestAlgorithm.algorithm',
	          tagClass: asn1.Class.UNIVERSAL,
	          type: asn1.Type.OID,
	          constructed: false,
	          capture: 'macAlgorithm'
	        }, {
	          name: 'PFX.macData.mac.digestAlgorithm.parameters',
	          tagClass: asn1.Class.UNIVERSAL,
	          captureAsn1: 'macAlgorithmParameters'
	        }]
	      }, {
	        name: 'PFX.macData.mac.digest',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OCTETSTRING,
	        constructed: false,
	        capture: 'macDigest'
	      }]
	    }, {
	      name: 'PFX.macData.macSalt',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OCTETSTRING,
	      constructed: false,
	      capture: 'macSalt'
	    }, {
	      name: 'PFX.macData.iterations',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      optional: true,
	      capture: 'macIterations'
	    }]
	  }]
	};

	var safeBagValidator = {
	  name: 'SafeBag',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SafeBag.bagId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'bagId'
	  }, {
	    name: 'SafeBag.bagValue',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    captureAsn1: 'bagValue'
	  }, {
	    name: 'SafeBag.bagAttributes',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    optional: true,
	    capture: 'bagAttributes'
	  }]
	};

	var attributeValidator = {
	  name: 'Attribute',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'Attribute.attrId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'oid'
	  }, {
	    name: 'Attribute.attrValues',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    capture: 'values'
	  }]
	};

	var certBagValidator = {
	  name: 'CertBag',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'CertBag.certId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'certId'
	  }, {
	    name: 'CertBag.certValue',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    /* So far we only support X.509 certificates (which are wrapped in
	       an OCTET STRING, hence hard code that here). */
	    value: [{
	      name: 'CertBag.certValue[0]',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.OCTETSTRING,
	      constructed: false,
	      capture: 'cert'
	    }]
	  }]
	};

	/**
	 * Search SafeContents structure for bags with matching attributes.
	 *
	 * The search can optionally be narrowed by a certain bag type.
	 *
	 * @param safeContents the SafeContents structure to search in.
	 * @param attrName the name of the attribute to compare against.
	 * @param attrValue the attribute value to search for.
	 * @param [bagType] bag type to narrow search by.
	 *
	 * @return an array of matching bags.
	 */
	function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
	  var result = [];

	  for(var i = 0; i < safeContents.length; i ++) {
	    for(var j = 0; j < safeContents[i].safeBags.length; j ++) {
	      var bag = safeContents[i].safeBags[j];
	      if(bagType !== undefined && bag.type !== bagType) {
	        continue;
	      }
	      // only filter by bag type, no attribute specified
	      if(attrName === null) {
	        result.push(bag);
	        continue;
	      }
	      if(bag.attributes[attrName] !== undefined &&
	        bag.attributes[attrName].indexOf(attrValue) >= 0) {
	        result.push(bag);
	      }
	    }
	  }

	  return result;
	}

	/**
	 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
	 *
	 * @param obj The PKCS#12 PFX in ASN.1 notation.
	 * @param strict true to use strict DER decoding, false not to (default: true).
	 * @param {String} password Password to decrypt with (optional).
	 *
	 * @return PKCS#12 PFX object.
	 */
	p12.pkcs12FromAsn1 = function(obj, strict, password) {
	  // handle args
	  if(typeof strict === 'string') {
	    password = strict;
	    strict = true;
	  } else if(strict === undefined) {
	    strict = true;
	  }

	  // validate PFX and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, pfxValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#12 PFX. ' +
	      'ASN.1 object is not an PKCS#12 PFX.');
	    error.errors = error;
	    throw error;
	  }

	  var pfx = {
	    version: capture.version.charCodeAt(0),
	    safeContents: [],

	    /**
	     * Gets bags with matching attributes.
	     *
	     * @param filter the attributes to filter by:
	     *          [localKeyId] the localKeyId to search for.
	     *          [localKeyIdHex] the localKeyId in hex to search for.
	     *          [friendlyName] the friendly name to search for.
	     *          [bagType] bag type to narrow each attribute search by.
	     *
	     * @return a map of attribute type to an array of matching bags or, if no
	     *           attribute was given but a bag type, the map key will be the
	     *           bag type.
	     */
	    getBags: function(filter) {
	      var rval = {};

	      var localKeyId;
	      if('localKeyId' in filter) {
	        localKeyId = filter.localKeyId;
	      } else if('localKeyIdHex' in filter) {
	        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
	      }

	      // filter on bagType only
	      if(localKeyId === undefined && !('friendlyName' in filter) &&
	        'bagType' in filter) {
	        rval[filter.bagType] = _getBagsByAttribute(
	          pfx.safeContents, null, null, filter.bagType);
	      }

	      if(localKeyId !== undefined) {
	        rval.localKeyId = _getBagsByAttribute(
	          pfx.safeContents, 'localKeyId',
	          localKeyId, filter.bagType);
	      }
	      if('friendlyName' in filter) {
	        rval.friendlyName = _getBagsByAttribute(
	          pfx.safeContents, 'friendlyName',
	          filter.friendlyName, filter.bagType);
	      }

	      return rval;
	    },

	    /**
	     * DEPRECATED: use getBags() instead.
	     *
	     * Get bags with matching friendlyName attribute.
	     *
	     * @param friendlyName the friendly name to search for.
	     * @param [bagType] bag type to narrow search by.
	     *
	     * @return an array of bags with matching friendlyName attribute.
	     */
	    getBagsByFriendlyName: function(friendlyName, bagType) {
	      return _getBagsByAttribute(
	        pfx.safeContents, 'friendlyName', friendlyName, bagType);
	    },

	    /**
	     * DEPRECATED: use getBags() instead.
	     *
	     * Get bags with matching localKeyId attribute.
	     *
	     * @param localKeyId the localKeyId to search for.
	     * @param [bagType] bag type to narrow search by.
	     *
	     * @return an array of bags with matching localKeyId attribute.
	     */
	    getBagsByLocalKeyId: function(localKeyId, bagType) {
	      return _getBagsByAttribute(
	        pfx.safeContents, 'localKeyId', localKeyId, bagType);
	    }
	  };

	  if(capture.version.charCodeAt(0) !== 3) {
	    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');
	    error.version = capture.version.charCodeAt(0);
	    throw error;
	  }

	  if(asn1.derToOid(capture.contentType) !== pki.oids.data) {
	    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');
	    error.oid = asn1.derToOid(capture.contentType);
	    throw error;
	  }

	  var data = capture.content.value[0];
	  if(data.tagClass !== asn1.Class.UNIVERSAL ||
	     data.type !== asn1.Type.OCTETSTRING) {
	    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');
	  }
	  data = _decodePkcs7Data(data);

	  // check for MAC
	  if(capture.mac) {
	    var md = null;
	    var macKeyBytes = 0;
	    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);
	    switch(macAlgorithm) {
	    case pki.oids.sha1:
	      md = forge.md.sha1.create();
	      macKeyBytes = 20;
	      break;
	    case pki.oids.sha256:
	      md = forge.md.sha256.create();
	      macKeyBytes = 32;
	      break;
	    case pki.oids.sha384:
	      md = forge.md.sha384.create();
	      macKeyBytes = 48;
	      break;
	    case pki.oids.sha512:
	      md = forge.md.sha512.create();
	      macKeyBytes = 64;
	      break;
	    case pki.oids.md5:
	      md = forge.md.md5.create();
	      macKeyBytes = 16;
	      break;
	    }
	    if(md === null) {
	      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);
	    }

	    // verify MAC (iterations default to 1)
	    var macSalt = new forge.util.ByteBuffer(capture.macSalt);
	    var macIterations = (('macIterations' in capture) ?
	      parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1);
	    var macKey = p12.generateKey(
	      password, macSalt, 3, macIterations, macKeyBytes, md);
	    var mac = forge.hmac.create();
	    mac.start(md, macKey);
	    mac.update(data.value);
	    var macValue = mac.getMac();
	    if(macValue.getBytes() !== capture.macDigest) {
	      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');
	    }
	  }

	  _decodeAuthenticatedSafe(pfx, data.value, strict, password);
	  return pfx;
	};

	/**
	 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
	 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
	 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
	 * function transforms this corner-case into the usual simple,
	 * non-composed/constructed OCTET STRING.
	 *
	 * This function may be moved to ASN.1 at some point to better deal with
	 * more BER-encoding issues, should they arise.
	 *
	 * @param data the ASN.1 Data object to transform.
	 */
	function _decodePkcs7Data(data) {
	  // handle special case of "chunked" data content: an octet string composed
	  // of other octet strings
	  if(data.composed || data.constructed) {
	    var value = forge.util.createBuffer();
	    for(var i = 0; i < data.value.length; ++i) {
	      value.putBytes(data.value[i].value);
	    }
	    data.composed = data.constructed = false;
	    data.value = value.getBytes();
	  }
	  return data;
	}

	/**
	 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
	 *
	 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
	 *
	 * @param pfx The PKCS#12 PFX object to fill.
	 * @param {String} authSafe BER-encoded AuthenticatedSafe.
	 * @param strict true to use strict DER decoding, false not to.
	 * @param {String} password Password to decrypt with (optional).
	 */
	function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
	  authSafe = asn1.fromDer(authSafe, strict);  /* actually it's BER encoded */

	  if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||
	     authSafe.type !== asn1.Type.SEQUENCE ||
	     authSafe.constructed !== true) {
	    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' +
	      'SEQUENCE OF ContentInfo');
	  }

	  for(var i = 0; i < authSafe.value.length; i ++) {
	    var contentInfo = authSafe.value[i];

	    // validate contentInfo and capture data
	    var capture = {};
	    var errors = [];
	    if(!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
	      var error = new Error('Cannot read ContentInfo.');
	      error.errors = errors;
	      throw error;
	    }

	    var obj = {
	      encrypted: false
	    };
	    var safeContents = null;
	    var data = capture.content.value[0];
	    switch(asn1.derToOid(capture.contentType)) {
	    case pki.oids.data:
	      if(data.tagClass !== asn1.Class.UNIVERSAL ||
	         data.type !== asn1.Type.OCTETSTRING) {
	        throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');
	      }
	      safeContents = _decodePkcs7Data(data).value;
	      break;
	    case pki.oids.encryptedData:
	      safeContents = _decryptSafeContents(data, password);
	      obj.encrypted = true;
	      break;
	    default:
	      var error = new Error('Unsupported PKCS#12 contentType.');
	      error.contentType = asn1.derToOid(capture.contentType);
	      throw error;
	    }

	    obj.safeBags = _decodeSafeContents(safeContents, strict, password);
	    pfx.safeContents.push(obj);
	  }
	}

	/**
	 * Decrypt PKCS#7 EncryptedData structure.
	 *
	 * @param data ASN.1 encoded EncryptedContentInfo object.
	 * @param password The user-provided password.
	 *
	 * @return The decrypted SafeContents (ASN.1 object).
	 */
	function _decryptSafeContents(data, password) {
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(
	    data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {
	    var error = new Error('Cannot read EncryptedContentInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var oid = asn1.derToOid(capture.contentType);
	  if(oid !== pki.oids.data) {
	    var error = new Error(
	      'PKCS#12 EncryptedContentInfo ContentType is not Data.');
	    error.oid = oid;
	    throw error;
	  }

	  // get cipher
	  oid = asn1.derToOid(capture.encAlgorithm);
	  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);

	  // get encrypted data
	  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);
	  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);

	  cipher.update(encrypted);
	  if(!cipher.finish()) {
	    throw new Error('Failed to decrypt PKCS#12 SafeContents.');
	  }

	  return cipher.output.getBytes();
	}

	/**
	 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
	 *
	 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
	 *
	 * @param {String} safeContents BER-encoded safeContents.
	 * @param strict true to use strict DER decoding, false not to.
	 * @param {String} password Password to decrypt with (optional).
	 *
	 * @return {Array} Array of Bag objects.
	 */
	function _decodeSafeContents(safeContents, strict, password) {
	  // if strict and no safe contents, return empty safes
	  if(!strict && safeContents.length === 0) {
	    return [];
	  }

	  // actually it's BER-encoded
	  safeContents = asn1.fromDer(safeContents, strict);

	  if(safeContents.tagClass !== asn1.Class.UNIVERSAL ||
	    safeContents.type !== asn1.Type.SEQUENCE ||
	    safeContents.constructed !== true) {
	    throw new Error(
	      'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');
	  }

	  var res = [];
	  for(var i = 0; i < safeContents.value.length; i++) {
	    var safeBag = safeContents.value[i];

	    // validate SafeBag and capture data
	    var capture = {};
	    var errors = [];
	    if(!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
	      var error = new Error('Cannot read SafeBag.');
	      error.errors = errors;
	      throw error;
	    }

	    /* Create bag object and push to result array. */
	    var bag = {
	      type: asn1.derToOid(capture.bagId),
	      attributes: _decodeBagAttributes(capture.bagAttributes)
	    };
	    res.push(bag);

	    var validator, decoder;
	    var bagAsn1 = capture.bagValue.value[0];
	    switch(bag.type) {
	      case pki.oids.pkcs8ShroudedKeyBag:
	        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
	           Afterwards we can handle it like a keyBag,
	           which is a PrivateKeyInfo. */
	        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);
	        if(bagAsn1 === null) {
	          throw new Error(
	            'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');
	        }

	        /* fall through */
	      case pki.oids.keyBag:
	        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
	           PKI module, hence we don't have to do validation/capturing here,
	           just pass what we already got. */
	        try {
	          bag.key = pki.privateKeyFromAsn1(bagAsn1);
	        } catch(e) {
	          // ignore unknown key type, pass asn1 value
	          bag.key = null;
	          bag.asn1 = bagAsn1;
	        }
	        continue;  /* Nothing more to do. */

	      case pki.oids.certBag:
	        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
	           Therefore put the SafeBag content through another validator to
	           capture the fields.  Afterwards check & store the results. */
	        validator = certBagValidator;
	        decoder = function() {
	          if(asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
	            var error = new Error(
	              'Unsupported certificate type, only X.509 supported.');
	            error.oid = asn1.derToOid(capture.certId);
	            throw error;
	          }

	          // true=produce cert hash
	          var certAsn1 = asn1.fromDer(capture.cert, strict);
	          try {
	            bag.cert = pki.certificateFromAsn1(certAsn1, true);
	          } catch(e) {
	            // ignore unknown cert type, pass asn1 value
	            bag.cert = null;
	            bag.asn1 = certAsn1;
	          }
	        };
	        break;

	      default:
	        var error = new Error('Unsupported PKCS#12 SafeBag type.');
	        error.oid = bag.type;
	        throw error;
	    }

	    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */
	    if(validator !== undefined &&
	       !asn1.validate(bagAsn1, validator, capture, errors)) {
	      var error = new Error('Cannot read PKCS#12 ' + validator.name);
	      error.errors = errors;
	      throw error;
	    }

	    /* Call decoder function from above to store the results. */
	    decoder();
	  }

	  return res;
	}

	/**
	 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
	 *
	 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
	 *
	 * @return the decoded attributes.
	 */
	function _decodeBagAttributes(attributes) {
	  var decodedAttrs = {};

	  if(attributes !== undefined) {
	    for(var i = 0; i < attributes.length; ++i) {
	      var capture = {};
	      var errors = [];
	      if(!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
	        var error = new Error('Cannot read PKCS#12 BagAttribute.');
	        error.errors = errors;
	        throw error;
	      }

	      var oid = asn1.derToOid(capture.oid);
	      if(pki.oids[oid] === undefined) {
	        // unsupported attribute type, ignore.
	        continue;
	      }

	      decodedAttrs[pki.oids[oid]] = [];
	      for(var j = 0; j < capture.values.length; ++j) {
	        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
	      }
	    }
	  }

	  return decodedAttrs;
	}

	/**
	 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
	 * password is provided then the private key will be encrypted.
	 *
	 * An entire certificate chain may also be included. To do this, pass
	 * an array for the "cert" parameter where the first certificate is
	 * the one that is paired with the private key and each subsequent one
	 * verifies the previous one. The certificates may be in PEM format or
	 * have been already parsed by Forge.
	 *
	 * @todo implement password-based-encryption for the whole package
	 *
	 * @param key the private key.
	 * @param cert the certificate (may be an array of certificates in order
	 *          to specify a certificate chain).
	 * @param password the password to use, null for none.
	 * @param options:
	 *          algorithm the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
	 *          count the iteration count to use.
	 *          saltSize the salt size to use.
	 *          useMac true to include a MAC, false not to, defaults to true.
	 *          localKeyId the local key ID to use, in hex.
	 *          friendlyName the friendly name to use.
	 *          generateLocalKeyId true to generate a random local key ID,
	 *            false not to, defaults to true.
	 *
	 * @return the PKCS#12 PFX ASN.1 object.
	 */
	p12.toPkcs12Asn1 = function(key, cert, password, options) {
	  // set default options
	  options = options || {};
	  options.saltSize = options.saltSize || 8;
	  options.count = options.count || 2048;
	  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';
	  if(!('useMac' in options)) {
	    options.useMac = true;
	  }
	  if(!('localKeyId' in options)) {
	    options.localKeyId = null;
	  }
	  if(!('generateLocalKeyId' in options)) {
	    options.generateLocalKeyId = true;
	  }

	  var localKeyId = options.localKeyId;
	  var bagAttrs;
	  if(localKeyId !== null) {
	    localKeyId = forge.util.hexToBytes(localKeyId);
	  } else if(options.generateLocalKeyId) {
	    // use SHA-1 of paired cert, if available
	    if(cert) {
	      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
	      if(typeof pairedCert === 'string') {
	        pairedCert = pki.certificateFromPem(pairedCert);
	      }
	      var sha1 = forge.md.sha1.create();
	      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
	      localKeyId = sha1.digest().getBytes();
	    } else {
	      // FIXME: consider using SHA-1 of public key (which can be generated
	      // from private key components), see: cert.generateSubjectKeyIdentifier
	      // generate random bytes
	      localKeyId = forge.random.getBytes(20);
	    }
	  }

	  var attrs = [];
	  if(localKeyId !== null) {
	    attrs.push(
	      // localKeyID
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // attrId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.localKeyId).getBytes()),
	        // attrValues
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            localKeyId)
	        ])
	      ]));
	  }
	  if('friendlyName' in options) {
	    attrs.push(
	      // friendlyName
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // attrId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.friendlyName).getBytes()),
	        // attrValues
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false,
	            options.friendlyName)
	        ])
	      ]));
	  }

	  if(attrs.length > 0) {
	    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
	  }

	  // collect contents for AuthenticatedSafe
	  var contents = [];

	  // create safe bag(s) for certificate chain
	  var chain = [];
	  if(cert !== null) {
	    if(forge.util.isArray(cert)) {
	      chain = cert;
	    } else {
	      chain = [cert];
	    }
	  }

	  var certSafeBags = [];
	  for(var i = 0; i < chain.length; ++i) {
	    // convert cert from PEM as necessary
	    cert = chain[i];
	    if(typeof cert === 'string') {
	      cert = pki.certificateFromPem(cert);
	    }

	    // SafeBag
	    var certBagAttrs = (i === 0) ? bagAttrs : undefined;
	    var certAsn1 = pki.certificateToAsn1(cert);
	    var certSafeBag =
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.certBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // CertBag
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // certId
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(pki.oids.x509Certificate).getBytes()),
	            // certValue (x509Certificate)
	            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	              asn1.create(
	                asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	                asn1.toDer(certAsn1).getBytes())
	            ])])]),
	        // bagAttributes (OPTIONAL)
	        certBagAttrs
	      ]);
	    certSafeBags.push(certSafeBag);
	  }

	  if(certSafeBags.length > 0) {
	    // SafeContents
	    var certSafeContents = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags);

	    // ContentInfo
	    var certCI =
	      // PKCS#7 ContentInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // contentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          // OID for the content type is 'data'
	          asn1.oidToDer(pki.oids.data).getBytes()),
	        // content
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            asn1.toDer(certSafeContents).getBytes())
	        ])
	      ]);
	    contents.push(certCI);
	  }

	  // create safe contents for private key
	  var keyBag = null;
	  if(key !== null) {
	    // SafeBag
	    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));
	    if(password === null) {
	      // no encryption
	      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.keyBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // PrivateKeyInfo
	          pkAsn1
	        ]),
	        // bagAttributes (OPTIONAL)
	        bagAttrs
	      ]);
	    } else {
	      // encrypted PrivateKeyInfo
	      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // EncryptedPrivateKeyInfo
	          pki.encryptPrivateKeyInfo(pkAsn1, password, options)
	        ]),
	        // bagAttributes (OPTIONAL)
	        bagAttrs
	      ]);
	    }

	    // SafeContents
	    var keySafeContents =
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);

	    // ContentInfo
	    var keyCI =
	      // PKCS#7 ContentInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // contentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          // OID for the content type is 'data'
	          asn1.oidToDer(pki.oids.data).getBytes()),
	        // content
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            asn1.toDer(keySafeContents).getBytes())
	        ])
	      ]);
	    contents.push(keyCI);
	  }

	  // create AuthenticatedSafe by stringing together the contents
	  var safe = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);

	  var macData;
	  if(options.useMac) {
	    // MacData
	    var sha1 = forge.md.sha1.create();
	    var macSalt = new forge.util.ByteBuffer(
	      forge.random.getBytes(options.saltSize));
	    var count = options.count;
	    // 160-bit key
	    var key = p12.generateKey(password, macSalt, 3, count, 20);
	    var mac = forge.hmac.create();
	    mac.start(sha1, key);
	    mac.update(asn1.toDer(safe).getBytes());
	    var macValue = mac.getMac();
	    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // mac DigestInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // digestAlgorithm
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // algorithm = SHA-1
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(pki.oids.sha1).getBytes()),
	          // parameters = Null
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ]),
	        // digest
	        asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
	          false, macValue.getBytes())
	      ]),
	      // macSalt OCTET STRING
	      asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()),
	      // iterations INTEGER (XXX: Only support count < 65536)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(count).getBytes()
	      )
	    ]);
	  }

	  // PFX
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (3)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(3).getBytes()),
	    // PKCS#7 ContentInfo
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // contentType
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        // OID for the content type is 'data'
	        asn1.oidToDer(pki.oids.data).getBytes()),
	      // content
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	          asn1.toDer(safe).getBytes())
	      ])
	    ]),
	    macData
	  ]);
	};

	/**
	 * Derives a PKCS#12 key.
	 *
	 * @param password the password to derive the key material from, null or
	 *          undefined for none.
	 * @param salt the salt, as a ByteBuffer, to use.
	 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
	 * @param iter the iteration count.
	 * @param n the number of bytes to derive from the password.
	 * @param md the message digest to use, defaults to SHA-1.
	 *
	 * @return a ByteBuffer with the bytes derived from the password.
	 */
	p12.generateKey = forge.pbe.generatePkcs12Key;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs12';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs12',[
	  'require',
	  'module',
	  './asn1',
	  './hmac',
	  './oids',
	  './pkcs7asn1',
	  './pbe',
	  './random',
	  './rsa',
	  './sha1',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of a basic Public Key Infrastructure, including
	 * support for RSA public and private keys.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Public Key Infrastructure (PKI) implementation. */
	var pki = forge.pki = forge.pki || {};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
	 *
	 * Converts PEM-formatted data to DER.
	 *
	 * @param pem the PEM-formatted data.
	 *
	 * @return the DER-formatted data.
	 */
	pki.pemToDer = function(pem) {
	  var msg = forge.pem.decode(pem)[0];
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert PEM to DER; PEM is encrypted.');
	  }
	  return forge.util.createBuffer(msg.body);
	};

	/**
	 * Converts an RSA private key from PEM format.
	 *
	 * @param pem the PEM-formatted private key.
	 *
	 * @return the private key.
	 */
	pki.privateKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
	    var error = new Error('Could not convert private key from PEM; PEM ' +
	      'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert private key from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return pki.privateKeyFromAsn1(obj);
	};

	/**
	 * Converts an RSA private key to PEM format.
	 *
	 * @param key the private key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted private key.
	 */
	pki.privateKeyToPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'RSA PRIVATE KEY',
	    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts a PrivateKeyInfo to PEM format.
	 *
	 * @param pki the PrivateKeyInfo.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted private key.
	 */
	pki.privateKeyInfoToPem = function(pki, maxline) {
	  // convert to DER, then PEM-encode
	  var msg = {
	    type: 'PRIVATE KEY',
	    body: asn1.toDer(pki).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pki';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pki',[
	  'require',
	  'module',
	  './asn1',
	  './oids',
	  './pbe',
	  './pem',
	  './pbkdf2',
	  './pkcs12',
	  './pss',
	  './rsa',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A Javascript implementation of Transport Layer Security (TLS).
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
	 *
	 * The TLS Handshake Protocol involves the following steps:
	 *
	 * - Exchange hello messages to agree on algorithms, exchange random values,
	 * and check for session resumption.
	 *
	 * - Exchange the necessary cryptographic parameters to allow the client and
	 * server to agree on a premaster secret.
	 *
	 * - Exchange certificates and cryptographic information to allow the client
	 * and server to authenticate themselves.
	 *
	 * - Generate a master secret from the premaster secret and exchanged random
	 * values.
	 *
	 * - Provide security parameters to the record layer.
	 *
	 * - Allow the client and server to verify that their peer has calculated the
	 * same security parameters and that the handshake occurred without tampering
	 * by an attacker.
	 *
	 * Up to 4 different messages may be sent during a key exchange. The server
	 * certificate, the server key exchange, the client certificate, and the
	 * client key exchange.
	 *
	 * A typical handshake (from the client's perspective).
	 *
	 * 1. Client sends ClientHello.
	 * 2. Client receives ServerHello.
	 * 3. Client receives optional Certificate.
	 * 4. Client receives optional ServerKeyExchange.
	 * 5. Client receives ServerHelloDone.
	 * 6. Client sends optional Certificate.
	 * 7. Client sends ClientKeyExchange.
	 * 8. Client sends optional CertificateVerify.
	 * 9. Client sends ChangeCipherSpec.
	 * 10. Client sends Finished.
	 * 11. Client receives ChangeCipherSpec.
	 * 12. Client receives Finished.
	 * 13. Client sends/receives application data.
	 *
	 * To reuse an existing session:
	 *
	 * 1. Client sends ClientHello with session ID for reuse.
	 * 2. Client receives ServerHello with same session ID if reusing.
	 * 3. Client receives ChangeCipherSpec message if reusing.
	 * 4. Client receives Finished.
	 * 5. Client sends ChangeCipherSpec.
	 * 6. Client sends Finished.
	 *
	 * Note: Client ignores HelloRequest if in the middle of a handshake.
	 *
	 * Record Layer:
	 *
	 * The record layer fragments information blocks into TLSPlaintext records
	 * carrying data in chunks of 2^14 bytes or less. Client message boundaries are
	 * not preserved in the record layer (i.e., multiple client messages of the
	 * same ContentType MAY be coalesced into a single TLSPlaintext record, or a
	 * single message MAY be fragmented across several records).
	 *
	 * struct {
	 *   uint8 major;
	 *   uint8 minor;
	 * } ProtocolVersion;
	 *
	 * struct {
	 *   ContentType type;
	 *   ProtocolVersion version;
	 *   uint16 length;
	 *   opaque fragment[TLSPlaintext.length];
	 * } TLSPlaintext;
	 *
	 * type:
	 *   The higher-level protocol used to process the enclosed fragment.
	 *
	 * version:
	 *   The version of the protocol being employed. TLS Version 1.2 uses version
	 *   {3, 3}. TLS Version 1.0 uses version {3, 1}. Note that a client that
	 *   supports multiple versions of TLS may not know what version will be
	 *   employed before it receives the ServerHello.
	 *
	 * length:
	 *   The length (in bytes) of the following TLSPlaintext.fragment. The length
	 *   MUST NOT exceed 2^14 = 16384 bytes.
	 *
	 * fragment:
	 *   The application data. This data is transparent and treated as an
	 *   independent block to be dealt with by the higher-level protocol specified
	 *   by the type field.
	 *
	 * Implementations MUST NOT send zero-length fragments of Handshake, Alert, or
	 * ChangeCipherSpec content types. Zero-length fragments of Application data
	 * MAY be sent as they are potentially useful as a traffic analysis
	 * countermeasure.
	 *
	 * Note: Data of different TLS record layer content types MAY be interleaved.
	 * Application data is generally of lower precedence for transmission than
	 * other content types. However, records MUST be delivered to the network in
	 * the same order as they are protected by the record layer. Recipients MUST
	 * receive and process interleaved application layer traffic during handshakes
	 * subsequent to the first one on a connection.
	 *
	 * struct {
	 *   ContentType type;       // same as TLSPlaintext.type
	 *   ProtocolVersion version;// same as TLSPlaintext.version
	 *   uint16 length;
	 *   opaque fragment[TLSCompressed.length];
	 * } TLSCompressed;
	 *
	 * length:
	 *   The length (in bytes) of the following TLSCompressed.fragment.
	 *   The length MUST NOT exceed 2^14 + 1024.
	 *
	 * fragment:
	 *   The compressed form of TLSPlaintext.fragment.
	 *
	 * Note: A CompressionMethod.null operation is an identity operation; no fields
	 * are altered. In this implementation, since no compression is supported,
	 * uncompressed records are always the same as compressed records.
	 *
	 * Encryption Information:
	 *
	 * The encryption and MAC functions translate a TLSCompressed structure into a
	 * TLSCiphertext. The decryption functions reverse the process. The MAC of the
	 * record also includes a sequence number so that missing, extra, or repeated
	 * messages are detectable.
	 *
	 * struct {
	 *   ContentType type;
	 *   ProtocolVersion version;
	 *   uint16 length;
	 *   select (SecurityParameters.cipher_type) {
	 *     case stream: GenericStreamCipher;
	 *     case block:  GenericBlockCipher;
	 *     case aead:   GenericAEADCipher;
	 *   } fragment;
	 * } TLSCiphertext;
	 *
	 * type:
	 *   The type field is identical to TLSCompressed.type.
	 *
	 * version:
	 *   The version field is identical to TLSCompressed.version.
	 *
	 * length:
	 *   The length (in bytes) of the following TLSCiphertext.fragment.
	 *   The length MUST NOT exceed 2^14 + 2048.
	 *
	 * fragment:
	 *   The encrypted form of TLSCompressed.fragment, with the MAC.
	 *
	 * Note: Only CBC Block Ciphers are supported by this implementation.
	 *
	 * The TLSCompressed.fragment structures are converted to/from block
	 * TLSCiphertext.fragment structures.
	 *
	 * struct {
	 *   opaque IV[SecurityParameters.record_iv_length];
	 *   block-ciphered struct {
	 *     opaque content[TLSCompressed.length];
	 *     opaque MAC[SecurityParameters.mac_length];
	 *     uint8 padding[GenericBlockCipher.padding_length];
	 *     uint8 padding_length;
	 *   };
	 * } GenericBlockCipher;
	 *
	 * The MAC is generated as described in Section 6.2.3.1.
	 *
	 * IV:
	 *   The Initialization Vector (IV) SHOULD be chosen at random, and MUST be
	 *   unpredictable. Note that in versions of TLS prior to 1.1, there was no
	 *   IV field, and the last ciphertext block of the previous record (the "CBC
	 *   residue") was used as the IV. This was changed to prevent the attacks
	 *   described in [CBCATT]. For block ciphers, the IV length is of length
	 *   SecurityParameters.record_iv_length, which is equal to the
	 *   SecurityParameters.block_size.
	 *
	 * padding:
	 *   Padding that is added to force the length of the plaintext to be an
	 *   integral multiple of the block cipher's block length. The padding MAY be
	 *   any length up to 255 bytes, as long as it results in the
	 *   TLSCiphertext.length being an integral multiple of the block length.
	 *   Lengths longer than necessary might be desirable to frustrate attacks on
	 *   a protocol that are based on analysis of the lengths of exchanged
	 *   messages. Each uint8 in the padding data vector MUST be filled with the
	 *   padding length value. The receiver MUST check this padding and MUST use
	 *   the bad_record_mac alert to indicate padding errors.
	 *
	 * padding_length:
	 *   The padding length MUST be such that the total size of the
	 *   GenericBlockCipher structure is a multiple of the cipher's block length.
	 *   Legal values range from zero to 255, inclusive. This length specifies the
	 *   length of the padding field exclusive of the padding_length field itself.
	 *
	 * The encrypted data length (TLSCiphertext.length) is one more than the sum of
	 * SecurityParameters.block_length, TLSCompressed.length,
	 * SecurityParameters.mac_length, and padding_length.
	 *
	 * Example: If the block length is 8 bytes, the content length
	 * (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes, then the
	 * length before padding is 82 bytes (this does not include the IV. Thus, the
	 * padding length modulo 8 must be equal to 6 in order to make the total length
	 * an even multiple of 8 bytes (the block length). The padding length can be
	 * 6, 14, 22, and so on, through 254. If the padding length were the minimum
	 * necessary, 6, the padding would be 6 bytes, each containing the value 6.
	 * Thus, the last 8 octets of the GenericBlockCipher before block encryption
	 * would be xx 06 06 06 06 06 06 06, where xx is the last octet of the MAC.
	 *
	 * Note: With block ciphers in CBC mode (Cipher Block Chaining), it is critical
	 * that the entire plaintext of the record be known before any ciphertext is
	 * transmitted. Otherwise, it is possible for the attacker to mount the attack
	 * described in [CBCATT].
	 *
	 * Implementation note: Canvel et al. [CBCTIME] have demonstrated a timing
	 * attack on CBC padding based on the time required to compute the MAC. In
	 * order to defend against this attack, implementations MUST ensure that
	 * record processing time is essentially the same whether or not the padding
	 * is correct. In general, the best way to do this is to compute the MAC even
	 * if the padding is incorrect, and only then reject the packet. For instance,
	 * if the pad appears to be incorrect, the implementation might assume a
	 * zero-length pad and then compute the MAC. This leaves a small timing
	 * channel, since MAC performance depends, to some extent, on the size of the
	 * data fragment, but it is not believed to be large enough to be exploitable,
	 * due to the large block size of existing MACs and the small size of the
	 * timing signal.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/**
	 * Generates pseudo random bytes by mixing the result of two hash functions,
	 * MD5 and SHA-1.
	 *
	 * prf_TLS1(secret, label, seed) =
	 *   P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed);
	 *
	 * Each P_hash function functions as follows:
	 *
	 * P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
	 *                        HMAC_hash(secret, A(2) + seed) +
	 *                        HMAC_hash(secret, A(3) + seed) + ...
	 * A() is defined as:
	 *   A(0) = seed
	 *   A(i) = HMAC_hash(secret, A(i-1))
	 *
	 * The '+' operator denotes concatenation.
	 *
	 * As many iterations A(N) as are needed are performed to generate enough
	 * pseudo random byte output. If an iteration creates more data than is
	 * necessary, then it is truncated.
	 *
	 * Therefore:
	 * A(1) = HMAC_hash(secret, A(0))
	 *      = HMAC_hash(secret, seed)
	 * A(2) = HMAC_hash(secret, A(1))
	 *      = HMAC_hash(secret, HMAC_hash(secret, seed))
	 *
	 * Therefore:
	 * P_hash(secret, seed) =
	 *   HMAC_hash(secret, HMAC_hash(secret, A(0)) + seed) +
	 *   HMAC_hash(secret, HMAC_hash(secret, A(1)) + seed) +
	 *   ...
	 *
	 * Therefore:
	 * P_hash(secret, seed) =
	 *   HMAC_hash(secret, HMAC_hash(secret, seed) + seed) +
	 *   HMAC_hash(secret, HMAC_hash(secret, HMAC_hash(secret, seed)) + seed) +
	 *   ...
	 *
	 * @param secret the secret to use.
	 * @param label the label to use.
	 * @param seed the seed value to use.
	 * @param length the number of bytes to generate.
	 *
	 * @return the pseudo random bytes in a byte buffer.
	 */
	var prf_TLS1 = function(secret, label, seed, length) {
	  var rval = forge.util.createBuffer();

	  /* For TLS 1.0, the secret is split in half, into two secrets of equal
	    length. If the secret has an odd length then the last byte of the first
	    half will be the same as the first byte of the second. The length of the
	    two secrets is half of the secret rounded up. */
	  var idx = (secret.length >> 1);
	  var slen = idx + (secret.length & 1);
	  var s1 = secret.substr(0, slen);
	  var s2 = secret.substr(idx, slen);
	  var ai = forge.util.createBuffer();
	  var hmac = forge.hmac.create();
	  seed = label + seed;

	  // determine the number of iterations that must be performed to generate
	  // enough output bytes, md5 creates 16 byte hashes, sha1 creates 20
	  var md5itr = Math.ceil(length / 16);
	  var sha1itr = Math.ceil(length / 20);

	  // do md5 iterations
	  hmac.start('MD5', s1);
	  var md5bytes = forge.util.createBuffer();
	  ai.putBytes(seed);
	  for(var i = 0; i < md5itr; ++i) {
	    // HMAC_hash(secret, A(i-1))
	    hmac.start(null, null);
	    hmac.update(ai.getBytes());
	    ai.putBuffer(hmac.digest());

	    // HMAC_hash(secret, A(i) + seed)
	    hmac.start(null, null);
	    hmac.update(ai.bytes() + seed);
	    md5bytes.putBuffer(hmac.digest());
	  }

	  // do sha1 iterations
	  hmac.start('SHA1', s2);
	  var sha1bytes = forge.util.createBuffer();
	  ai.clear();
	  ai.putBytes(seed);
	  for(var i = 0; i < sha1itr; ++i) {
	    // HMAC_hash(secret, A(i-1))
	    hmac.start(null, null);
	    hmac.update(ai.getBytes());
	    ai.putBuffer(hmac.digest());

	    // HMAC_hash(secret, A(i) + seed)
	    hmac.start(null, null);
	    hmac.update(ai.bytes() + seed);
	    sha1bytes.putBuffer(hmac.digest());
	  }

	  // XOR the md5 bytes with the sha1 bytes
	  rval.putBytes(forge.util.xorBytes(
	    md5bytes.getBytes(), sha1bytes.getBytes(), length));

	  return rval;
	};

	/**
	 * Generates pseudo random bytes using a SHA256 algorithm. For TLS 1.2.
	 *
	 * @param secret the secret to use.
	 * @param label the label to use.
	 * @param seed the seed value to use.
	 * @param length the number of bytes to generate.
	 *
	 * @return the pseudo random bytes in a byte buffer.
	 */
	var prf_sha256 = function(secret, label, seed, length) {
	   // FIXME: implement me for TLS 1.2
	};

	/**
	 * Gets a MAC for a record using the SHA-1 hash algorithm.
	 *
	 * @param key the mac key.
	 * @param state the sequence number (array of two 32-bit integers).
	 * @param record the record.
	 *
	 * @return the sha-1 hash (20 bytes) for the given record.
	 */
	var hmac_sha1 = function(key, seqNum, record) {
	  /* MAC is computed like so:
	  HMAC_hash(
	    key, seqNum +
	      TLSCompressed.type +
	      TLSCompressed.version +
	      TLSCompressed.length +
	      TLSCompressed.fragment)
	  */
	  var hmac = forge.hmac.create();
	  hmac.start('SHA1', key);
	  var b = forge.util.createBuffer();
	  b.putInt32(seqNum[0]);
	  b.putInt32(seqNum[1]);
	  b.putByte(record.type);
	  b.putByte(record.version.major);
	  b.putByte(record.version.minor);
	  b.putInt16(record.length);
	  b.putBytes(record.fragment.bytes());
	  hmac.update(b.getBytes());
	  return hmac.digest().getBytes();
	};

	/**
	 * Compresses the TLSPlaintext record into a TLSCompressed record using the
	 * deflate algorithm.
	 *
	 * @param c the TLS connection.
	 * @param record the TLSPlaintext record to compress.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var deflate = function(c, record, s) {
	  var rval = false;

	  try {
	    var bytes = c.deflate(record.fragment.getBytes());
	    record.fragment = forge.util.createBuffer(bytes);
	    record.length = bytes.length;
	    rval = true;
	  } catch(ex) {
	    // deflate error, fail out
	  }

	  return rval;
	};

	/**
	 * Decompresses the TLSCompressed record into a TLSPlaintext record using the
	 * deflate algorithm.
	 *
	 * @param c the TLS connection.
	 * @param record the TLSCompressed record to decompress.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var inflate = function(c, record, s) {
	  var rval = false;

	  try {
	    var bytes = c.inflate(record.fragment.getBytes());
	    record.fragment = forge.util.createBuffer(bytes);
	    record.length = bytes.length;
	    rval = true;
	  } catch(ex) {
	    // inflate error, fail out
	  }

	  return rval;
	};

	/**
	 * Reads a TLS variable-length vector from a byte buffer.
	 *
	 * Variable-length vectors are defined by specifying a subrange of legal
	 * lengths, inclusively, using the notation <floor..ceiling>. When these are
	 * encoded, the actual length precedes the vector's contents in the byte
	 * stream. The length will be in the form of a number consuming as many bytes
	 * as required to hold the vector's specified maximum (ceiling) length. A
	 * variable-length vector with an actual length field of zero is referred to
	 * as an empty vector.
	 *
	 * @param b the byte buffer.
	 * @param lenBytes the number of bytes required to store the length.
	 *
	 * @return the resulting byte buffer.
	 */
	var readVector = function(b, lenBytes) {
	  var len = 0;
	  switch(lenBytes) {
	  case 1:
	    len = b.getByte();
	    break;
	  case 2:
	    len = b.getInt16();
	    break;
	  case 3:
	    len = b.getInt24();
	    break;
	  case 4:
	    len = b.getInt32();
	    break;
	  }

	  // read vector bytes into a new buffer
	  return forge.util.createBuffer(b.getBytes(len));
	};

	/**
	 * Writes a TLS variable-length vector to a byte buffer.
	 *
	 * @param b the byte buffer.
	 * @param lenBytes the number of bytes required to store the length.
	 * @param v the byte buffer vector.
	 */
	var writeVector = function(b, lenBytes, v) {
	  // encode length at the start of the vector, where the number of bytes for
	  // the length is the maximum number of bytes it would take to encode the
	  // vector's ceiling
	  b.putInt(v.length(), lenBytes << 3);
	  b.putBuffer(v);
	};

	/**
	 * The tls implementation.
	 */
	var tls = {};

	/**
	 * Version: TLS 1.2 = 3.3, TLS 1.1 = 3.2, TLS 1.0 = 3.1. Both TLS 1.1 and
	 * TLS 1.2 were still too new (ie: openSSL didn't implement them) at the time
	 * of this implementation so TLS 1.0 was implemented instead.
	 */
	tls.Versions = {
	  TLS_1_0: {major: 3, minor: 1},
	  TLS_1_1: {major: 3, minor: 2},
	  TLS_1_2: {major: 3, minor: 3}
	};
	tls.SupportedVersions = [
	  tls.Versions.TLS_1_1,
	  tls.Versions.TLS_1_0
	];
	tls.Version = tls.SupportedVersions[0];

	/**
	 * Maximum fragment size. True maximum is 16384, but we fragment before that
	 * to allow for unusual small increases during compression.
	 */
	tls.MaxFragment = 16384 - 1024;

	/**
	 * Whether this entity is considered the "client" or "server".
	 * enum { server, client } ConnectionEnd;
	 */
	tls.ConnectionEnd = {
	  server: 0,
	  client: 1
	};

	/**
	 * Pseudo-random function algorithm used to generate keys from the master
	 * secret.
	 * enum { tls_prf_sha256 } PRFAlgorithm;
	 */
	tls.PRFAlgorithm = {
	  tls_prf_sha256: 0
	};

	/**
	 * Bulk encryption algorithms.
	 * enum { null, rc4, des3, aes } BulkCipherAlgorithm;
	 */
	tls.BulkCipherAlgorithm = {
	  none: null,
	  rc4: 0,
	  des3: 1,
	  aes: 2
	};

	/**
	 * Cipher types.
	 * enum { stream, block, aead } CipherType;
	 */
	tls.CipherType = {
	  stream: 0,
	  block: 1,
	  aead: 2
	};

	/**
	 * MAC (Message Authentication Code) algorithms.
	 * enum { null, hmac_md5, hmac_sha1, hmac_sha256,
	 *   hmac_sha384, hmac_sha512} MACAlgorithm;
	 */
	tls.MACAlgorithm = {
	  none: null,
	  hmac_md5: 0,
	  hmac_sha1: 1,
	  hmac_sha256: 2,
	  hmac_sha384: 3,
	  hmac_sha512: 4
	};

	/**
	 * Compression algorithms.
	 * enum { null(0), deflate(1), (255) } CompressionMethod;
	 */
	tls.CompressionMethod = {
	  none: 0,
	  deflate: 1
	};

	/**
	 * TLS record content types.
	 * enum {
	 *   change_cipher_spec(20), alert(21), handshake(22),
	 *   application_data(23), (255)
	 * } ContentType;
	 */
	tls.ContentType = {
	  change_cipher_spec: 20,
	  alert: 21,
	  handshake: 22,
	  application_data: 23,
	  heartbeat: 24
	};

	/**
	 * TLS handshake types.
	 * enum {
	 *   hello_request(0), client_hello(1), server_hello(2),
	 *   certificate(11), server_key_exchange (12),
	 *   certificate_request(13), server_hello_done(14),
	 *   certificate_verify(15), client_key_exchange(16),
	 *   finished(20), (255)
	 * } HandshakeType;
	 */
	tls.HandshakeType = {
	  hello_request: 0,
	  client_hello: 1,
	  server_hello: 2,
	  certificate: 11,
	  server_key_exchange: 12,
	  certificate_request: 13,
	  server_hello_done: 14,
	  certificate_verify: 15,
	  client_key_exchange: 16,
	  finished: 20
	};

	/**
	 * TLS Alert Protocol.
	 *
	 * enum { warning(1), fatal(2), (255) } AlertLevel;
	 *
	 * enum {
	 *   close_notify(0),
	 *   unexpected_message(10),
	 *   bad_record_mac(20),
	 *   decryption_failed(21),
	 *   record_overflow(22),
	 *   decompression_failure(30),
	 *   handshake_failure(40),
	 *   bad_certificate(42),
	 *   unsupported_certificate(43),
	 *   certificate_revoked(44),
	 *   certificate_expired(45),
	 *   certificate_unknown(46),
	 *   illegal_parameter(47),
	 *   unknown_ca(48),
	 *   access_denied(49),
	 *   decode_error(50),
	 *   decrypt_error(51),
	 *   export_restriction(60),
	 *   protocol_version(70),
	 *   insufficient_security(71),
	 *   internal_error(80),
	 *   user_canceled(90),
	 *   no_renegotiation(100),
	 *   (255)
	 * } AlertDescription;
	 *
	 * struct {
	 *   AlertLevel level;
	 *   AlertDescription description;
	 * } Alert;
	 */
	tls.Alert = {};
	tls.Alert.Level = {
	  warning: 1,
	  fatal: 2
	};
	tls.Alert.Description = {
	  close_notify: 0,
	  unexpected_message: 10,
	  bad_record_mac: 20,
	  decryption_failed: 21,
	  record_overflow: 22,
	  decompression_failure: 30,
	  handshake_failure: 40,
	  bad_certificate: 42,
	  unsupported_certificate: 43,
	  certificate_revoked: 44,
	  certificate_expired: 45,
	  certificate_unknown: 46,
	  illegal_parameter: 47,
	  unknown_ca: 48,
	  access_denied: 49,
	  decode_error: 50,
	  decrypt_error: 51,
	  export_restriction: 60,
	  protocol_version: 70,
	  insufficient_security: 71,
	  internal_error: 80,
	  user_canceled: 90,
	  no_renegotiation: 100
	};

	/**
	 * TLS Heartbeat Message types.
	 * enum {
	 *   heartbeat_request(1),
	 *   heartbeat_response(2),
	 *   (255)
	 * } HeartbeatMessageType;
	 */
	tls.HeartbeatMessageType = {
	  heartbeat_request: 1,
	  heartbeat_response: 2
	};

	/**
	 * Supported cipher suites.
	 */
	tls.CipherSuites = {};

	/**
	 * Gets a supported cipher suite from its 2 byte ID.
	 *
	 * @param twoBytes two bytes in a string.
	 *
	 * @return the matching supported cipher suite or null.
	 */
	tls.getCipherSuite = function(twoBytes) {
	  var rval = null;
	  for(var key in tls.CipherSuites) {
	    var cs = tls.CipherSuites[key];
	    if(cs.id[0] === twoBytes.charCodeAt(0) &&
	      cs.id[1] === twoBytes.charCodeAt(1)) {
	      rval = cs;
	      break;
	    }
	  }
	  return rval;
	};

	/**
	 * Called when an unexpected record is encountered.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleUnexpected = function(c, record) {
	  // if connection is client and closed, ignore unexpected messages
	  var ignore = (!c.open && c.entity === tls.ConnectionEnd.client);
	  if(!ignore) {
	    c.error(c, {
	      message: 'Unexpected message. Received TLS record out of order.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unexpected_message
	      }
	    });
	  }
	};

	/**
	 * Called when a client receives a HelloRequest record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleHelloRequest = function(c, record, length) {
	  // ignore renegotiation requests from the server during a handshake, but
	  // if handshaking, send a warning alert that renegotation is denied
	  if(!c.handshaking && c.handshakes > 0) {
	    // send alert warning
	    tls.queue(c, tls.createAlert(c, {
	       level: tls.Alert.Level.warning,
	       description: tls.Alert.Description.no_renegotiation
	    }));
	    tls.flush(c);
	  }

	  // continue
	  c.process();
	};

	/**
	 * Parses a hello message from a ClientHello or ServerHello record.
	 *
	 * @param record the record to parse.
	 *
	 * @return the parsed message.
	 */
	tls.parseHelloMessage = function(c, record, length) {
	  var msg = null;

	  var client = (c.entity === tls.ConnectionEnd.client);

	  // minimum of 38 bytes in message
	  if(length < 38) {
	    c.error(c, {
	      message: client ?
	        'Invalid ServerHello message. Message too short.' :
	        'Invalid ClientHello message. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  } else {
	    // use 'remaining' to calculate # of remaining bytes in the message
	    var b = record.fragment;
	    var remaining = b.length();
	    msg = {
	      version: {
	        major: b.getByte(),
	        minor: b.getByte()
	      },
	      random: forge.util.createBuffer(b.getBytes(32)),
	      session_id: readVector(b, 1),
	      extensions: []
	    };
	    if(client) {
	      msg.cipher_suite = b.getBytes(2);
	      msg.compression_method = b.getByte();
	    } else {
	      msg.cipher_suites = readVector(b, 2);
	      msg.compression_methods = readVector(b, 1);
	    }

	    // read extensions if there are any bytes left in the message
	    remaining = length - (remaining - b.length());
	    if(remaining > 0) {
	      // parse extensions
	      var exts = readVector(b, 2);
	      while(exts.length() > 0) {
	        msg.extensions.push({
	          type: [exts.getByte(), exts.getByte()],
	          data: readVector(exts, 2)
	        });
	      }

	      // TODO: make extension support modular
	      if(!client) {
	        for(var i = 0; i < msg.extensions.length; ++i) {
	          var ext = msg.extensions[i];

	          // support SNI extension
	          if(ext.type[0] === 0x00 && ext.type[1] === 0x00) {
	            // get server name list
	            var snl = readVector(ext.data, 2);
	            while(snl.length() > 0) {
	              // read server name type
	              var snType = snl.getByte();

	              // only HostName type (0x00) is known, break out if
	              // another type is detected
	              if(snType !== 0x00) {
	                break;
	              }

	              // add host name to server name list
	              c.session.extensions.server_name.serverNameList.push(
	                readVector(snl, 2).getBytes());
	            }
	          }
	        }
	      }
	    }

	    // version already set, do not allow version change
	    if(c.session.version) {
	      if(msg.version.major !== c.session.version.major ||
	        msg.version.minor !== c.session.version.minor) {
	        return c.error(c, {
	          message: 'TLS version change is disallowed during renegotiation.',
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.protocol_version
	          }
	        });
	      }
	    }

	    // get the chosen (ServerHello) cipher suite
	    if(client) {
	      // FIXME: should be checking configured acceptable cipher suites
	      c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);
	    } else {
	      // get a supported preferred (ClientHello) cipher suite
	      // choose the first supported cipher suite
	      var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());
	      while(tmp.length() > 0) {
	        // FIXME: should be checking configured acceptable suites
	        // cipher suites take up 2 bytes
	        c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));
	        if(c.session.cipherSuite !== null) {
	          break;
	        }
	      }
	    }

	    // cipher suite not supported
	    if(c.session.cipherSuite === null) {
	      return c.error(c, {
	        message: 'No cipher suites in common.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.handshake_failure
	        },
	        cipherSuite: forge.util.bytesToHex(msg.cipher_suite)
	      });
	    }

	    // TODO: handle compression methods
	    if(client) {
	      c.session.compressionMethod = msg.compression_method;
	    } else {
	      // no compression
	      c.session.compressionMethod = tls.CompressionMethod.none;
	    }
	  }

	  return msg;
	};

	/**
	 * Creates security parameters for the given connection based on the given
	 * hello message.
	 *
	 * @param c the TLS connection.
	 * @param msg the hello message.
	 */
	tls.createSecurityParameters = function(c, msg) {
	  /* Note: security params are from TLS 1.2, some values like prf_algorithm
	  are ignored for TLS 1.0/1.1 and the builtin as specified in the spec is
	  used. */

	  // TODO: handle other options from server when more supported

	  // get client and server randoms
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var msgRandom = msg.random.bytes();
	  var cRandom = client ? c.session.sp.client_random : msgRandom;
	  var sRandom = client ? msgRandom : tls.createRandom().getBytes();

	  // create new security parameters
	  c.session.sp = {
	    entity: c.entity,
	    prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,
	    bulk_cipher_algorithm: null,
	    cipher_type: null,
	    enc_key_length: null,
	    block_length: null,
	    fixed_iv_length: null,
	    record_iv_length: null,
	    mac_algorithm: null,
	    mac_length: null,
	    mac_key_length: null,
	    compression_algorithm: c.session.compressionMethod,
	    pre_master_secret: null,
	    master_secret: null,
	    client_random: cRandom,
	    server_random: sRandom
	  };
	};

	/**
	 * Called when a client receives a ServerHello record.
	 *
	 * When a ServerHello message will be sent:
	 *   The server will send this message in response to a client hello message
	 *   when it was able to find an acceptable set of algorithms. If it cannot
	 *   find such a match, it will respond with a handshake failure alert.
	 *
	 * uint24 length;
	 * struct {
	 *   ProtocolVersion server_version;
	 *   Random random;
	 *   SessionID session_id;
	 *   CipherSuite cipher_suite;
	 *   CompressionMethod compression_method;
	 *   select(extensions_present) {
	 *     case false:
	 *       struct {};
	 *     case true:
	 *       Extension extensions<0..2^16-1>;
	 *   };
	 * } ServerHello;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerHello = function(c, record, length) {
	  var msg = tls.parseHelloMessage(c, record, length);
	  if(c.fail) {
	    return;
	  }

	  // ensure server version is compatible
	  if(msg.version.minor <= c.version.minor) {
	    c.version.minor = msg.version.minor;
	  } else {
	    return c.error(c, {
	      message: 'Incompatible TLS version.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.protocol_version
	      }
	    });
	  }

	  // indicate session version has been set
	  c.session.version = c.version;

	  // get the session ID from the message
	  var sessionId = msg.session_id.bytes();

	  // if the session ID is not blank and matches the cached one, resume
	  // the session
	  if(sessionId.length > 0 && sessionId === c.session.id) {
	    // resuming session, expect a ChangeCipherSpec next
	    c.expect = SCC;
	    c.session.resuming = true;

	    // get new server random
	    c.session.sp.server_random = msg.random.bytes();
	  } else {
	    // not resuming, expect a server Certificate message next
	    c.expect = SCE;
	    c.session.resuming = false;

	    // create new security parameters
	    tls.createSecurityParameters(c, msg);
	  }

	  // set new session ID
	  c.session.id = sessionId;

	  // continue
	  c.process();
	};

	/**
	 * Called when a server receives a ClientHello record.
	 *
	 * When a ClientHello message will be sent:
	 *   When a client first connects to a server it is required to send the
	 *   client hello as its first message. The client can also send a client
	 *   hello in response to a hello request or on its own initiative in order
	 *   to renegotiate the security parameters in an existing connection.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleClientHello = function(c, record, length) {
	  var msg = tls.parseHelloMessage(c, record, length);
	  if(c.fail) {
	    return;
	  }

	  // get the session ID from the message
	  var sessionId = msg.session_id.bytes();

	  // see if the given session ID is in the cache
	  var session = null;
	  if(c.sessionCache) {
	    session = c.sessionCache.getSession(sessionId);
	    if(session === null) {
	      // session ID not found
	      sessionId = '';
	    } else if(session.version.major !== msg.version.major ||
	      session.version.minor > msg.version.minor) {
	      // if session version is incompatible with client version, do not resume
	      session = null;
	      sessionId = '';
	    }
	  }

	  // no session found to resume, generate a new session ID
	  if(sessionId.length === 0) {
	    sessionId = forge.random.getBytes(32);
	  }

	  // update session
	  c.session.id = sessionId;
	  c.session.clientHelloVersion = msg.version;
	  c.session.sp = {};
	  if(session) {
	    // use version and security parameters from resumed session
	    c.version = c.session.version = session.version;
	    c.session.sp = session.sp;
	  } else {
	    // use highest compatible minor version
	    var version;
	    for(var i = 1; i < tls.SupportedVersions.length; ++i) {
	      version = tls.SupportedVersions[i];
	      if(version.minor <= msg.version.minor) {
	        break;
	      }
	    }
	    c.version = {major: version.major, minor: version.minor};
	    c.session.version = c.version;
	  }

	  // if a session is set, resume it
	  if(session !== null) {
	    // resuming session, expect a ChangeCipherSpec next
	    c.expect = CCC;
	    c.session.resuming = true;

	    // get new client random
	    c.session.sp.client_random = msg.random.bytes();
	  } else {
	    // not resuming, expect a Certificate or ClientKeyExchange
	    c.expect = (c.verifyClient !== false) ? CCE : CKE;
	    c.session.resuming = false;

	    // create new security parameters
	    tls.createSecurityParameters(c, msg);
	  }

	  // connection now open
	  c.open = true;

	  // queue server hello
	  tls.queue(c, tls.createRecord(c, {
	    type: tls.ContentType.handshake,
	    data: tls.createServerHello(c)
	  }));

	  if(c.session.resuming) {
	    // queue change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // create pending state
	    c.state.pending = tls.createConnectionState(c);

	    // change current write state to pending write state
	    c.state.current.write = c.state.pending.write;

	    // queue finished
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));
	  } else {
	    // queue server certificate
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createCertificate(c)
	    }));

	    if(!c.fail) {
	      // queue server key exchange
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createServerKeyExchange(c)
	      }));

	      // request client certificate if set
	      if(c.verifyClient !== false) {
	        // queue certificate request
	        tls.queue(c, tls.createRecord(c, {
	          type: tls.ContentType.handshake,
	          data: tls.createCertificateRequest(c)
	        }));
	      }

	      // queue server hello done
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createServerHelloDone(c)
	      }));
	    }
	  }

	  // send records
	  tls.flush(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a Certificate record.
	 *
	 * When this message will be sent:
	 *   The server must send a certificate whenever the agreed-upon key exchange
	 *   method is not an anonymous one. This message will always immediately
	 *   follow the server hello message.
	 *
	 * Meaning of this message:
	 *   The certificate type must be appropriate for the selected cipher suite's
	 *   key exchange algorithm, and is generally an X.509v3 certificate. It must
	 *   contain a key which matches the key exchange method, as follows. Unless
	 *   otherwise specified, the signing algorithm for the certificate must be
	 *   the same as the algorithm for the certificate key. Unless otherwise
	 *   specified, the public key may be of any length.
	 *
	 * opaque ASN.1Cert<1..2^24-1>;
	 * struct {
	 *   ASN.1Cert certificate_list<1..2^24-1>;
	 * } Certificate;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificate = function(c, record, length) {
	  // minimum of 3 bytes in message
	  if(length < 3) {
	    return c.error(c, {
	      message: 'Invalid Certificate message. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  var b = record.fragment;
	  var msg = {
	    certificate_list: readVector(b, 3)
	  };

	  /* The sender's certificate will be first in the list (chain), each
	    subsequent one that follows will certify the previous one, but root
	    certificates (self-signed) that specify the certificate authority may
	    be omitted under the assumption that clients must already possess it. */
	  var cert, asn1;
	  var certs = [];
	  try {
	    while(msg.certificate_list.length() > 0) {
	      // each entry in msg.certificate_list is a vector with 3 len bytes
	      cert = readVector(msg.certificate_list, 3);
	      asn1 = forge.asn1.fromDer(cert);
	      cert = forge.pki.certificateFromAsn1(asn1, true);
	      certs.push(cert);
	    }
	  } catch(ex) {
	    return c.error(c, {
	      message: 'Could not parse certificate list.',
	      cause: ex,
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.bad_certificate
	      }
	    });
	  }

	  // ensure at least 1 certificate was provided if in client-mode
	  // or if verifyClient was set to true to require a certificate
	  // (as opposed to 'optional')
	  var client = (c.entity === tls.ConnectionEnd.client);
	  if((client || c.verifyClient === true) && certs.length === 0) {
	    // error, no certificate
	    c.error(c, {
	      message: client ?
	        'No server certificate provided.' :
	        'No client certificate provided.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  } else if(certs.length === 0) {
	    // no certs to verify
	    // expect a ServerKeyExchange or ClientKeyExchange message next
	    c.expect = client ? SKE : CKE;
	  } else {
	    // save certificate in session
	    if(client) {
	      c.session.serverCertificate = certs[0];
	    } else {
	      c.session.clientCertificate = certs[0];
	    }

	    if(tls.verifyCertificateChain(c, certs)) {
	      // expect a ServerKeyExchange or ClientKeyExchange message next
	      c.expect = client ? SKE : CKE;
	    }
	  }

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ServerKeyExchange record.
	 *
	 * When this message will be sent:
	 *   This message will be sent immediately after the server certificate
	 *   message (or the server hello message, if this is an anonymous
	 *   negotiation).
	 *
	 *   The server key exchange message is sent by the server only when the
	 *   server certificate message (if sent) does not contain enough data to
	 *   allow the client to exchange a premaster secret.
	 *
	 * Meaning of this message:
	 *   This message conveys cryptographic information to allow the client to
	 *   communicate the premaster secret: either an RSA public key to encrypt
	 *   the premaster secret with, or a Diffie-Hellman public key with which the
	 *   client can complete a key exchange (with the result being the premaster
	 *   secret.)
	 *
	 * enum {
	 *   dhe_dss, dhe_rsa, dh_anon, rsa, dh_dss, dh_rsa
	 * } KeyExchangeAlgorithm;
	 *
	 * struct {
	 *   opaque dh_p<1..2^16-1>;
	 *   opaque dh_g<1..2^16-1>;
	 *   opaque dh_Ys<1..2^16-1>;
	 * } ServerDHParams;
	 *
	 * struct {
	 *   select(KeyExchangeAlgorithm) {
	 *     case dh_anon:
	 *       ServerDHParams params;
	 *     case dhe_dss:
	 *     case dhe_rsa:
	 *       ServerDHParams params;
	 *       digitally-signed struct {
	 *         opaque client_random[32];
	 *         opaque server_random[32];
	 *         ServerDHParams params;
	 *       } signed_params;
	 *     case rsa:
	 *     case dh_dss:
	 *     case dh_rsa:
	 *       struct {};
	 *   };
	 * } ServerKeyExchange;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerKeyExchange = function(c, record, length) {
	  // this implementation only supports RSA, no Diffie-Hellman support
	  // so any length > 0 is invalid
	  if(length > 0) {
	    return c.error(c, {
	      message: 'Invalid key parameters. Only RSA is supported.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unsupported_certificate
	      }
	    });
	  }

	  // expect an optional CertificateRequest message next
	  c.expect = SCR;

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ClientKeyExchange record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleClientKeyExchange = function(c, record, length) {
	  // this implementation only supports RSA, no Diffie-Hellman support
	  // so any length < 48 is invalid
	  if(length < 48) {
	    return c.error(c, {
	      message: 'Invalid key parameters. Only RSA is supported.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unsupported_certificate
	      }
	    });
	  }

	  var b = record.fragment;
	  var msg = {
	    enc_pre_master_secret: readVector(b, 2).getBytes()
	  };

	  // do rsa decryption
	  var privateKey = null;
	  if(c.getPrivateKey) {
	    try {
	      privateKey = c.getPrivateKey(c, c.session.serverCertificate);
	      privateKey = forge.pki.privateKeyFromPem(privateKey);
	    } catch(ex) {
	      c.error(c, {
	        message: 'Could not get private key.',
	        cause: ex,
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    }
	  }

	  if(privateKey === null) {
	    return c.error(c, {
	      message: 'No private key set.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.internal_error
	      }
	    });
	  }

	  try {
	    // decrypt 48-byte pre-master secret
	    var sp = c.session.sp;
	    sp.pre_master_secret = privateKey.decrypt(msg.enc_pre_master_secret);

	    // ensure client hello version matches first 2 bytes
	    var version = c.session.clientHelloVersion;
	    if(version.major !== sp.pre_master_secret.charCodeAt(0) ||
	      version.minor !== sp.pre_master_secret.charCodeAt(1)) {
	      // error, do not send alert (see BLEI attack below)
	      throw new Error('TLS version rollback attack detected.');
	    }
	  } catch(ex) {
	    /* Note: Daniel Bleichenbacher [BLEI] can be used to attack a
	      TLS server which is using PKCS#1 encoded RSA, so instead of
	      failing here, we generate 48 random bytes and use that as
	      the pre-master secret. */
	    sp.pre_master_secret = forge.random.getBytes(48);
	  }

	  // expect a CertificateVerify message if a Certificate was received that
	  // does not have fixed Diffie-Hellman params, otherwise expect
	  // ChangeCipherSpec
	  c.expect = CCC;
	  if(c.session.clientCertificate !== null) {
	    // only RSA support, so expect CertificateVerify
	    // TODO: support Diffie-Hellman
	    c.expect = CCV;
	  }

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a CertificateRequest record.
	 *
	 * When this message will be sent:
	 *   A non-anonymous server can optionally request a certificate from the
	 *   client, if appropriate for the selected cipher suite. This message, if
	 *   sent, will immediately follow the Server Key Exchange message (if it is
	 *   sent; otherwise, the Server Certificate message).
	 *
	 * enum {
	 *   rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),
	 *   rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),
	 *   fortezza_dms_RESERVED(20), (255)
	 * } ClientCertificateType;
	 *
	 * opaque DistinguishedName<1..2^16-1>;
	 *
	 * struct {
	 *   ClientCertificateType certificate_types<1..2^8-1>;
	 *   SignatureAndHashAlgorithm supported_signature_algorithms<2^16-1>;
	 *   DistinguishedName certificate_authorities<0..2^16-1>;
	 * } CertificateRequest;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificateRequest = function(c, record, length) {
	  // minimum of 3 bytes in message
	  if(length < 3) {
	    return c.error(c, {
	      message: 'Invalid CertificateRequest. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // TODO: TLS 1.2+ has different format including
	  // SignatureAndHashAlgorithm after cert types
	  var b = record.fragment;
	  var msg = {
	    certificate_types: readVector(b, 1),
	    certificate_authorities: readVector(b, 2)
	  };

	  // save certificate request in session
	  c.session.certificateRequest = msg;

	  // expect a ServerHelloDone message next
	  c.expect = SHD;

	  // continue
	  c.process();
	};

	/**
	 * Called when a server receives a CertificateVerify record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificateVerify = function(c, record, length) {
	  if(length < 2) {
	    return c.error(c, {
	      message: 'Invalid CertificateVerify. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // rewind to get full bytes for message so it can be manually
	  // digested below (special case for CertificateVerify messages because
	  // they must be digested *after* handling as opposed to all others)
	  var b = record.fragment;
	  b.read -= 4;
	  var msgBytes = b.bytes();
	  b.read += 4;

	  var msg = {
	    signature: readVector(b, 2).getBytes()
	  };

	  // TODO: add support for DSA

	  // generate data to verify
	  var verify = forge.util.createBuffer();
	  verify.putBuffer(c.session.md5.digest());
	  verify.putBuffer(c.session.sha1.digest());
	  verify = verify.getBytes();

	  try {
	    var cert = c.session.clientCertificate;
	    /*b = forge.pki.rsa.decrypt(
	      msg.signature, cert.publicKey, true, verify.length);
	    if(b !== verify) {*/
	    if(!cert.publicKey.verify(verify, msg.signature, 'NONE')) {
	      throw new Error('CertificateVerify signature does not match.');
	    }

	    // digest message now that it has been handled
	    c.session.md5.update(msgBytes);
	    c.session.sha1.update(msgBytes);
	  } catch(ex) {
	    return c.error(c, {
	      message: 'Bad signature in CertificateVerify.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.handshake_failure
	      }
	    });
	  }

	  // expect ChangeCipherSpec
	  c.expect = CCC;

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ServerHelloDone record.
	 *
	 * When this message will be sent:
	 *   The server hello done message is sent by the server to indicate the end
	 *   of the server hello and associated messages. After sending this message
	 *   the server will wait for a client response.
	 *
	 * Meaning of this message:
	 *   This message means that the server is done sending messages to support
	 *   the key exchange, and the client can proceed with its phase of the key
	 *   exchange.
	 *
	 *   Upon receipt of the server hello done message the client should verify
	 *   that the server provided a valid certificate if required and check that
	 *   the server hello parameters are acceptable.
	 *
	 * struct {} ServerHelloDone;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerHelloDone = function(c, record, length) {
	  // len must be 0 bytes
	  if(length > 0) {
	    return c.error(c, {
	      message: 'Invalid ServerHelloDone message. Invalid length.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.record_overflow
	      }
	    });
	  }

	  if(c.serverCertificate === null) {
	    // no server certificate was provided
	    var error = {
	      message: 'No server certificate provided. Not enough security.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.insufficient_security
	      }
	    };

	    // call application callback
	    var depth = 0;
	    var ret = c.verify(c, error.alert.description, depth, []);
	    if(ret !== true) {
	      // check for custom alert info
	      if(ret || ret === 0) {
	        // set custom message and alert description
	        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	          if(ret.message) {
	            error.message = ret.message;
	          }
	          if(ret.alert) {
	            error.alert.description = ret.alert;
	          }
	        } else if(typeof ret === 'number') {
	          // set custom alert description
	          error.alert.description = ret;
	        }
	      }

	      // send error
	      return c.error(c, error);
	    }
	  }

	  // create client certificate message if requested
	  if(c.session.certificateRequest !== null) {
	    record = tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createCertificate(c)
	    });
	    tls.queue(c, record);
	  }

	  // create client key exchange message
	  record = tls.createRecord(c, {
	     type: tls.ContentType.handshake,
	     data: tls.createClientKeyExchange(c)
	  });
	  tls.queue(c, record);

	  // expect no messages until the following callback has been called
	  c.expect = SER;

	  // create callback to handle client signature (for client-certs)
	  var callback = function(c, signature) {
	    if(c.session.certificateRequest !== null &&
	      c.session.clientCertificate !== null) {
	      // create certificate verify message
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createCertificateVerify(c, signature)
	      }));
	    }

	    // create change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // create pending state
	    c.state.pending = tls.createConnectionState(c);

	    // change current write state to pending write state
	    c.state.current.write = c.state.pending.write;

	    // create finished message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));

	    // expect a server ChangeCipherSpec message next
	    c.expect = SCC;

	    // send records
	    tls.flush(c);

	    // continue
	    c.process();
	  };

	  // if there is no certificate request or no client certificate, do
	  // callback immediately
	  if(c.session.certificateRequest === null ||
	    c.session.clientCertificate === null) {
	    return callback(c, null);
	  }

	  // otherwise get the client signature
	  tls.getClientSignature(c, callback);
	};

	/**
	 * Called when a ChangeCipherSpec record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleChangeCipherSpec = function(c, record) {
	  if(record.fragment.getByte() !== 0x01) {
	    return c.error(c, {
	      message: 'Invalid ChangeCipherSpec message received.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // create pending state if:
	  // 1. Resuming session in client mode OR
	  // 2. NOT resuming session in server mode
	  var client = (c.entity === tls.ConnectionEnd.client);
	  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
	    c.state.pending = tls.createConnectionState(c);
	  }

	  // change current read state to pending read state
	  c.state.current.read = c.state.pending.read;

	  // clear pending state if:
	  // 1. NOT resuming session in client mode OR
	  // 2. resuming a session in server mode
	  if((!c.session.resuming && client) || (c.session.resuming && !client)) {
	    c.state.pending = null;
	  }

	  // expect a Finished record next
	  c.expect = client ? SFI : CFI;

	  // continue
	  c.process();
	};

	/**
	 * Called when a Finished record is received.
	 *
	 * When this message will be sent:
	 *   A finished message is always sent immediately after a change
	 *   cipher spec message to verify that the key exchange and
	 *   authentication processes were successful. It is essential that a
	 *   change cipher spec message be received between the other
	 *   handshake messages and the Finished message.
	 *
	 * Meaning of this message:
	 *   The finished message is the first protected with the just-
	 *   negotiated algorithms, keys, and secrets. Recipients of finished
	 *   messages must verify that the contents are correct.  Once a side
	 *   has sent its Finished message and received and validated the
	 *   Finished message from its peer, it may begin to send and receive
	 *   application data over the connection.
	 *
	 * struct {
	 *   opaque verify_data[verify_data_length];
	 * } Finished;
	 *
	 * verify_data
	 *   PRF(master_secret, finished_label, Hash(handshake_messages))
	 *     [0..verify_data_length-1];
	 *
	 * finished_label
	 *   For Finished messages sent by the client, the string
	 *   "client finished". For Finished messages sent by the server, the
	 *   string "server finished".
	 *
	 * verify_data_length depends on the cipher suite. If it is not specified
	 * by the cipher suite, then it is 12. Versions of TLS < 1.2 always used
	 * 12 bytes.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleFinished = function(c, record, length) {
	  // rewind to get full bytes for message so it can be manually
	  // digested below (special case for Finished messages because they
	  // must be digested *after* handling as opposed to all others)
	  var b = record.fragment;
	  b.read -= 4;
	  var msgBytes = b.bytes();
	  b.read += 4;

	  // message contains only verify_data
	  var vd = record.fragment.getBytes();

	  // ensure verify data is correct
	  b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());

	  // set label based on entity type
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var label = client ? 'server finished' : 'client finished';

	  // TODO: determine prf function and verify length for TLS 1.2
	  var sp = c.session.sp;
	  var vdl = 12;
	  var prf = prf_TLS1;
	  b = prf(sp.master_secret, label, b.getBytes(), vdl);
	  if(b.getBytes() !== vd) {
	    return c.error(c, {
	      message: 'Invalid verify_data in Finished message.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.decrypt_error
	      }
	    });
	  }

	  // digest finished message now that it has been handled
	  c.session.md5.update(msgBytes);
	  c.session.sha1.update(msgBytes);

	  // resuming session as client or NOT resuming session as server
	  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
	    // create change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // change current write state to pending write state, clear pending
	    c.state.current.write = c.state.pending.write;
	    c.state.pending = null;

	    // create finished message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));
	  }

	  // expect application data next
	  c.expect = client ? SAD : CAD;

	  // handshake complete
	  c.handshaking = false;
	  ++c.handshakes;

	  // save access to peer certificate
	  c.peerCertificate = client ?
	    c.session.serverCertificate : c.session.clientCertificate;

	  // send records
	  tls.flush(c);

	  // now connected
	  c.isConnected = true;
	  c.connected(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when an Alert record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleAlert = function(c, record) {
	  // read alert
	  var b = record.fragment;
	  var alert = {
	    level: b.getByte(),
	    description: b.getByte()
	  };

	  // TODO: consider using a table?
	  // get appropriate message
	  var msg;
	  switch(alert.description) {
	  case tls.Alert.Description.close_notify:
	    msg = 'Connection closed.';
	    break;
	  case tls.Alert.Description.unexpected_message:
	    msg = 'Unexpected message.';
	    break;
	  case tls.Alert.Description.bad_record_mac:
	    msg = 'Bad record MAC.';
	    break;
	  case tls.Alert.Description.decryption_failed:
	    msg = 'Decryption failed.';
	    break;
	  case tls.Alert.Description.record_overflow:
	    msg = 'Record overflow.';
	    break;
	  case tls.Alert.Description.decompression_failure:
	    msg = 'Decompression failed.';
	    break;
	  case tls.Alert.Description.handshake_failure:
	    msg = 'Handshake failure.';
	    break;
	  case tls.Alert.Description.bad_certificate:
	    msg = 'Bad certificate.';
	    break;
	  case tls.Alert.Description.unsupported_certificate:
	    msg = 'Unsupported certificate.';
	    break;
	  case tls.Alert.Description.certificate_revoked:
	    msg = 'Certificate revoked.';
	    break;
	  case tls.Alert.Description.certificate_expired:
	    msg = 'Certificate expired.';
	    break;
	  case tls.Alert.Description.certificate_unknown:
	    msg = 'Certificate unknown.';
	    break;
	  case tls.Alert.Description.illegal_parameter:
	    msg = 'Illegal parameter.';
	    break;
	  case tls.Alert.Description.unknown_ca:
	    msg = 'Unknown certificate authority.';
	    break;
	  case tls.Alert.Description.access_denied:
	    msg = 'Access denied.';
	    break;
	  case tls.Alert.Description.decode_error:
	    msg = 'Decode error.';
	    break;
	  case tls.Alert.Description.decrypt_error:
	    msg = 'Decrypt error.';
	    break;
	  case tls.Alert.Description.export_restriction:
	    msg = 'Export restriction.';
	    break;
	  case tls.Alert.Description.protocol_version:
	    msg = 'Unsupported protocol version.';
	    break;
	  case tls.Alert.Description.insufficient_security:
	    msg = 'Insufficient security.';
	    break;
	  case tls.Alert.Description.internal_error:
	    msg = 'Internal error.';
	    break;
	  case tls.Alert.Description.user_canceled:
	    msg = 'User canceled.';
	    break;
	  case tls.Alert.Description.no_renegotiation:
	    msg = 'Renegotiation not supported.';
	    break;
	  default:
	    msg = 'Unknown error.';
	    break;
	  }

	  // close connection on close_notify, not an error
	  if(alert.description === tls.Alert.Description.close_notify) {
	    return c.close();
	  }

	  // call error handler
	  c.error(c, {
	    message: msg,
	    send: false,
	    // origin is the opposite end
	    origin: (c.entity === tls.ConnectionEnd.client) ? 'server' : 'client',
	    alert: alert
	  });

	  // continue
	  c.process();
	};

	/**
	 * Called when a Handshake record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleHandshake = function(c, record) {
	  // get the handshake type and message length
	  var b = record.fragment;
	  var type = b.getByte();
	  var length = b.getInt24();

	  // see if the record fragment doesn't yet contain the full message
	  if(length > b.length()) {
	    // cache the record, clear its fragment, and reset the buffer read
	    // pointer before the type and length were read
	    c.fragmented = record;
	    record.fragment = forge.util.createBuffer();
	    b.read -= 4;

	    // continue
	    return c.process();
	  }

	  // full message now available, clear cache, reset read pointer to
	  // before type and length
	  c.fragmented = null;
	  b.read -= 4;

	  // save the handshake bytes for digestion after handler is found
	  // (include type and length of handshake msg)
	  var bytes = b.bytes(length + 4);

	  // restore read pointer
	  b.read += 4;

	  // handle expected message
	  if(type in hsTable[c.entity][c.expect]) {
	    // initialize server session
	    if(c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {
	      c.handshaking = true;
	      c.session = {
	        version: null,
	        extensions: {
	          server_name: {
	            serverNameList: []
	          }
	        },
	        cipherSuite: null,
	        compressionMethod: null,
	        serverCertificate: null,
	        clientCertificate: null,
	        md5: forge.md.md5.create(),
	        sha1: forge.md.sha1.create()
	      };
	    }

	    /* Update handshake messages digest. Finished and CertificateVerify
	      messages are not digested here. They can't be digested as part of
	      the verify_data that they contain. These messages are manually
	      digested in their handlers. HelloRequest messages are simply never
	      included in the handshake message digest according to spec. */
	    if(type !== tls.HandshakeType.hello_request &&
	      type !== tls.HandshakeType.certificate_verify &&
	      type !== tls.HandshakeType.finished) {
	      c.session.md5.update(bytes);
	      c.session.sha1.update(bytes);
	    }

	    // handle specific handshake type record
	    hsTable[c.entity][c.expect][type](c, record, length);
	  } else {
	    // unexpected record
	    tls.handleUnexpected(c, record);
	  }
	};

	/**
	 * Called when an ApplicationData record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleApplicationData = function(c, record) {
	  // buffer data, notify that its ready
	  c.data.putBuffer(record.fragment);
	  c.dataReady(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when a Heartbeat record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleHeartbeat = function(c, record) {
	  // get the heartbeat type and payload
	  var b = record.fragment;
	  var type = b.getByte();
	  var length = b.getInt16();
	  var payload = b.getBytes(length);

	  if(type === tls.HeartbeatMessageType.heartbeat_request) {
	    // discard request during handshake or if length is too large
	    if(c.handshaking || length > payload.length) {
	      // continue
	      return c.process();
	    }
	    // retransmit payload
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.heartbeat,
	      data: tls.createHeartbeat(
	        tls.HeartbeatMessageType.heartbeat_response, payload)
	    }));
	    tls.flush(c);
	  } else if(type === tls.HeartbeatMessageType.heartbeat_response) {
	    // check payload against expected payload, discard heartbeat if no match
	    if(payload !== c.expectedHeartbeatPayload) {
	      // continue
	      return c.process();
	    }

	    // notify that a valid heartbeat was received
	    if(c.heartbeatReceived) {
	      c.heartbeatReceived(c, forge.util.createBuffer(payload));
	    }
	  }

	  // continue
	  c.process();
	};

	/**
	 * The transistional state tables for receiving TLS records. It maps the
	 * current TLS engine state and a received record to a function to handle the
	 * record and update the state.
	 *
	 * For instance, if the current state is SHE, then the TLS engine is expecting
	 * a ServerHello record. Once a record is received, the handler function is
	 * looked up using the state SHE and the record's content type.
	 *
	 * The resulting function will either be an error handler or a record handler.
	 * The function will take whatever action is appropriate and update the state
	 * for the next record.
	 *
	 * The states are all based on possible server record types. Note that the
	 * client will never specifically expect to receive a HelloRequest or an alert
	 * from the server so there is no state that reflects this. These messages may
	 * occur at any time.
	 *
	 * There are two tables for mapping states because there is a second tier of
	 * types for handshake messages. Once a record with a content type of handshake
	 * is received, the handshake record handler will look up the handshake type in
	 * the secondary map to get its appropriate handler.
	 *
	 * Valid message orders are as follows:
	 *
	 * =======================FULL HANDSHAKE======================
	 * Client                                               Server
	 *
	 * ClientHello                  -------->
	 *                                                 ServerHello
	 *                                                Certificate*
	 *                                          ServerKeyExchange*
	 *                                         CertificateRequest*
	 *                              <--------      ServerHelloDone
	 * Certificate*
	 * ClientKeyExchange
	 * CertificateVerify*
	 * [ChangeCipherSpec]
	 * Finished                     -------->
	 *                                          [ChangeCipherSpec]
	 *                              <--------             Finished
	 * Application Data             <------->     Application Data
	 *
	 * =====================SESSION RESUMPTION=====================
	 * Client                                                Server
	 *
	 * ClientHello                   -------->
	 *                                                  ServerHello
	 *                                           [ChangeCipherSpec]
	 *                               <--------             Finished
	 * [ChangeCipherSpec]
	 * Finished                      -------->
	 * Application Data              <------->     Application Data
	 */
	// client expect states (indicate which records are expected to be received)
	var SHE = 0; // rcv server hello
	var SCE = 1; // rcv server certificate
	var SKE = 2; // rcv server key exchange
	var SCR = 3; // rcv certificate request
	var SHD = 4; // rcv server hello done
	var SCC = 5; // rcv change cipher spec
	var SFI = 6; // rcv finished
	var SAD = 7; // rcv application data
	var SER = 8; // not expecting any messages at this point

	// server expect states
	var CHE = 0; // rcv client hello
	var CCE = 1; // rcv client certificate
	var CKE = 2; // rcv client key exchange
	var CCV = 3; // rcv certificate verify
	var CCC = 4; // rcv change cipher spec
	var CFI = 5; // rcv finished
	var CAD = 6; // rcv application data
	var CER = 7; // not expecting any messages at this point

	// map client current expect state and content type to function
	var __ = tls.handleUnexpected;
	var R0 = tls.handleChangeCipherSpec;
	var R1 = tls.handleAlert;
	var R2 = tls.handleHandshake;
	var R3 = tls.handleApplicationData;
	var R4 = tls.handleHeartbeat;
	var ctTable = [];
	ctTable[tls.ConnectionEnd.client] = [
	//      CC,AL,HS,AD,HB
	/*SHE*/[__,R1,R2,__,R4],
	/*SCE*/[__,R1,R2,__,R4],
	/*SKE*/[__,R1,R2,__,R4],
	/*SCR*/[__,R1,R2,__,R4],
	/*SHD*/[__,R1,R2,__,R4],
	/*SCC*/[R0,R1,__,__,R4],
	/*SFI*/[__,R1,R2,__,R4],
	/*SAD*/[__,R1,R2,R3,R4],
	/*SER*/[__,R1,R2,__,R4]
	];

	// map server current expect state and content type to function
	ctTable[tls.ConnectionEnd.server] = [
	//      CC,AL,HS,AD
	/*CHE*/[__,R1,R2,__,R4],
	/*CCE*/[__,R1,R2,__,R4],
	/*CKE*/[__,R1,R2,__,R4],
	/*CCV*/[__,R1,R2,__,R4],
	/*CCC*/[R0,R1,__,__,R4],
	/*CFI*/[__,R1,R2,__,R4],
	/*CAD*/[__,R1,R2,R3,R4],
	/*CER*/[__,R1,R2,__,R4]
	];

	// map client current expect state and handshake type to function
	var H0 = tls.handleHelloRequest;
	var H1 = tls.handleServerHello;
	var H2 = tls.handleCertificate;
	var H3 = tls.handleServerKeyExchange;
	var H4 = tls.handleCertificateRequest;
	var H5 = tls.handleServerHelloDone;
	var H6 = tls.handleFinished;
	var hsTable = [];
	hsTable[tls.ConnectionEnd.client] = [
	//      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI
	/*SHE*/[__,__,H1,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SCE*/[H0,__,__,__,__,__,__,__,__,__,__,H2,H3,H4,H5,__,__,__,__,__,__],
	/*SKE*/[H0,__,__,__,__,__,__,__,__,__,__,__,H3,H4,H5,__,__,__,__,__,__],
	/*SCR*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,H4,H5,__,__,__,__,__,__],
	/*SHD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,H5,__,__,__,__,__,__],
	/*SCC*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SFI*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
	/*SAD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SER*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
	];

	// map server current expect state and handshake type to function
	// Note: CAD[CH] does not map to FB because renegotation is prohibited
	var H7 = tls.handleClientHello;
	var H8 = tls.handleClientKeyExchange;
	var H9 = tls.handleCertificateVerify;
	hsTable[tls.ConnectionEnd.server] = [
	//      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI
	/*CHE*/[__,H7,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CCE*/[__,__,__,__,__,__,__,__,__,__,__,H2,__,__,__,__,__,__,__,__,__],
	/*CKE*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H8,__,__,__,__],
	/*CCV*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H9,__,__,__,__,__],
	/*CCC*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CFI*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
	/*CAD*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CER*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
	];

	/**
	 * Generates the master_secret and keys using the given security parameters.
	 *
	 * The security parameters for a TLS connection state are defined as such:
	 *
	 * struct {
	 *   ConnectionEnd          entity;
	 *   PRFAlgorithm           prf_algorithm;
	 *   BulkCipherAlgorithm    bulk_cipher_algorithm;
	 *   CipherType             cipher_type;
	 *   uint8                  enc_key_length;
	 *   uint8                  block_length;
	 *   uint8                  fixed_iv_length;
	 *   uint8                  record_iv_length;
	 *   MACAlgorithm           mac_algorithm;
	 *   uint8                  mac_length;
	 *   uint8                  mac_key_length;
	 *   CompressionMethod      compression_algorithm;
	 *   opaque                 master_secret[48];
	 *   opaque                 client_random[32];
	 *   opaque                 server_random[32];
	 * } SecurityParameters;
	 *
	 * Note that this definition is from TLS 1.2. In TLS 1.0 some of these
	 * parameters are ignored because, for instance, the PRFAlgorithm is a
	 * builtin-fixed algorithm combining iterations of MD5 and SHA-1 in TLS 1.0.
	 *
	 * The Record Protocol requires an algorithm to generate keys required by the
	 * current connection state.
	 *
	 * The master secret is expanded into a sequence of secure bytes, which is then
	 * split to a client write MAC key, a server write MAC key, a client write
	 * encryption key, and a server write encryption key. In TLS 1.0 a client write
	 * IV and server write IV are also generated. Each of these is generated from
	 * the byte sequence in that order. Unused values are empty. In TLS 1.2, some
	 * AEAD ciphers may additionally require a client write IV and a server write
	 * IV (see Section 6.2.3.3).
	 *
	 * When keys, MAC keys, and IVs are generated, the master secret is used as an
	 * entropy source.
	 *
	 * To generate the key material, compute:
	 *
	 * master_secret = PRF(pre_master_secret, "master secret",
	 *                     ClientHello.random + ServerHello.random)
	 *
	 * key_block = PRF(SecurityParameters.master_secret,
	 *                 "key expansion",
	 *                 SecurityParameters.server_random +
	 *                 SecurityParameters.client_random);
	 *
	 * until enough output has been generated. Then, the key_block is
	 * partitioned as follows:
	 *
	 * client_write_MAC_key[SecurityParameters.mac_key_length]
	 * server_write_MAC_key[SecurityParameters.mac_key_length]
	 * client_write_key[SecurityParameters.enc_key_length]
	 * server_write_key[SecurityParameters.enc_key_length]
	 * client_write_IV[SecurityParameters.fixed_iv_length]
	 * server_write_IV[SecurityParameters.fixed_iv_length]
	 *
	 * In TLS 1.2, the client_write_IV and server_write_IV are only generated for
	 * implicit nonce techniques as described in Section 3.2.1 of [AEAD]. This
	 * implementation uses TLS 1.0 so IVs are generated.
	 *
	 * Implementation note: The currently defined cipher suite which requires the
	 * most material is AES_256_CBC_SHA256. It requires 2 x 32 byte keys and 2 x 32
	 * byte MAC keys, for a total 128 bytes of key material. In TLS 1.0 it also
	 * requires 2 x 16 byte IVs, so it actually takes 160 bytes of key material.
	 *
	 * @param c the connection.
	 * @param sp the security parameters to use.
	 *
	 * @return the security keys.
	 */
	tls.generateKeys = function(c, sp) {
	  // TLS_RSA_WITH_AES_128_CBC_SHA (required to be compliant with TLS 1.2) &
	  // TLS_RSA_WITH_AES_256_CBC_SHA are the only cipher suites implemented
	  // at present

	  // TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA is required to be compliant with
	  // TLS 1.0 but we don't care right now because AES is better and we have
	  // an implementation for it

	  // TODO: TLS 1.2 implementation
	  /*
	  // determine the PRF
	  var prf;
	  switch(sp.prf_algorithm) {
	  case tls.PRFAlgorithm.tls_prf_sha256:
	    prf = prf_sha256;
	    break;
	  default:
	    // should never happen
	    throw new Error('Invalid PRF');
	  }
	  */

	  // TLS 1.0/1.1 implementation
	  var prf = prf_TLS1;

	  // concatenate server and client random
	  var random = sp.client_random + sp.server_random;

	  // only create master secret if session is new
	  if(!c.session.resuming) {
	    // create master secret, clean up pre-master secret
	    sp.master_secret = prf(
	      sp.pre_master_secret, 'master secret', random, 48).bytes();
	    sp.pre_master_secret = null;
	  }

	  // generate the amount of key material needed
	  random = sp.server_random + sp.client_random;
	  var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;

	  // include IV for TLS/1.0
	  var tls10 = (c.version.major === tls.Versions.TLS_1_0.major &&
	    c.version.minor === tls.Versions.TLS_1_0.minor);
	  if(tls10) {
	    length += 2 * sp.fixed_iv_length;
	  }
	  var km = prf(sp.master_secret, 'key expansion', random, length);

	  // split the key material into the MAC and encryption keys
	  var rval = {
	    client_write_MAC_key: km.getBytes(sp.mac_key_length),
	    server_write_MAC_key: km.getBytes(sp.mac_key_length),
	    client_write_key: km.getBytes(sp.enc_key_length),
	    server_write_key: km.getBytes(sp.enc_key_length)
	  };

	  // include TLS 1.0 IVs
	  if(tls10) {
	    rval.client_write_IV = km.getBytes(sp.fixed_iv_length);
	    rval.server_write_IV = km.getBytes(sp.fixed_iv_length);
	  }

	  return rval;
	};

	/**
	 * Creates a new initialized TLS connection state. A connection state has
	 * a read mode and a write mode.
	 *
	 * compression state:
	 *   The current state of the compression algorithm.
	 *
	 * cipher state:
	 *   The current state of the encryption algorithm. This will consist of the
	 *   scheduled key for that connection. For stream ciphers, this will also
	 *   contain whatever state information is necessary to allow the stream to
	 *   continue to encrypt or decrypt data.
	 *
	 * MAC key:
	 *   The MAC key for the connection.
	 *
	 * sequence number:
	 *   Each connection state contains a sequence number, which is maintained
	 *   separately for read and write states. The sequence number MUST be set to
	 *   zero whenever a connection state is made the active state. Sequence
	 *   numbers are of type uint64 and may not exceed 2^64-1. Sequence numbers do
	 *   not wrap. If a TLS implementation would need to wrap a sequence number,
	 *   it must renegotiate instead. A sequence number is incremented after each
	 *   record: specifically, the first record transmitted under a particular
	 *   connection state MUST use sequence number 0.
	 *
	 * @param c the connection.
	 *
	 * @return the new initialized TLS connection state.
	 */
	tls.createConnectionState = function(c) {
	  var client = (c.entity === tls.ConnectionEnd.client);

	  var createMode = function() {
	    var mode = {
	      // two 32-bit numbers, first is most significant
	      sequenceNumber: [0, 0],
	      macKey: null,
	      macLength: 0,
	      macFunction: null,
	      cipherState: null,
	      cipherFunction: function(record) {return true;},
	      compressionState: null,
	      compressFunction: function(record) {return true;},
	      updateSequenceNumber: function() {
	        if(mode.sequenceNumber[1] === 0xFFFFFFFF) {
	          mode.sequenceNumber[1] = 0;
	          ++mode.sequenceNumber[0];
	        } else {
	          ++mode.sequenceNumber[1];
	        }
	      }
	    };
	    return mode;
	  };
	  var state = {
	    read: createMode(),
	    write: createMode()
	  };

	  // update function in read mode will decrypt then decompress a record
	  state.read.update = function(c, record) {
	    if(!state.read.cipherFunction(record, state.read)) {
	      c.error(c, {
	        message: 'Could not decrypt record or bad MAC.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          // doesn't matter if decryption failed or MAC was
	          // invalid, return the same error so as not to reveal
	          // which one occurred
	          description: tls.Alert.Description.bad_record_mac
	        }
	      });
	    } else if(!state.read.compressFunction(c, record, state.read)) {
	      c.error(c, {
	        message: 'Could not decompress record.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.decompression_failure
	        }
	      });
	    }
	    return !c.fail;
	  };

	  // update function in write mode will compress then encrypt a record
	  state.write.update = function(c, record) {
	    if(!state.write.compressFunction(c, record, state.write)) {
	      // error, but do not send alert since it would require
	      // compression as well
	      c.error(c, {
	        message: 'Could not compress record.',
	        send: false,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    } else if(!state.write.cipherFunction(record, state.write)) {
	      // error, but do not send alert since it would require
	      // encryption as well
	      c.error(c, {
	        message: 'Could not encrypt record.',
	        send: false,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    }
	    return !c.fail;
	  };

	  // handle security parameters
	  if(c.session) {
	    var sp = c.session.sp;
	    c.session.cipherSuite.initSecurityParameters(sp);

	    // generate keys
	    sp.keys = tls.generateKeys(c, sp);
	    state.read.macKey = client ?
	      sp.keys.server_write_MAC_key : sp.keys.client_write_MAC_key;
	    state.write.macKey = client ?
	      sp.keys.client_write_MAC_key : sp.keys.server_write_MAC_key;

	    // cipher suite setup
	    c.session.cipherSuite.initConnectionState(state, c, sp);

	    // compression setup
	    switch(sp.compression_algorithm) {
	    case tls.CompressionMethod.none:
	      break;
	    case tls.CompressionMethod.deflate:
	      state.read.compressFunction = inflate;
	      state.write.compressFunction = deflate;
	      break;
	    default:
	      throw new Error('Unsupported compression algorithm.');
	    }
	  }

	  return state;
	};

	/**
	 * Creates a Random structure.
	 *
	 * struct {
	 *   uint32 gmt_unix_time;
	 *   opaque random_bytes[28];
	 * } Random;
	 *
	 * gmt_unix_time:
	 *   The current time and date in standard UNIX 32-bit format (seconds since
	 *   the midnight starting Jan 1, 1970, UTC, ignoring leap seconds) according
	 *   to the sender's internal clock. Clocks are not required to be set
	 *   correctly by the basic TLS protocol; higher-level or application
	 *   protocols may define additional requirements. Note that, for historical
	 *   reasons, the data element is named using GMT, the predecessor of the
	 *   current worldwide time base, UTC.
	 * random_bytes:
	 *   28 bytes generated by a secure random number generator.
	 *
	 * @return the Random structure as a byte array.
	 */
	tls.createRandom = function() {
	  // get UTC milliseconds
	  var d = new Date();
	  var utc = +d + d.getTimezoneOffset() * 60000;
	  var rval = forge.util.createBuffer();
	  rval.putInt32(utc);
	  rval.putBytes(forge.random.getBytes(28));
	  return rval;
	};

	/**
	 * Creates a TLS record with the given type and data.
	 *
	 * @param c the connection.
	 * @param options:
	 *   type: the record type.
	 *   data: the plain text data in a byte buffer.
	 *
	 * @return the created record.
	 */
	tls.createRecord = function(c, options) {
	  if(!options.data) {
	    return null;
	  }
	  var record = {
	    type: options.type,
	    version: {
	      major: c.version.major,
	      minor: c.version.minor
	    },
	    length: options.data.length(),
	    fragment: options.data
	  };
	  return record;
	};

	/**
	 * Creates a TLS alert record.
	 *
	 * @param c the connection.
	 * @param alert:
	 *   level: the TLS alert level.
	 *   description: the TLS alert description.
	 *
	 * @return the created alert record.
	 */
	tls.createAlert = function(c, alert) {
	  var b = forge.util.createBuffer();
	  b.putByte(alert.level);
	  b.putByte(alert.description);
	  return tls.createRecord(c, {
	    type: tls.ContentType.alert,
	    data: b
	  });
	};

	/* The structure of a TLS handshake message.
	 *
	 * struct {
	 *    HandshakeType msg_type;    // handshake type
	 *    uint24 length;             // bytes in message
	 *    select(HandshakeType) {
	 *       case hello_request:       HelloRequest;
	 *       case client_hello:        ClientHello;
	 *       case server_hello:        ServerHello;
	 *       case certificate:         Certificate;
	 *       case server_key_exchange: ServerKeyExchange;
	 *       case certificate_request: CertificateRequest;
	 *       case server_hello_done:   ServerHelloDone;
	 *       case certificate_verify:  CertificateVerify;
	 *       case client_key_exchange: ClientKeyExchange;
	 *       case finished:            Finished;
	 *    } body;
	 * } Handshake;
	 */

	/**
	 * Creates a ClientHello message.
	 *
	 * opaque SessionID<0..32>;
	 * enum { null(0), deflate(1), (255) } CompressionMethod;
	 * uint8 CipherSuite[2];
	 *
	 * struct {
	 *   ProtocolVersion client_version;
	 *   Random random;
	 *   SessionID session_id;
	 *   CipherSuite cipher_suites<2..2^16-2>;
	 *   CompressionMethod compression_methods<1..2^8-1>;
	 *   select(extensions_present) {
	 *     case false:
	 *       struct {};
	 *     case true:
	 *       Extension extensions<0..2^16-1>;
	 *   };
	 * } ClientHello;
	 *
	 * The extension format for extended client hellos and server hellos is:
	 *
	 * struct {
	 *   ExtensionType extension_type;
	 *   opaque extension_data<0..2^16-1>;
	 * } Extension;
	 *
	 * Here:
	 *
	 * - "extension_type" identifies the particular extension type.
	 * - "extension_data" contains information specific to the particular
	 * extension type.
	 *
	 * The extension types defined in this document are:
	 *
	 * enum {
	 *   server_name(0), max_fragment_length(1),
	 *   client_certificate_url(2), trusted_ca_keys(3),
	 *   truncated_hmac(4), status_request(5), (65535)
	 * } ExtensionType;
	 *
	 * @param c the connection.
	 *
	 * @return the ClientHello byte buffer.
	 */
	tls.createClientHello = function(c) {
	  // save hello version
	  c.session.clientHelloVersion = {
	    major: c.version.major,
	    minor: c.version.minor
	  };

	  // create supported cipher suites
	  var cipherSuites = forge.util.createBuffer();
	  for(var i = 0; i < c.cipherSuites.length; ++i) {
	    var cs = c.cipherSuites[i];
	    cipherSuites.putByte(cs.id[0]);
	    cipherSuites.putByte(cs.id[1]);
	  }
	  var cSuites = cipherSuites.length();

	  // create supported compression methods, null always supported, but
	  // also support deflate if connection has inflate and deflate methods
	  var compressionMethods = forge.util.createBuffer();
	  compressionMethods.putByte(tls.CompressionMethod.none);
	  // FIXME: deflate support disabled until issues with raw deflate data
	  // without zlib headers are resolved
	  /*
	  if(c.inflate !== null && c.deflate !== null) {
	    compressionMethods.putByte(tls.CompressionMethod.deflate);
	  }
	  */
	  var cMethods = compressionMethods.length();

	  // create TLS SNI (server name indication) extension if virtual host
	  // has been specified, see RFC 3546
	  var extensions = forge.util.createBuffer();
	  if(c.virtualHost) {
	    // create extension struct
	    var ext = forge.util.createBuffer();
	    ext.putByte(0x00); // type server_name (ExtensionType is 2 bytes)
	    ext.putByte(0x00);

	    /* In order to provide the server name, clients MAY include an
	     * extension of type "server_name" in the (extended) client hello.
	     * The "extension_data" field of this extension SHALL contain
	     * "ServerNameList" where:
	     *
	     * struct {
	     *   NameType name_type;
	     *   select(name_type) {
	     *     case host_name: HostName;
	     *   } name;
	     * } ServerName;
	     *
	     * enum {
	     *   host_name(0), (255)
	     * } NameType;
	     *
	     * opaque HostName<1..2^16-1>;
	     *
	     * struct {
	     *   ServerName server_name_list<1..2^16-1>
	     * } ServerNameList;
	     */
	    var serverName = forge.util.createBuffer();
	    serverName.putByte(0x00); // type host_name
	    writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));

	    // ServerNameList is in extension_data
	    var snList = forge.util.createBuffer();
	    writeVector(snList, 2, serverName);
	    writeVector(ext, 2, snList);
	    extensions.putBuffer(ext);
	  }
	  var extLength = extensions.length();
	  if(extLength > 0) {
	    // add extension vector length
	    extLength += 2;
	  }

	  // determine length of the handshake message
	  // cipher suites and compression methods size will need to be
	  // updated if more get added to the list
	  var sessionId = c.session.id;
	  var length =
	    sessionId.length + 1 + // session ID vector
	    2 +                    // version (major + minor)
	    4 + 28 +               // random time and random bytes
	    2 + cSuites +          // cipher suites vector
	    1 + cMethods +         // compression methods vector
	    extLength;             // extensions vector

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.client_hello);
	  rval.putInt24(length);                     // handshake length
	  rval.putByte(c.version.major);             // major version
	  rval.putByte(c.version.minor);             // minor version
	  rval.putBytes(c.session.sp.client_random); // random time + bytes
	  writeVector(rval, 1, forge.util.createBuffer(sessionId));
	  writeVector(rval, 2, cipherSuites);
	  writeVector(rval, 1, compressionMethods);
	  if(extLength > 0) {
	    writeVector(rval, 2, extensions);
	  }
	  return rval;
	};

	/**
	 * Creates a ServerHello message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerHello byte buffer.
	 */
	tls.createServerHello = function(c) {
	  // determine length of the handshake message
	  var sessionId = c.session.id;
	  var length =
	    sessionId.length + 1 + // session ID vector
	    2 +                    // version (major + minor)
	    4 + 28 +               // random time and random bytes
	    2 +                    // chosen cipher suite
	    1;                     // chosen compression method

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.server_hello);
	  rval.putInt24(length);                     // handshake length
	  rval.putByte(c.version.major);             // major version
	  rval.putByte(c.version.minor);             // minor version
	  rval.putBytes(c.session.sp.server_random); // random time + bytes
	  writeVector(rval, 1, forge.util.createBuffer(sessionId));
	  rval.putByte(c.session.cipherSuite.id[0]);
	  rval.putByte(c.session.cipherSuite.id[1]);
	  rval.putByte(c.session.compressionMethod);
	  return rval;
	};

	/**
	 * Creates a Certificate message.
	 *
	 * When this message will be sent:
	 *   This is the first message the client can send after receiving a server
	 *   hello done message and the first message the server can send after
	 *   sending a ServerHello. This client message is only sent if the server
	 *   requests a certificate. If no suitable certificate is available, the
	 *   client should send a certificate message containing no certificates. If
	 *   client authentication is required by the server for the handshake to
	 *   continue, it may respond with a fatal handshake failure alert.
	 *
	 * opaque ASN.1Cert<1..2^24-1>;
	 *
	 * struct {
	 *   ASN.1Cert certificate_list<0..2^24-1>;
	 * } Certificate;
	 *
	 * @param c the connection.
	 *
	 * @return the Certificate byte buffer.
	 */
	tls.createCertificate = function(c) {
	  // TODO: check certificate request to ensure types are supported

	  // get a certificate (a certificate as a PEM string)
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var cert = null;
	  if(c.getCertificate) {
	    var hint;
	    if(client) {
	      hint = c.session.certificateRequest;
	    } else {
	      hint = c.session.extensions.server_name.serverNameList;
	    }
	    cert = c.getCertificate(c, hint);
	  }

	  // buffer to hold certificate list
	  var certList = forge.util.createBuffer();
	  if(cert !== null) {
	    try {
	      // normalize cert to a chain of certificates
	      if(!forge.util.isArray(cert)) {
	        cert = [cert];
	      }
	      var asn1 = null;
	      for(var i = 0; i < cert.length; ++i) {
	        var msg = forge.pem.decode(cert[i])[0];
	        if(msg.type !== 'CERTIFICATE' &&
	          msg.type !== 'X509 CERTIFICATE' &&
	          msg.type !== 'TRUSTED CERTIFICATE') {
	          var error = new Error('Could not convert certificate from PEM; PEM ' +
	            'header type is not "CERTIFICATE", "X509 CERTIFICATE", or ' +
	            '"TRUSTED CERTIFICATE".');
	          error.headerType = msg.type;
	          throw error;
	        }
	        if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	          throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
	        }

	        var der = forge.util.createBuffer(msg.body);
	        if(asn1 === null) {
	          asn1 = forge.asn1.fromDer(der.bytes(), false);
	        }

	        // certificate entry is itself a vector with 3 length bytes
	        var certBuffer = forge.util.createBuffer();
	        writeVector(certBuffer, 3, der);

	        // add cert vector to cert list vector
	        certList.putBuffer(certBuffer);
	      }

	      // save certificate
	      cert = forge.pki.certificateFromAsn1(asn1);
	      if(client) {
	        c.session.clientCertificate = cert;
	      } else {
	        c.session.serverCertificate = cert;
	      }
	    } catch(ex) {
	      return c.error(c, {
	        message: 'Could not send certificate list.',
	        cause: ex,
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.bad_certificate
	        }
	      });
	    }
	  }

	  // determine length of the handshake message
	  var length = 3 + certList.length(); // cert list vector

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate);
	  rval.putInt24(length);
	  writeVector(rval, 3, certList);
	  return rval;
	};

	/**
	 * Creates a ClientKeyExchange message.
	 *
	 * When this message will be sent:
	 *   This message is always sent by the client. It will immediately follow the
	 *   client certificate message, if it is sent. Otherwise it will be the first
	 *   message sent by the client after it receives the server hello done
	 *   message.
	 *
	 * Meaning of this message:
	 *   With this message, the premaster secret is set, either though direct
	 *   transmission of the RSA-encrypted secret, or by the transmission of
	 *   Diffie-Hellman parameters which will allow each side to agree upon the
	 *   same premaster secret. When the key exchange method is DH_RSA or DH_DSS,
	 *   client certification has been requested, and the client was able to
	 *   respond with a certificate which contained a Diffie-Hellman public key
	 *   whose parameters (group and generator) matched those specified by the
	 *   server in its certificate, this message will not contain any data.
	 *
	 * Meaning of this message:
	 *   If RSA is being used for key agreement and authentication, the client
	 *   generates a 48-byte premaster secret, encrypts it using the public key
	 *   from the server's certificate or the temporary RSA key provided in a
	 *   server key exchange message, and sends the result in an encrypted
	 *   premaster secret message. This structure is a variant of the client
	 *   key exchange message, not a message in itself.
	 *
	 * struct {
	 *   select(KeyExchangeAlgorithm) {
	 *     case rsa: EncryptedPreMasterSecret;
	 *     case diffie_hellman: ClientDiffieHellmanPublic;
	 *   } exchange_keys;
	 * } ClientKeyExchange;
	 *
	 * struct {
	 *   ProtocolVersion client_version;
	 *   opaque random[46];
	 * } PreMasterSecret;
	 *
	 * struct {
	 *   public-key-encrypted PreMasterSecret pre_master_secret;
	 * } EncryptedPreMasterSecret;
	 *
	 * A public-key-encrypted element is encoded as a vector <0..2^16-1>.
	 *
	 * @param c the connection.
	 *
	 * @return the ClientKeyExchange byte buffer.
	 */
	tls.createClientKeyExchange = function(c) {
	  // create buffer to encrypt
	  var b = forge.util.createBuffer();

	  // add highest client-supported protocol to help server avoid version
	  // rollback attacks
	  b.putByte(c.session.clientHelloVersion.major);
	  b.putByte(c.session.clientHelloVersion.minor);

	  // generate and add 46 random bytes
	  b.putBytes(forge.random.getBytes(46));

	  // save pre-master secret
	  var sp = c.session.sp;
	  sp.pre_master_secret = b.getBytes();

	  // RSA-encrypt the pre-master secret
	  var key = c.session.serverCertificate.publicKey;
	  b = key.encrypt(sp.pre_master_secret);

	  /* Note: The encrypted pre-master secret will be stored in a
	    public-key-encrypted opaque vector that has the length prefixed using
	    2 bytes, so include those 2 bytes in the handshake message length. This
	    is done as a minor optimization instead of calling writeVector(). */

	  // determine length of the handshake message
	  var length = b.length + 2;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.client_key_exchange);
	  rval.putInt24(length);
	  // add vector length bytes
	  rval.putInt16(b.length);
	  rval.putBytes(b);
	  return rval;
	};

	/**
	 * Creates a ServerKeyExchange message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerKeyExchange byte buffer.
	 */
	tls.createServerKeyExchange = function(c) {
	  // this implementation only supports RSA, no Diffie-Hellman support,
	  // so this record is empty

	  // determine length of the handshake message
	  var length = 0;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  if(length > 0) {
	    rval.putByte(tls.HandshakeType.server_key_exchange);
	    rval.putInt24(length);
	  }
	  return rval;
	};

	/**
	 * Gets the signed data used to verify a client-side certificate. See
	 * tls.createCertificateVerify() for details.
	 *
	 * @param c the connection.
	 * @param callback the callback to call once the signed data is ready.
	 */
	tls.getClientSignature = function(c, callback) {
	  // generate data to RSA encrypt
	  var b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());
	  b = b.getBytes();

	  // create default signing function as necessary
	  c.getSignature = c.getSignature || function(c, b, callback) {
	    // do rsa encryption, call callback
	    var privateKey = null;
	    if(c.getPrivateKey) {
	      try {
	        privateKey = c.getPrivateKey(c, c.session.clientCertificate);
	        privateKey = forge.pki.privateKeyFromPem(privateKey);
	      } catch(ex) {
	        c.error(c, {
	          message: 'Could not get private key.',
	          cause: ex,
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.internal_error
	          }
	        });
	      }
	    }
	    if(privateKey === null) {
	      c.error(c, {
	        message: 'No private key set.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    } else {
	      b = privateKey.sign(b, null);
	    }
	    callback(c, b);
	  };

	  // get client signature
	  c.getSignature(c, b, callback);
	};

	/**
	 * Creates a CertificateVerify message.
	 *
	 * Meaning of this message:
	 *   This structure conveys the client's Diffie-Hellman public value
	 *   (Yc) if it was not already included in the client's certificate.
	 *   The encoding used for Yc is determined by the enumerated
	 *   PublicValueEncoding. This structure is a variant of the client
	 *   key exchange message, not a message in itself.
	 *
	 * When this message will be sent:
	 *   This message is used to provide explicit verification of a client
	 *   certificate. This message is only sent following a client
	 *   certificate that has signing capability (i.e. all certificates
	 *   except those containing fixed Diffie-Hellman parameters). When
	 *   sent, it will immediately follow the client key exchange message.
	 *
	 * struct {
	 *   Signature signature;
	 * } CertificateVerify;
	 *
	 * CertificateVerify.signature.md5_hash
	 *   MD5(handshake_messages);
	 *
	 * Certificate.signature.sha_hash
	 *   SHA(handshake_messages);
	 *
	 * Here handshake_messages refers to all handshake messages sent or
	 * received starting at client hello up to but not including this
	 * message, including the type and length fields of the handshake
	 * messages.
	 *
	 * select(SignatureAlgorithm) {
	 *   case anonymous: struct { };
	 *   case rsa:
	 *     digitally-signed struct {
	 *       opaque md5_hash[16];
	 *       opaque sha_hash[20];
	 *     };
	 *   case dsa:
	 *     digitally-signed struct {
	 *       opaque sha_hash[20];
	 *     };
	 * } Signature;
	 *
	 * In digital signing, one-way hash functions are used as input for a
	 * signing algorithm. A digitally-signed element is encoded as an opaque
	 * vector <0..2^16-1>, where the length is specified by the signing
	 * algorithm and key.
	 *
	 * In RSA signing, a 36-byte structure of two hashes (one SHA and one
	 * MD5) is signed (encrypted with the private key). It is encoded with
	 * PKCS #1 block type 0 or type 1 as described in [PKCS1].
	 *
	 * In DSS, the 20 bytes of the SHA hash are run directly through the
	 * Digital Signing Algorithm with no additional hashing.
	 *
	 * @param c the connection.
	 * @param signature the signature to include in the message.
	 *
	 * @return the CertificateVerify byte buffer.
	 */
	tls.createCertificateVerify = function(c, signature) {
	  /* Note: The signature will be stored in a "digitally-signed" opaque
	    vector that has the length prefixed using 2 bytes, so include those
	    2 bytes in the handshake message length. This is done as a minor
	    optimization instead of calling writeVector(). */

	  // determine length of the handshake message
	  var length = signature.length + 2;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate_verify);
	  rval.putInt24(length);
	  // add vector length bytes
	  rval.putInt16(signature.length);
	  rval.putBytes(signature);
	  return rval;
	};

	/**
	 * Creates a CertificateRequest message.
	 *
	 * @param c the connection.
	 *
	 * @return the CertificateRequest byte buffer.
	 */
	tls.createCertificateRequest = function(c) {
	  // TODO: support other certificate types
	  var certTypes = forge.util.createBuffer();

	  // common RSA certificate type
	  certTypes.putByte(0x01);

	  // TODO: verify that this data format is correct
	  // add distinguished names from CA store
	  var cAs = forge.util.createBuffer();
	  for(var key in c.caStore.certs) {
	    var cert = c.caStore.certs[key];
	    var dn = forge.pki.distinguishedNameToAsn1(cert.subject);
	    cAs.putBuffer(forge.asn1.toDer(dn));
	  }

	  // TODO: TLS 1.2+ has a different format

	  // determine length of the handshake message
	  var length =
	    1 + certTypes.length() +
	    2 + cAs.length();

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate_request);
	  rval.putInt24(length);
	  writeVector(rval, 1, certTypes);
	  writeVector(rval, 2, cAs);
	  return rval;
	};

	/**
	 * Creates a ServerHelloDone message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerHelloDone byte buffer.
	 */
	tls.createServerHelloDone = function(c) {
	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.server_hello_done);
	  rval.putInt24(0);
	  return rval;
	};

	/**
	 * Creates a ChangeCipherSpec message.
	 *
	 * The change cipher spec protocol exists to signal transitions in
	 * ciphering strategies. The protocol consists of a single message,
	 * which is encrypted and compressed under the current (not the pending)
	 * connection state. The message consists of a single byte of value 1.
	 *
	 * struct {
	 *   enum { change_cipher_spec(1), (255) } type;
	 * } ChangeCipherSpec;
	 *
	 * @return the ChangeCipherSpec byte buffer.
	 */
	tls.createChangeCipherSpec = function() {
	  var rval = forge.util.createBuffer();
	  rval.putByte(0x01);
	  return rval;
	};

	/**
	 * Creates a Finished message.
	 *
	 * struct {
	 *   opaque verify_data[12];
	 * } Finished;
	 *
	 * verify_data
	 *   PRF(master_secret, finished_label, MD5(handshake_messages) +
	 *   SHA-1(handshake_messages)) [0..11];
	 *
	 * finished_label
	 *   For Finished messages sent by the client, the string "client
	 *   finished". For Finished messages sent by the server, the
	 *   string "server finished".
	 *
	 * handshake_messages
	 *   All of the data from all handshake messages up to but not
	 *   including this message. This is only data visible at the
	 *   handshake layer and does not include record layer headers.
	 *   This is the concatenation of all the Handshake structures as
	 *   defined in 7.4 exchanged thus far.
	 *
	 * @param c the connection.
	 *
	 * @return the Finished byte buffer.
	 */
	tls.createFinished = function(c) {
	  // generate verify_data
	  var b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());

	  // TODO: determine prf function and verify length for TLS 1.2
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var sp = c.session.sp;
	  var vdl = 12;
	  var prf = prf_TLS1;
	  var label = client ? 'client finished' : 'server finished';
	  b = prf(sp.master_secret, label, b.getBytes(), vdl);

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.finished);
	  rval.putInt24(b.length());
	  rval.putBuffer(b);
	  return rval;
	};

	/**
	 * Creates a HeartbeatMessage (See RFC 6520).
	 *
	 * struct {
	 *   HeartbeatMessageType type;
	 *   uint16 payload_length;
	 *   opaque payload[HeartbeatMessage.payload_length];
	 *   opaque padding[padding_length];
	 * } HeartbeatMessage;
	 *
	 * The total length of a HeartbeatMessage MUST NOT exceed 2^14 or
	 * max_fragment_length when negotiated as defined in [RFC6066].
	 *
	 * type: The message type, either heartbeat_request or heartbeat_response.
	 *
	 * payload_length: The length of the payload.
	 *
	 * payload: The payload consists of arbitrary content.
	 *
	 * padding: The padding is random content that MUST be ignored by the
	 *   receiver. The length of a HeartbeatMessage is TLSPlaintext.length
	 *   for TLS and DTLSPlaintext.length for DTLS. Furthermore, the
	 *   length of the type field is 1 byte, and the length of the
	 *   payload_length is 2. Therefore, the padding_length is
	 *   TLSPlaintext.length - payload_length - 3 for TLS and
	 *   DTLSPlaintext.length - payload_length - 3 for DTLS. The
	 *   padding_length MUST be at least 16.
	 *
	 * The sender of a HeartbeatMessage MUST use a random padding of at
	 * least 16 bytes. The padding of a received HeartbeatMessage message
	 * MUST be ignored.
	 *
	 * If the payload_length of a received HeartbeatMessage is too large,
	 * the received HeartbeatMessage MUST be discarded silently.
	 *
	 * @param c the connection.
	 * @param type the tls.HeartbeatMessageType.
	 * @param payload the heartbeat data to send as the payload.
	 * @param [payloadLength] the payload length to use, defaults to the
	 *          actual payload length.
	 *
	 * @return the HeartbeatRequest byte buffer.
	 */
	tls.createHeartbeat = function(type, payload, payloadLength) {
	  if(typeof payloadLength === 'undefined') {
	    payloadLength = payload.length;
	  }
	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(type);               // heartbeat message type
	  rval.putInt16(payloadLength);     // payload length
	  rval.putBytes(payload);           // payload
	  // padding
	  var plaintextLength = rval.length();
	  var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);
	  rval.putBytes(forge.random.getBytes(paddingLength));
	  return rval;
	};

	/**
	 * Fragments, compresses, encrypts, and queues a record for delivery.
	 *
	 * @param c the connection.
	 * @param record the record to queue.
	 */
	tls.queue = function(c, record) {
	  // error during record creation
	  if(!record) {
	    return;
	  }

	  // if the record is a handshake record, update handshake hashes
	  if(record.type === tls.ContentType.handshake) {
	    var bytes = record.fragment.bytes();
	    c.session.md5.update(bytes);
	    c.session.sha1.update(bytes);
	    bytes = null;
	  }

	  // handle record fragmentation
	  var records;
	  if(record.fragment.length() <= tls.MaxFragment) {
	    records = [record];
	  } else {
	    // fragment data as long as it is too long
	    records = [];
	    var data = record.fragment.bytes();
	    while(data.length > tls.MaxFragment) {
	      records.push(tls.createRecord(c, {
	        type: record.type,
	        data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))
	      }));
	      data = data.slice(tls.MaxFragment);
	    }
	    // add last record
	    if(data.length > 0) {
	      records.push(tls.createRecord(c, {
	        type: record.type,
	        data: forge.util.createBuffer(data)
	      }));
	    }
	  }

	  // compress and encrypt all fragmented records
	  for(var i = 0; i < records.length && !c.fail; ++i) {
	    // update the record using current write state
	    var rec = records[i];
	    var s = c.state.current.write;
	    if(s.update(c, rec)) {
	      // store record
	      c.records.push(rec);
	    }
	  }
	};

	/**
	 * Flushes all queued records to the output buffer and calls the
	 * tlsDataReady() handler on the given connection.
	 *
	 * @param c the connection.
	 *
	 * @return true on success, false on failure.
	 */
	tls.flush = function(c) {
	  for(var i = 0; i < c.records.length; ++i) {
	    var record = c.records[i];

	    // add record header and fragment
	    c.tlsData.putByte(record.type);
	    c.tlsData.putByte(record.version.major);
	    c.tlsData.putByte(record.version.minor);
	    c.tlsData.putInt16(record.fragment.length());
	    c.tlsData.putBuffer(c.records[i].fragment);
	  }
	  c.records = [];
	  return c.tlsDataReady(c);
	};

	/**
	 * Maps a pki.certificateError to a tls.Alert.Description.
	 *
	 * @param error the error to map.
	 *
	 * @return the alert description.
	 */
	var _certErrorToAlertDesc = function(error) {
	  switch(error) {
	  case true:
	    return true;
	  case forge.pki.certificateError.bad_certificate:
	    return tls.Alert.Description.bad_certificate;
	  case forge.pki.certificateError.unsupported_certificate:
	    return tls.Alert.Description.unsupported_certificate;
	  case forge.pki.certificateError.certificate_revoked:
	    return tls.Alert.Description.certificate_revoked;
	  case forge.pki.certificateError.certificate_expired:
	    return tls.Alert.Description.certificate_expired;
	  case forge.pki.certificateError.certificate_unknown:
	    return tls.Alert.Description.certificate_unknown;
	  case forge.pki.certificateError.unknown_ca:
	    return tls.Alert.Description.unknown_ca;
	  default:
	    return tls.Alert.Description.bad_certificate;
	  }
	};

	/**
	 * Maps a tls.Alert.Description to a pki.certificateError.
	 *
	 * @param desc the alert description.
	 *
	 * @return the certificate error.
	 */
	var _alertDescToCertError = function(desc) {
	  switch(desc) {
	  case true:
	    return true;
	  case tls.Alert.Description.bad_certificate:
	    return forge.pki.certificateError.bad_certificate;
	  case tls.Alert.Description.unsupported_certificate:
	    return forge.pki.certificateError.unsupported_certificate;
	  case tls.Alert.Description.certificate_revoked:
	    return forge.pki.certificateError.certificate_revoked;
	  case tls.Alert.Description.certificate_expired:
	    return forge.pki.certificateError.certificate_expired;
	  case tls.Alert.Description.certificate_unknown:
	    return forge.pki.certificateError.certificate_unknown;
	  case tls.Alert.Description.unknown_ca:
	    return forge.pki.certificateError.unknown_ca;
	  default:
	    return forge.pki.certificateError.bad_certificate;
	  }
	};

	/**
	 * Verifies a certificate chain against the given connection's
	 * Certificate Authority store.
	 *
	 * @param c the TLS connection.
	 * @param chain the certificate chain to verify, with the root or highest
	 *          authority at the end.
	 *
	 * @return true if successful, false if not.
	 */
	tls.verifyCertificateChain = function(c, chain) {
	  try {
	    // verify chain
	    forge.pki.verifyCertificateChain(c.caStore, chain,
	      function verify(vfd, depth, chain) {
	        // convert pki.certificateError to tls alert description
	        var desc = _certErrorToAlertDesc(vfd);

	        // call application callback
	        var ret = c.verify(c, vfd, depth, chain);
	        if(ret !== true) {
	          if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	            // throw custom error
	            var error = new Error('The application rejected the certificate.');
	            error.send = true;
	            error.alert = {
	              level: tls.Alert.Level.fatal,
	              description: tls.Alert.Description.bad_certificate
	            };
	            if(ret.message) {
	              error.message = ret.message;
	            }
	            if(ret.alert) {
	              error.alert.description = ret.alert;
	            }
	            throw error;
	          }

	          // convert tls alert description to pki.certificateError
	          if(ret !== vfd) {
	            ret = _alertDescToCertError(ret);
	          }
	        }

	        return ret;
	      });
	  } catch(ex) {
	    // build tls error if not already customized
	    var err = ex;
	    if(typeof err !== 'object' || forge.util.isArray(err)) {
	      err = {
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: _certErrorToAlertDesc(ex)
	        }
	      };
	    }
	    if(!('send' in err)) {
	      err.send = true;
	    }
	    if(!('alert' in err)) {
	      err.alert = {
	        level: tls.Alert.Level.fatal,
	        description: _certErrorToAlertDesc(err.error)
	      };
	    }

	    // send error
	    c.error(c, err);
	  }

	  return !c.fail;
	};

	/**
	 * Creates a new TLS session cache.
	 *
	 * @param cache optional map of session ID to cached session.
	 * @param capacity the maximum size for the cache (default: 100).
	 *
	 * @return the new TLS session cache.
	 */
	tls.createSessionCache = function(cache, capacity) {
	  var rval = null;

	  // assume input is already a session cache object
	  if(cache && cache.getSession && cache.setSession && cache.order) {
	    rval = cache;
	  } else {
	    // create cache
	    rval = {};
	    rval.cache = cache || {};
	    rval.capacity = Math.max(capacity || 100, 1);
	    rval.order = [];

	    // store order for sessions, delete session overflow
	    for(var key in cache) {
	      if(rval.order.length <= capacity) {
	        rval.order.push(key);
	      } else {
	        delete cache[key];
	      }
	    }

	    // get a session from a session ID (or get any session)
	    rval.getSession = function(sessionId) {
	      var session = null;
	      var key = null;

	      // if session ID provided, use it
	      if(sessionId) {
	        key = forge.util.bytesToHex(sessionId);
	      } else if(rval.order.length > 0) {
	        // get first session from cache
	        key = rval.order[0];
	      }

	      if(key !== null && key in rval.cache) {
	        // get cached session and remove from cache
	        session = rval.cache[key];
	        delete rval.cache[key];
	        for(var i in rval.order) {
	          if(rval.order[i] === key) {
	            rval.order.splice(i, 1);
	            break;
	          }
	        }
	      }

	      return session;
	    };

	    // set a session in the cache
	    rval.setSession = function(sessionId, session) {
	      // remove session from cache if at capacity
	      if(rval.order.length === rval.capacity) {
	        var key = rval.order.shift();
	        delete rval.cache[key];
	      }
	      // add session to cache
	      var key = forge.util.bytesToHex(sessionId);
	      rval.order.push(key);
	      rval.cache[key] = session;
	    };
	  }

	  return rval;
	};

	/**
	 * Creates a new TLS connection.
	 *
	 * See public createConnection() docs for more details.
	 *
	 * @param options the options for this connection.
	 *
	 * @return the new TLS connection.
	 */
	tls.createConnection = function(options) {
	  var caStore = null;
	  if(options.caStore) {
	    // if CA store is an array, convert it to a CA store object
	    if(forge.util.isArray(options.caStore)) {
	      caStore = forge.pki.createCaStore(options.caStore);
	    } else {
	      caStore = options.caStore;
	    }
	  } else {
	    // create empty CA store
	    caStore = forge.pki.createCaStore();
	  }

	  // setup default cipher suites
	  var cipherSuites = options.cipherSuites || null;
	  if(cipherSuites === null) {
	    cipherSuites = [];
	    for(var key in tls.CipherSuites) {
	      cipherSuites.push(tls.CipherSuites[key]);
	    }
	  }

	  // set default entity
	  var entity = (options.server || false) ?
	    tls.ConnectionEnd.server : tls.ConnectionEnd.client;

	  // create session cache if requested
	  var sessionCache = options.sessionCache ?
	    tls.createSessionCache(options.sessionCache) : null;

	  // create TLS connection
	  var c = {
	    version: {major: tls.Version.major, minor: tls.Version.minor},
	    entity: entity,
	    sessionId: options.sessionId,
	    caStore: caStore,
	    sessionCache: sessionCache,
	    cipherSuites: cipherSuites,
	    connected: options.connected,
	    virtualHost: options.virtualHost || null,
	    verifyClient: options.verifyClient || false,
	    verify: options.verify || function(cn, vfd, dpth, cts) {return vfd;},
	    getCertificate: options.getCertificate || null,
	    getPrivateKey: options.getPrivateKey || null,
	    getSignature: options.getSignature || null,
	    input: forge.util.createBuffer(),
	    tlsData: forge.util.createBuffer(),
	    data: forge.util.createBuffer(),
	    tlsDataReady: options.tlsDataReady,
	    dataReady: options.dataReady,
	    heartbeatReceived: options.heartbeatReceived,
	    closed: options.closed,
	    error: function(c, ex) {
	      // set origin if not set
	      ex.origin = ex.origin ||
	        ((c.entity === tls.ConnectionEnd.client) ? 'client' : 'server');

	      // send TLS alert
	      if(ex.send) {
	        tls.queue(c, tls.createAlert(c, ex.alert));
	        tls.flush(c);
	      }

	      // error is fatal by default
	      var fatal = (ex.fatal !== false);
	      if(fatal) {
	        // set fail flag
	        c.fail = true;
	      }

	      // call error handler first
	      options.error(c, ex);

	      if(fatal) {
	        // fatal error, close connection, do not clear fail
	        c.close(false);
	      }
	    },
	    deflate: options.deflate || null,
	    inflate: options.inflate || null
	  };

	  /**
	   * Resets a closed TLS connection for reuse. Called in c.close().
	   *
	   * @param clearFail true to clear the fail flag (default: true).
	   */
	  c.reset = function(clearFail) {
	    c.version = {major: tls.Version.major, minor: tls.Version.minor};
	    c.record = null;
	    c.session = null;
	    c.peerCertificate = null;
	    c.state = {
	      pending: null,
	      current: null
	    };
	    c.expect = (c.entity === tls.ConnectionEnd.client) ? SHE : CHE;
	    c.fragmented = null;
	    c.records = [];
	    c.open = false;
	    c.handshakes = 0;
	    c.handshaking = false;
	    c.isConnected = false;
	    c.fail = !(clearFail || typeof(clearFail) === 'undefined');
	    c.input.clear();
	    c.tlsData.clear();
	    c.data.clear();
	    c.state.current = tls.createConnectionState(c);
	  };

	  // do initial reset of connection
	  c.reset();

	  /**
	   * Updates the current TLS engine state based on the given record.
	   *
	   * @param c the TLS connection.
	   * @param record the TLS record to act on.
	   */
	  var _update = function(c, record) {
	    // get record handler (align type in table by subtracting lowest)
	    var aligned = record.type - tls.ContentType.change_cipher_spec;
	    var handlers = ctTable[c.entity][c.expect];
	    if(aligned in handlers) {
	      handlers[aligned](c, record);
	    } else {
	      // unexpected record
	      tls.handleUnexpected(c, record);
	    }
	  };

	  /**
	   * Reads the record header and initializes the next record on the given
	   * connection.
	   *
	   * @param c the TLS connection with the next record.
	   *
	   * @return 0 if the input data could be processed, otherwise the
	   *         number of bytes required for data to be processed.
	   */
	  var _readRecordHeader = function(c) {
	    var rval = 0;

	    // get input buffer and its length
	    var b = c.input;
	    var len = b.length();

	    // need at least 5 bytes to initialize a record
	    if(len < 5) {
	      rval = 5 - len;
	    } else {
	      // enough bytes for header
	      // initialize record
	      c.record = {
	        type: b.getByte(),
	        version: {
	          major: b.getByte(),
	          minor: b.getByte()
	        },
	        length: b.getInt16(),
	        fragment: forge.util.createBuffer(),
	        ready: false
	      };

	      // check record version
	      var compatibleVersion = (c.record.version.major === c.version.major);
	      if(compatibleVersion && c.session && c.session.version) {
	        // session version already set, require same minor version
	        compatibleVersion = (c.record.version.minor === c.version.minor);
	      }
	      if(!compatibleVersion) {
	        c.error(c, {
	          message: 'Incompatible TLS version.',
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.protocol_version
	          }
	        });
	      }
	    }

	    return rval;
	  };

	  /**
	   * Reads the next record's contents and appends its message to any
	   * previously fragmented message.
	   *
	   * @param c the TLS connection with the next record.
	   *
	   * @return 0 if the input data could be processed, otherwise the
	   *         number of bytes required for data to be processed.
	   */
	  var _readRecord = function(c) {
	    var rval = 0;

	    // ensure there is enough input data to get the entire record
	    var b = c.input;
	    var len = b.length();
	    if(len < c.record.length) {
	      // not enough data yet, return how much is required
	      rval = c.record.length - len;
	    } else {
	      // there is enough data to parse the pending record
	      // fill record fragment and compact input buffer
	      c.record.fragment.putBytes(b.getBytes(c.record.length));
	      b.compact();

	      // update record using current read state
	      var s = c.state.current.read;
	      if(s.update(c, c.record)) {
	        // see if there is a previously fragmented message that the
	        // new record's message fragment should be appended to
	        if(c.fragmented !== null) {
	          // if the record type matches a previously fragmented
	          // record, append the record fragment to it
	          if(c.fragmented.type === c.record.type) {
	            // concatenate record fragments
	            c.fragmented.fragment.putBuffer(c.record.fragment);
	            c.record = c.fragmented;
	          } else {
	            // error, invalid fragmented record
	            c.error(c, {
	              message: 'Invalid fragmented record.',
	              send: true,
	              alert: {
	                level: tls.Alert.Level.fatal,
	                description:
	                  tls.Alert.Description.unexpected_message
	              }
	            });
	          }
	        }

	        // record is now ready
	        c.record.ready = true;
	      }
	    }

	    return rval;
	  };

	  /**
	   * Performs a handshake using the TLS Handshake Protocol, as a client.
	   *
	   * This method should only be called if the connection is in client mode.
	   *
	   * @param sessionId the session ID to use, null to start a new one.
	   */
	  c.handshake = function(sessionId) {
	    // error to call this in non-client mode
	    if(c.entity !== tls.ConnectionEnd.client) {
	      // not fatal error
	      c.error(c, {
	        message: 'Cannot initiate handshake as a server.',
	        fatal: false
	      });
	    } else if(c.handshaking) {
	      // handshake is already in progress, fail but not fatal error
	      c.error(c, {
	        message: 'Handshake already in progress.',
	        fatal: false
	      });
	    } else {
	      // clear fail flag on reuse
	      if(c.fail && !c.open && c.handshakes === 0) {
	        c.fail = false;
	      }

	      // now handshaking
	      c.handshaking = true;

	      // default to blank (new session)
	      sessionId = sessionId || '';

	      // if a session ID was specified, try to find it in the cache
	      var session = null;
	      if(sessionId.length > 0) {
	        if(c.sessionCache) {
	          session = c.sessionCache.getSession(sessionId);
	        }

	        // matching session not found in cache, clear session ID
	        if(session === null) {
	          sessionId = '';
	        }
	      }

	      // no session given, grab a session from the cache, if available
	      if(sessionId.length === 0 && c.sessionCache) {
	        session = c.sessionCache.getSession();
	        if(session !== null) {
	          sessionId = session.id;
	        }
	      }

	      // set up session
	      c.session = {
	        id: sessionId,
	        version: null,
	        cipherSuite: null,
	        compressionMethod: null,
	        serverCertificate: null,
	        certificateRequest: null,
	        clientCertificate: null,
	        sp: {},
	        md5: forge.md.md5.create(),
	        sha1: forge.md.sha1.create()
	      };

	      // use existing session information
	      if(session) {
	        // only update version on connection, session version not yet set
	        c.version = session.version;
	        c.session.sp = session.sp;
	      }

	      // generate new client random
	      c.session.sp.client_random = tls.createRandom().getBytes();

	      // connection now open
	      c.open = true;

	      // send hello
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createClientHello(c)
	      }));
	      tls.flush(c);
	    }
	  };

	  /**
	   * Called when TLS protocol data has been received from somewhere and should
	   * be processed by the TLS engine.
	   *
	   * @param data the TLS protocol data, as a string, to process.
	   *
	   * @return 0 if the data could be processed, otherwise the number of bytes
	   *         required for data to be processed.
	   */
	  c.process = function(data) {
	    var rval = 0;

	    // buffer input data
	    if(data) {
	      c.input.putBytes(data);
	    }

	    // process next record if no failure, process will be called after
	    // each record is handled (since handling can be asynchronous)
	    if(!c.fail) {
	      // reset record if ready and now empty
	      if(c.record !== null &&
	        c.record.ready && c.record.fragment.isEmpty()) {
	        c.record = null;
	      }

	      // if there is no pending record, try to read record header
	      if(c.record === null) {
	        rval = _readRecordHeader(c);
	      }

	      // read the next record (if record not yet ready)
	      if(!c.fail && c.record !== null && !c.record.ready) {
	        rval = _readRecord(c);
	      }

	      // record ready to be handled, update engine state
	      if(!c.fail && c.record !== null && c.record.ready) {
	        _update(c, c.record);
	      }
	    }

	    return rval;
	  };

	  /**
	   * Requests that application data be packaged into a TLS record. The
	   * tlsDataReady handler will be called when the TLS record(s) have been
	   * prepared.
	   *
	   * @param data the application data, as a raw 'binary' encoded string, to
	   *          be sent; to send utf-16/utf-8 string data, use the return value
	   *          of util.encodeUtf8(str).
	   *
	   * @return true on success, false on failure.
	   */
	  c.prepare = function(data) {
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.application_data,
	      data: forge.util.createBuffer(data)
	    }));
	    return tls.flush(c);
	  };

	  /**
	   * Requests that a heartbeat request be packaged into a TLS record for
	   * transmission. The tlsDataReady handler will be called when TLS record(s)
	   * have been prepared.
	   *
	   * When a heartbeat response has been received, the heartbeatReceived
	   * handler will be called with the matching payload. This handler can
	   * be used to clear a retransmission timer, etc.
	   *
	   * @param payload the heartbeat data to send as the payload in the message.
	   * @param [payloadLength] the payload length to use, defaults to the
	   *          actual payload length.
	   *
	   * @return true on success, false on failure.
	   */
	  c.prepareHeartbeatRequest = function(payload, payloadLength) {
	    if(payload instanceof forge.util.ByteBuffer) {
	      payload = payload.bytes();
	    }
	    if(typeof payloadLength === 'undefined') {
	      payloadLength = payload.length;
	    }
	    c.expectedHeartbeatPayload = payload;
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.heartbeat,
	      data: tls.createHeartbeat(
	        tls.HeartbeatMessageType.heartbeat_request, payload, payloadLength)
	    }));
	    return tls.flush(c);
	  };

	  /**
	   * Closes the connection (sends a close_notify alert).
	   *
	   * @param clearFail true to clear the fail flag (default: true).
	   */
	  c.close = function(clearFail) {
	    // save session if connection didn't fail
	    if(!c.fail && c.sessionCache && c.session) {
	      // only need to preserve session ID, version, and security params
	      var session = {
	        id: c.session.id,
	        version: c.session.version,
	        sp: c.session.sp
	      };
	      session.sp.keys = null;
	      c.sessionCache.setSession(session.id, session);
	    }

	    if(c.open) {
	      // connection no longer open, clear input
	      c.open = false;
	      c.input.clear();

	      // if connected or handshaking, send an alert
	      if(c.isConnected || c.handshaking) {
	        c.isConnected = c.handshaking = false;

	        // send close_notify alert
	        tls.queue(c, tls.createAlert(c, {
	          level: tls.Alert.Level.warning,
	          description: tls.Alert.Description.close_notify
	        }));
	        tls.flush(c);
	      }

	      // call handler
	      c.closed(c);
	    }

	    // reset TLS connection, do not clear fail flag
	    c.reset(clearFail);
	  };

	  return c;
	};

	/* TLS API */
	forge.tls = forge.tls || {};

	// expose non-functions
	for(var key in tls) {
	  if(typeof tls[key] !== 'function') {
	    forge.tls[key] = tls[key];
	  }
	}

	// expose prf_tls1 for testing
	forge.tls.prf_tls1 = prf_TLS1;

	// expose sha1 hmac method
	forge.tls.hmac_sha1 = hmac_sha1;

	// expose session cache creation
	forge.tls.createSessionCache = tls.createSessionCache;

	/**
	 * Creates a new TLS connection. This does not make any assumptions about the
	 * transport layer that TLS is working on top of, ie: it does not assume there
	 * is a TCP/IP connection or establish one. A TLS connection is totally
	 * abstracted away from the layer is runs on top of, it merely establishes a
	 * secure channel between a client" and a "server".
	 *
	 * A TLS connection contains 4 connection states: pending read and write, and
	 * current read and write.
	 *
	 * At initialization, the current read and write states will be null. Only once
	 * the security parameters have been set and the keys have been generated can
	 * the pending states be converted into current states. Current states will be
	 * updated for each record processed.
	 *
	 * A custom certificate verify callback may be provided to check information
	 * like the common name on the server's certificate. It will be called for
	 * every certificate in the chain. It has the following signature:
	 *
	 * variable func(c, certs, index, preVerify)
	 * Where:
	 * c         The TLS connection
	 * verified  Set to true if certificate was verified, otherwise the alert
	 *           tls.Alert.Description for why the certificate failed.
	 * depth     The current index in the chain, where 0 is the server's cert.
	 * certs     The certificate chain, *NOTE* if the server was anonymous then
	 *           the chain will be empty.
	 *
	 * The function returns true on success and on failure either the appropriate
	 * tls.Alert.Description or an object with 'alert' set to the appropriate
	 * tls.Alert.Description and 'message' set to a custom error message. If true
	 * is not returned then the connection will abort using, in order of
	 * availability, first the returned alert description, second the preVerify
	 * alert description, and lastly the default 'bad_certificate'.
	 *
	 * There are three callbacks that can be used to make use of client-side
	 * certificates where each takes the TLS connection as the first parameter:
	 *
	 * getCertificate(conn, hint)
	 *   The second parameter is a hint as to which certificate should be
	 *   returned. If the connection entity is a client, then the hint will be
	 *   the CertificateRequest message from the server that is part of the
	 *   TLS protocol. If the connection entity is a server, then it will be
	 *   the servername list provided via an SNI extension the ClientHello, if
	 *   one was provided (empty array if not). The hint can be examined to
	 *   determine which certificate to use (advanced). Most implementations
	 *   will just return a certificate. The return value must be a
	 *   PEM-formatted certificate or an array of PEM-formatted certificates
	 *   that constitute a certificate chain, with the first in the array/chain
	 *   being the client's certificate.
	 * getPrivateKey(conn, certificate)
	 *   The second parameter is an forge.pki X.509 certificate object that
	 *   is associated with the requested private key. The return value must
	 *   be a PEM-formatted private key.
	 * getSignature(conn, bytes, callback)
	 *   This callback can be used instead of getPrivateKey if the private key
	 *   is not directly accessible in javascript or should not be. For
	 *   instance, a secure external web service could provide the signature
	 *   in exchange for appropriate credentials. The second parameter is a
	 *   string of bytes to be signed that are part of the TLS protocol. These
	 *   bytes are used to verify that the private key for the previously
	 *   provided client-side certificate is accessible to the client. The
	 *   callback is a function that takes 2 parameters, the TLS connection
	 *   and the RSA encrypted (signed) bytes as a string. This callback must
	 *   be called once the signature is ready.
	 *
	 * @param options the options for this connection:
	 *   server: true if the connection is server-side, false for client.
	 *   sessionId: a session ID to reuse, null for a new connection.
	 *   caStore: an array of certificates to trust.
	 *   sessionCache: a session cache to use.
	 *   cipherSuites: an optional array of cipher suites to use,
	 *     see tls.CipherSuites.
	 *   connected: function(conn) called when the first handshake completes.
	 *   virtualHost: the virtual server name to use in a TLS SNI extension.
	 *   verifyClient: true to require a client certificate in server mode,
	 *     'optional' to request one, false not to (default: false).
	 *   verify: a handler used to custom verify certificates in the chain.
	 *   getCertificate: an optional callback used to get a certificate or
	 *     a chain of certificates (as an array).
	 *   getPrivateKey: an optional callback used to get a private key.
	 *   getSignature: an optional callback used to get a signature.
	 *   tlsDataReady: function(conn) called when TLS protocol data has been
	 *     prepared and is ready to be used (typically sent over a socket
	 *     connection to its destination), read from conn.tlsData buffer.
	 *   dataReady: function(conn) called when application data has
	 *     been parsed from a TLS record and should be consumed by the
	 *     application, read from conn.data buffer.
	 *   closed: function(conn) called when the connection has been closed.
	 *   error: function(conn, error) called when there was an error.
	 *   deflate: function(inBytes) if provided, will deflate TLS records using
	 *     the deflate algorithm if the server supports it.
	 *   inflate: function(inBytes) if provided, will inflate TLS records using
	 *     the deflate algorithm if the server supports it.
	 *
	 * @return the new TLS connection.
	 */
	forge.tls.createConnection = tls.createConnection;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'tls';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/tls',[
	  'require',
	  'module',
	  './asn1',
	  './hmac',
	  './md',
	  './pem',
	  './pki',
	  './random',
	  './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A Javascript implementation of AES Cipher Suites for TLS.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2015 Digital Bazaar, Inc.
	 *
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var tls = forge.tls;

	/**
	 * Supported cipher suites.
	 */
	tls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {
	  id: [0x00,0x2f],
	  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',
	  initSecurityParameters: function(sp) {
	    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
	    sp.cipher_type = tls.CipherType.block;
	    sp.enc_key_length = 16;
	    sp.block_length = 16;
	    sp.fixed_iv_length = 16;
	    sp.record_iv_length = 16;
	    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
	    sp.mac_length = 20;
	    sp.mac_key_length = 20;
	  },
	  initConnectionState: initConnectionState
	};
	tls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {
	  id: [0x00,0x35],
	  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',
	  initSecurityParameters: function(sp) {
	    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
	    sp.cipher_type = tls.CipherType.block;
	    sp.enc_key_length = 32;
	    sp.block_length = 16;
	    sp.fixed_iv_length = 16;
	    sp.record_iv_length = 16;
	    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
	    sp.mac_length = 20;
	    sp.mac_key_length = 20;
	  },
	  initConnectionState: initConnectionState
	};

	function initConnectionState(state, c, sp) {
	  var client = (c.entity === forge.tls.ConnectionEnd.client);

	  // cipher setup
	  state.read.cipherState = {
	    init: false,
	    cipher: forge.cipher.createDecipher('AES-CBC', client ?
	      sp.keys.server_write_key : sp.keys.client_write_key),
	    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV
	  };
	  state.write.cipherState = {
	    init: false,
	    cipher: forge.cipher.createCipher('AES-CBC', client ?
	      sp.keys.client_write_key : sp.keys.server_write_key),
	    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV
	  };
	  state.read.cipherFunction = decrypt_aes_cbc_sha1;
	  state.write.cipherFunction = encrypt_aes_cbc_sha1;

	  // MAC setup
	  state.read.macLength = state.write.macLength = sp.mac_length;
	  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;
	}

	/**
	 * Encrypts the TLSCompressed record into a TLSCipherText record using AES
	 * in CBC mode.
	 *
	 * @param record the TLSCompressed record to encrypt.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	function encrypt_aes_cbc_sha1(record, s) {
	  var rval = false;

	  // append MAC to fragment, update sequence number
	  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);
	  record.fragment.putBytes(mac);
	  s.updateSequenceNumber();

	  // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
	  var iv;
	  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
	    // use the pre-generated IV when initializing for TLS 1.0, otherwise use
	    // the residue from the previous encryption
	    iv = s.cipherState.init ? null : s.cipherState.iv;
	  } else {
	    iv = forge.random.getBytesSync(16);
	  }

	  s.cipherState.init = true;

	  // start cipher
	  var cipher = s.cipherState.cipher;
	  cipher.start({iv: iv});

	  // TLS 1.1+ write IV into output
	  if(record.version.minor >= tls.Versions.TLS_1_1.minor) {
	    cipher.output.putBytes(iv);
	  }

	  // do encryption (default padding is appropriate)
	  cipher.update(record.fragment);
	  if(cipher.finish(encrypt_aes_cbc_sha1_padding)) {
	    // set record fragment to encrypted output
	    record.fragment = cipher.output;
	    record.length = record.fragment.length();
	    rval = true;
	  }

	  return rval;
	}

	/**
	 * Handles padding for aes_cbc_sha1 in encrypt mode.
	 *
	 * @param blockSize the block size.
	 * @param input the input buffer.
	 * @param decrypt true in decrypt mode, false in encrypt mode.
	 *
	 * @return true on success, false on failure.
	 */
	function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {
	  /* The encrypted data length (TLSCiphertext.length) is one more than the sum
	   of SecurityParameters.block_length, TLSCompressed.length,
	   SecurityParameters.mac_length, and padding_length.

	   The padding may be any length up to 255 bytes long, as long as it results in
	   the TLSCiphertext.length being an integral multiple of the block length.
	   Lengths longer than necessary might be desirable to frustrate attacks on a
	   protocol based on analysis of the lengths of exchanged messages. Each uint8
	   in the padding data vector must be filled with the padding length value.

	   The padding length should be such that the total size of the
	   GenericBlockCipher structure is a multiple of the cipher's block length.
	   Legal values range from zero to 255, inclusive. This length specifies the
	   length of the padding field exclusive of the padding_length field itself.

	   This is slightly different from PKCS#7 because the padding value is 1
	   less than the actual number of padding bytes if you include the
	   padding_length uint8 itself as a padding byte. */
	  if(!decrypt) {
	    // get the number of padding bytes required to reach the blockSize and
	    // subtract 1 for the padding value (to make room for the padding_length
	    // uint8)
	    var padding = blockSize - (input.length() % blockSize);
	    input.fillWithByte(padding - 1, padding);
	  }
	  return true;
	}

	/**
	 * Handles padding for aes_cbc_sha1 in decrypt mode.
	 *
	 * @param blockSize the block size.
	 * @param output the output buffer.
	 * @param decrypt true in decrypt mode, false in encrypt mode.
	 *
	 * @return true on success, false on failure.
	 */
	function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {
	  var rval = true;
	  if(decrypt) {
	    /* The last byte in the output specifies the number of padding bytes not
	      including itself. Each of the padding bytes has the same value as that
	      last byte (known as the padding_length). Here we check all padding
	      bytes to ensure they have the value of padding_length even if one of
	      them is bad in order to ward-off timing attacks. */
	    var len = output.length();
	    var paddingLength = output.last();
	    for(var i = len - 1 - paddingLength; i < len - 1; ++i) {
	      rval = rval && (output.at(i) == paddingLength);
	    }
	    if(rval) {
	      // trim off padding bytes and last padding length byte
	      output.truncate(paddingLength + 1);
	    }
	  }
	  return rval;
	}

	/**
	 * Decrypts a TLSCipherText record into a TLSCompressed record using
	 * AES in CBC mode.
	 *
	 * @param record the TLSCipherText record to decrypt.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var count = 0;
	function decrypt_aes_cbc_sha1(record, s) {
	  var rval = false;
	  ++count;

	  var iv;
	  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
	    // use pre-generated IV when initializing for TLS 1.0, otherwise use the
	    // residue from the previous decryption
	    iv = s.cipherState.init ? null : s.cipherState.iv;
	  } else {
	    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
	    // that is appended to the record fragment
	    iv = record.fragment.getBytes(16);
	  }

	  s.cipherState.init = true;

	  // start cipher
	  var cipher = s.cipherState.cipher;
	  cipher.start({iv: iv});

	  // do decryption
	  cipher.update(record.fragment);
	  rval = cipher.finish(decrypt_aes_cbc_sha1_padding);

	  // even if decryption fails, keep going to minimize timing attacks

	  // decrypted data:
	  // first (len - 20) bytes = application data
	  // last 20 bytes          = MAC
	  var macLen = s.macLength;

	  // create a random MAC to check against should the mac length check fail
	  // Note: do this regardless of the failure to keep timing consistent
	  var mac = forge.random.getBytesSync(macLen);

	  // get fragment and mac
	  var len = cipher.output.length();
	  if(len >= macLen) {
	    record.fragment = cipher.output.getBytes(len - macLen);
	    mac = cipher.output.getBytes(macLen);
	  } else {
	    // bad data, but get bytes anyway to try to keep timing consistent
	    record.fragment = cipher.output.getBytes();
	  }
	  record.fragment = forge.util.createBuffer(record.fragment);
	  record.length = record.fragment.length();

	  // see if data integrity checks out, update sequence number
	  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);
	  s.updateSequenceNumber();
	  rval = compareMacs(s.macKey, mac, mac2) && rval;
	  return rval;
	}

	/**
	 * Safely compare two MACs. This function will compare two MACs in a way
	 * that protects against timing attacks.
	 *
	 * TODO: Expose elsewhere as a utility API.
	 *
	 * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
	 *
	 * @param key the MAC key to use.
	 * @param mac1 as a binary-encoded string of bytes.
	 * @param mac2 as a binary-encoded string of bytes.
	 *
	 * @return true if the MACs are the same, false if not.
	 */
	function compareMacs(key, mac1, mac2) {
	  var hmac = forge.hmac.create();

	  hmac.start('SHA1', key);
	  hmac.update(mac1);
	  mac1 = hmac.digest().getBytes();

	  hmac.start(null, null);
	  hmac.update(mac2);
	  mac2 = hmac.digest().getBytes();

	  return mac1 === mac2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'aesCipherSuites';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/aesCipherSuites',['require', 'module', './aes', './tls'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Debugging support for web applications.
	 *
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright 2008-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* DEBUG API */
	forge.debug = forge.debug || {};

	// Private storage for debugging.
	// Useful to expose data that is otherwise unviewable behind closures.
	// NOTE: remember that this can hold references to data and cause leaks!
	// format is "forge._debug.<modulename>.<dataname> = data"
	// Example:
	// (function() {
	//   var cat = 'forge.test.Test'; // debugging category
	//   var sState = {...}; // local state
	//   forge.debug.set(cat, 'sState', sState);
	// })();
	forge.debug.storage = {};

	/**
	 * Gets debug data. Omit name for all cat data  Omit name and cat for
	 * all data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to get (optional).
	 * @return object with requested debug data or undefined.
	 */
	forge.debug.get = function(cat, name) {
	  var rval;
	  if(typeof(cat) === 'undefined') {
	    rval = forge.debug.storage;
	  } else if(cat in forge.debug.storage) {
	    if(typeof(name) === 'undefined') {
	      rval = forge.debug.storage[cat];
	    } else {
	      rval = forge.debug.storage[cat][name];
	    }
	  }
	  return rval;
	};

	/**
	 * Sets debug data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to set.
	 * @param data data to set.
	 */
	forge.debug.set = function(cat, name, data) {
	  if(!(cat in forge.debug.storage)) {
	    forge.debug.storage[cat] = {};
	  }
	  forge.debug.storage[cat][name] = data;
	};

	/**
	 * Clears debug data. Omit name for all cat data. Omit name and cat for
	 * all data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to clear or omit to clear entire category.
	 */
	forge.debug.clear = function(cat, name) {
	  if(typeof(cat) === 'undefined') {
	    forge.debug.storage = {};
	  } else if(cat in forge.debug.storage) {
	    if(typeof(name) === 'undefined') {
	      delete forge.debug.storage[cat];
	    } else {
	      delete forge.debug.storage[cat][name];
	    }
	  }
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'debug';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/debug',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of RSA-KEM.
	 *
	 * @author Lautaro Cozzani Rodriguez
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.kem = forge.kem || {};

	var BigInteger = forge.jsbn.BigInteger;

	/**
	 * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
	 */
	forge.kem.rsa = {};

	/**
	 * Creates an RSA KEM API object for generating a secret asymmetric key.
	 *
	 * The symmetric key may be generated via a call to 'encrypt', which will
	 * produce a ciphertext to be transmitted to the recipient and a key to be
	 * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which
	 * will produce the same secret key for the recipient to use to decrypt a
	 * message that was encrypted with the secret key.
	 *
	 * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).
	 * @param options the options to use.
	 *          [prng] a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 */
	forge.kem.rsa.create = function(kdf, options) {
	  options = options || {};
	  var prng = options.prng || forge.random;

	  var kem = {};

	  /**
	   * Generates a secret key and its encapsulation.
	   *
	   * @param publicKey the RSA public key to encrypt with.
	   * @param keyLength the length, in bytes, of the secret key to generate.
	   *
	   * @return an object with:
	   *   encapsulation: the ciphertext for generating the secret key, as a
	   *     binary-encoded string of bytes.
	   *   key: the secret key to use for encrypting a message.
	   */
	  kem.encrypt = function(publicKey, keyLength) {
	    // generate a random r where 1 > r > n
	    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);
	    var r;
	    do {
	      r = new BigInteger(
	        forge.util.bytesToHex(prng.getBytesSync(byteLength)),
	        16).mod(publicKey.n);
	    } while(r.equals(BigInteger.ZERO));

	    // prepend r with zeros
	    r = forge.util.hexToBytes(r.toString(16));
	    var zeros = byteLength - r.length;
	    if(zeros > 0) {
	      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;
	    }

	    // encrypt the random
	    var encapsulation = publicKey.encrypt(r, 'NONE');

	    // generate the secret key
	    var key = kdf.generate(r, keyLength);

	    return {encapsulation: encapsulation, key: key};
	  };

	  /**
	   * Decrypts an encapsulated secret key.
	   *
	   * @param privateKey the RSA private key to decrypt with.
	   * @param encapsulation the ciphertext for generating the secret key, as
	   *          a binary-encoded string of bytes.
	   * @param keyLength the length, in bytes, of the secret key to generate.
	   *
	   * @return the secret key as a binary-encoded string of bytes.
	   */
	  kem.decrypt = function(privateKey, encapsulation, keyLength) {
	    // decrypt the encapsulation and generate the secret key
	    var r = privateKey.decrypt(encapsulation, 'NONE');
	    return kdf.generate(r, keyLength);
	  };

	  return kem;
	};

	// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?

	/**
	 * Creates a key derivation API object that implements KDF1 per ISO 18033-2.
	 *
	 * @param md the hash API to use.
	 * @param [digestLength] an optional digest length that must be positive and
	 *          less than or equal to md.digestLength.
	 *
	 * @return a KDF1 API object.
	 */
	forge.kem.kdf1 = function(md, digestLength) {
	  _createKDF(this, md, 0, digestLength || md.digestLength);
	};

	/**
	 * Creates a key derivation API object that implements KDF2 per ISO 18033-2.
	 *
	 * @param md the hash API to use.
	 * @param [digestLength] an optional digest length that must be positive and
	 *          less than or equal to md.digestLength.
	 *
	 * @return a KDF2 API object.
	 */
	forge.kem.kdf2 = function(md, digestLength) {
	  _createKDF(this, md, 1, digestLength || md.digestLength);
	};

	/**
	 * Creates a KDF1 or KDF2 API object.
	 *
	 * @param md the hash API to use.
	 * @param counterStart the starting index for the counter.
	 * @param digestLength the digest length to use.
	 *
	 * @return the KDF API object.
	 */
	function _createKDF(kdf, md, counterStart, digestLength) {
	  /**
	   * Generate a key of the specified length.
	   *
	   * @param x the binary-encoded byte string to generate a key from.
	   * @param length the number of bytes to generate (the size of the key).
	   *
	   * @return the key as a binary-encoded string.
	   */
	  kdf.generate = function(x, length) {
	    var key = new forge.util.ByteBuffer();

	    // run counter from counterStart to ceil(length / Hash.len)
	    var k = Math.ceil(length / digestLength) + counterStart;

	    var c = new forge.util.ByteBuffer();
	    for(var i = counterStart; i < k; ++i) {
	      // I2OSP(i, 4): convert counter to an octet string of 4 octets
	      c.putInt32(i);

	      // digest 'x' and the counter and add the result to the key
	      md.start();
	      md.update(x + c.getBytes());
	      var hash = md.digest();
	      key.putBytes(hash.getBytes(digestLength));
	    }

	    // truncate to the correct key length
	    key.truncate(key.length() - length);
	    return key.getBytes();
	  };
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'kem';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/kem',['require', 'module', './util','./random','./jsbn'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Cross-browser support for logging in a web application.
	 *
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright (c) 2008-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* LOG API */
	forge.log = forge.log || {};

	/**
	 * Application logging system.
	 *
	 * Each logger level available as it's own function of the form:
	 *   forge.log.level(category, args...)
	 * The category is an arbitrary string, and the args are the same as
	 * Firebug's console.log API. By default the call will be output as:
	 *   'LEVEL [category] <args[0]>, args[1], ...'
	 * This enables proper % formatting via the first argument.
	 * Each category is enabled by default but can be enabled or disabled with
	 * the setCategoryEnabled() function.
	 */
	// list of known levels
	forge.log.levels = [
	  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];
	// info on the levels indexed by name:
	//   index: level index
	//   name: uppercased display name
	var sLevelInfo = {};
	// list of loggers
	var sLoggers = [];
	/**
	 * Standard console logger. If no console support is enabled this will
	 * remain null. Check before using.
	 */
	var sConsoleLogger = null;

	// logger flags
	/**
	 * Lock the level at the current value. Used in cases where user config may
	 * set the level such that only critical messages are seen but more verbose
	 * messages are needed for debugging or other purposes.
	 */
	forge.log.LEVEL_LOCKED = (1 << 1);
	/**
	 * Always call log function. By default, the logging system will check the
	 * message level against logger.level before calling the log function. This
	 * flag allows the function to do its own check.
	 */
	forge.log.NO_LEVEL_CHECK = (1 << 2);
	/**
	 * Perform message interpolation with the passed arguments. "%" style
	 * fields in log messages will be replaced by arguments as needed. Some
	 * loggers, such as Firebug, may do this automatically. The original log
	 * message will be available as 'message' and the interpolated version will
	 * be available as 'fullMessage'.
	 */
	forge.log.INTERPOLATE = (1 << 3);

	// setup each log level
	for(var i = 0; i < forge.log.levels.length; ++i) {
	  var level = forge.log.levels[i];
	  sLevelInfo[level] = {
	    index: i,
	    name: level.toUpperCase()
	  };
	}

	/**
	 * Message logger. Will dispatch a message to registered loggers as needed.
	 *
	 * @param message message object
	 */
	forge.log.logMessage = function(message) {
	  var messageLevelIndex = sLevelInfo[message.level].index;
	  for(var i = 0; i < sLoggers.length; ++i) {
	    var logger = sLoggers[i];
	    if(logger.flags & forge.log.NO_LEVEL_CHECK) {
	      logger.f(message);
	    } else {
	      // get logger level
	      var loggerLevelIndex = sLevelInfo[logger.level].index;
	      // check level
	      if(messageLevelIndex <= loggerLevelIndex) {
	        // message critical enough, call logger
	        logger.f(logger, message);
	      }
	    }
	  }
	};

	/**
	 * Sets the 'standard' key on a message object to:
	 * "LEVEL [category] " + message
	 *
	 * @param message a message log object
	 */
	forge.log.prepareStandard = function(message) {
	  if(!('standard' in message)) {
	    message.standard =
	      sLevelInfo[message.level].name +
	      //' ' + +message.timestamp +
	      ' [' + message.category + '] ' +
	      message.message;
	  }
	};

	/**
	 * Sets the 'full' key on a message object to the original message
	 * interpolated via % formatting with the message arguments.
	 *
	 * @param message a message log object.
	 */
	forge.log.prepareFull = function(message) {
	  if(!('full' in message)) {
	    // copy args and insert message at the front
	    var args = [message.message];
	    args = args.concat([] || message['arguments']);
	    // format the message
	    message.full = forge.util.format.apply(this, args);
	  }
	};

	/**
	 * Applies both preparseStandard() and prepareFull() to a message object and
	 * store result in 'standardFull'.
	 *
	 * @param message a message log object.
	 */
	forge.log.prepareStandardFull = function(message) {
	  if(!('standardFull' in message)) {
	    // FIXME implement 'standardFull' logging
	    forge.log.prepareStandard(message);
	    message.standardFull = message.standard;
	  }
	};

	// create log level functions
	if(true) {
	  // levels for which we want functions
	  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];
	  for(var i = 0; i < levels.length; ++i) {
	    // wrap in a function to ensure proper level var is passed
	    (function(level) {
	      // create function for this level
	      forge.log[level] = function(category, message/*, args...*/) {
	        // convert arguments to real array, remove category and message
	        var args = Array.prototype.slice.call(arguments).slice(2);
	        // create message object
	        // Note: interpolation and standard formatting is done lazily
	        var msg = {
	          timestamp: new Date(),
	          level: level,
	          category: category,
	          message: message,
	          'arguments': args
	          /*standard*/
	          /*full*/
	          /*fullMessage*/
	        };
	        // process this message
	        forge.log.logMessage(msg);
	      };
	    })(levels[i]);
	  }
	}

	/**
	 * Creates a new logger with specified custom logging function.
	 *
	 * The logging function has a signature of:
	 *   function(logger, message)
	 * logger: current logger
	 * message: object:
	 *   level: level id
	 *   category: category
	 *   message: string message
	 *   arguments: Array of extra arguments
	 *   fullMessage: interpolated message and arguments if INTERPOLATE flag set
	 *
	 * @param logFunction a logging function which takes a log message object
	 *          as a parameter.
	 *
	 * @return a logger object.
	 */
	forge.log.makeLogger = function(logFunction) {
	  var logger = {
	    flags: 0,
	    f: logFunction
	  };
	  forge.log.setLevel(logger, 'none');
	  return logger;
	};

	/**
	 * Sets the current log level on a logger.
	 *
	 * @param logger the target logger.
	 * @param level the new maximum log level as a string.
	 *
	 * @return true if set, false if not.
	 */
	forge.log.setLevel = function(logger, level) {
	  var rval = false;
	  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
	    for(var i = 0; i < forge.log.levels.length; ++i) {
	      var aValidLevel = forge.log.levels[i];
	      if(level == aValidLevel) {
	        // set level
	        logger.level = level;
	        rval = true;
	        break;
	      }
	    }
	  }

	  return rval;
	};

	/**
	 * Locks the log level at its current value.
	 *
	 * @param logger the target logger.
	 * @param lock boolean lock value, default to true.
	 */
	forge.log.lock = function(logger, lock) {
	  if(typeof lock === 'undefined' || lock) {
	    logger.flags |= forge.log.LEVEL_LOCKED;
	  } else {
	    logger.flags &= ~forge.log.LEVEL_LOCKED;
	  }
	};

	/**
	 * Adds a logger.
	 *
	 * @param logger the logger object.
	 */
	forge.log.addLogger = function(logger) {
	  sLoggers.push(logger);
	};

	// setup the console logger if possible, else create fake console.log
	if(typeof(console) !== 'undefined' && 'log' in console) {
	  var logger;
	  if(console.error && console.warn && console.info && console.debug) {
	    // looks like Firebug-style logging is available
	    // level handlers map
	    var levelHandlers = {
	      error: console.error,
	      warning: console.warn,
	      info: console.info,
	      debug: console.debug,
	      verbose: console.debug
	    };
	    var f = function(logger, message) {
	      forge.log.prepareStandard(message);
	      var handler = levelHandlers[message.level];
	      // prepend standard message and concat args
	      var args = [message.standard];
	      args = args.concat(message['arguments'].slice());
	      // apply to low-level console function
	      handler.apply(console, args);
	    };
	    logger = forge.log.makeLogger(f);
	  } else {
	    // only appear to have basic console.log
	    var f = function(logger, message) {
	      forge.log.prepareStandardFull(message);
	      console.log(message.standardFull);
	    };
	    logger = forge.log.makeLogger(f);
	  }
	  forge.log.setLevel(logger, 'debug');
	  forge.log.addLogger(logger);
	  sConsoleLogger = logger;
	} else {
	  // define fake console.log to avoid potential script errors on
	  // browsers that do not have console logging
	  console = {
	    log: function() {}
	  };
	}

	/*
	 * Check for logging control query vars.
	 *
	 * console.level=<level-name>
	 * Set's the console log level by name.  Useful to override defaults and
	 * allow more verbose logging before a user config is loaded.
	 *
	 * console.lock=<true|false>
	 * Lock the console log level at whatever level it is set at.  This is run
	 * after console.level is processed.  Useful to force a level of verbosity
	 * that could otherwise be limited by a user config.
	 */
	if(sConsoleLogger !== null) {
	  var query = forge.util.getQueryVariables();
	  if('console.level' in query) {
	    // set with last value
	    forge.log.setLevel(
	      sConsoleLogger, query['console.level'].slice(-1)[0]);
	  }
	  if('console.lock' in query) {
	    // set with last value
	    var lock = query['console.lock'].slice(-1)[0];
	    if(lock == 'true') {
	      forge.log.lock(sConsoleLogger);
	    }
	  }
	}

	// provide public access to console logger
	forge.log.consoleLogger = sConsoleLogger;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'log';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/log',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#7 v1.5.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 *
	 * Currently this implementation only supports ContentType of EnvelopedData,
	 * EncryptedData, or SignedData at the root level. The top level elements may
	 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
	 * nesting is not (yet) supported.
	 *
	 * The Forge validators for PKCS #7's ASN.1 structures are available from
	 * a separate file pkcs7asn1.js, since those are referenced from other
	 * PKCS standards like PKCS #12.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for ASN.1 API
	var asn1 = forge.asn1;

	// shortcut for PKCS#7 API
	var p7 = forge.pkcs7 = forge.pkcs7 || {};

	/**
	 * Converts a PKCS#7 message from PEM format.
	 *
	 * @param pem the PEM-formatted PKCS#7 message.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PKCS7') {
	    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' +
	      'header type is not "PKCS#7".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return p7.messageFromAsn1(obj);
	};

	/**
	 * Converts a PKCS#7 message to PEM format.
	 *
	 * @param msg The PKCS#7 message object
	 * @param maxline The maximum characters per line, defaults to 64.
	 *
	 * @return The PEM-formatted PKCS#7 message.
	 */
	p7.messageToPem = function(msg, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var pemObj = {
	    type: 'PKCS7',
	    body: asn1.toDer(msg.toAsn1()).getBytes()
	  };
	  return forge.pem.encode(pemObj, {maxline: maxline});
	};

	/**
	 * Converts a PKCS#7 message from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a ContentInfo.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromAsn1 = function(obj) {
	  // validate root level ContentInfo and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors))
	  {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not an PKCS#7 ContentInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var contentType = asn1.derToOid(capture.contentType);
	  var msg;

	  switch(contentType) {
	    case forge.pki.oids.envelopedData:
	      msg = p7.createEnvelopedData();
	      break;

	    case forge.pki.oids.encryptedData:
	      msg = p7.createEncryptedData();
	      break;

	    case forge.pki.oids.signedData:
	      msg = p7.createSignedData();
	      break;

	    default:
	      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' +
	        contentType + ' is not (yet) supported.');
	  }

	  msg.fromAsn1(capture.content.value[0]);
	  return msg;
	};

	p7.createSignedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.signedData,
	    version: 1,
	    certificates: [],
	    crls: [],
	    // TODO: add json-formatted signer stuff here?
	    signers: [],
	    // populated during sign()
	    digestAlgorithmIdentifiers: [],
	    contentInfo: null,
	    signerInfos: [],

	    fromAsn1: function(obj) {
	      // validate SignedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
	      msg.certificates = [];
	      msg.crls = [];
	      msg.digestAlgorithmIdentifiers = [];
	      msg.contentInfo = null;
	      msg.signerInfos = [];

	      var certs = msg.rawCapture.certificates.value;
	      for(var i = 0; i < certs.length; ++i) {
	        msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
	      }

	      // TODO: parse crls
	    },

	    toAsn1: function() {
	      // degenerate case with no content
	      if(!msg.contentInfo) {
	        msg.sign();
	      }

	      var certs = [];
	      for(var i = 0; i < msg.certificates.length; ++i) {
	        certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
	      }

	      var crls = [];
	      // TODO: implement CRLs

	      // [0] SignedData
	      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // Version
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	            asn1.integerToDer(msg.version).getBytes()),
	          // DigestAlgorithmIdentifiers
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	            msg.digestAlgorithmIdentifiers),
	          // ContentInfo
	          msg.contentInfo
	        ])
	      ]);
	      if(certs.length > 0) {
	        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
	      }
	      if(crls.length > 0) {
	        // [1] IMPLICIT CertificateRevocationLists OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
	      }
	      // SignerInfos
	      signedData.value[0].value.push(
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	          msg.signerInfos));

	      // ContentInfo
	      return asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // ContentType
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(msg.type).getBytes()),
	          // [0] SignedData
	          signedData
	        ]);
	    },

	    /**
	     * Add (another) entity to list of signers.
	     *
	     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
	     * they must include at least two attributes: content type and
	     * message digest. The message digest attribute value will be
	     * auto-calculated during signing and will be ignored if provided.
	     *
	     * Here's an example of providing these two attributes:
	     *
	     * forge.pkcs7.createSignedData();
	     * p7.addSigner({
	     *   issuer: cert.issuer.attributes,
	     *   serialNumber: cert.serialNumber,
	     *   key: privateKey,
	     *   digestAlgorithm: forge.pki.oids.sha1,
	     *   authenticatedAttributes: [{
	     *     type: forge.pki.oids.contentType,
	     *     value: forge.pki.oids.data
	     *   }, {
	     *     type: forge.pki.oids.messageDigest
	     *   }]
	     * });
	     *
	     * TODO: Support [subjectKeyIdentifier] as signer's ID.
	     *
	     * @param signer the signer information:
	     *          key the signer's private key.
	     *          [certificate] a certificate containing the public key
	     *            associated with the signer's private key; use this option as
	     *            an alternative to specifying signer.issuer and
	     *            signer.serialNumber.
	     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
	     *          [serialNumber] the signer's certificate's serial number in
	     *           hexadecimal (eg: cert.serialNumber).
	     *          [digestAlgorithm] the message digest OID, as a string, to use
	     *            (eg: forge.pki.oids.sha1).
	     *          [authenticatedAttributes] an optional array of attributes
	     *            to also sign along with the content.
	     */
	    addSigner: function(signer) {
	      var issuer = signer.issuer;
	      var serialNumber = signer.serialNumber;
	      if(signer.certificate) {
	        var cert = signer.certificate;
	        if(typeof cert === 'string') {
	          cert = forge.pki.certificateFromPem(cert);
	        }
	        issuer = cert.issuer.attributes;
	        serialNumber = cert.serialNumber;
	      }
	      var key = signer.key;
	      if(!key) {
	        throw new Error(
	          'Could not add PKCS#7 signer; no private key specified.');
	      }
	      if(typeof key === 'string') {
	        key = forge.pki.privateKeyFromPem(key);
	      }

	      // ensure OID known for digest algorithm
	      var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;
	      switch(digestAlgorithm) {
	      case forge.pki.oids.sha1:
	      case forge.pki.oids.sha256:
	      case forge.pki.oids.sha384:
	      case forge.pki.oids.sha512:
	      case forge.pki.oids.md5:
	        break;
	      default:
	        throw new Error(
	          'Could not add PKCS#7 signer; unknown message digest algorithm: ' +
	          digestAlgorithm);
	      }

	      // if authenticatedAttributes is present, then the attributes
	      // must contain at least PKCS #9 content-type and message-digest
	      var authenticatedAttributes = signer.authenticatedAttributes || [];
	      if(authenticatedAttributes.length > 0) {
	        var contentType = false;
	        var messageDigest = false;
	        for(var i = 0; i < authenticatedAttributes.length; ++i) {
	          var attr = authenticatedAttributes[i];
	          if(!contentType && attr.type === forge.pki.oids.contentType) {
	            contentType = true;
	            if(messageDigest) {
	              break;
	            }
	            continue;
	          }
	          if(!messageDigest && attr.type === forge.pki.oids.messageDigest) {
	            messageDigest = true;
	            if(contentType) {
	              break;
	            }
	            continue;
	          }
	        }

	        if(!contentType || !messageDigest) {
	          throw new Error('Invalid signer.authenticatedAttributes. If ' +
	            'signer.authenticatedAttributes is specified, then it must ' +
	            'contain at least two attributes, PKCS #9 content-type and ' +
	            'PKCS #9 message-digest.');
	        }
	      }

	      msg.signers.push({
	        key: key,
	        version: 1,
	        issuer: issuer,
	        serialNumber: serialNumber,
	        digestAlgorithm: digestAlgorithm,
	        signatureAlgorithm: forge.pki.oids.rsaEncryption,
	        signature: null,
	        authenticatedAttributes: authenticatedAttributes,
	        unauthenticatedAttributes: []
	      });
	    },

	    /**
	     * Signs the content.
	     */
	    sign: function() {
	      // auto-generate content info
	      if(typeof msg.content !== 'object' || msg.contentInfo === null) {
	        // use Data ContentInfo
	        msg.contentInfo = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // ContentType
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(forge.pki.oids.data).getBytes())
	          ]);

	        // add actual content, if present
	        if('content' in msg) {
	          var content;
	          if(msg.content instanceof forge.util.ByteBuffer) {
	            content = msg.content.bytes();
	          } else if(typeof msg.content === 'string') {
	            content = forge.util.encodeUtf8(msg.content);
	          }

	          msg.contentInfo.value.push(
	            // [0] EXPLICIT content
	            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	                content)
	            ]));
	        }
	      }

	      // no signers, return early (degenerate case for certificate container)
	      if(msg.signers.length === 0) {
	        return;
	      }

	      // generate digest algorithm identifiers
	      var mds = addDigestAlgorithmIds();

	      // generate signerInfos
	      addSignerInfos(mds);
	    },

	    verify: function() {
	      throw new Error('PKCS#7 signature verification not yet implemented.');
	    },

	    /**
	     * Add a certificate.
	     *
	     * @param cert the certificate to add.
	     */
	    addCertificate: function(cert) {
	      // convert from PEM
	      if(typeof cert === 'string') {
	        cert = forge.pki.certificateFromPem(cert);
	      }
	      msg.certificates.push(cert);
	    },

	    /**
	     * Add a certificate revokation list.
	     *
	     * @param crl the certificate revokation list to add.
	     */
	    addCertificateRevokationList: function(crl) {
	      throw new Error('PKCS#7 CRL support not yet implemented.');
	    }
	  };
	  return msg;

	  function addDigestAlgorithmIds() {
	    var mds = {};

	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];
	      var oid = signer.digestAlgorithm;
	      if(!(oid in mds)) {
	        // content digest
	        mds[oid] = forge.md[forge.pki.oids[oid]].create();
	      }
	      if(signer.authenticatedAttributes.length === 0) {
	        // no custom attributes to digest; use content message digest
	        signer.md = mds[oid];
	      } else {
	        // custom attributes to be digested; use own message digest
	        // TODO: optimize to just copy message digest state if that
	        // feature is ever supported with message digests
	        signer.md = forge.md[forge.pki.oids[oid]].create();
	      }
	    }

	    // add unique digest algorithm identifiers
	    msg.digestAlgorithmIdentifiers = [];
	    for(var oid in mds) {
	      msg.digestAlgorithmIdentifiers.push(
	        // AlgorithmIdentifier
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // algorithm
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(oid).getBytes()),
	          // parameters (null)
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ]));
	    }

	    return mds;
	  }

	  function addSignerInfos(mds) {
	    // Note: ContentInfo is a SEQUENCE with 2 values, second value is
	    // the content field and is optional for a ContentInfo but required here
	    // since signers are present
	    if(msg.contentInfo.value.length < 2) {
	      throw new Error(
	        'Could not sign PKCS#7 message; there is no content to sign.');
	    }

	    // get ContentInfo content type
	    var contentType = asn1.derToOid(msg.contentInfo.value[0].value);

	    // get ContentInfo content
	    var content = msg.contentInfo.value[1];
	    // skip [0] EXPLICIT content wrapper
	    content = content.value[0];

	    // serialize content
	    var bytes = asn1.toDer(content);

	    // skip identifier and length per RFC 2315 9.3
	    // skip identifier (1 byte)
	    bytes.getByte();
	    // read and discard length bytes
	    asn1.getBerValueLength(bytes);
	    bytes = bytes.getBytes();

	    // digest content DER value bytes
	    for(var oid in mds) {
	      mds[oid].start().update(bytes);
	    }

	    // sign content
	    var signingTime = new Date();
	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];

	      if(signer.authenticatedAttributes.length === 0) {
	        // if ContentInfo content type is not "Data", then
	        // authenticatedAttributes must be present per RFC 2315
	        if(contentType !== forge.pki.oids.data) {
	          throw new Error(
	            'Invalid signer; authenticatedAttributes must be present ' +
	            'when the ContentInfo content type is not PKCS#7 Data.');
	        }
	      } else {
	        // process authenticated attributes
	        // [0] IMPLICIT
	        signer.authenticatedAttributesAsn1 = asn1.create(
	          asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

	        // per RFC 2315, attributes are to be digested using a SET container
	        // not the above [0] IMPLICIT container
	        var attrsAsn1 = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);

	        for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
	          var attr = signer.authenticatedAttributes[ai];
	          if(attr.type === forge.pki.oids.messageDigest) {
	            // use content message digest as value
	            attr.value = mds[signer.digestAlgorithm].digest();
	          } else if(attr.type === forge.pki.oids.signingTime) {
	            // auto-populate signing time if not already set
	            if(!attr.value) {
	              attr.value = signingTime;
	            }
	          }

	          // convert to ASN.1 and push onto Attributes SET (for signing) and
	          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
	          // TODO: optimize away duplication
	          attrsAsn1.value.push(_attributeToAsn1(attr));
	          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
	        }

	        // DER-serialize and digest SET OF attributes only
	        bytes = asn1.toDer(attrsAsn1).getBytes();
	        signer.md.start().update(bytes);
	      }

	      // sign digest
	      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');
	    }

	    // add signer info
	    msg.signerInfos = _signersToAsn1(msg.signers);
	  }
	};

	/**
	 * Creates an empty PKCS#7 message of type EncryptedData.
	 *
	 * @return the message.
	 */
	p7.createEncryptedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.encryptedData,
	    version: 0,
	    encryptedContent: {
	      algorithm: forge.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EncryptedData content block (in ASN.1 format)
	     *
	     * @param obj The ASN.1 representation of the EncryptedData content block
	     */
	    fromAsn1: function(obj) {
	      // Validate EncryptedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
	    },

	    /**
	     * Decrypt encrypted content
	     *
	     * @param key The (symmetric) key as a byte buffer
	     */
	    decrypt: function(key) {
	      if(key !== undefined) {
	        msg.encryptedContent.key = key;
	      }
	      _decryptContent(msg);
	    }
	  };
	  return msg;
	};

	/**
	 * Creates an empty PKCS#7 message of type EnvelopedData.
	 *
	 * @return the message.
	 */
	p7.createEnvelopedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.envelopedData,
	    version: 0,
	    recipients: [],
	    encryptedContent: {
	      algorithm: forge.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EnvelopedData content block (in ASN.1 format)
	     *
	     * @param obj the ASN.1 representation of the EnvelopedData content block.
	     */
	    fromAsn1: function(obj) {
	      // validate EnvelopedData content block and capture data
	      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
	      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
	    },

	    toAsn1: function() {
	      // ContentInfo
	      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // ContentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(msg.type).getBytes()),
	        // [0] EnvelopedData
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // Version
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	              asn1.integerToDer(msg.version).getBytes()),
	            // RecipientInfos
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	              _recipientsToAsn1(msg.recipients)),
	            // EncryptedContentInfo
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true,
	              _encryptedContentToAsn1(msg.encryptedContent))
	          ])
	        ])
	      ]);
	    },

	    /**
	     * Find recipient by X.509 certificate's issuer.
	     *
	     * @param cert the certificate with the issuer to look for.
	     *
	     * @return the recipient object.
	     */
	    findRecipient: function(cert) {
	      var sAttr = cert.issuer.attributes;

	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var r = msg.recipients[i];
	        var rAttr = r.issuer;

	        if(r.serialNumber !== cert.serialNumber) {
	          continue;
	        }

	        if(rAttr.length !== sAttr.length) {
	          continue;
	        }

	        var match = true;
	        for(var j = 0; j < sAttr.length; ++j) {
	          if(rAttr[j].type !== sAttr[j].type ||
	            rAttr[j].value !== sAttr[j].value) {
	            match = false;
	            break;
	          }
	        }

	        if(match) {
	          return r;
	        }
	      }

	      return null;
	    },

	    /**
	     * Decrypt enveloped content
	     *
	     * @param recipient The recipient object related to the private key
	     * @param privKey The (RSA) private key object
	     */
	    decrypt: function(recipient, privKey) {
	      if(msg.encryptedContent.key === undefined && recipient !== undefined &&
	        privKey !== undefined) {
	        switch(recipient.encryptedContent.algorithm) {
	          case forge.pki.oids.rsaEncryption:
	          case forge.pki.oids.desCBC:
	            var key = privKey.decrypt(recipient.encryptedContent.content);
	            msg.encryptedContent.key = forge.util.createBuffer(key);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, ' +
	              'OID ' + recipient.encryptedContent.algorithm);
	        }
	      }

	      _decryptContent(msg);
	    },

	    /**
	     * Add (another) entity to list of recipients.
	     *
	     * @param cert The certificate of the entity to add.
	     */
	    addRecipient: function(cert) {
	      msg.recipients.push({
	        version: 0,
	        issuer: cert.issuer.attributes,
	        serialNumber: cert.serialNumber,
	        encryptedContent: {
	          // We simply assume rsaEncryption here, since forge.pki only
	          // supports RSA so far.  If the PKI module supports other
	          // ciphers one day, we need to modify this one as well.
	          algorithm: forge.pki.oids.rsaEncryption,
	          key: cert.publicKey
	        }
	      });
	    },

	    /**
	     * Encrypt enveloped content.
	     *
	     * This function supports two optional arguments, cipher and key, which
	     * can be used to influence symmetric encryption.  Unless cipher is
	     * provided, the cipher specified in encryptedContent.algorithm is used
	     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
	     * is (re-)used.  If that one's not set, a random key will be generated
	     * automatically.
	     *
	     * @param [key] The key to be used for symmetric encryption.
	     * @param [cipher] The OID of the symmetric cipher to use.
	     */
	    encrypt: function(key, cipher) {
	      // Part 1: Symmetric encryption
	      if(msg.encryptedContent.content === undefined) {
	        cipher = cipher || msg.encryptedContent.algorithm;
	        key = key || msg.encryptedContent.key;

	        var keyLen, ivLen, ciphFn;
	        switch(cipher) {
	          case forge.pki.oids['aes128-CBC']:
	            keyLen = 16;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['aes192-CBC']:
	            keyLen = 24;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['aes256-CBC']:
	            keyLen = 32;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['des-EDE3-CBC']:
	            keyLen = 24;
	            ivLen = 8;
	            ciphFn = forge.des.createEncryptionCipher;
	            break;

	          default:
	            throw new Error('Unsupported symmetric cipher, OID ' + cipher);
	        }

	        if(key === undefined) {
	          key = forge.util.createBuffer(forge.random.getBytes(keyLen));
	        } else if(key.length() != keyLen) {
	          throw new Error('Symmetric key has wrong length; ' +
	            'got ' + key.length() + ' bytes, expected ' + keyLen + '.');
	        }

	        // Keep a copy of the key & IV in the object, so the caller can
	        // use it for whatever reason.
	        msg.encryptedContent.algorithm = cipher;
	        msg.encryptedContent.key = key;
	        msg.encryptedContent.parameter = forge.util.createBuffer(
	          forge.random.getBytes(ivLen));

	        var ciph = ciphFn(key);
	        ciph.start(msg.encryptedContent.parameter.copy());
	        ciph.update(msg.content);

	        // The finish function does PKCS#7 padding by default, therefore
	        // no action required by us.
	        if(!ciph.finish()) {
	          throw new Error('Symmetric encryption failed.');
	        }

	        msg.encryptedContent.content = ciph.output;
	      }

	      // Part 2: asymmetric encryption for each recipient
	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var recipient = msg.recipients[i];

	        // Nothing to do, encryption already done.
	        if(recipient.encryptedContent.content !== undefined) {
	          continue;
	        }

	        switch(recipient.encryptedContent.algorithm) {
	          case forge.pki.oids.rsaEncryption:
	            recipient.encryptedContent.content =
	              recipient.encryptedContent.key.encrypt(
	                msg.encryptedContent.key.data);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, OID ' +
	              recipient.encryptedContent.algorithm);
	        }
	      }
	    }
	  };
	  return msg;
	};

	/**
	 * Converts a single recipient from an ASN.1 object.
	 *
	 * @param obj the ASN.1 RecipientInfo.
	 *
	 * @return the recipient object.
	 */
	function _recipientFromAsn1(obj) {
	  // validate EnvelopedData content block and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' +
	      'ASN.1 object is not an PKCS#7 RecipientInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  return {
	    version: capture.version.charCodeAt(0),
	    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
	    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
	    encryptedContent: {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: capture.encParameter.value,
	      content: capture.encKey
	    }
	  };
	}

	/**
	 * Converts a single recipient object to an ASN.1 object.
	 *
	 * @param obj the recipient object.
	 *
	 * @return the ASN.1 RecipientInfo.
	 */
	function _recipientToAsn1(obj) {
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // Version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // IssuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Name
	      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // Serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge.util.hexToBytes(obj.serialNumber))
	    ]),
	    // KeyEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),
	      // Parameter, force NULL, only RSA supported for now.
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // EncryptedKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      obj.encryptedContent.content)
	  ]);
	}

	/**
	 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
	 *
	 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
	 *
	 * @return an array of recipient objects.
	 */
	function _recipientsFromAsn1(infos) {
	  var ret = [];
	  for(var i = 0; i < infos.length; ++i) {
	    ret.push(_recipientFromAsn1(infos[i]));
	  }
	  return ret;
	}

	/**
	 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
	 *
	 * @param recipients an array of recipientInfo objects.
	 *
	 * @return an array of ASN.1 RecipientInfos.
	 */
	function _recipientsToAsn1(recipients) {
	  var ret = [];
	  for(var i = 0; i < recipients.length; ++i) {
	    ret.push(_recipientToAsn1(recipients[i]));
	  }
	  return ret;
	}

	/**
	 * Converts a single signer from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a SignerInfo.
	 *
	 * @return the signer object.
	 */
	function _signerFromAsn1(obj) {
	  // validate EnvelopedData content block and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 SignerInfo. ' +
	      'ASN.1 object is not an PKCS#7 SignerInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var rval = {
	    version: capture.version.charCodeAt(0),
	    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
	    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
	    digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
	    signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
	    signature: capture.signature,
	    authenticatedAttributes: [],
	    unauthenticatedAttributes: []
	  };

	  // TODO: convert attributes
	  var authenticatedAttributes = capture.authenticatedAttributes || [];
	  var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];

	  return rval;
	}

	/**
	 * Converts a single signerInfo object to an ASN.1 object.
	 *
	 * @param obj the signerInfo object.
	 *
	 * @return the ASN.1 representation of a SignerInfo.
	 */
	function _signerToAsn1(obj) {
	  // SignerInfo
	  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // issuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // name
	      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge.util.hexToBytes(obj.serialNumber))
	    ]),
	    // digestAlgorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.digestAlgorithm).getBytes()),
	      // parameters (null)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ])
	  ]);

	  // authenticatedAttributes (OPTIONAL)
	  if(obj.authenticatedAttributesAsn1) {
	    // add ASN.1 previously generated during signing
	    rval.value.push(obj.authenticatedAttributesAsn1);
	  }

	  // digestEncryptionAlgorithm
	  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // algorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(obj.signatureAlgorithm).getBytes()),
	    // parameters (null)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	  ]));

	  // encryptedDigest
	  rval.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));

	  // unauthenticatedAttributes (OPTIONAL)
	  if(obj.unauthenticatedAttributes.length > 0) {
	    // [1] IMPLICIT
	    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
	    for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
	      var attr = obj.unauthenticatedAttributes[i];
	      attrsAsn1.values.push(_attributeToAsn1(attr));
	    }
	    rval.value.push(attrsAsn1);
	  }

	  return rval;
	}

	/**
	 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
	 *
	 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
	 *
	 * @return an array of signers objects.
	 */
	function _signersFromAsn1(signerInfoAsn1s) {
	  var ret = [];
	  for(var i = 0; i < signerInfoAsn1s.length; ++i) {
	    ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
	  }
	  return ret;
	}

	/**
	 * Map an array of signer objects to ASN.1 objects.
	 *
	 * @param signers an array of signer objects.
	 *
	 * @return an array of ASN.1 SignerInfos.
	 */
	function _signersToAsn1(signers) {
	  var ret = [];
	  for(var i = 0; i < signers.length; ++i) {
	    ret.push(_signerToAsn1(signers[i]));
	  }
	  return ret;
	}

	/**
	 * Convert an attribute object to an ASN.1 Attribute.
	 *
	 * @param attr the attribute object.
	 *
	 * @return the ASN.1 Attribute.
	 */
	function _attributeToAsn1(attr) {
	  var value;

	  // TODO: generalize to support more attributes
	  if(attr.type === forge.pki.oids.contentType) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.value).getBytes());
	  } else if(attr.type === forge.pki.oids.messageDigest) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      attr.value.bytes());
	  } else if(attr.type === forge.pki.oids.signingTime) {
	    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
	      (inclusive) MUST be encoded as UTCTime. Any dates with year values
	      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
	      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
	      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
	      number of seconds is zero.  Midnight (GMT) must be represented as
	      "YYMMDD000000Z". */
	    // TODO: make these module-level constants
	    var jan_1_1950 = new Date('Jan 1, 1950 00:00:00Z');
	    var jan_1_2050 = new Date('Jan 1, 2050 00:00:00Z');
	    var date = attr.value;
	    if(typeof date === 'string') {
	      // try to parse date
	      var timestamp = Date.parse(date);
	      if(!isNaN(timestamp)) {
	        date = new Date(timestamp);
	      } else if(date.length === 13) {
	        // YYMMDDHHMMSSZ (13 chars for UTCTime)
	        date = asn1.utcTimeToDate(date);
	      } else {
	        // assume generalized time
	        date = asn1.generalizedTimeToDate(date);
	      }
	    }

	    if(date >= jan_1_1950 && date < jan_1_2050) {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(date));
	    } else {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,
	        asn1.dateToGeneralizedTime(date));
	    }
	  }

	  // TODO: expose as common API call
	  // create a RelativeDistinguishedName set
	  // each value in the set is an AttributeTypeAndValue first
	  // containing the type (an OID) and second the value
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // AttributeType
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.type).getBytes()),
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	      // AttributeValue
	      value
	    ])
	  ]);
	}

	/**
	 * Map messages encrypted content to ASN.1 objects.
	 *
	 * @param ec The encryptedContent object of the message.
	 *
	 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
	 */
	function _encryptedContentToAsn1(ec) {
	  return [
	    // ContentType, always Data for the moment
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(forge.pki.oids.data).getBytes()),
	    // ContentEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(ec.algorithm).getBytes()),
	      // Parameters (IV)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	        ec.parameter.getBytes())
	    ]),
	    // [0] EncryptedContent
	    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	        ec.content.getBytes())
	    ])
	  ];
	}

	/**
	 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
	 *
	 * This function reads the "common part" of the PKCS#7 content blocks
	 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
	 * encrypted content block.
	 *
	 * The result of the ASN.1 validate and capture process is returned
	 * to allow the caller to extract further data, e.g. the list of recipients
	 * in case of a EnvelopedData object.
	 *
	 * @param msg the PKCS#7 object to read the data to.
	 * @param obj the ASN.1 representation of the content block.
	 * @param validator the ASN.1 structure validator object to use.
	 *
	 * @return the value map captured by validator object.
	 */
	function _fromAsn1(msg, obj, validator) {
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, validator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not a supported PKCS#7 message.');
	    error.errors = error;
	    throw error;
	  }

	  // Check contentType, so far we only support (raw) Data.
	  var contentType = asn1.derToOid(capture.contentType);
	  if(contentType !== forge.pki.oids.data) {
	    throw new Error('Unsupported PKCS#7 message. ' +
	      'Only wrapped ContentType Data supported.');
	  }

	  if(capture.encryptedContent) {
	    var content = '';
	    if(forge.util.isArray(capture.encryptedContent)) {
	      for(var i = 0; i < capture.encryptedContent.length; ++i) {
	        if(capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting encrypted ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.encryptedContent[i].value;
	      }
	    } else {
	      content = capture.encryptedContent;
	    }
	    msg.encryptedContent = {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: forge.util.createBuffer(capture.encParameter.value),
	      content: forge.util.createBuffer(content)
	    };
	  }

	  if(capture.content) {
	    var content = '';
	    if(forge.util.isArray(capture.content)) {
	      for(var i = 0; i < capture.content.length; ++i) {
	        if(capture.content[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.content[i].value;
	      }
	    } else {
	      content = capture.content;
	    }
	    msg.content = forge.util.createBuffer(content);
	  }

	  msg.version = capture.version.charCodeAt(0);
	  msg.rawCapture = capture;

	  return capture;
	}

	/**
	 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
	 *
	 * Decryption is skipped in case the PKCS#7 message object already has a
	 * (decrypted) content attribute.  The algorithm, key and cipher parameters
	 * (probably the iv) are taken from the encryptedContent attribute of the
	 * message object.
	 *
	 * @param The PKCS#7 message object.
	 */
	function _decryptContent(msg) {
	  if(msg.encryptedContent.key === undefined) {
	    throw new Error('Symmetric key not available.');
	  }

	  if(msg.content === undefined) {
	    var ciph;

	    switch(msg.encryptedContent.algorithm) {
	      case forge.pki.oids['aes128-CBC']:
	      case forge.pki.oids['aes192-CBC']:
	      case forge.pki.oids['aes256-CBC']:
	        ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      case forge.pki.oids['desCBC']:
	      case forge.pki.oids['des-EDE3-CBC']:
	        ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      default:
	        throw new Error('Unsupported symmetric cipher, OID ' +
	          msg.encryptedContent.algorithm);
	    }
	    ciph.start(msg.encryptedContent.parameter);
	    ciph.update(msg.encryptedContent.content);

	    if(!ciph.finish()) {
	      throw new Error('Symmetric decryption failed.');
	    }

	    msg.content = ciph.output;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs7';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs7',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './oids',
	  './pem',
	  './pkcs7asn1',
	  './random',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Functions to output keys in SSH-friendly formats.
	 *
	 * This is part of the Forge project which may be used under the terms of
	 * either the BSD License or the GNU General Public License (GPL) Version 2.
	 *
	 * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE
	 *
	 * @author https://github.com/shellac
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var ssh = forge.ssh = forge.ssh || {};

	/**
	 * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.
	 *
	 * @param privateKey the key.
	 * @param passphrase a passphrase to protect the key (falsy for no encryption).
	 * @param comment a comment to include in the key file.
	 *
	 * @return the PPK file as a string.
	 */
	ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {
	  comment = comment || '';
	  passphrase = passphrase || '';
	  var algorithm = 'ssh-rsa';
	  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';

	  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\r\n';
	  ppk += 'Encryption: ' + encryptionAlgorithm + '\r\n';
	  ppk += 'Comment: ' + comment + '\r\n';

	  // public key into buffer for ppk
	  var pubbuffer = forge.util.createBuffer();
	  _addStringToBuffer(pubbuffer, algorithm);
	  _addBigIntegerToBuffer(pubbuffer, privateKey.e);
	  _addBigIntegerToBuffer(pubbuffer, privateKey.n);

	  // write public key
	  var pub = forge.util.encode64(pubbuffer.bytes(), 64);
	  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \r\n
	  ppk += 'Public-Lines: ' + length + '\r\n';
	  ppk += pub;

	  // private key into a buffer
	  var privbuffer = forge.util.createBuffer();
	  _addBigIntegerToBuffer(privbuffer, privateKey.d);
	  _addBigIntegerToBuffer(privbuffer, privateKey.p);
	  _addBigIntegerToBuffer(privbuffer, privateKey.q);
	  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);

	  // optionally encrypt the private key
	  var priv;
	  if(!passphrase) {
	    // use the unencrypted buffer
	    priv = forge.util.encode64(privbuffer.bytes(), 64);
	  } else {
	    // encrypt RSA key using passphrase
	    var encLen = privbuffer.length() + 16 - 1;
	    encLen -= encLen % 16;

	    // pad private key with sha1-d data -- needs to be a multiple of 16
	    var padding = _sha1(privbuffer.bytes());

	    padding.truncate(padding.length() - encLen + privbuffer.length());
	    privbuffer.putBuffer(padding);

	    var aeskey = forge.util.createBuffer();
	    aeskey.putBuffer(_sha1('\x00\x00\x00\x00', passphrase));
	    aeskey.putBuffer(_sha1('\x00\x00\x00\x01', passphrase));

	    // encrypt some bytes using CBC mode
	    // key is 40 bytes, so truncate *by* 8 bytes
	    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');
	    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));
	    cipher.update(privbuffer.copy());
	    cipher.finish();
	    var encrypted = cipher.output;

	    // Note: this appears to differ from Putty -- is forge wrong, or putty?
	    // due to padding we finish as an exact multiple of 16
	    encrypted.truncate(16); // all padding

	    priv = forge.util.encode64(encrypted.bytes(), 64);
	  }

	  // output private key
	  length = Math.floor(priv.length / 66) + 1; // 64 + \r\n
	  ppk += '\r\nPrivate-Lines: ' + length + '\r\n';
	  ppk += priv;

	  // MAC
	  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);

	  var macbuffer = forge.util.createBuffer();
	  _addStringToBuffer(macbuffer, algorithm);
	  _addStringToBuffer(macbuffer, encryptionAlgorithm);
	  _addStringToBuffer(macbuffer, comment);
	  macbuffer.putInt32(pubbuffer.length());
	  macbuffer.putBuffer(pubbuffer);
	  macbuffer.putInt32(privbuffer.length());
	  macbuffer.putBuffer(privbuffer);

	  var hmac = forge.hmac.create();
	  hmac.start('sha1', mackey);
	  hmac.update(macbuffer.bytes());

	  ppk += '\r\nPrivate-MAC: ' + hmac.digest().toHex() + '\r\n';

	  return ppk;
	};

	/**
	 * Encodes a public RSA key as an OpenSSH file.
	 *
	 * @param key the key.
	 * @param comment a comment.
	 *
	 * @return the public key in OpenSSH format.
	 */
	ssh.publicKeyToOpenSSH = function(key, comment) {
	  var type = 'ssh-rsa';
	  comment = comment || '';

	  var buffer = forge.util.createBuffer();
	  _addStringToBuffer(buffer, type);
	  _addBigIntegerToBuffer(buffer, key.e);
	  _addBigIntegerToBuffer(buffer, key.n);

	  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;
	};

	/**
	 * Encodes a private RSA key as an OpenSSH file.
	 *
	 * @param key the key.
	 * @param passphrase a passphrase to protect the key (falsy for no encryption).
	 *
	 * @return the public key in OpenSSH format.
	 */
	ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {
	  if(!passphrase) {
	    return forge.pki.privateKeyToPem(privateKey);
	  }
	  // OpenSSH private key is just a legacy format, it seems
	  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,
	    {legacy: true, algorithm: 'aes128'});
	};

	/**
	 * Gets the SSH fingerprint for the given public key.
	 *
	 * @param options the options to use.
	 *          [md] the message digest object to use (defaults to forge.md.md5).
	 *          [encoding] an alternative output encoding, such as 'hex'
	 *            (defaults to none, outputs a byte buffer).
	 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
	 *            output, eg: ':' (defaults to none).
	 *
	 * @return the fingerprint as a byte buffer or other encoding based on options.
	 */
	ssh.getPublicKeyFingerprint = function(key, options) {
	  options = options || {};
	  var md = options.md || forge.md.md5.create();

	  var type = 'ssh-rsa';
	  var buffer = forge.util.createBuffer();
	  _addStringToBuffer(buffer, type);
	  _addBigIntegerToBuffer(buffer, key.e);
	  _addBigIntegerToBuffer(buffer, key.n);

	  // hash public key bytes
	  md.start();
	  md.update(buffer.getBytes());
	  var digest = md.digest();
	  if(options.encoding === 'hex') {
	    var hex = digest.toHex();
	    if(options.delimiter) {
	      return hex.match(/.{2}/g).join(options.delimiter);
	    }
	    return hex;
	  } else if(options.encoding === 'binary') {
	    return digest.getBytes();
	  } else if(options.encoding) {
	    throw new Error('Unknown encoding "' + options.encoding + '".');
	  }
	  return digest;
	};

	/**
	 * Adds len(val) then val to a buffer.
	 *
	 * @param buffer the buffer to add to.
	 * @param val a big integer.
	 */
	function _addBigIntegerToBuffer(buffer, val) {
	  var hexVal = val.toString(16);
	  // ensure 2s complement +ve
	  if(hexVal[0] >= '8') {
	    hexVal = '00' + hexVal;
	  }
	  var bytes = forge.util.hexToBytes(hexVal);
	  buffer.putInt32(bytes.length);
	  buffer.putBytes(bytes);
	}

	/**
	 * Adds len(val) then val to a buffer.
	 *
	 * @param buffer the buffer to add to.
	 * @param val a string.
	 */
	function _addStringToBuffer(buffer, val) {
	  buffer.putInt32(val.length);
	  buffer.putString(val);
	}

	/**
	 * Hashes the arguments into one value using SHA-1.
	 *
	 * @return the sha1 hash of the provided arguments.
	 */
	function _sha1() {
	  var sha = forge.md.sha1.create();
	  var num = arguments.length;
	  for (var i = 0; i < num; ++i) {
	    sha.update(arguments[i]);
	  }
	  return sha.digest();
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'ssh';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/ssh',[
	  'require',
	  'module',
	  './aes',
	  './hmac',
	  './md5',
	  './sha1',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Support for concurrent task management and synchronization in web
	 * applications.
	 *
	 * @author Dave Longley
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright (c) 2009-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// logging category
	var cat = 'forge.task';

	// verbose level
	// 0: off, 1: a little, 2: a whole lot
	// Verbose debug logging is surrounded by a level check to avoid the
	// performance issues with even calling the logging code regardless if it
	// is actually logged.  For performance reasons this should not be set to 2
	// for production use.
	// ex: if(sVL >= 2) forge.log.verbose(....)
	var sVL = 0;

	// track tasks for debugging
	var sTasks = {};
	var sNextTaskId = 0;
	// debug access
	forge.debug.set(cat, 'tasks', sTasks);

	// a map of task type to task queue
	var sTaskQueues = {};
	// debug access
	forge.debug.set(cat, 'queues', sTaskQueues);

	// name for unnamed tasks
	var sNoTaskName = '?';

	// maximum number of doNext() recursions before a context swap occurs
	// FIXME: might need to tweak this based on the browser
	var sMaxRecursions = 30;

	// time slice for doing tasks before a context swap occurs
	// FIXME: might need to tweak this based on the browser
	var sTimeSlice = 20;

	/**
	 * Task states.
	 *
	 * READY: ready to start processing
	 * RUNNING: task or a subtask is running
	 * BLOCKED: task is waiting to acquire N permits to continue
	 * SLEEPING: task is sleeping for a period of time
	 * DONE: task is done
	 * ERROR: task has an error
	 */
	var READY = 'ready';
	var RUNNING = 'running';
	var BLOCKED = 'blocked';
	var SLEEPING = 'sleeping';
	var DONE = 'done';
	var ERROR = 'error';

	/**
	 * Task actions.  Used to control state transitions.
	 *
	 * STOP: stop processing
	 * START: start processing tasks
	 * BLOCK: block task from continuing until 1 or more permits are released
	 * UNBLOCK: release one or more permits
	 * SLEEP: sleep for a period of time
	 * WAKEUP: wakeup early from SLEEPING state
	 * CANCEL: cancel further tasks
	 * FAIL: a failure occured
	 */
	var STOP = 'stop';
	var START = 'start';
	var BLOCK = 'block';
	var UNBLOCK = 'unblock';
	var SLEEP = 'sleep';
	var WAKEUP = 'wakeup';
	var CANCEL = 'cancel';
	var FAIL = 'fail';

	/**
	 * State transition table.
	 *
	 * nextState = sStateTable[currentState][action]
	 */
	var sStateTable = {};

	sStateTable[READY] = {};
	sStateTable[READY][STOP] = READY;
	sStateTable[READY][START] = RUNNING;
	sStateTable[READY][CANCEL] = DONE;
	sStateTable[READY][FAIL] = ERROR;

	sStateTable[RUNNING] = {};
	sStateTable[RUNNING][STOP] = READY;
	sStateTable[RUNNING][START] = RUNNING;
	sStateTable[RUNNING][BLOCK] = BLOCKED;
	sStateTable[RUNNING][UNBLOCK] = RUNNING;
	sStateTable[RUNNING][SLEEP] = SLEEPING;
	sStateTable[RUNNING][WAKEUP] = RUNNING;
	sStateTable[RUNNING][CANCEL] = DONE;
	sStateTable[RUNNING][FAIL] = ERROR;

	sStateTable[BLOCKED] = {};
	sStateTable[BLOCKED][STOP] = BLOCKED;
	sStateTable[BLOCKED][START] = BLOCKED;
	sStateTable[BLOCKED][BLOCK] = BLOCKED;
	sStateTable[BLOCKED][UNBLOCK] = BLOCKED;
	sStateTable[BLOCKED][SLEEP] = BLOCKED;
	sStateTable[BLOCKED][WAKEUP] = BLOCKED;
	sStateTable[BLOCKED][CANCEL] = DONE;
	sStateTable[BLOCKED][FAIL] = ERROR;

	sStateTable[SLEEPING] = {};
	sStateTable[SLEEPING][STOP] = SLEEPING;
	sStateTable[SLEEPING][START] = SLEEPING;
	sStateTable[SLEEPING][BLOCK] = SLEEPING;
	sStateTable[SLEEPING][UNBLOCK] = SLEEPING;
	sStateTable[SLEEPING][SLEEP] = SLEEPING;
	sStateTable[SLEEPING][WAKEUP] = SLEEPING;
	sStateTable[SLEEPING][CANCEL] = DONE;
	sStateTable[SLEEPING][FAIL] = ERROR;

	sStateTable[DONE] = {};
	sStateTable[DONE][STOP] = DONE;
	sStateTable[DONE][START] = DONE;
	sStateTable[DONE][BLOCK] = DONE;
	sStateTable[DONE][UNBLOCK] = DONE;
	sStateTable[DONE][SLEEP] = DONE;
	sStateTable[DONE][WAKEUP] = DONE;
	sStateTable[DONE][CANCEL] = DONE;
	sStateTable[DONE][FAIL] = ERROR;

	sStateTable[ERROR] = {};
	sStateTable[ERROR][STOP] = ERROR;
	sStateTable[ERROR][START] = ERROR;
	sStateTable[ERROR][BLOCK] = ERROR;
	sStateTable[ERROR][UNBLOCK] = ERROR;
	sStateTable[ERROR][SLEEP] = ERROR;
	sStateTable[ERROR][WAKEUP] = ERROR;
	sStateTable[ERROR][CANCEL] = ERROR;
	sStateTable[ERROR][FAIL] = ERROR;

	/**
	 * Creates a new task.
	 *
	 * @param options options for this task
	 *   run: the run function for the task (required)
	 *   name: the run function for the task (optional)
	 *   parent: parent of this task (optional)
	 *
	 * @return the empty task.
	 */
	var Task = function(options) {
	  // task id
	  this.id = -1;

	  // task name
	  this.name = options.name || sNoTaskName;

	  // task has no parent
	  this.parent = options.parent || null;

	  // save run function
	  this.run = options.run;

	  // create a queue of subtasks to run
	  this.subtasks = [];

	  // error flag
	  this.error = false;

	  // state of the task
	  this.state = READY;

	  // number of times the task has been blocked (also the number
	  // of permits needed to be released to continue running)
	  this.blocks = 0;

	  // timeout id when sleeping
	  this.timeoutId = null;

	  // no swap time yet
	  this.swapTime = null;

	  // no user data
	  this.userData = null;

	  // initialize task
	  // FIXME: deal with overflow
	  this.id = sNextTaskId++;
	  sTasks[this.id] = this;
	  if(sVL >= 1) {
	    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);
	  }
	};

	/**
	 * Logs debug information on this task and the system state.
	 */
	Task.prototype.debug = function(msg) {
	  msg = msg || '';
	  forge.log.debug(cat, msg,
	    '[%s][%s] task:', this.id, this.name, this,
	    'subtasks:', this.subtasks.length,
	    'queue:', sTaskQueues);
	};

	/**
	 * Adds a subtask to run after task.doNext() or task.fail() is called.
	 *
	 * @param name human readable name for this task (optional).
	 * @param subrun a function to run that takes the current task as
	 *          its first parameter.
	 *
	 * @return the current task (useful for chaining next() calls).
	 */
	Task.prototype.next = function(name, subrun) {
	  // juggle parameters if it looks like no name is given
	  if(typeof(name) === 'function') {
	    subrun = name;

	    // inherit parent's name
	    name = this.name;
	  }
	  // create subtask, set parent to this task, propagate callbacks
	  var subtask = new Task({
	    run: subrun,
	    name: name,
	    parent: this
	  });
	  // start subtasks running
	  subtask.state = RUNNING;
	  subtask.type = this.type;
	  subtask.successCallback = this.successCallback || null;
	  subtask.failureCallback = this.failureCallback || null;

	  // queue a new subtask
	  this.subtasks.push(subtask);

	  return this;
	};

	/**
	 * Adds subtasks to run in parallel after task.doNext() or task.fail()
	 * is called.
	 *
	 * @param name human readable name for this task (optional).
	 * @param subrun functions to run that take the current task as
	 *          their first parameter.
	 *
	 * @return the current task (useful for chaining next() calls).
	 */
	Task.prototype.parallel = function(name, subrun) {
	  // juggle parameters if it looks like no name is given
	  if(forge.util.isArray(name)) {
	    subrun = name;

	    // inherit parent's name
	    name = this.name;
	  }
	  // Wrap parallel tasks in a regular task so they are started at the
	  // proper time.
	  return this.next(name, function(task) {
	    // block waiting for subtasks
	    var ptask = task;
	    ptask.block(subrun.length);

	    // we pass the iterator from the loop below as a parameter
	    // to a function because it is otherwise included in the
	    // closure and changes as the loop changes -- causing i
	    // to always be set to its highest value
	    var startParallelTask = function(pname, pi) {
	      forge.task.start({
	        type: pname,
	        run: function(task) {
	           subrun[pi](task);
	        },
	        success: function(task) {
	           ptask.unblock();
	        },
	        failure: function(task) {
	           ptask.unblock();
	        }
	      });
	    };

	    for(var i = 0; i < subrun.length; i++) {
	      // Type must be unique so task starts in parallel:
	      //    name + private string + task id + sub-task index
	      // start tasks in parallel and unblock when the finish
	      var pname = name + '__parallel-' + task.id + '-' + i;
	      var pi = i;
	      startParallelTask(pname, pi);
	    }
	  });
	};

	/**
	 * Stops a running task.
	 */
	Task.prototype.stop = function() {
	  this.state = sStateTable[this.state][STOP];
	};

	/**
	 * Starts running a task.
	 */
	Task.prototype.start = function() {
	  this.error = false;
	  this.state = sStateTable[this.state][START];

	  // try to restart
	  if(this.state === RUNNING) {
	    this.start = new Date();
	    this.run(this);
	    runNext(this, 0);
	  }
	};

	/**
	 * Blocks a task until it one or more permits have been released. The
	 * task will not resume until the requested number of permits have
	 * been released with call(s) to unblock().
	 *
	 * @param n number of permits to wait for(default: 1).
	 */
	Task.prototype.block = function(n) {
	  n = typeof(n) === 'undefined' ? 1 : n;
	  this.blocks += n;
	  if(this.blocks > 0) {
	    this.state = sStateTable[this.state][BLOCK];
	  }
	};

	/**
	 * Releases a permit to unblock a task. If a task was blocked by
	 * requesting N permits via block(), then it will only continue
	 * running once enough permits have been released via unblock() calls.
	 *
	 * If multiple processes need to synchronize with a single task then
	 * use a condition variable (see forge.task.createCondition). It is
	 * an error to unblock a task more times than it has been blocked.
	 *
	 * @param n number of permits to release (default: 1).
	 *
	 * @return the current block count (task is unblocked when count is 0)
	 */
	Task.prototype.unblock = function(n) {
	  n = typeof(n) === 'undefined' ? 1 : n;
	  this.blocks -= n;
	  if(this.blocks === 0 && this.state !== DONE) {
	    this.state = RUNNING;
	    runNext(this, 0);
	  }
	  return this.blocks;
	};

	/**
	 * Sleep for a period of time before resuming tasks.
	 *
	 * @param n number of milliseconds to sleep (default: 0).
	 */
	Task.prototype.sleep = function(n) {
	  n = typeof(n) === 'undefined' ? 0 : n;
	  this.state = sStateTable[this.state][SLEEP];
	  var self = this;
	  this.timeoutId = setTimeout(function() {
	    self.timeoutId = null;
	    self.state = RUNNING;
	    runNext(self, 0);
	  }, n);
	};

	/**
	 * Waits on a condition variable until notified. The next task will
	 * not be scheduled until notification. A condition variable can be
	 * created with forge.task.createCondition().
	 *
	 * Once cond.notify() is called, the task will continue.
	 *
	 * @param cond the condition variable to wait on.
	 */
	Task.prototype.wait = function(cond) {
	  cond.wait(this);
	};

	/**
	 * If sleeping, wakeup and continue running tasks.
	 */
	Task.prototype.wakeup = function() {
	  if(this.state === SLEEPING) {
	    cancelTimeout(this.timeoutId);
	    this.timeoutId = null;
	    this.state = RUNNING;
	    runNext(this, 0);
	  }
	};

	/**
	 * Cancel all remaining subtasks of this task.
	 */
	Task.prototype.cancel = function() {
	  this.state = sStateTable[this.state][CANCEL];
	  // remove permits needed
	  this.permitsNeeded = 0;
	  // cancel timeouts
	  if(this.timeoutId !== null) {
	    cancelTimeout(this.timeoutId);
	    this.timeoutId = null;
	  }
	  // remove subtasks
	  this.subtasks = [];
	};

	/**
	 * Finishes this task with failure and sets error flag. The entire
	 * task will be aborted unless the next task that should execute
	 * is passed as a parameter. This allows levels of subtasks to be
	 * skipped. For instance, to abort only this tasks's subtasks, then
	 * call fail(task.parent). To abort this task's subtasks and its
	 * parent's subtasks, call fail(task.parent.parent). To abort
	 * all tasks and simply call the task callback, call fail() or
	 * fail(null).
	 *
	 * The task callback (success or failure) will always, eventually, be
	 * called.
	 *
	 * @param next the task to continue at, or null to abort entirely.
	 */
	Task.prototype.fail = function(next) {
	  // set error flag
	  this.error = true;

	  // finish task
	  finish(this, true);

	  if(next) {
	    // propagate task info
	    next.error = this.error;
	    next.swapTime = this.swapTime;
	    next.userData = this.userData;

	    // do next task as specified
	    runNext(next, 0);
	  } else {
	    if(this.parent !== null) {
	      // finish root task (ensures it is removed from task queue)
	      var parent = this.parent;
	      while(parent.parent !== null) {
	        // propagate task info
	        parent.error = this.error;
	        parent.swapTime = this.swapTime;
	        parent.userData = this.userData;
	        parent = parent.parent;
	      }
	      finish(parent, true);
	    }

	    // call failure callback if one exists
	    if(this.failureCallback) {
	      this.failureCallback(this);
	    }
	  }
	};

	/**
	 * Asynchronously start a task.
	 *
	 * @param task the task to start.
	 */
	var start = function(task) {
	  task.error = false;
	  task.state = sStateTable[task.state][START];
	  setTimeout(function() {
	    if(task.state === RUNNING) {
	      task.swapTime = +new Date();
	      task.run(task);
	      runNext(task, 0);
	    }
	  }, 0);
	};

	/**
	 * Run the next subtask or finish this task.
	 *
	 * @param task the task to process.
	 * @param recurse the recursion count.
	 */
	var runNext = function(task, recurse) {
	  // get time since last context swap (ms), if enough time has passed set
	  // swap to true to indicate that doNext was performed asynchronously
	  // also, if recurse is too high do asynchronously
	  var swap =
	    (recurse > sMaxRecursions) ||
	    (+new Date() - task.swapTime) > sTimeSlice;

	  var doNext = function(recurse) {
	    recurse++;
	    if(task.state === RUNNING) {
	      if(swap) {
	        // update swap time
	        task.swapTime = +new Date();
	      }

	      if(task.subtasks.length > 0) {
	        // run next subtask
	        var subtask = task.subtasks.shift();
	        subtask.error = task.error;
	        subtask.swapTime = task.swapTime;
	        subtask.userData = task.userData;
	        subtask.run(subtask);
	        if(!subtask.error) {
	           runNext(subtask, recurse);
	        }
	      } else {
	        finish(task);

	        if(!task.error) {
	          // chain back up and run parent
	          if(task.parent !== null) {
	            // propagate task info
	            task.parent.error = task.error;
	            task.parent.swapTime = task.swapTime;
	            task.parent.userData = task.userData;

	            // no subtasks left, call run next subtask on parent
	            runNext(task.parent, recurse);
	          }
	        }
	      }
	    }
	  };

	  if(swap) {
	    // we're swapping, so run asynchronously
	    setTimeout(doNext, 0);
	  } else {
	    // not swapping, so run synchronously
	    doNext(recurse);
	  }
	};

	/**
	 * Finishes a task and looks for the next task in the queue to start.
	 *
	 * @param task the task to finish.
	 * @param suppressCallbacks true to suppress callbacks.
	 */
	var finish = function(task, suppressCallbacks) {
	  // subtask is now done
	  task.state = DONE;

	  delete sTasks[task.id];
	  if(sVL >= 1) {
	    forge.log.verbose(cat, '[%s][%s] finish',
	      task.id, task.name, task);
	  }

	  // only do queue processing for root tasks
	  if(task.parent === null) {
	    // report error if queue is missing
	    if(!(task.type in sTaskQueues)) {
	      forge.log.error(cat,
	        '[%s][%s] task queue missing [%s]',
	        task.id, task.name, task.type);
	    } else if(sTaskQueues[task.type].length === 0) {
	      // report error if queue is empty
	      forge.log.error(cat,
	        '[%s][%s] task queue empty [%s]',
	        task.id, task.name, task.type);
	    } else if(sTaskQueues[task.type][0] !== task) {
	      // report error if this task isn't the first in the queue
	      forge.log.error(cat,
	        '[%s][%s] task not first in queue [%s]',
	        task.id, task.name, task.type);
	    } else {
	      // remove ourselves from the queue
	      sTaskQueues[task.type].shift();
	      // clean up queue if it is empty
	      if(sTaskQueues[task.type].length === 0) {
	        if(sVL >= 1) {
	          forge.log.verbose(cat, '[%s][%s] delete queue [%s]',
	            task.id, task.name, task.type);
	        }
	        /* Note: Only a task can delete a queue of its own type. This
	         is used as a way to synchronize tasks. If a queue for a certain
	         task type exists, then a task of that type is running.
	         */
	        delete sTaskQueues[task.type];
	      } else {
	        // dequeue the next task and start it
	        if(sVL >= 1) {
	          forge.log.verbose(cat,
	            '[%s][%s] queue start next [%s] remain:%s',
	            task.id, task.name, task.type,
	            sTaskQueues[task.type].length);
	        }
	        sTaskQueues[task.type][0].start();
	      }
	    }

	    if(!suppressCallbacks) {
	      // call final callback if one exists
	      if(task.error && task.failureCallback) {
	        task.failureCallback(task);
	      } else if(!task.error && task.successCallback) {
	        task.successCallback(task);
	      }
	    }
	  }
	};

	/* Tasks API */
	forge.task = forge.task || {};

	/**
	 * Starts a new task that will run the passed function asynchronously.
	 *
	 * In order to finish the task, either task.doNext() or task.fail()
	 * *must* be called.
	 *
	 * The task must have a type (a string identifier) that can be used to
	 * synchronize it with other tasks of the same type. That type can also
	 * be used to cancel tasks that haven't started yet.
	 *
	 * To start a task, the following object must be provided as a parameter
	 * (each function takes a task object as its first parameter):
	 *
	 * {
	 *   type: the type of task.
	 *   run: the function to run to execute the task.
	 *   success: a callback to call when the task succeeds (optional).
	 *   failure: a callback to call when the task fails (optional).
	 * }
	 *
	 * @param options the object as described above.
	 */
	forge.task.start = function(options) {
	  // create a new task
	  var task = new Task({
	    run: options.run,
	    name: options.name || sNoTaskName
	  });
	  task.type = options.type;
	  task.successCallback = options.success || null;
	  task.failureCallback = options.failure || null;

	  // append the task onto the appropriate queue
	  if(!(task.type in sTaskQueues)) {
	    if(sVL >= 1) {
	      forge.log.verbose(cat, '[%s][%s] create queue [%s]',
	        task.id, task.name, task.type);
	    }
	    // create the queue with the new task
	    sTaskQueues[task.type] = [task];
	    start(task);
	  } else {
	    // push the task onto the queue, it will be run after a task
	    // with the same type completes
	    sTaskQueues[options.type].push(task);
	  }
	};

	/**
	 * Cancels all tasks of the given type that haven't started yet.
	 *
	 * @param type the type of task to cancel.
	 */
	forge.task.cancel = function(type) {
	  // find the task queue
	  if(type in sTaskQueues) {
	    // empty all but the current task from the queue
	    sTaskQueues[type] = [sTaskQueues[type][0]];
	  }
	};

	/**
	 * Creates a condition variable to synchronize tasks. To make a task wait
	 * on the condition variable, call task.wait(condition). To notify all
	 * tasks that are waiting, call condition.notify().
	 *
	 * @return the condition variable.
	 */
	forge.task.createCondition = function() {
	  var cond = {
	    // all tasks that are blocked
	    tasks: {}
	  };

	  /**
	   * Causes the given task to block until notify is called. If the task
	   * is already waiting on this condition then this is a no-op.
	   *
	   * @param task the task to cause to wait.
	   */
	  cond.wait = function(task) {
	    // only block once
	    if(!(task.id in cond.tasks)) {
	       task.block();
	       cond.tasks[task.id] = task;
	    }
	  };

	  /**
	   * Notifies all waiting tasks to wake up.
	   */
	  cond.notify = function() {
	    // since unblock() will run the next task from here, make sure to
	    // clear the condition's blocked task list before unblocking
	    var tmp = cond.tasks;
	    cond.tasks = {};
	    for(var id in tmp) {
	      tmp[id].unblock();
	    }
	  };

	  return cond;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'task';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/task',['require', 'module', './debug', './log', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2014 Digital Bazaar, Inc.
	 */
	(function() {
	var name = 'forge';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      // set to true to disable native code if even it's available
	      forge = {disableNativeCode: false};
	    }
	    return;
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    });
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge;
	  };
	  // set to true to disable native code if even it's available
	  module.exports.disableNativeCode = false;
	  module.exports(module.exports);
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/forge',[
	  'require',
	  'module',
	  './aes',
	  './aesCipherSuites',
	  './asn1',
	  './cipher',
	  './cipherModes',
	  './debug',
	  './des',
	  './hmac',
	  './kem',
	  './log',
	  './md',
	  './mgf1',
	  './pbkdf2',
	  './pem',
	  './pkcs7',
	  './pkcs1',
	  './pkcs12',
	  './pki',
	  './prime',
	  './prng',
	  './pss',
	  './random',
	  './rc2',
	  './ssh',
	  './task',
	  './tls',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();


	return require('js/forge');

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(12).setImmediate, __webpack_require__(13)(module), __webpack_require__(14).Buffer))

/***/ },
/* 11 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function () {
	            throw new Error('setTimeout is not defined');
	        }
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function () {
	            throw new Error('clearTimeout is not defined');
	        }
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(11).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(12).setImmediate, __webpack_require__(12).clearImmediate))

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(15)
	var ieee754 = __webpack_require__(16)
	var isArray = __webpack_require__(17)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14).Buffer, (function() { return this; }())))

/***/ },
/* 15 */
/***/ function(module, exports) {

	'use strict'

	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	function init () {
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup[i] = code[i]
	    revLookup[code.charCodeAt(i)] = i
	  }

	  revLookup['-'.charCodeAt(0)] = 62
	  revLookup['_'.charCodeAt(0)] = 63
	}

	init()

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 16 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 17 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const msg_types = __webpack_require__(8).enums,
		pki = __webpack_require__(10).pki,
		WS = __webpack_require__(19),
		random = __webpack_require__(10).random,
		cipher = __webpack_require__(10).cipher,
		forgeUtil = __webpack_require__(10).util,
		u = __webpack_require__(3);

	// let WS;
	// try {
	// 	WS = WebSocket;
	// } catch (e) {
	// 	WS = require("ws");
	// }

	class BootstrapChannelClient {
		// Single use bootstrap connection class.

		constructor(wsAddr, chord){
			this._manager = null;
			this.ws = null;
			this.addr = wsAddr;
			this.chord = chord;

			this.finalID = null;
			this.initialID = chord.id.idString;
			this.renamed = false;

			this.serverPem = null;
		}

		get internalID(){
			return "Boot-Client";
		}

		onbind(){
			let t = this;
			this.ws = new WS(this.addr);
			u.log(t.chord, "Opening WebSocket connection.");

			return new Promise((resolve, reject) => {
				this.ws.onopen = () => {
					u.log(t.chord, "WebSocket opened.");
					//Take over the message handler until registration is done.
					this.ws.onmessage = evt => {
						u.log(t.chord, "Received welcome message from server.")
						let obj = JSON.parse(evt.data);
						u.log(t.chord, obj);
						switch(obj.type){
							case "bstrap-wel":
								u.log(t.chord, "Server has replied, perform the exchange of IDs.");
								this.finalID = obj.id;
								this.serverPem = obj.data;
								this.serverKeyObj = pki.publicKeyFromPem(this.serverPem);

								this.aesKey = this.chord.key.privateKey.decrypt(obj.encKey, "RSA-OAEP")

								this.ws.onmessage = evt => {t._manager.response(evt, t);};
								resolve(true);
								break;
							default:
								throw new Error("Illegal class "+type+" of message sent to "+this.internalID+" channel!");
						}
					};

					u.log(t.chord, "Asking server for its ID on the network.");
					safeSend(this.ws, {
						type: "bstrap-reg",
						id: this.initialID,
						data: this.chord.pubKeyPem
					});
				};

				this.ws.onerror = (e) => {reject(e);};
			});
		}

		send(id, type, data){
			u.log(this.chord, "BSTRAP: SENDING");

			let iv = random.getBytesSync(12),
				cipherObj = cipher.createCipher('AES-GCM', this.aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128
			});

			cipherObj.update(forgeUtil.createBuffer(JSON.stringify(data)));
			cipherObj.finish();

			let obj = {
				id: this.initialID,
				// encIv: this.serverKeyObj.encrypt(iv),
				iv: iv,
				data: cipherObj.output.data,
				tag: cipherObj.mode.tag.data
			};

			switch(type){
				case msg_types.MSG_SDP_OFFER:
					//In this case, id refers to the CLIENT'S ID.
					this.renamed = true;
					this._manager.renameConnection(this.initialID, this.finalID);
					this._manager.confirmName(this.finalID);
					obj.type = "bstrap-offer";
					break;
				case msg_types.MSG_ICE:
					obj.type = "bstrap-ice";
					break;
				default:
					throw new Error("Illegal class "+type+" of message sent to "+this.internalID+" channel!");
			}

			safeSend(this.ws, obj);
		}

		onmessage(evt){
			u.log(this.chord, "Client bootstrap received message:");

			let obj = JSON.parse(evt.data),
				iv = obj.iv,//this.chord.key.privateKey.decrypt(obj.encIv, "RSA-OAEP"),
				decipher = cipher.createDecipher('AES-GCM', this.aesKey);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128,
				tag: obj.tag
			});

			decipher.update(forgeUtil.createBuffer(obj.data));
			let success = decipher.finish();
			
			let out = {
				type: null,
				data: (success) ? JSON.parse(decipher.output.data) : "",
				id: null
			};

			u.log(this.chord, obj)

			switch(obj.type){
				case "bstrap-ice":
					out.type = msg_types.RESPONSE_ICE;
					break;
				case "bstrap-reply":
					out.type = msg_types.RESPONSE_SDP_ANSWER;
					break;
				default:
					out.type = msg_types.RESPONSE_NONE;
					break;
			}

			// out.id = this.renamed ? this.finalID : this.initialID;
			out.id = this.finalID;

			return out;
		}

		close(){
			this.ws.close();
		}
	}

	function safeSend(ws, obj){
		try{
			ws.send(JSON.stringify(obj));
		} catch (e) {
			console.log(e);
		}
	}

	module.exports = BootstrapChannelClient;


/***/ },
/* 19 */
/***/ function(module, exports) {

	
	/**
	 * Module dependencies.
	 */

	var global = (function() { return this; })();

	/**
	 * WebSocket constructor.
	 */

	var WebSocket = global.WebSocket || global.MozWebSocket;

	/**
	 * Module exports.
	 */

	module.exports = WebSocket ? ws : null;

	/**
	 * WebSocket constructor.
	 *
	 * The third `opts` options object gets ignored in web browsers, since it's
	 * non-standard, and throws a TypeError if passed to the constructor.
	 * See: https://github.com/einaros/ws/issues/227
	 *
	 * @param {String} uri
	 * @param {Array} protocols (optional)
	 * @param {Object) opts (optional)
	 * @api public
	 */

	function ws(uri, protocols, opts) {
	  var instance;
	  if (protocols) {
	    instance = new WebSocket(uri, protocols);
	  } else {
	    instance = new WebSocket(uri);
	  }
	  return instance;
	}

	if (WebSocket) ws.prototype = WebSocket.prototype;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const msg_types = __webpack_require__(8).enums,
		WebSocketServer = __webpack_require__(19).Server,
		pki = __webpack_require__(10).pki,
		random = __webpack_require__(10).random,
		cipher = __webpack_require__(10).cipher,
		forgeUtil = __webpack_require__(10).util,
		u = __webpack_require__(3);

	// This initial version uses the chord spec - i.e. we use a wrtc connection with the node
	// of the server itself, rather than a level above being used to route information across.
	// This way is simpler, but may be more taxing on the server.

	class BootstrapChannelServer{
		constructor(chord){
			this._manager = null;
			this.wss = null;
			this.chord = chord;
			this.id = chord.id;

			this.connMap = {};
		}

		get internalID(){
			return "Boot-Server";
		}

		onbind(){
			let t = this;
			this.wss = new WebSocketServer(t.chord.config.serverConfig);
			u.log(t.chord, "Bound, opening WSS.");

			return new Promise((resolve, reject) => {
				this.wss.on("open", () => {
					u.log(t.chord, "Server finally ready!");
					resolve(false);
				});

				this.wss.on("error", e => {reject(e);});

				this.wss.on("connection", conn => {
					u.log(t.chord, "Connection from client, setting up.");

					conn.onmessage = function(evt) {
						u.log(t.chord, "Initial message from client, checking...");
						let obj = JSON.parse(evt.data);
						u.log(t.chord, obj)
						switch(obj.type){
							case "bstrap-reg":
								t.connMap[obj.id] = this;
								this.id = obj.id;
								this.registered = true;
								this.pubKey = obj.data;
								this.pubKeyObj = pki.publicKeyFromPem(this.pubKey);

								this.aesKey = random.getBytesSync(16);

								this.onmessage = evt => {t._manager.response(evt, t);};

								u.log(t.chord, "Valid. Connection from "+this.id+". Message handler bound.");

								safeSend(this, {
									type: "bstrap-wel",
									id: t.id.idString,
									data: t.chord.pubKeyPem,
									encKey: this.pubKeyObj.encrypt(this.aesKey, "RSA-OAEP")
								});
								break;
							default:
								throw new Error("Illegal class "+type+" of message sent to "+this.internalID+" channel!");
						}
					};

					conn.onclose = () => {
						if(conn.registered)
							delete this.connMap[conn.id]
					};
				});
			});
		}

		send(id,type,data){
			u.log(this.chord, "Send instruction given to server bootstrap.");

			let iv = random.getBytesSync(12),
				cipherObj = cipher.createCipher('AES-GCM', this.connMap[id].aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128
			});

			cipherObj.update(forgeUtil.createBuffer(JSON.stringify(data)));
			cipherObj.finish();

			let obj = {
				id: this.id.idString,
				//encIv: this.connMap[id].pubKeyObj.encrypt(iv),
				iv: iv,
				data: cipherObj.output.data,
				tag: cipherObj.mode.tag.data
			};

			let target = this.connMap[id];

			switch(type){
				case msg_types.MSG_SDP_OFFER:
					u.log(this.chord, "Sending offer to client (?)")
					obj.type = "bstrap-offer";
					break;
				case msg_types.MSG_SDP_ANSWER:
					u.log(this.chord, "Sending SDP reply to client.")
					obj.type = "bstrap-reply";
					break;
				case msg_types.MSG_ICE:
					u.log(this.chord, "Sending ICE candidate to client.")
					obj.type = "bstrap-ice";
					break;
				default:
					throw new Error("Illegal class "+type+" of message sent to "+this.internalID+" channel!");
			}

			safeSend(target, obj);
		}

		onmessage(evt){
			let obj = JSON.parse(evt.data),
				iv = obj.iv,//this.chord.key.privateKey.decrypt(obj.encIv, "RSA-OAEP"),
				decipher = cipher.createDecipher('AES-GCM', this.connMap[obj.id].aesKey);;

			u.log(this.chord, "Server bootstrap received message:");
			u.log(this.chord, obj);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128,
				tag: obj.tag
			});

			decipher.update(forgeUtil.createBuffer(obj.data));
			let success = decipher.finish();
			
			let out = {
				type: null,
				data: (success) ? JSON.parse(decipher.output.data) : "",
				id: null
			};

			switch(obj.type){
				case "bstrap-offer":
					out.type = msg_types.RESPONSE_SDP_OFFER;
					break;
				case "bstrap-ice":
					out.type = msg_types.RESPONSE_ICE;
					break;
				default:
					out.type = msg_types.RESPONSE_NONE;
					break;
			}

			out.id = obj.id;

			return out;
		}

		close(){
			u.log(this.chord, "Closing server bootstrap - this shouldn't happen.");
			this.wss.close();
		}
	}

	function safeSend(ws, obj){
		try{
			ws.send(JSON.stringify(obj));
		} catch (e) {
			console.log(e);
		}
	}

	module.exports = BootstrapChannelServer;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const RemoteCallable = __webpack_require__(22),
		RemoteNode = __webpack_require__(23),
		ID = __webpack_require__(6);

	class RemoteCallModule extends RemoteCallable {
		constructor(chord){
			super(chord, "ChordRPC");
			chord.registerModule(this);
		}

		delegate (message) {
			if(super.delegate(message))
				return;

			switch(message.handler){
				case "getSuccessor":
					this.chord.node.getSuccessor()
						.then(
							result => this.answer(message, (result) ? result.id.idString : result)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "getPredecessor":
					this.chord.node.getPredecessor()
						.then(
							result => this.answer(message, (result) ? result.id.idString : result)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "findSuccessor":
					this.chord.node.findSuccessor(new ID(message.data.params[0]))
						.then(
							result => this.answer(message, result.id.idString)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "findPredecessor":
					this.chord.node.findPredecessor(new ID(message.data.params[0]))
						.then(
							result => this.answer(message, result.id.idString)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "closestPrecedingFinger":
					this.chord.node.closestPrecedingFinger(new ID(message.data.params[0]))
						.then(
							result => this.answer(message, result.id.idString)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "notify":
					this.chord.node.notify(this.chord.obtainRemoteNode(message.data.params[0]))
						.then(
							result => this.answer(message, null)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "unlinkClient":
					this.answer(message, this.chord.node.unlinkClient(message.data.params[0]));
					break;
				default:
					//ILLEGAL CALL
					break;
			}
		}
	}

	module.exports = RemoteCallModule;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const ModuleRegistry = __webpack_require__(5),
		ID = __webpack_require__(6);

	class RemoteCallable {
		constructor (chord, moduleid) {
			this.chord = chord;
			this.id = moduleid;

			//Modify these in your super classes if needed.
			this._rcTimeout = this.chord.config.remoteCall.timeout;
			this._rcRetries = this.chord.config.remoteCall.retries;
			this._rcCacheDuration = this.chord.config.remoteCall.cacheAnswerDuration;

			this._reqID = 0;
			this._requestSpace = {};
			this._answerCache = {};
		}

		call (id, method, params) {
			let reqID = this._reqID++,
				destID = ID.coerceString(id),
				msg = {
					params,
					reqID,
					_remoteNo: 1
				},
				msgText = ModuleRegistry.wrap(msg);

			return new Promise((resolve, reject) => {
				let myReqObj = {
					reqID,
					destID,
					method,
					msg,
					resolve,
					reject,
					triesLeft: this._rcRetries
				};

				myReqObj.timeout = this.setupTimeoutForRequest(myReqObj, this._rcTimeout);

				this._requestSpace[reqID] = myReqObj;

				this.chord.sendNewMessage(this.id, method, msgText, destID);
			});
		}

		delegate (message) {
			let handled = true;

			switch (message.handler) {
				case "answer":
					this._rcvAnswer(message);
					break;
				case "error":
					this._rcvError(message);
				default:
					//Traffic is either not ours,
					//or is a remote call.
					//existence (or non-existence) of _remote
					//will tell us which (answered) calls to check for.
					if(message.data._remote
						&& message.src in this._answerCache
						&& message.data.reqID in this._answerCache[message.src]) {

						//We know the answer to this lucky soul's request!
						this.answer(message, this._answerCache[message.src][message.data.reqID]);

					} else {
						//Not ours, pass it by.
						handled = false;
					}
					break;
			}
			return handled;
		}

		_rcvAnswer (message) {
			let myReqStore = this._requestSpace[message.data.reqID];

			if(myReqStore && message.dest && message.dest === this.chord.id.idString){
				//CLEAR THE TIMEOUT ASAP.
				clearTimeout(myReqStore.timeout);

				this._requestSpace[message.data.reqID].resolve(message.data.result);
				delete this._requestSpace[message.data.reqID];
			} else {
				this.bypassAnswer(message);
			}
		}

		_rcvError (message) {
			//If retries on the call is zero, then reject.
			//Else? Retry, decrement the counter if error matches the packet we sent.
			let myReqStore = this._requestSpace[message.data.reqID];

			//Make sure we're responding to a genuine request here folks.
			if(myReqStore && message.dest && message.dest === this.chord.id.idString){
				
				if(myReqStore.triesLeft === 0){
					//No tries left, be doen with this!
					myReqStore.reject(message.data.reason);
					delete this._requestSpace[message.data.reqID];

				} else if (message.data._remoteNo > this._rcRetries - myReqStore.triesLeft) {
					//Packet is not an earlier error.
					//I.e. its _remoteNo > maxRetries - remRetries
					clearTimeout(myReqStore.timeout);

					//Set up for next attempt.
					myReqStore.msg._remoteNo++;
					myReqStore.triesLeft--;
					myReqStore.timeout = this.setupTimeoutForRequest(myReqStore, this._rcTimeout);

					//Try, try again.
					this.chord.sendNewMessage(this.id, myReqStore.method, ModuleRegistry.wrap(myReqStore.msg), myReqStore.destID);
				}

			} else {
				//Try and route it to its rightful owner?
				this.bypassError(message);
			}
		}

		setupTimeoutForRequest (requestSpaceEntry, duration) {
			return setTimeout(()=> {
				if(requestSpaceEntry) this._rcvError(
					{
						data:{
							reason: "Timed out.",
							reqID: requestSpaceEntry.reqID,
							_remoteNo: requestSpaceEntry.msg._remoteNo
						},
						dest: this.chord.id.idString
					} )
			}, duration);
		}

		_cacheAnswer (returnID, reqID, result) {
			//Store.

			if(!(returnID in this._answerCache))
				this._answerCache[returnID] = {};

			this._answerCache[returnID][reqID] = result;

			//Set up the answer's deletion later.

			setTimeout( () => {
				delete this._answerCache[returnID][reqID];
			}, this._rcCacheDuration)

		}

		answer (message, result) {
			//Place into answer cache.
			let returnID = message.src,
				reqID = message.data.reqID,
				_remoteNo = message.data._remoteNo;

			this._cacheAnswer(returnID, reqID, result);
			message.reply(this.chord.newMessage(this.id, "answer", ModuleRegistry.wrap({reqID, result, _remoteNo, hops: 5}), returnID));
		}

		error (message, reason) {
			let returnID = message.src,
				reqID = message.data.reqID,
				_remoteNo = message.data._remoteNo,
				outReason = (reason instanceof Error) ? reason.toString() : reason;

			message.reply(this.chord.newMessage(this.id, "error", ModuleRegistry.wrap({reqID, reason: outReason, _remoteNo, hops: 10}), returnID));
		}

		bypassAnswer (message) {
			message.data.hops--;
			if(message.data.hops > 0){
				message.data = ModuleRegistry.wrap(message.data);
				message.pass();
			} else {
				this.error(message, `Answer was lost - failed to route.`);
			}
		}

		bypassError (message) {
			message.data.hops--;
			if(message.data.hops > 0){
				message.data = ModuleRegistry.wrap(message.data);
				message.pass();
			}
		}
	}

	module.exports = RemoteCallable;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const Node = __webpack_require__(24),
		ID = __webpack_require__(6);

	class RemoteNode {
		constructor(chord, id, optConn){
			this.chord = chord;
			this.id = id;

			//ONLY FINGERS SHOULD HAVE CONNECTIONS.
			this.connection = optConn;
			//TODO
		}

		getSuccessor(){
			//Return an ID, then create a remotenode from that.
			return new Promise((resolve, reject) => {
				this.chord.rcm.call(this.id, "getSuccessor", [])
					.then(result => resolve((result)? this.chord.obtainRemoteNode(result) : result),
						reason => reject(reason)
					);
			});
		}

		getPredecessor(){
			//Return an ID, then create a remotenode from that.
			return new Promise((resolve, reject) => {
				this.chord.rcm.call(this.id, "getPredecessor", [])
					.then(result => resolve((result)? this.chord.obtainRemoteNode(result) : result),
						reason => reject(reason)
					);
			});
		}

		findSuccessor(id){
			return new Promise((resolve, reject) => {
				this.chord.rcm.call(this.id, "findSuccessor", [ID.coerceString(id)])
					.then(result => resolve(this.chord.obtainRemoteNode(result)),
						reason => reject(reason)
					);
			});
		}

		findPredecessor(id){
			return new Promise((resolve, reject) => {
				this.chord.rcm.call(this.id, "findPredecessor", [ID.coerceString(id)])
					.then(result => resolve(this.chord.obtainRemoteNode(result)),
						reason => reject(reason)
					);
			});
		}

		closestPrecedingFinger(id){
			return new Promise((resolve, reject) => {
				this.chord.rcm.call(this.id, "closestPrecedingFinger", [ID.coerceString(id)])
					.then(result => resolve(this.chord.obtainRemoteNode(result)),
						reason => reject(reason)
					);
			});
		}

		notify(nPrime){
			return this.chord.rcm.call(this.id, "notify", [ID.coerceString(nPrime.id)]);
		}

		//Custom

		message(msg){
			if(this.isConnected())
				this.connection.send(this.chord.messageCore.encodeMessage(msg));
			else {
				console.log(`Creating new connection to ${ID.coerceString(this.id)} - none found or not open.`);

				this.chord.smartConnectToNode(this.id, this)
					.then(node => {
						this.chord.message(msg);
					},
					reason => {
						console.log("Failed to create new connection to remote node.")
					});
			}
		}

		isConnected() {
			return this.connection
				&& this.connection.connection
				&& (this.connection.connection.iceConnectionState === "connected"
				|| this.connection.connection.iceConnectionState === "completed");
		}

		unlinkClient(idString){
			return this.chord.rcm.call(this.id, "unlinkClient", [idString]);
		}

	}

	module.exports = RemoteNode;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const u = __webpack_require__(3),
		ID = __webpack_require__(6),
		Finger = __webpack_require__(25);

	class Node{
		constructor(chord){
			this.id = chord.id;
			this.chord = chord;
			this.finger = [];
			this.predecessor = this;

			//Create Finger Table
			for(var i=0; i<chord.config.idWidth; i++)
				this.finger[i] = new Finger(this, i);
		}

		clean () {
			this.predecessor = this;

			//Wipe the finger table
			for(var i=0; i<this.finger.length; i++)
				this.finger[i].node = this;
		}

		setFinger(index, node){
			//Set the node, and then check further indices to see if this node is a better fit.
			//Improvement over std chord.
			do {
				this.finger[index++].node = node;
			} while(index<this.finger.length
				&& ID.inRightOpenBound(node.id, this.finger[index].start, this.finger[index].node.id));
		}

		removeFinger(id){
			//Scan right to left for a block of fingers represented by this id.
			//Replace them all with the node found immediately to the right of the block.
			//If last element was removed, replace with self.
			//Improvement over std chord.

			let index = this.finger.length - 1,
				replace,
				last = index;

			while(index >=0){
				replace = (index === this.finger.length-1) ? this : this.finger[index+1].node;

				while(index >=0 && ID.compare(id, this.finger[index].node.id) === 0){
					last = index;
					this.finger[index].node = replace;

					index--;
				}

				index--;
			}

			return last;
		}

		preserveFingerInvariant(){
			//We can observe that the largest value for any node in the finger table is our predecessor.
			//This property is required for correctness of the system to hold.

			for (var i = 0; i < this.finger.length; i++) {
				let finger = this.finger[i];

				if(this.predecessor && ID.inLeftOpenBound(finger.node.id, this.id, this.predecessor.id))
					finger.node = this.predecessor;

			};
		}

		getSuccessor(){
			return new Promise((resolve, reject) => {
				resolve(this.finger[0].node)
			}); 
		}

		setSuccessor(val){
			return new Promise((resolve, reject) => {
				let end = () => {
					this.setFinger(0, val);
					this.chord.statemachine.set_successor(val);
					resolve(val);
				}

				if(!val.isConnected || val.isConnected())
					end();
				else {
					this.chord.nodeOverRing(ID.coerceString(val.id), val)
						.then(
							() => end()
						)
				}
				
			});
		}

		getPredecessor(){
			return new Promise((resolve, reject) => {
				resolve(this.predecessor)
			}); 
		}

		setPredecessor(val){
			return new Promise((resolve, reject) => {
				this.predecessor = val;

				this.preserveFingerInvariant();

				this.chord.statemachine.set_predecessor(val);

				resolve(val);
			});
		}
		
		closestPrecedingFinger(id){
			return new Promise( resolve => {
				for (var i = this.finger.length - 1; i >= 0; i--) {
					if(ID.inOpenBound(this.finger[i].node.id, this.id, id)){
						resolve(this.finger[i].node);
						break;
					}
				}
				resolve(this);
			} );
		}
		
		findSuccessor(id){
			return this.findPredecessor(id)
				.then( nPrime => { return nPrime.getSuccessor() } )
		}
		
		findPredecessor(id){
			return new Promise( (resolve, reject) => {
				let nPrime = this;

				let condUpd = () => {
					nPrime.getSuccessor()
						.then(
							succ => {
								if (!ID.inLeftOpenBound(id, nPrime.id, succ.id)) {
									nPrime.closestPrecedingFinger(id)
										.then(
											newPrime => {
												nPrime = newPrime;
												condUpd();
											},
											rea => reject(rea)
										)
								} else {
									resolve(nPrime);
								}
							},
							rea => reject(rea)
						)
					};

				condUpd();
			} )
		}

		//Stabilization methods
		stableJoin(knownNode){
			let succ;

			return this.setPredecessor(null)
				.then(
					() => {
						this.chord.server.connect = true;
						return knownNode.findSuccessor(this.id);
					}
				)
				.then(
					foundSucc => {
						succ = foundSucc;
						return this.chord.nodeOverRing(ID.coerceString(succ.id), succ);
					}
				)
				.then(
					conn => {
						return this.setSuccessor(succ);
					}
				);
		}

		//periodically verify n's immediate successor
		//and tell the successor about n.
		stabilize(){
			let oSucc;

			// if(this.chord.state === "disconnected" || this.chord.state === "external")
			// 	return;

			u.log(this.chord, `ME:`);
			u.log(this.chord, this.id.idString);

			return this.getSuccessor()
				.then(succ => {
					oSucc = succ;
					u.log(this.chord, `MY SUCCESSOR:`);
					u.log(this.chord, succ.id.idString);
					return succ.getPredecessor();
				})
				.then(pred => {
					u.log(this.chord, `MY SUCCESSOR'S PREDECESSOR:`);
					u.log(this.chord, (pred) ? pred.id.idString : pred);

					if(pred){
						u.log(this.chord, `x: ${ID.coerceString(pred.id)}`);
						u.log(this.chord, `LB: ${ID.coerceString(this.id)}`);
						u.log(this.chord, `UB: ${ID.coerceString(oSucc.id)}`);
						u.log(this.chord, `x in (UB, LB): ${ID.inOpenBound(pred.id, this.id, oSucc.id)}`);
					}

					if(pred && ID.inOpenBound(pred.id, this.id, oSucc.id)) {
						u.log(this.chord, `NEW SUCCESSOR FOUND`);
						oSucc = pred;
						return this.setSuccessor(pred);
					} else {
						return Promise.resolve();
					}
				})
				.then(
					res => {
						u.log(this.chord, `NOTIFYING SUCCESSOR ABOUT:`);
						u.log(this.chord, this.id.idString);

						return oSucc.notify(this);
					}
				)

		}

		notify(nPrime){
			u.log(this.chord, `NOTIFIED BY:`);
			u.log(this.chord, ID.coerceString(nPrime.id));

			if(this.predecessor === null || ID.inOpenBound(nPrime.id, this.predecessor.id, this.id))
				return this.setPredecessor(nPrime);

			return Promise.resolve();
		}

		fixFingers(){
			let i = Math.floor(Math.random() * (this.finger.length-1) + 1);
			//this.finger[i].node = this.findSuccessor(this.finger[i].start);

			if(this.chord.state === "disconnected" || this.chord.state === "external")
				return;

			return this.findSuccessor(this.finger[i].start)
				.then(
					succ => this.setFinger(i, succ)//this.finger[i].node = succ
				)
		}

		//Custom
		
		message(msg){
			u.log(this.chord, `Received message at the local node for ${msg.dest}: ${msg.data}
				I am ${this.id.idString}`);

			u.log(this.chord, `!!! STATE: ${this.chord.state} !!!`)

			if(this.chord.state.substr(0,8) === "external" && ID.compare(msg.dest, this.id)!== 0) {
				let nodeIdList = Object.getOwnPropertyNames(this.chord.directNodes),
					chosen;

				if(nodeIdList.length === 0) {
					//Something went badly wrong, and the state machine got stuck.
					//Help it out a little?
					this.chord.statemachine.handle("disconnect_all");
				} else if(this.chord.server.node && this.chord.server.node.isConnected()){
					chosen = this.chord.server.node;
				} else {
					chosen = this.chord.directNodes[nodeIdList[0]];
				}

				if(chosen) {
					chosen.message(this.chord.messageCore.makeProxyMessage(msg, chosen.id))
				}

			} else if (this.chord.state === "partial" && ID.compare(msg.dest, this.id)!== 0 ) {
				this.getSuccessor()
					.then(
						successor => successor.message(this.chord.messageCore.makeProxyMessage(msg, successor.id))
					)
			} else if (!msg.bypass && (ID.compare(this.id, msg.dest)===0 || ID.inLeftOpenBound(msg.dest, this.predecessor.id, this.id))){
				//Pass to appropriate handler - this is our message.
				this.chord.messageCore.handleMessage(msg);
			} else {
				//Pass along the chain to a responsible node.
				this.closestPrecedingFinger(msg.dest)
				.then(
					dest => {
						if(dest===this){
							//Successor is likely inaccurate - the earlier checks determined that
							//the message was NOT for us.
							//Send to successor, it may know better.
							this.finger[0].node.message(msg);
						} else {
							dest.message(msg);
						}
					}
				)
			}
		}

		unlinkClient(idString){
			if(this.chord.config.isServer && this.chord.directNodes[idString]){
				// delete this.chord.directNodes[idString];
				return true;
			}

			return false;
		}
	}

	module.exports = Node;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const ID = __webpack_require__(6);

	class Finger{
		constructor(node, index){
			this.node = node;
			this.start = node.id.add(ID.powerOfTwoBuffer(index));
		}
	}

	module.exports = Finger;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const RemoteCallable = __webpack_require__(22),
		ID = __webpack_require__(6),
		sha3 = __webpack_require__(27),
		pki = __webpack_require__(10).pki,
		random = __webpack_require__(10).random,
		cipher = __webpack_require__(10).cipher,
		forgeUtil = __webpack_require__(10).util;

	const STORE_OKAY = 0,
		FILE_EXISTS = 1,
		BAD_UPDATE = 2,
		UPDATE_OKAY = 4,
		NO_FILE = 5,
		KEEPALIVE_OKAY = 6;

	class FileStore extends RemoteCallable {
		constructor (chord) {
			super(chord, "ChordFS")
			this.storage = {};
			this.ownedObjects = {};

			chord.registerModule(this);
		}

		delegate (message) {
			if(super.delegate(message))
				return;

			switch (message.handler) {
				case "store":
					this._authStore(message.data.params[0], message.data.params[1], message.data.params[2])
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "retrieve":
					this.retrieve(message.data.params[0])
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "update":
					this._rcvUpdate(message.data.params)
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "keepAlive":
					this._rcvKeepAlive(message.data.params[0])
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "pubReq":
					this.answer(message, {i:ID.coerceString(this.chord.id), k:this.chord.pubKeyPem});
					break;
				case "moveKey":
					this.answer(message, this._moveKey(message.data.params));
				default:
					break;
			}
		}

		store (key, value) {
			return this._authStore(key, value, this.chord.pubKeyPem)
				.then(
					result => {
						switch (result.code) {
							case STORE_OKAY:
								//Try to decrypt the AES key.
								let newKey;
								try {
									newKey = this.chord.key.privateKey.decrypt(result.encKey, "RSA-OAEP");
								} catch (e) {
									throw new Error("CFS: Couldn't decrypt ownership AES.");
								}

								//Store a reference to the owned object.
								//Create a regular event to ping the item to keep it alive.
								this.storeOwnershipKey(key, newKey, result.seq, result.lHash)

								break;
							case FILE_EXISTS:
								break;
						}

						return Promise.resolve(result);
					}
				);
		}

		_authStore (key, value, pubKeyPem) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash)),
				presentObj = this.storage[hashStr];

			//If we are indeed the successor to this node, store it.
			//Otherwise send this message abroad.

			//Computation of the hash MUST be determined at the node responsible for storage,
			//to prevent unbalanced/incorrect storage and related attacks.

			//If an object exists here, rebuff the requester...

			if(presentObj)
				return Promise.resolve({code: FILE_EXISTS, kHash: hashStr, seq: presentObj.seq, lHash: presentObj.lHash});

			let internalObj = {
				key,
				data: (typeof value === "string") ? value : JSON.stringify(value),
				wasStr: typeof value === "string",
				lHash: ID.coerceString(new ID(sha3["sha3_"+this.chord.config.idWidth].buffer(value))),
				aesKey: random.getBytesSync(16),
				seq: 0
			},
				//Prepare the ownership aes key so that only the sender can access the item.
				cryptor = pki.publicKeyFromPem(pubKeyPem),
				securedKey = cryptor.encrypt(internalObj.aesKey, "RSA-OAEP");
				
			if(!this.chord.node.predecessor || ID.inLeftOpenBound(hash, this.chord.node.predecessor.id, this.chord.node.id)){
				//Store the item
				this.storage[hashStr] = internalObj;

				//Set a timeout so that the object will be killed if no user desires that it stays alive.
				internalObj.timeout = setTimeout(()=>{
					delete this.storage[hashStr];
				}, this.chord.config.fileStore.itemDuration);

				this.chord.statemachine.emit("fileAdded", key, value);

				return Promise.resolve({code: STORE_OKAY, kHash: hashStr, seq: internalObj.seq, lHash: internalObj.lHash, encKey: securedKey});
			} else {
				return this.call(hashStr, "store", [key, value, this.chord.pubKeyPem]);
			}	
		}

		update (key, value, stopHere) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash)),
				currentObj = this.ownedObjects[hashStr];

			if(!currentObj)
				return Promise.reject("CFS: Cannot update item - not owned.");

			let encData = FileStore.encrypt(JSON.stringify({h:currentObj.lHash, s: currentObj.seq}), currentObj.aesKey)

			return this.call(hashStr, "update", [key, value, encData.data, encData.iv, encData.tag])
				.then(
					result => {
						//update seq, lHash...
						if (result.code !== NO_FILE) {
							currentObj.seq = result.seq;
							currentObj.lHash = result.lHash;
						}

						switch (result.code) {
							case UPDATE_OKAY:
								break;
							case NO_FILE:
								//Not a whole lot we can do here?
								break;
							case BAD_UPDATE:
								//run another, identical call now that we have updated seq and
								//lHash. If this fails, then I guess you never had rights?
								if(stopHere)
									return this.update(key, value, true);
								break;
						}

						return Promise.resolve(result);
					}
				)
		}

		_rcvUpdate (params) {
			let key = params[0],
				value = params[1],
				authStr = params[2],
				iv = params[3],
				tag = params[4],
				hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash)),
				presentObj = this.storage[hashStr];

			if (!presentObj) {
				return Promise.resolve({code: NO_FILE});
			}

			try {
				let out = JSON.parse(FileStore.decrypt(authStr, presentObj.aesKey, iv, tag));
				
				if (!out)
					throw new Error("Error decoding auth-string.");

				//Now, check lHash and seq.
				//If they match, update was a success.
				if(out.s < presentObj.seq || out.h !== presentObj.lHash)
					throw new Error("seq or lHash did not match expected value!");

				//Okay, we have a match!
				this.storage[hashStr] = {
					key,
					data: (typeof value === "string") ? value : JSON.stringify(value),
					wasStr: typeof value === "string",
					lHash: ID.coerceString(new ID(sha3["sha3_"+this.chord.config.idWidth].buffer(value))),
					aesKey: presentObj.aesKey,
					seq: out.s+1
				};

				return Promise.resolve({code: UPDATE_OKAY, seq: this.storage[hashStr].seq, lHash: this.storage[hashStr].lHash});

			} catch (e) {
				return Promise.resolve({code: BAD_UPDATE, seq: presentObj.seq, lHash: presentObj.lHash});
			}

		}

		keepAlive (key) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash));

			return this.call(hashStr, "keepAlive", [key]);
		}

		_rcvKeepAlive (key) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash)),
				presentObj = this.storage[hashStr];

			if (presentObj) {
				//Clear old timeout ASAP...
				if (presentObj.timeout)
					clearTimeout(presentObj.timeout);

				//And set a new one!
				presentObj.timeout = setTimeout(()=>{
					delete this.storage[hashStr];
				}, this.chord.config.fileStore.itemDuration);

				return Promise.resolve({code: KEEPALIVE_OKAY});
			} else {
				return Promise.resolve({code: NO_FILE});
			}
		}

		retrieve (key) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				hashStr = ID.coerceString(new ID(hash)),
				maybeFile = this.storage[hashStr];

			if (maybeFile) {
				//We have this item, or at least a copy.
				let dat = maybeFile.wasStr ? maybeFile.data : JSON.parse(maybeFile.data);
				return Promise.resolve(dat);
			} else if (!this.chord.node.predecessor || ID.inLeftOpenBound(hash, this.chord.node.predecessor.id, this.chord.node.id)) {
				//We are responsible, but no copy was shown to exist.
				return Promise.resolve(null);
			} else {
				return this.call(hashStr, "retrieve", [key]);
			}
		}

		storeOwnershipKey (key, aesKey, optSeq, optlHash) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				keyHash = ID.coerceString(new ID(hash)),
				failureCount = 0;

			this.ownedObjects[keyHash] = {
				aesKey,
				seq: optSeq ? optSeq : 0,
				lHash: optlHash ? optlHash : "AA==",
				interval: setInterval(() => {
					this.keepAlive(key)
					.then(
						result => {
							switch(result.code){
								case KEEPALIVE_OKAY:
									//Everything is fine?
									failureCount = 0;
									break;
								case NO_FILE:
									//File was not found?
									failureCount++;
									if (failureCount > 6) {
										//DELETE OWNERSHIP
										this.dropOwnership(key);
									}
									break;
							}
						}
					);
				}, this.chord.config.fileStore.itemRefreshPeriod)
			};
		}

		dropOwnership (key) {
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(key),
				keyHash = ID.coerceString(new ID(hash)),
				obj = this.ownedObjects[keyHash];

			if (obj) {
				if(obj.interval) {
					clearInterval(obj.interval);
				}

				delete this.ownedObjects[keyHash];
			}
		}

		relocateKeys () {
			if (this.chord.state.substr(0,5)!=="full_")
				return;

			for (var hash in this.storage) {
				//Safety check, and do we own this item?
				if(!this.storage.hasOwnProperty(hash)
					|| ID.inLeftOpenBound(hash, this.chord.node.predecessor.id, this.chord.node.id))
					continue;

				//Apparently not - let's get to work!
				(hash =>
					{
					this.call(hash, "pubReq", [])
						.then(
							result => {
								let retID = result.i,
									cryptor = pki.publicKeyFromPem(result.k),
									internalObj = this.storage[hash],
									securedKey;

								if (internalObj) {
									securedKey = cryptor.encrypt(internalObj.aesKey, "RSA-OAEP");
									return this.call(retID, "moveKey", [internalObj.key, internalObj.data, internalObj.wasStr, internalObj.seq, internalObj.lHash, securedKey])
										.then(
											result => {if (result) delete this.storage[hash];}
										);
								}
							}
						);
					}
				)(hash)
			}
		}

		_moveKey (params) {
			let itemKey = params[0],
				data = params[1],
				wasStr = params[2],
				seq = params[3],
				lHash = params[4],
				secureKey = params[5];

			//Decrypt the secret, just for us.
			//This ensures current owners can still update their stuff.
			let secret = this.chord.key.privateKey.decrypt(secureKey, "RSA-OAEP");

			//Now take the hash of the item's key...
			let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(itemKey),
				hashStr = ID.coerceString(new ID(hash)),
				presentObj = this.storage[hashStr];

			if (presentObj)
				return false;

			this.storage[hashStr] = {
				key: itemKey,
				data,
				wasStr,
				seq,
				lHash,
				aesKey: secret
			}

			return true;
		}

		static encrypt (data, aesKey) {
			let iv = random.getBytesSync(12),
				cipherObj = cipher.createCipher('AES-GCM', aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128
			});

			cipherObj.update(forgeUtil.createBuffer(data));
			cipherObj.finish();

			return {iv, data: cipherObj.output.data, tag: cipherObj.mode.tag.data};
		}

		static decrypt (cipherText, aesKey, iv, tag) {
			let decipher = cipher.createDecipher('AES-GCM', aesKey);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string',
				tagLength: 128,
				tag: tag
			});

			decipher.update(forgeUtil.createBuffer(cipherText));
			let success = decipher.finish();

			return (success) ? decipher.output.data : null;
		}
	}

	module.exports = FileStore;

/***/ },
/* 27 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.5.2
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2016
	 * @license MIT
	 */
	(function (root) {
	  'use strict';

	  var NODE_JS = typeof(module) != 'undefined';
	  if (NODE_JS) {
	    root = global;
	  }
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
	            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 
	            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 
	            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
	            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'array'];

	  var createOutputMethod = function (bits, padding, outputType) {
	    return function (message) {
	      return new Keccak(bits, padding, bits).update(message)[outputType]();
	    }
	  };

	  var createShakeOutputMethod = function (bits, padding, outputType) {
	    return function (message, outputBits) {
	      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
	    }
	  };

	  var createMethod = function (bits, padding) {
	    var method = createOutputMethod(bits, padding, 'hex');
	    method.create = function () {
	      return new Keccak(bits, padding, bits);
	    };
	    method.update = function (message) {
	      return method.create().update(message);
	    };
	    for (var i = 0;i < OUTPUT_TYPES.length;++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createOutputMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var createShakeMethod = function (bits, padding) {
	    var method = createShakeOutputMethod(bits, padding, 'hex');
	    method.create = function (outputBits) {
	      return new Keccak(bits, padding, outputBits);
	    };
	    method.update = function (message, outputBits) {
	      return method.create(outputBits).update(message);
	    };
	    for (var i = 0;i < OUTPUT_TYPES.length;++i) {
	      var type = OUTPUT_TYPES[i];
	      method[type] = createShakeOutputMethod(bits, padding, type);
	    }
	    return method;
	  };

	  var algorithms = [
	    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},
	    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},
	    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod}
	  ];

	  var methods = {};

	  for (var i = 0;i < algorithms.length;++i) {
	    var algorithm = algorithms[i];
	    var bits  = algorithm.bits;
	    var createMethod = algorithm.createMethod;
	    for (var j = 0;j < bits.length;++j) {
	      var method = algorithm.createMethod(bits[j], algorithm.padding);
	      methods[algorithm.name +'_' + bits[j]] = method;
	    }
	  }

	  function Keccak(bits, padding, outputBits) {
	    this.blocks = [];
	    this.s = [];
	    this.padding = padding;
	    this.outputBits = outputBits;
	    this.reset = true;
	    this.block = 0;
	    this.start = 0;
	    this.blockCount = (1600 - (bits << 1)) >> 5;
	    this.byteCount = this.blockCount << 2;
	    this.outputBlocks = outputBits >> 5;
	    this.extraBytes = (outputBits & 31) >> 3;

	    for (var i = 0;i < 50;++i) {
	      this.s[i] = 0;
	    }
	  };

	  Keccak.prototype.update = function (message) {
	    var notString = typeof(message) != 'string';
	    if (notString && message.constructor == root.ArrayBuffer) {
	      message = new Uint8Array(message);
	    }
	    var length = message.length, blocks = this.blocks, byteCount = this.byteCount, 
	        blockCount = this.blockCount, index = 0, s = this.s, i, code;
	    
	    while (index < length) {
	      if (this.reset) {
	        this.reset = false;
	        blocks[0] = this.block;
	        for (i = 1;i < blockCount + 1;++i) {
	          blocks[i] = 0;
	        }
	      }
	      if (notString) {
	        for (i = this.start;index < length && i < byteCount; ++index) {
	          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
	        }
	      } else {
	        for (i = this.start;index < length && i < byteCount; ++index) {
	          code = message.charCodeAt(index);
	          if (code < 0x80) {
	            blocks[i >> 2] |= code << SHIFT[i++ & 3];
	          } else if (code < 0x800) {
	            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else if (code < 0xd800 || code >= 0xe000) {
	            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          } else {
	            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
	            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
	            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
	          }
	        }
	      }
	      this.lastByteIndex = i;
	      if (i >= byteCount) {
	        this.start = i - byteCount;
	        this.block = blocks[blockCount];
	        for (i = 0;i < blockCount;++i) {
	          s[i] ^= blocks[i];
	        }
	        f(s);
	        this.reset = true;
	      } else {
	        this.start = i;
	      }
	    }
	    return this;
	  };

	  Keccak.prototype.finalize = function () {
	    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
	    blocks[i >> 2] |= this.padding[i & 3];
	    if (this.lastByteIndex == this.byteCount) {
	      blocks[0] = blocks[blockCount];
	      for (i = 1;i < blockCount + 1;++i) {
	        blocks[i] = 0;
	      }
	    }
	    blocks[blockCount - 1] |= 0x80000000;
	    for (i = 0;i < blockCount;++i) {
	      s[i] ^= blocks[i];
	    }
	    f(s);
	  };

	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var hex = '', block;
	    while (j < outputBlocks) {
	      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
	        block = s[i];
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
	               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
	               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
	               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
	      }
	      if (j % blockCount == 0) {
	        f(s);
	        i = 0;
	      }
	    }
	    if (extraBytes) {
	      block = s[i];
	      if (extraBytes > 0) {
	        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
	      }
	      if (extraBytes > 1) {
	        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
	      }
	      if (extraBytes > 2) {
	        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
	      }
	    }
	    return hex;
	  };

	  Keccak.prototype.buffer = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var bytes = this.outputBits >> 3;
	    var buffer;
	    if (extraBytes) {
	      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
	    } else {
	      buffer = new ArrayBuffer(bytes);
	    }
	    var array = new Uint32Array(buffer);
	    while (j < outputBlocks) {
	      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
	        array[j] = s[i];
	      }
	      if (j % blockCount == 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      array[i] = s[i];
	      buffer = buffer.slice(0, bytes);
	    }
	    return buffer;
	  };

	  Keccak.prototype.digest = Keccak.prototype.array = function () {
	    this.finalize();

	    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, 
	        extraBytes = this.extraBytes, i = 0, j = 0;
	    var array = [], offset, block;
	    while (j < outputBlocks) {
	      for (i = 0;i < blockCount && j < outputBlocks;++i, ++j) {
	        offset = j << 2;
	        block = s[i];
	        array[offset] = block & 0xFF;
	        array[offset + 1] = (block >> 8) & 0xFF;
	        array[offset + 2] = (block >> 16) & 0xFF;
	        array[offset + 3] = (block >> 24) & 0xFF;
	      }
	      if (j % blockCount == 0) {
	        f(s);
	      }
	    }
	    if (extraBytes) {
	      offset = j << 2;
	      block = s[i];
	      if (extraBytes > 0) {
	        array[offset] = block & 0xFF;
	      }
	      if (extraBytes > 1) {
	        array[offset + 1] = (block >> 8) & 0xFF;
	      }
	      if (extraBytes > 2) {
	        array[offset + 2] = (block >> 16) & 0xFF;
	      }
	    }
	    return array;
	  };

	  var f = function (s) {
	    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, 
	        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, 
	        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, 
	        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
	    for (n = 0; n < 48; n += 2) {
	      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
	      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
	      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
	      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
	      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
	      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
	      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
	      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
	      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
	      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

	      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
	      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
	      s[0] ^= h;
	      s[1] ^= l;
	      s[10] ^= h;
	      s[11] ^= l;
	      s[20] ^= h;
	      s[21] ^= l;
	      s[30] ^= h;
	      s[31] ^= l;
	      s[40] ^= h;
	      s[41] ^= l;
	      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
	      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
	      s[2] ^= h;
	      s[3] ^= l;
	      s[12] ^= h;
	      s[13] ^= l;
	      s[22] ^= h;
	      s[23] ^= l;
	      s[32] ^= h;
	      s[33] ^= l;
	      s[42] ^= h;
	      s[43] ^= l;
	      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
	      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
	      s[4] ^= h;
	      s[5] ^= l;
	      s[14] ^= h;
	      s[15] ^= l;
	      s[24] ^= h;
	      s[25] ^= l;
	      s[34] ^= h;
	      s[35] ^= l;
	      s[44] ^= h;
	      s[45] ^= l;
	      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
	      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
	      s[6] ^= h;
	      s[7] ^= l;
	      s[16] ^= h;
	      s[17] ^= l;
	      s[26] ^= h;
	      s[27] ^= l;
	      s[36] ^= h;
	      s[37] ^= l;
	      s[46] ^= h;
	      s[47] ^= l;
	      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
	      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
	      s[8] ^= h;
	      s[9] ^= l;
	      s[18] ^= h;
	      s[19] ^= l;
	      s[28] ^= h;
	      s[29] ^= l;
	      s[38] ^= h;
	      s[39] ^= l;
	      s[48] ^= h;
	      s[49] ^= l;

	      b0 = s[0];
	      b1 = s[1];
	      b32 = (s[11] << 4) | (s[10] >>> 28);
	      b33 = (s[10] << 4) | (s[11] >>> 28);
	      b14 = (s[20] << 3) | (s[21] >>> 29);
	      b15 = (s[21] << 3) | (s[20] >>> 29);
	      b46 = (s[31] << 9) | (s[30] >>> 23);
	      b47 = (s[30] << 9) | (s[31] >>> 23);
	      b28 = (s[40] << 18) | (s[41] >>> 14);
	      b29 = (s[41] << 18) | (s[40] >>> 14);
	      b20 = (s[2] << 1) | (s[3] >>> 31);
	      b21 = (s[3] << 1) | (s[2] >>> 31);
	      b2 = (s[13] << 12) | (s[12] >>> 20);
	      b3 = (s[12] << 12) | (s[13] >>> 20);
	      b34 = (s[22] << 10) | (s[23] >>> 22);
	      b35 = (s[23] << 10) | (s[22] >>> 22);
	      b16 = (s[33] << 13) | (s[32] >>> 19);
	      b17 = (s[32] << 13) | (s[33] >>> 19);
	      b48 = (s[42] << 2) | (s[43] >>> 30);
	      b49 = (s[43] << 2) | (s[42] >>> 30);
	      b40 = (s[5] << 30) | (s[4] >>> 2);
	      b41 = (s[4] << 30) | (s[5] >>> 2);
	      b22 = (s[14] << 6) | (s[15] >>> 26);
	      b23 = (s[15] << 6) | (s[14] >>> 26);
	      b4 = (s[25] << 11) | (s[24] >>> 21);
	      b5 = (s[24] << 11) | (s[25] >>> 21);
	      b36 = (s[34] << 15) | (s[35] >>> 17);
	      b37 = (s[35] << 15) | (s[34] >>> 17);
	      b18 = (s[45] << 29) | (s[44] >>> 3);
	      b19 = (s[44] << 29) | (s[45] >>> 3);
	      b10 = (s[6] << 28) | (s[7] >>> 4);
	      b11 = (s[7] << 28) | (s[6] >>> 4);
	      b42 = (s[17] << 23) | (s[16] >>> 9);
	      b43 = (s[16] << 23) | (s[17] >>> 9);
	      b24 = (s[26] << 25) | (s[27] >>> 7);
	      b25 = (s[27] << 25) | (s[26] >>> 7);
	      b6 = (s[36] << 21) | (s[37] >>> 11);
	      b7 = (s[37] << 21) | (s[36] >>> 11);
	      b38 = (s[47] << 24) | (s[46] >>> 8);
	      b39 = (s[46] << 24) | (s[47] >>> 8);
	      b30 = (s[8] << 27) | (s[9] >>> 5);
	      b31 = (s[9] << 27) | (s[8] >>> 5);
	      b12 = (s[18] << 20) | (s[19] >>> 12);
	      b13 = (s[19] << 20) | (s[18] >>> 12);
	      b44 = (s[29] << 7) | (s[28] >>> 25);
	      b45 = (s[28] << 7) | (s[29] >>> 25);
	      b26 = (s[38] << 8) | (s[39] >>> 24);
	      b27 = (s[39] << 8) | (s[38] >>> 24);
	      b8 = (s[48] << 14) | (s[49] >>> 18);
	      b9 = (s[49] << 14) | (s[48] >>> 18);

	      s[0] = b0 ^ (~b2 & b4);
	      s[1] = b1 ^ (~b3 & b5);
	      s[10] = b10 ^ (~b12 & b14);
	      s[11] = b11 ^ (~b13 & b15);
	      s[20] = b20 ^ (~b22 & b24);
	      s[21] = b21 ^ (~b23 & b25);
	      s[30] = b30 ^ (~b32 & b34);
	      s[31] = b31 ^ (~b33 & b35);
	      s[40] = b40 ^ (~b42 & b44);
	      s[41] = b41 ^ (~b43 & b45);
	      s[2] = b2 ^ (~b4 & b6);
	      s[3] = b3 ^ (~b5 & b7);
	      s[12] = b12 ^ (~b14 & b16);
	      s[13] = b13 ^ (~b15 & b17);
	      s[22] = b22 ^ (~b24 & b26);
	      s[23] = b23 ^ (~b25 & b27);
	      s[32] = b32 ^ (~b34 & b36);
	      s[33] = b33 ^ (~b35 & b37);
	      s[42] = b42 ^ (~b44 & b46);
	      s[43] = b43 ^ (~b45 & b47);
	      s[4] = b4 ^ (~b6 & b8);
	      s[5] = b5 ^ (~b7 & b9);
	      s[14] = b14 ^ (~b16 & b18);
	      s[15] = b15 ^ (~b17 & b19);
	      s[24] = b24 ^ (~b26 & b28);
	      s[25] = b25 ^ (~b27 & b29);
	      s[34] = b34 ^ (~b36 & b38);
	      s[35] = b35 ^ (~b37 & b39);
	      s[44] = b44 ^ (~b46 & b48);
	      s[45] = b45 ^ (~b47 & b49);
	      s[6] = b6 ^ (~b8 & b0);
	      s[7] = b7 ^ (~b9 & b1);
	      s[16] = b16 ^ (~b18 & b10);
	      s[17] = b17 ^ (~b19 & b11);
	      s[26] = b26 ^ (~b28 & b20);
	      s[27] = b27 ^ (~b29 & b21);
	      s[36] = b36 ^ (~b38 & b30);
	      s[37] = b37 ^ (~b39 & b31);
	      s[46] = b46 ^ (~b48 & b40);
	      s[47] = b47 ^ (~b49 & b41);
	      s[8] = b8 ^ (~b0 & b2);
	      s[9] = b9 ^ (~b1 & b3);
	      s[18] = b18 ^ (~b10 & b12);
	      s[19] = b19 ^ (~b11 & b13);
	      s[28] = b28 ^ (~b20 & b22);
	      s[29] = b29 ^ (~b21 & b23);
	      s[38] = b38 ^ (~b30 & b32);
	      s[39] = b39 ^ (~b31 & b33);
	      s[48] = b48 ^ (~b40 & b42);
	      s[49] = b49 ^ (~b41 & b43);

	      s[0] ^= RC[n];
	      s[1] ^= RC[n + 1];
	    }
	  }

	  if (!root.JS_SHA3_TEST && NODE_JS) {
	    module.exports = methods;
	  } else if (root) {
	    for (var key in methods) {
	      root[key] = methods[key];
	    }
	  }
	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const Message = __webpack_require__(29);

	const TYPE_MSG = 0,
		TYPE_PROXY = 1,
		parse_func = {
			"00": (text, chord) => {
				let obj = JSON.parse(text);

				return new Message(chord, obj.t, {
					src: obj.s,
					dest: obj.d,
					module: obj.m,
					handler: obj.h,
					data: obj.D,
					proxy: obj.p,
					hops: obj.H,
					version: "00"
				});
			}
		},
		out_func = {
			"00": message => {
				return "00" + JSON.stringify({
					s: message.src,
					d: message.dest,
					m: message.module,
					h: message.handler,
					D: message.data,
					p: message.proxy,
					t: message.type,
					H: message.hops
				});
			}
		};


	class MessageCore {
		constructor (chord) {
			this.chord = chord;
		}

		parseMessage (string) {
			//Read version.
			let version = string.substring(0,2);

			//Is version valid?
			if (version.length < 2 || !parse_func[version])
				return null;

			//Parse the packet using its version.
			try {
				return parse_func[version](string.substr(2), this.chord);
			} catch (e) {
				return null;
			}
		}

		handleMessage (message) {
			switch (message.type) {
				case TYPE_MSG:
					this.chord.registry.parse(message);
					break;
				case TYPE_PROXY:
					let internalMsg = this.parseMessage(message.data);

					internalMsg.proxy = message.dest;

					this.chord.message(internalMsg);
					break;
			}
		}

		makeProxyMessage (message, proxyId) {
			let encMsg = this.encodeMessage(message),
				proxyData = {
					data: encMsg,
					src: message.src,
					dest: proxyId,
					hops: this.chord.config.messageMaxHops,
					version: message.version
				};
				
				return new Message(this.chord, 1, proxyData);
		}

		sendProxyMessage (message, proxyID) {
			let m = this.makeProxyMessage(message, proxyID);

			if(m)
				this.chord.message(m);
		}

		encodeMessage (message) {
			if(out_func[message.type])
				return out_func[message.type](message);

			return out_func["00"](message);	
		}
	}

	module.exports = MessageCore;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const ID = __webpack_require__(6);

	class Message {
		constructor (chord, type, properties) {
			this.chord = chord;
			this.type = type;

			for(let name in properties)
				if(properties.hasOwnProperty(name) && properties[name]!==undefined && !this[name]) this[name] = properties[name];

			//Validate
			if (!(this.src && this.dest && this.data && this.hops))
				throw new Error("Generic message missing components: either src, dest or data");
			switch (type) {
				case 0: //TYPE_MSG
					if (!(this.module && this.handler))
						throw new Error("TYPE_MSG missing components: either module or handler");
					break;
				case 1: //TYPE_PROXY
					break;
			}

			if(!this.version)
				this.version = "00";

			if(this.hops > this.chord.config.messageMaxHops)
				this.hops = this.chord.config.messageMaxHops;
		}

		reply (message) {
			if(this.proxy){
				message = this.chord.messageCore.makeProxyMessage(message, this.proxy);
			}

			this.chord.message(message);
		}

		pass () {
			this.bypass = true;
			this.chord.message(this);
		}

		set src (val) {
			this._src = ID.coerceString(val);
		}

		get src() {
			return this._src;
		}

		set dest (val) {
			this._dest = ID.coerceString(val);
		}

		get dest() {
			return this._dest;
		}

		set proxy (val) {
			this._proxy = ID.coerceString(val);
		}

		get proxy() {
			return this._proxy;
		}
	}

	module.exports = Message;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * machina - A library for creating powerful and flexible finite state machines. Loosely inspired by Erlang/OTP's gen_fsm behavior.
	 * Author: Jim Cowart (http://ifandelse.com)
	 * Version: v1.1.2
	 * Url: http://machina-js.org/
	 * License(s): MIT, GPL
	 */

	( function( root, factory ) {
		/* istanbul ignore if  */
		if ( true ) {
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(31) ], __WEBPACK_AMD_DEFINE_RESULT__ = function( _ ) {
				return factory( _, root );
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		/* istanbul ignore else  */
		} else if ( typeof module === "object" && module.exports ) {
			// Node, or CommonJS-Like environments
			module.exports = factory( require( "lodash" ) );
		} else {
			// Browser globals
			root.machina = factory( root._, root );
		}
	}( this, function( _, global, undefined ) {
		var slice = [].slice;
		var NEXT_TRANSITION = "transition";
		var HANDLING = "handling";
		var HANDLED = "handled";
		var NO_HANDLER = "nohandler";
		var TRANSITION = "transition";
		var INVALID_STATE = "invalidstate";
		var DEFERRED = "deferred";
		var NEW_FSM = "newfsm";

		function getDefaultBehavioralOptions() {
		return {
			initialState: "uninitialized",
			eventListeners: {
				"*": []
			},
			states: {},
			namespace: utils.makeFsmNamespace(),
			useSafeEmit: false,
			hierarchy: {},
			pendingDelegations: {}
		};
	}

		function getDefaultClientMeta() {
		return {
			inputQueue: [],
			targetReplayState: "",
			state: undefined,
			priorState: undefined,
			priorAction: "",
			currentAction: "",
			currentActionArgs: undefined,
			inExitHandler: false
		};
	}

		function getLeaklessArgs( args, startIdx ) {
		var result = [];
		for ( var i = ( startIdx || 0 ); i < args.length; i++ ) {
			result[ i ] = args[ i ];
		}
		return result;
	}

		function getChildFsmInstance( config ) {
		if ( !config ) {
			return;
		}
		var childFsmDefinition = {};
		if ( typeof config === "object" ) {
			// is this a config object with a factory?
			if ( config.factory ) {
				childFsmDefinition = config;
			} else {
				// assuming this is a machina instance
				childFsmDefinition.factory = function() {
					return config;
				};
			}
		} else if ( typeof config === "function" ) {
			childFsmDefinition.factory = config;
		}
		childFsmDefinition.instance = childFsmDefinition.factory();
		return childFsmDefinition;
	}

		function listenToChild( fsm, child ) {
		return child.on( "*", function( eventName, data ) {
			switch ( eventName ) {
				case "nohandler":
					if ( !data.ticket && !data.delegated && data.namespace !== fsm.namespace ) {
						// Ok - we're dealing w/ a child handling input that should bubble up
						data.args[ 1 ].bubbling = true;
					}
					// we do NOT bubble _reset inputs up to the parent
					if ( data.inputType !== "_reset" ) {
						fsm.handle.apply( fsm, data.args );
					}
					break;
				case "handling" :
					var ticket = data.ticket;
					if ( ticket && fsm.pendingDelegations[ ticket ] ) {
						delete fsm.pendingDelegations[ ticket ];
					}
					fsm.emit( eventName, data ); // possibly transform payload?
					break;
				default:
					fsm.emit( eventName, data ); // possibly transform payload?
					break;
			}
		} );
	}

		// _machKeys are members we want to track across the prototype chain of an extended FSM constructor
		// Since we want to eventually merge the aggregate of those values onto the instance so that FSMs
		// that share the same extended prototype won't share state *on* those prototypes.
		var _machKeys = [ "states", "initialState" ];
		var extend = function( protoProps, staticProps ) {
		var parent = this;
		var fsm; // placeholder for instance constructor
		var machObj = {}; // object used to hold initialState & states from prototype for instance-level merging
		var Ctor = function() {}; // placeholder ctor function used to insert level in prototype chain

		// The constructor function for the new subclass is either defined by you
		// (the "constructor" property in your `extend` definition), or defaulted
		// by us to simply call the parent's constructor.
		if ( protoProps && protoProps.hasOwnProperty( "constructor" ) ) {
			fsm = protoProps.constructor;
		} else {
			// The default machina constructor (when using inheritance) creates a
			// deep copy of the states/initialState values from the prototype and
			// extends them over the instance so that they'll be instance-level.
			// If an options arg (args[0]) is passed in, a states or intialState
			// value will be preferred over any data pulled up from the prototype.
			fsm = function() {
				var args = slice.call( arguments, 0 );
				args[ 0 ] = args[ 0 ] || {};
				var blendedState;
				var instanceStates = args[ 0 ].states || {};
				blendedState = _.merge( _.cloneDeep( machObj ), { states: instanceStates } );
				blendedState.initialState = args[ 0 ].initialState || this.initialState;
				_.extend( args[ 0 ], blendedState );
				parent.apply( this, args );
			};
		}

		// Inherit class (static) properties from parent.
		_.merge( fsm, parent );

		// Set the prototype chain to inherit from `parent`, without calling
		// `parent`'s constructor function.
		Ctor.prototype = parent.prototype;
		fsm.prototype = new Ctor();

		// Add prototype properties (instance properties) to the subclass,
		// if supplied.
		if ( protoProps ) {
			_.extend( fsm.prototype, protoProps );
			_.merge( machObj, _.transform( protoProps, function( accum, val, key ) {
				if ( _machKeys.indexOf( key ) !== -1 ) {
					accum[ key ] = val;
				}
			} ) );
		}

		// Add static properties to the constructor function, if supplied.
		if ( staticProps ) {
			_.merge( fsm, staticProps );
		}

		// Correctly set child's `prototype.constructor`.
		fsm.prototype.constructor = fsm;

		// Set a convenience property in case the parent's prototype is needed later.
		fsm.__super__ = parent.prototype;
		return fsm;
	};

		function createUUID() {
		var s = [];
		var hexDigits = "0123456789abcdef";
		for ( var i = 0; i < 36; i++ ) {
			s[ i ] = hexDigits.substr( Math.floor( Math.random() * 0x10 ), 1 );
		}
		s[ 14 ] = "4"; // bits 12-15 of the time_hi_and_version field to 0010
		
		s[ 19 ] = hexDigits.substr( ( s[ 19 ] & 0x3 ) | 0x8, 1 ); // bits 6-7 of the clock_seq_hi_and_reserved to 01
		
		s[ 8 ] = s[ 13 ] = s[ 18 ] = s[ 23 ] = "-";
		return s.join( "" );
	}

		var utils = {
		makeFsmNamespace: ( function() {
			var machinaCount = 0;
			return function() {
				return "fsm." + machinaCount++;
			};
		} )(),
		listenToChild: listenToChild,
		getLeaklessArgs: getLeaklessArgs,
		getDefaultOptions: getDefaultBehavioralOptions,
		getDefaultClientMeta: getDefaultClientMeta,
		createUUID: createUUID
	};

		var emitter = {

			emit: function( eventName ) {
			var args = getLeaklessArgs( arguments );
			if ( this.eventListeners[ "*" ] ) {
				_.each( this.eventListeners[ "*" ], function( callback ) {
					if ( !this.useSafeEmit ) {
						callback.apply( this, args );
					} else {
						try {
							callback.apply( this, args );
						} catch ( exception ) {
							/* istanbul ignore else  */
							if ( console && typeof console.log !== "undefined" ) {
								console.log( exception.stack );
							}
						}
					}
				}, this );
			}
			if ( this.eventListeners[ eventName ] ) {
				_.each( this.eventListeners[ eventName ], function( callback ) {
					if ( !this.useSafeEmit ) {
						callback.apply( this, args.slice( 1 ) );
					} else {
						try {
							callback.apply( this, args.slice( 1 ) );
						} catch ( exception ) {
							/* istanbul ignore else  */
							if ( console && typeof console.log !== "undefined" ) {
								console.log( exception.stack );
							}
						}
					}
				}, this );
			}
		},

			on: function( eventName, callback ) {
			var self = this;
			self.eventListeners = self.eventListeners || { "*": [] };
			if ( !self.eventListeners[ eventName ] ) {
				self.eventListeners[ eventName ] = [];
			}
			self.eventListeners[ eventName ].push( callback );
			return {
				eventName: eventName,
				callback: callback,
				off: function() {
					self.off( eventName, callback );
				}
			};
		},

			off: function( eventName, callback ) {
			this.eventListeners = this.eventListeners || { "*": [] };
			if ( !eventName ) {
				this.eventListeners = {};
			} else {
				if ( callback ) {
					this.eventListeners[ eventName ] = _.without( this.eventListeners[ eventName ], callback );
				} else {
					this.eventListeners[ eventName ] = [];
				}
			}
		}
		};

		var MACHINA_PROP = "__machina__";

		function BehavioralFsm( options ) {
		_.extend( this, options );
		_.defaults( this, getDefaultBehavioralOptions() );
		this.initialize.apply( this, arguments );
		machina.emit( NEW_FSM, this );
	}

		_.extend( BehavioralFsm.prototype, {
		initialize: function() {},

		initClient: function initClient( client ) {
			var initialState = this.initialState;
			if ( !initialState ) {
				throw new Error( "You must specify an initial state for this FSM" );
			}
			if ( !this.states[ initialState ] ) {
				throw new Error( "The initial state specified does not exist in the states object." );
			}
			this.transition( client, initialState );
		},

		ensureClientMeta: function ensureClientMeta( client ) {
			if ( typeof client !== "object" ) {
				throw new Error( "An FSM client must be an object." );
			}
			client[ MACHINA_PROP ] = client[ MACHINA_PROP ] || {};
			if ( !client[ MACHINA_PROP ][ this.namespace ] ) {
				client[ MACHINA_PROP ][ this.namespace ] = _.cloneDeep( utils.getDefaultClientMeta() );
				this.initClient( client );
			}
			return client[ MACHINA_PROP ][ this.namespace ];
		},

		buildEventPayload: function( client, data ) {
			if ( _.isPlainObject( data ) ) {
				return _.extend( data, { client: client, namespace: this.namespace } );
			} else {
				return { client: client, data: data || null, namespace: this.namespace };
			}
		},

		getHandlerArgs: function( args, isCatchAll ) {
			// index 0 is the client, index 1 is inputType
			// if we're in a catch-all handler, input type needs to be included in the args
			// inputType might be an object, so we need to just get the inputType string if so
			var _args = args.slice( 0 );
			var input = _args[ 1 ];
			if ( typeof input === "object" ) {
				_args.splice( 1, 1, input.inputType );
			}
			return isCatchAll ?
				_args :
				[ _args[ 0 ] ].concat( _args.slice( 2 ) );
		},

		handle: function( client, input ) {
			var inputDef = input;
			if ( typeof input === "undefined" ) {
				throw new Error( "The input argument passed to the FSM's handle method is undefined. Did you forget to pass the input name?" );
			}
			if ( typeof input === "string" ) {
				inputDef = { inputType: input, delegated: false, ticket: undefined };
			}
			var clientMeta = this.ensureClientMeta( client );
			var args = getLeaklessArgs( arguments );
			if ( typeof input !== "object" ) {
				args.splice( 1, 1, inputDef );
			}
			clientMeta.currentActionArgs = args.slice( 1 );
			var currentState = clientMeta.state;
			var stateObj = this.states[ currentState ];
			var handlerName;
			var handler;
			var isCatchAll = false;
			var child;
			var result;
			var action;
			if ( !clientMeta.inExitHandler ) {
				child = stateObj._child && stateObj._child.instance;
				if ( child && !this.pendingDelegations[ inputDef.ticket ] && !inputDef.bubbling ) {
					inputDef.ticket = ( inputDef.ticket || utils.createUUID() );
					inputDef.delegated = true;
					this.pendingDelegations[ inputDef.ticket ] = { delegatedTo: child.namespace };
					// WARNING - returning a value from `handle` on child FSMs is not really supported.
					// If you need to return values from child FSM input handlers, use events instead.
					result = child.handle.apply( child, args );
				} else {
					if ( inputDef.ticket && this.pendingDelegations[ inputDef.ticket ] ) {
						delete this.pendingDelegations[ inputDef.ticket ];
					}
					handlerName = stateObj[ inputDef.inputType ] ? inputDef.inputType : "*";
					isCatchAll = ( handlerName === "*" );
					handler = ( stateObj[ handlerName ] || this[ handlerName ] ) || this[ "*" ];
					action = clientMeta.state + "." + handlerName;
					clientMeta.currentAction = action;
					var eventPayload = this.buildEventPayload(
						client,
						{ inputType: inputDef.inputType, delegated: inputDef.delegated, ticket: inputDef.ticket }
					);
					if ( !handler ) {
						this.emit( NO_HANDLER, _.extend( { args: args }, eventPayload ) );
					} else {
						this.emit( HANDLING, eventPayload );
						if ( typeof handler === "function" ) {
							result = handler.apply( this, this.getHandlerArgs( args, isCatchAll ) );
						} else {
							result = handler;
							this.transition( client, handler );
						}
						this.emit( HANDLED, eventPayload );
					}
					clientMeta.priorAction = clientMeta.currentAction;
					clientMeta.currentAction = "";
				}
			}
			return result;
		},

		transition: function( client, newState ) {
			var clientMeta = this.ensureClientMeta( client );
			var curState = clientMeta.state;
			var curStateObj = this.states[ curState ];
			var newStateObj = this.states[ newState ];
			var child;
			if ( !clientMeta.inExitHandler && newState !== curState ) {
				if ( newStateObj ) {
					if ( newStateObj._child ) {
						newStateObj._child = getChildFsmInstance( newStateObj._child );
						child = newStateObj._child && newStateObj._child.instance;
					}
					if ( curStateObj && curStateObj._onExit ) {
						clientMeta.inExitHandler = true;
						curStateObj._onExit.call( this, client );
						clientMeta.inExitHandler = false;
					}
					if ( curStateObj && curStateObj._child && curStateObj._child.instance && this.hierarchy[ curStateObj._child.instance.namespace ] ) {
						this.hierarchy[ curStateObj._child.instance.namespace ].off();
					}
					clientMeta.targetReplayState = newState;
					clientMeta.priorState = curState;
					clientMeta.state = newState;
					if ( child ) {
						this.hierarchy[ child.namespace ] = utils.listenToChild( this, child );
					}
					var eventPayload = this.buildEventPayload( client, {
						fromState: clientMeta.priorState,
						action: clientMeta.currentAction,
						toState: newState
					} );
					this.emit( TRANSITION, eventPayload );
					if ( newStateObj._onEnter ) {
						newStateObj._onEnter.call( this, client );
					}
					if ( child ) {
						child.handle( client, "_reset" );
					}

					if ( clientMeta.targetReplayState === newState ) {
						this.processQueue( client, NEXT_TRANSITION );
					}
					return;
				}
				this.emit( INVALID_STATE, this.buildEventPayload( client, {
					state: clientMeta.state,
					attemptedState: newState
				} ) );
			}
		},

		deferUntilTransition: function( client, stateName ) {
			var clientMeta = this.ensureClientMeta( client );
			if ( clientMeta.currentActionArgs ) {
				var queued = {
					type: NEXT_TRANSITION,
					untilState: stateName,
					args: clientMeta.currentActionArgs
				};
				clientMeta.inputQueue.push( queued );
				var eventPayload = this.buildEventPayload( client, {
					state: clientMeta.state,
					queuedArgs: queued
				} );
				this.emit( DEFERRED, eventPayload );
			}
		},

		deferAndTransition: function( client, stateName ) {
			this.deferUntilTransition( client, stateName );
			this.transition( client, stateName );
		},

		processQueue: function( client ) {
			var clientMeta = this.ensureClientMeta( client );
			var filterFn = function( item ) {
				return ( ( !item.untilState ) || ( item.untilState === clientMeta.state ) );
			};
			var toProcess = _.filter( clientMeta.inputQueue, filterFn );
			clientMeta.inputQueue = _.difference( clientMeta.inputQueue, toProcess );
			_.each( toProcess, function( item ) {
				this.handle.apply( this, [ client ].concat( item.args ) );
			}, this );
		},

		clearQueue: function( client, name ) {
			var clientMeta = this.ensureClientMeta( client );
			if ( !name ) {
				clientMeta.inputQueue = [];
			} else {
				var filter = function( evnt ) {
					return ( name ? evnt.untilState !== name : true );
				};
				clientMeta.inputQueue = _.filter( clientMeta.inputQueue, filter );
			}
		},

		compositeState: function( client ) {
			var clientMeta = this.ensureClientMeta( client );
			var state = clientMeta.state;
			var child = this.states[state]._child && this.states[state]._child.instance;
			if ( child ) {
				state += "." + child.compositeState( client );
			}
			return state;
		}
	}, emitter );

		BehavioralFsm.extend = extend;

		var Fsm = {
		constructor: function() {
			BehavioralFsm.apply( this, arguments );
			this.ensureClientMeta();
		},
		initClient: function initClient() {
			var initialState = this.initialState;
			if ( !initialState ) {
				throw new Error( "You must specify an initial state for this FSM" );
			}
			if ( !this.states[ initialState ] ) {
				throw new Error( "The initial state specified does not exist in the states object." );
			}
			this.transition( initialState );
		},
		ensureClientMeta: function ensureClientMeta() {
			if ( !this._stamped ) {
				this._stamped = true;
				_.defaults( this, _.cloneDeep( getDefaultClientMeta() ) );
				this.initClient();
			}
			return this;
		},

		ensureClientArg: function( args ) {
			var _args = args;
			// we need to test the args and verify that if a client arg has
			// been passed, it must be this FSM instance (this isn't a behavioral FSM)
			if ( typeof _args[ 0 ] === "object" && !( "inputType" in _args[ 0 ] ) && _args[ 0 ] !== this ) {
				_args.splice( 0, 1, this );
			} else if ( typeof _args[ 0 ] !== "object" || ( typeof _args[ 0 ] === "object" && ( "inputType" in _args[ 0 ] ) ) ) {
				_args.unshift( this );
			}
			return _args;
		},

		getHandlerArgs: function( args, isCatchAll ) {
			// index 0 is the client, index 1 is inputType
			// if we're in a catch-all handler, input type needs to be included in the args
			// inputType might be an object, so we need to just get the inputType string if so
			var _args = args;
			var input = _args[ 1 ];
			if ( typeof inputType === "object" ) {
				_args.splice( 1, 1, input.inputType );
			}
			return isCatchAll ?
				_args.slice( 1 ) :
				_args.slice( 2 );
		},
		// "classic" machina FSM do not emit the client property on events (which would be the FSM itself)
		buildEventPayload: function() {
			var args = this.ensureClientArg( utils.getLeaklessArgs( arguments ) );
			var data = args[ 1 ];
			if ( _.isPlainObject( data ) ) {
				return _.extend( data, { namespace: this.namespace } );
			} else {
				return { data: data || null, namespace: this.namespace };
			}
		}
	};

		_.each( [
			"handle",
			"transition",
			"deferUntilTransition",
			"processQueue",
			"clearQueue"
	], function( methodWithClientInjected ) {
		Fsm[methodWithClientInjected] = function() {
			var args = this.ensureClientArg( utils.getLeaklessArgs( arguments ) );
			return BehavioralFsm.prototype[methodWithClientInjected].apply( this, args );
		};
	} );
	 
		Fsm = BehavioralFsm.extend( Fsm );

		var machina = _.merge( emitter, {
		Fsm: Fsm,
		BehavioralFsm: BehavioralFsm,
		utils: utils,
		eventListeners: {
			newFsm: []
		}
	} );

		return machina;
	} ) );


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)(module), (function() { return this; }())))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const RemoteCallable = __webpack_require__(2).RemoteCallable,
		EventEmitter2 = __webpack_require__(33).EventEmitter2,
		sha3 = __webpack_require__(27),
		ID = __webpack_require__(2).ID,
		pki = __webpack_require__(34).pki,
		random = __webpack_require__(34).random,
		cipher = __webpack_require__(34).cipher,
		forgeUtil = __webpack_require__(34).util,
		md = __webpack_require__(34).md,
		u = __webpack_require__(35),
		Session = __webpack_require__(36),
		RecvSession = __webpack_require__(37);

	//EVENTS
	//	.on("receiveConnection", recvSession)

	class ShallotModule extends RemoteCallable {
		static get defaultConfig () {
			return {
				routeLength: 3,
				callTimeout: 1500,
				maxCallRetries: 3,
				rcCacheDuration: 20000
			};
		};

		constructor (chord, config) {
			super(chord, "shallot");

			this.config = u.mergeConfig(ShallotModule.defaultConfig, config);

			this._rcTimeout = this.config.callTimeout;
			this._rcRetries = this.config.maxCallRetries;
			this._rcCacheDuration = this.config.rcCacheDuration;

			this._evts = new EventEmitter2({
				maxListeners: 20
			});

			this.keyStore = {};
			this.sessions = {};
			this.circuits = {};

			chord.registerModule(this);
		}

		get emit () {
			return this._evts.emit.bind(this._evts);
		}

		get on () {
			return this._evts.on.bind(this._evts);
		}

		get off () {
			return this._evts.off.bind(this._evts);
		}

		delegate (message) {
			if(super.delegate(message))
				return;

			switch (message.handler) {
				case "r":
					//RELAY
					this._parseRelay(message.data.params[0])
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
				case "b":
					//BUILD
					this._parseBuild(message.data.params[0])
						.then(
							response => this.answer(message, response)
						)
						.catch(
							reason => this.error(message, reason)
						);
					break;
			}
		}

		createRouteTo (id) {
			//Generate a route.
			//This is routeLength * randomIDs, + destination.
			let routeProms = [];

			for (let i = 0; i < this.config.routeLength; i++) {
				(i=>{
					let plannedId = new ID(
						forgeUtil.encode64(random.getBytesSync(this.chord.config.idWidth/8))
					);

					// Find what key our random id maps to.
					// Lookup its public key.
					// Fail if it does not exist.
					routeProms[i] = this.chord.node.findSuccessor(plannedId)
						.then(
							node => {return this._lookupKey(node.id);}
						);
				})(i)
			}

			routeProms[this.config.routeLength] = this.chord.node.findSuccessor(id)
				.then(
					node => {
						if (ID.compare(node.id, id) !== 0)
							return Promise.reject(`Destination node ${ID.coerceString(id)} could not be found!`);

						return this._lookupKey(id);
					}
				)

			// Now await all promise resolutions.
			// Afterwards, propagate the chain to build a session.

			return Promise.all(routeProms);
		}

		connectTo (id) {
			//First, get our route.
			return this.createRouteTo(id)
				.then(
					route => {
						//Generate an AES key for each hop.
						let aesKeys = [];
						for (let i =0; i < route.length; i++)
							aesKeys.push(random.getBytesSync(16));

						//Create the first circuitID
						let firstCirc = random.getBytesSync(8);

						let propagateLink = index => {
							//End recursive promise chain.
							if(index === route.length) {
								let data = {
									f: ID.coerceString(this.chord.id)
								};

								return this._sendOnion(aesKeys, route[0], firstCirc, data)
									.then(()=> {
										return Promise.resolve(new Session(this, route, aesKeys, firstCirc));
									})
							}

							//Package the aes key for each node along the chain.
							let internal = {
								k: route[index].encrypt(aesKeys[index])
							};

							//Our promise for both paths.
							let a;

							//If sending to the first node, we have to send a full build message instead
							//of a relay.
							if (index===0) {
								this._augmentBuild(internal, route[0], firstCirc);

								a = this._sendBuild(route[0], internal);
							} else {
								//We need to inform the end of the route about the next hop.
								//Encrypt this information just for it.
								internal.d = route[index-1].encrypt(ID.coerceString(route[index].id));

								//Now wrap with as many layers as we can, and put our circuit id
								//(secured, with the iv) in the message.
								a = this._sendOnion(aesKeys, route[0], firstCirc, internal, index-1);
							}

							return a.then(() => {return propagateLink(index+1);})
						};

						//Begin propagation.
						return propagateLink(0);
					}
				);
		}

		_lookupKey (id) {
			let idStr = ID.coerceString(id);

			//If we have it, return it.
			if(this.keyStore[idStr])
				return Promise.resolve(this.keyStore[idStr]);
			else {
				//Perform network lookup.
				return new Promise ( (resolve, reject) => {
					this.chord.lookupItem(idStr)
						.then( pubKey => {
							//If it wasn't in the network, reject the original call.
							//Also reject if the pubkey does not match the target.
							if (pubKey===null)
								reject("[Shallot] - couldn't find pubKey for "+idStr);
							else {
								let hash = sha3["sha3_"+this.chord.config.idWidth].buffer(pubKey),
									hashStr = ID.coerceString(new ID(hash));

								if (ID.compare(hashStr, id)!==0) {
									reject("[Shallot] - mismatch of obtained pubKey for "+idStr);
								} else {
									//Build a new item for future lookups, and then resolve the original call.
									let item = {
										id,
										pubKey,
										cryptor: pki.publicKeyFromPem(pubKey),
										encrypt (msg) {
											return this.cryptor.encrypt(msg, "RSA-OAEP");
										},
										verify (digest, signature) {
											return this.cryptor.verify(digest, signature);
										}
									};

									this.keyStore[idStr] = item;
									resolve(item);
								}
							}
						} )
				} )
			}
		}

		_sendOnion (aesKeys, firstHop, circ, data, index) {
			let i = (index===undefined) ? aesKeys.length-1 : index,
				iv = random.getBytesSync(16),
				out = JSON.stringify(data);

			while (i>=0) {
				out = ShallotModule.aes_encrypt(out, aesKeys[i], iv);
				i--;
			}

			let internal = {
				d: out,
				s: firstHop.encrypt(circ+iv)
			};

			return this.call(firstHop.id, "r", [internal]);
		}

		_sendBuild (firstHop, data) {
			return this.call(firstHop.id, "b", [data]);
		}

		_parseRelay (content) {
			//PACKET FORMAT
			//d: encrypted data for us to decode.
			//s: secured circuit

			//Can contain:
			//	relay - data cannot be JSON parsed, circuit has a next hop.
			//	build - data can be parsed, we must take the d field and add
			//			c and v fields (circuit+this id, signature).
			//	finish - JSON message dictating that the given circuit is an exit point.
			//			contains f: entry point's id.
			//	content - data can be JSON parsed - ouput at session attached
			//			to circuit.

			return new Promise( (resolve, reject) => {
				//Parse "s" - decrypt, then first 8 bytes are circuit, next 16 are iv for AES.
				let decS = this.rsaDecrypt(content.s),
					circ = decS.substr(0, 8),
					iv = decS.substr(8, 16);

				//We can now decrypt d.
				let packetRaw = ShallotModule.aes_decrypt(content.d, this.circuits[circ].aes, iv),
					packet = ShallotModule.determinePacket(packetRaw);

				let circData = this.circuits[circ], 
					nextHop, nextCirc;

				switch (packet.type) {
					case "relay":
						//Lookup the circuit we are switching to.
						nextHop = circData.nextHop;
						nextCirc = circData.nextCirc;

						this._lookupKey(nextHop)
							.then( key => {
								//Modify the packet with c, v fields.
								let out = {s: key.encrypt(nextCirc+iv), d:packet.data}

								//Send to next hop.
								return this.call(nextHop, "r", [out])
									.then(res => resolve(res));

							})
							.catch(reason => reject(reason));
						break;
					case "build":
						//Parse the d field - this contains our next hop.
						if(circData.nextHop && circData.nextCirc){
							nextHop = circData.nextHop;
							nextCirc = circData.nextCirc;
						} else {
							nextHop = this.rsaDecrypt(packet.data.d);
							nextCirc = random.getBytesSync(8);	
						}

						//Lookup next hop's public key.
						delete packet.data.d;
						this._lookupKey(nextHop)
							.then( key => {
								//Modify the packet with c, v fields.
								this._augmentBuild(packet.data, key, nextCirc);

								//Augment our circuit.
								circData.nextHop = nextHop;
								circData.nextCirc = nextCirc;

								//Send to next hop.
								return this._sendBuild(key, packet.data)
									.then(res => resolve(res));

							})
							.catch(reason => reject(reason));
						break;
					case "finish":
						//Read the data's f field - this is the link owner's ID.
						let startId = packet.data.f;

						//Create a new RecvSession for this circuit.
						if (!circData.session)
							circData.session = new RecvSession(this, startId);

						resolve(true);
						break;
					case "content":
						//Fire onmessage events of RecvSession attached to this circuit.
						circData.session.content(packet.data.c);

						resolve(true);
						break;
				}
			} );
		}

		_augmentBuild (object, nexthopKey, nextCirc) {
			object.c = nexthopKey.encrypt(nextCirc+ID.coerceString(this.chord.id));
			object.v = this.rsaSign(object.k+object.c);
		}

		_parseBuild (content) {
			//PACKET FORMAT
			//k: our aes key for this circuit segment
			//c: pub encypted circuit code, + last hop's ID
			//v: signature, signed by last hop.

			//First, read in AES key, circuit and last hop.
			return new Promise( (resolve, reject) => {
				let aesKey = this.rsaDecrypt(content.k),
					decC = this.rsaDecrypt(content.c),
					circ = decC.substr(0,8),
					lastHopId = decC.slice(8);

				//Now, verify the hash to ensure origin is correct.
				this._lookupKey(lastHopId)
					.then(
						key => {
							let ver = this.rsaVerify(content.k+content.c, content.v, key);

							if (!ver)
								reject("Could not verify build packet!");

							//Now, place the circuit in the internal tables.
							this.circuits[circ] = {
								aes: aesKey,
								lastHop: lastHopId,
								nextHop: null,
								nextCirc: null
							};

							resolve(true);
						},

						err => reject(err)
					)
			} );
		}

		rsaDecrypt (data) {
			return this.chord.key.privateKey.decrypt(data, "RSA-OAEP");
		}

		rsaSign (data) {
			let digestor = md.sha256.create();
			digestor.update(data);

			return this.chord.key.privateKey.sign(digestor);
		}

		rsaVerify (data, signature, key) {
			let digestor = md.sha256.create();
			digestor.update(data);

			return key.verify(digestor.digest().bytes(), signature);
		}

		static determinePacket (packetRaw) {
			//Get a packet from the inside of an onion layer.
			//Can contain:
			//	relay - data cannot be JSON parsed, circuit has a next hop.
			//	build - data can be parsed, has d,k.
			//	finish - JSON message, has f.
			//	content - data can be JSON parsed, has c

			let out = {
				type: null,
				data: null
			},
			inter;

			try {
				inter = JSON.parse(packetRaw);
			} catch (e) {
				out.type = "relay";
				out.data = packetRaw;

				return out;
			}

			if (inter.d !== undefined && inter.k !== undefined)
				out.type = "build";
			else if (inter.f !== undefined)
				out.type = "finish";
			else if (inter.c !== undefined)
				out.type = "content";
			else
				throw new Error("Illegal packet content: "+packetRaw);

			out.data = inter;

			return out;
		}

		static aes_encrypt (data, aesKey, iv) {
			let cipherObj = cipher.createCipher('AES-CBC', aesKey);

			cipherObj.start({
				iv,
				additionalData: 'binary-encoded string'
			});

			cipherObj.update(forgeUtil.createBuffer(data));
			cipherObj.finish();

			return cipherObj.output.data;
		}

		static aes_decrypt (cipherText, aesKey, iv) {
			let decipher = cipher.createDecipher('AES-CBC', aesKey);

			decipher.start({
				iv,
				additionalData: 'binary-encoded string'
			});

			decipher.update(forgeUtil.createBuffer(cipherText));
			let success = decipher.finish();

			return (success) ? decipher.output.data : null;
		}
	}

	module.exports = ShallotModule;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * EventEmitter2
	 * https://github.com/hij1nx/EventEmitter2
	 *
	 * Copyright (c) 2013 hij1nx
	 * Licensed under the MIT license.
	 */
	;!function(undefined) {

	  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {
	    return Object.prototype.toString.call(obj) === "[object Array]";
	  };
	  var defaultMaxListeners = 10;

	  function init() {
	    this._events = {};
	    if (this._conf) {
	      configure.call(this, this._conf);
	    }
	  }

	  function configure(conf) {
	    if (conf) {

	      this._conf = conf;

	      conf.delimiter && (this.delimiter = conf.delimiter);
	      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);
	      conf.wildcard && (this.wildcard = conf.wildcard);
	      conf.newListener && (this.newListener = conf.newListener);

	      if (this.wildcard) {
	        this.listenerTree = {};
	      }
	    }
	  }

	  function EventEmitter(conf) {
	    this._events = {};
	    this.newListener = false;
	    configure.call(this, conf);
	  }
	  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property

	  //
	  // Attention, function return type now is array, always !
	  // It has zero elements if no any matches found and one or more
	  // elements (leafs) if there are matches
	  //
	  function searchListenerTree(handlers, type, tree, i) {
	    if (!tree) {
	      return [];
	    }
	    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,
	        typeLength = type.length, currentType = type[i], nextType = type[i+1];
	    if (i === typeLength && tree._listeners) {
	      //
	      // If at the end of the event(s) list and the tree has listeners
	      // invoke those listeners.
	      //
	      if (typeof tree._listeners === 'function') {
	        handlers && handlers.push(tree._listeners);
	        return [tree];
	      } else {
	        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {
	          handlers && handlers.push(tree._listeners[leaf]);
	        }
	        return [tree];
	      }
	    }

	    if ((currentType === '*' || currentType === '**') || tree[currentType]) {
	      //
	      // If the event emitted is '*' at this part
	      // or there is a concrete match at this patch
	      //
	      if (currentType === '*') {
	        for (branch in tree) {
	          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
	            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));
	          }
	        }
	        return listeners;
	      } else if(currentType === '**') {
	        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));
	        if(endReached && tree._listeners) {
	          // The next element has a _listeners, add it to the handlers.
	          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));
	        }

	        for (branch in tree) {
	          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {
	            if(branch === '*' || branch === '**') {
	              if(tree[branch]._listeners && !endReached) {
	                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));
	              }
	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
	            } else if(branch === nextType) {
	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));
	            } else {
	              // No match on this one, shift into the tree but not in the type array.
	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));
	            }
	          }
	        }
	        return listeners;
	      }

	      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));
	    }

	    xTree = tree['*'];
	    if (xTree) {
	      //
	      // If the listener tree will allow any match for this part,
	      // then recursively explore all branches of the tree
	      //
	      searchListenerTree(handlers, type, xTree, i+1);
	    }

	    xxTree = tree['**'];
	    if(xxTree) {
	      if(i < typeLength) {
	        if(xxTree._listeners) {
	          // If we have a listener on a '**', it will catch all, so add its handler.
	          searchListenerTree(handlers, type, xxTree, typeLength);
	        }

	        // Build arrays of matching next branches and others.
	        for(branch in xxTree) {
	          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {
	            if(branch === nextType) {
	              // We know the next element will match, so jump twice.
	              searchListenerTree(handlers, type, xxTree[branch], i+2);
	            } else if(branch === currentType) {
	              // Current node matches, move into the tree.
	              searchListenerTree(handlers, type, xxTree[branch], i+1);
	            } else {
	              isolatedBranch = {};
	              isolatedBranch[branch] = xxTree[branch];
	              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);
	            }
	          }
	        }
	      } else if(xxTree._listeners) {
	        // We have reached the end and still on a '**'
	        searchListenerTree(handlers, type, xxTree, typeLength);
	      } else if(xxTree['*'] && xxTree['*']._listeners) {
	        searchListenerTree(handlers, type, xxTree['*'], typeLength);
	      }
	    }

	    return listeners;
	  }

	  function growListenerTree(type, listener) {

	    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();

	    //
	    // Looks for two consecutive '**', if so, don't add the event at all.
	    //
	    for(var i = 0, len = type.length; i+1 < len; i++) {
	      if(type[i] === '**' && type[i+1] === '**') {
	        return;
	      }
	    }

	    var tree = this.listenerTree;
	    var name = type.shift();

	    while (name) {

	      if (!tree[name]) {
	        tree[name] = {};
	      }

	      tree = tree[name];

	      if (type.length === 0) {

	        if (!tree._listeners) {
	          tree._listeners = listener;
	        }
	        else if(typeof tree._listeners === 'function') {
	          tree._listeners = [tree._listeners, listener];
	        }
	        else if (isArray(tree._listeners)) {

	          tree._listeners.push(listener);

	          if (!tree._listeners.warned) {

	            var m = defaultMaxListeners;

	            if (typeof this._events.maxListeners !== 'undefined') {
	              m = this._events.maxListeners;
	            }

	            if (m > 0 && tree._listeners.length > m) {

	              tree._listeners.warned = true;
	              console.error('(node) warning: possible EventEmitter memory ' +
	                            'leak detected. %d listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit.',
	                            tree._listeners.length);
	              if(console.trace){
	                console.trace();
	              }
	            }
	          }
	        }
	        return true;
	      }
	      name = type.shift();
	    }
	    return true;
	  }

	  // By default EventEmitters will print a warning if more than
	  // 10 listeners are added to it. This is a useful default which
	  // helps finding memory leaks.
	  //
	  // Obviously not all Emitters should be limited to 10. This function allows
	  // that to be increased. Set to zero for unlimited.

	  EventEmitter.prototype.delimiter = '.';

	  EventEmitter.prototype.setMaxListeners = function(n) {
	    this._events || init.call(this);
	    this._events.maxListeners = n;
	    if (!this._conf) this._conf = {};
	    this._conf.maxListeners = n;
	  };

	  EventEmitter.prototype.event = '';

	  EventEmitter.prototype.once = function(event, fn) {
	    this.many(event, 1, fn);
	    return this;
	  };

	  EventEmitter.prototype.many = function(event, ttl, fn) {
	    var self = this;

	    if (typeof fn !== 'function') {
	      throw new Error('many only accepts instances of Function');
	    }

	    function listener() {
	      if (--ttl === 0) {
	        self.off(event, listener);
	      }
	      fn.apply(this, arguments);
	    }

	    listener._origin = fn;

	    this.on(event, listener);

	    return self;
	  };

	  EventEmitter.prototype.emit = function() {

	    this._events || init.call(this);

	    var type = arguments[0];

	    if (type === 'newListener' && !this.newListener) {
	      if (!this._events.newListener) {
	        return false;
	      }
	    }

	    var al = arguments.length;
	    var args,l,i,j;
	    var handler;

	    if (this._all && this._all.length) {
	      handler = this._all.slice();
	      if (al > 3) {
	        args = new Array(al);
	        for (j = 1; j < al; j++) args[j] = arguments[j];
	      }

	      for (i = 0, l = handler.length; i < l; i++) {
	        this.event = type;
	        switch (al) {
	        case 1:
	          handler[i].call(this, type);
	          break;
	        case 2:
	          handler[i].call(this, type, arguments[1]);
	          break;
	        case 3:
	          handler[i].call(this, type, arguments[1], arguments[2]);
	          break;
	        default:
	          handler[i].apply(this, args);
	        }
	      }
	    }

	    if (this.wildcard) {
	      handler = [];
	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
	      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
	    } else {
	      handler = this._events[type];
	      if (typeof handler === 'function') {
	        this.event = type;
	        switch (al) {
	        case 1:
	          handler.call(this);
	          break;
	        case 2:
	          handler.call(this, arguments[1]);
	          break;
	        case 3:
	          handler.call(this, arguments[1], arguments[2]);
	          break;
	        default:
	          args = new Array(al - 1);
	          for (j = 1; j < al; j++) args[j - 1] = arguments[j];
	          handler.apply(this, args);
	        }
	        return true;
	      } else if (handler) {
	        // need to make copy of handlers because list can change in the middle
	        // of emit call
	        handler = handler.slice();
	      }
	    }

	    if (handler && handler.length) {
	      if (al > 3) {
	        args = new Array(al - 1);
	        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
	      }
	      for (i = 0, l = handler.length; i < l; i++) {
	        this.event = type;
	        switch (al) {
	        case 1:
	          handler[i].call(this);
	          break;
	        case 2:
	          handler[i].call(this, arguments[1]);
	          break;
	        case 3:
	          handler[i].call(this, arguments[1], arguments[2]);
	          break;
	        default:
	          handler[i].apply(this, args);
	        }
	      }
	      return true;
	    } else if (!this._all && type === 'error') {
	      if (arguments[1] instanceof Error) {
	        throw arguments[1]; // Unhandled 'error' event
	      } else {
	        throw new Error("Uncaught, unspecified 'error' event.");
	      }
	      return false;
	    }

	    return !!this._all;
	  };

	  EventEmitter.prototype.emitAsync = function() {

	    this._events || init.call(this);

	    var type = arguments[0];

	    if (type === 'newListener' && !this.newListener) {
	        if (!this._events.newListener) { return Promise.resolve([false]); }
	    }

	    var promises= [];

	    var al = arguments.length;
	    var args,l,i,j;
	    var handler;

	    if (this._all) {
	      if (al > 3) {
	        args = new Array(al);
	        for (j = 1; j < al; j++) args[j] = arguments[j];
	      }
	      for (i = 0, l = this._all.length; i < l; i++) {
	        this.event = type;
	        switch (al) {
	        case 1:
	          promises.push(this._all[i].call(this, type));
	          break;
	        case 2:
	          promises.push(this._all[i].call(this, type, arguments[1]));
	          break;
	        case 3:
	          promises.push(this._all[i].call(this, type, arguments[1], arguments[2]));
	          break;
	        default:
	          promises.push(this._all[i].apply(this, args));
	        }
	      }
	    }

	    if (this.wildcard) {
	      handler = [];
	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
	      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);
	    } else {
	      handler = this._events[type];
	    }

	    if (typeof handler === 'function') {
	      this.event = type;
	      switch (al) {
	      case 1:
	        promises.push(handler.call(this));
	        break;
	      case 2:
	        promises.push(handler.call(this, arguments[1]));
	        break;
	      case 3:
	        promises.push(handler.call(this, arguments[1], arguments[2]));
	        break;
	      default:
	        args = new Array(al - 1);
	        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
	        promises.push(handler.apply(this, args));
	      }
	    } else if (handler && handler.length) {
	      if (al > 3) {
	        args = new Array(al - 1);
	        for (j = 1; j < al; j++) args[j - 1] = arguments[j];
	      }
	      for (i = 0, l = handler.length; i < l; i++) {
	        this.event = type;
	        switch (al) {
	        case 1:
	          promises.push(handler[i].call(this));
	          break;
	        case 2:
	          promises.push(handler[i].call(this, arguments[1]));
	          break;
	        case 3:
	          promises.push(handler[i].call(this, arguments[1], arguments[2]));
	          break;
	        default:
	          promises.push(handler[i].apply(this, args));
	        }
	      }
	    } else if (!this._all && type === 'error') {
	      if (arguments[1] instanceof Error) {
	        return Promise.reject(arguments[1]); // Unhandled 'error' event
	      } else {
	        return Promise.reject("Uncaught, unspecified 'error' event.");
	      }
	    }

	    return Promise.all(promises);
	  };

	  EventEmitter.prototype.on = function(type, listener) {

	    if (typeof type === 'function') {
	      this.onAny(type);
	      return this;
	    }

	    if (typeof listener !== 'function') {
	      throw new Error('on only accepts instances of Function');
	    }
	    this._events || init.call(this);

	    // To avoid recursion in the case that type == "newListeners"! Before
	    // adding it to the listeners, first emit "newListeners".
	    this.emit('newListener', type, listener);

	    if(this.wildcard) {
	      growListenerTree.call(this, type, listener);
	      return this;
	    }

	    if (!this._events[type]) {
	      // Optimize the case of one listener. Don't need the extra array object.
	      this._events[type] = listener;
	    }
	    else if(typeof this._events[type] === 'function') {
	      // Adding the second element, need to change to array.
	      this._events[type] = [this._events[type], listener];
	    }
	    else if (isArray(this._events[type])) {
	      // If we've already got an array, just append.
	      this._events[type].push(listener);

	      // Check for listener leak
	      if (!this._events[type].warned) {

	        var m = defaultMaxListeners;

	        if (typeof this._events.maxListeners !== 'undefined') {
	          m = this._events.maxListeners;
	        }

	        if (m > 0 && this._events[type].length > m) {

	          this._events[type].warned = true;
	          console.error('(node) warning: possible EventEmitter memory ' +
	                        'leak detected. %d listeners added. ' +
	                        'Use emitter.setMaxListeners() to increase limit.',
	                        this._events[type].length);
	          if(console.trace){
	            console.trace();
	          }
	        }
	      }
	    }
	    return this;
	  };

	  EventEmitter.prototype.onAny = function(fn) {

	    if (typeof fn !== 'function') {
	      throw new Error('onAny only accepts instances of Function');
	    }

	    if(!this._all) {
	      this._all = [];
	    }

	    // Add the function to the event listener collection.
	    this._all.push(fn);
	    return this;
	  };

	  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	  EventEmitter.prototype.off = function(type, listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('removeListener only takes instances of Function');
	    }

	    var handlers,leafs=[];

	    if(this.wildcard) {
	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
	      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);
	    }
	    else {
	      // does not use listeners(), so no side effect of creating _events[type]
	      if (!this._events[type]) return this;
	      handlers = this._events[type];
	      leafs.push({_listeners:handlers});
	    }

	    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
	      var leaf = leafs[iLeaf];
	      handlers = leaf._listeners;
	      if (isArray(handlers)) {

	        var position = -1;

	        for (var i = 0, length = handlers.length; i < length; i++) {
	          if (handlers[i] === listener ||
	            (handlers[i].listener && handlers[i].listener === listener) ||
	            (handlers[i]._origin && handlers[i]._origin === listener)) {
	            position = i;
	            break;
	          }
	        }

	        if (position < 0) {
	          continue;
	        }

	        if(this.wildcard) {
	          leaf._listeners.splice(position, 1);
	        }
	        else {
	          this._events[type].splice(position, 1);
	        }

	        if (handlers.length === 0) {
	          if(this.wildcard) {
	            delete leaf._listeners;
	          }
	          else {
	            delete this._events[type];
	          }
	        }

	        this.emit("removeListener", type, listener);

	        return this;
	      }
	      else if (handlers === listener ||
	        (handlers.listener && handlers.listener === listener) ||
	        (handlers._origin && handlers._origin === listener)) {
	        if(this.wildcard) {
	          delete leaf._listeners;
	        }
	        else {
	          delete this._events[type];
	        }

	        this.emit("removeListener", type, listener);
	      }
	    }

	    function recursivelyGarbageCollect(root) {
	      if (root === undefined) {
	        return;
	      }
	      var keys = Object.keys(root);
	      for (var i in keys) {
	        var key = keys[i];
	        var obj = root[key];
	        if ((obj instanceof Function) || (typeof obj !== "object"))
	          continue;
	        if (Object.keys(obj).length > 0) {
	          recursivelyGarbageCollect(root[key]);
	        }
	        if (Object.keys(obj).length === 0) {
	          delete root[key];
	        }
	      }
	    }
	    recursivelyGarbageCollect(this.listenerTree);

	    return this;
	  };

	  EventEmitter.prototype.offAny = function(fn) {
	    var i = 0, l = 0, fns;
	    if (fn && this._all && this._all.length > 0) {
	      fns = this._all;
	      for(i = 0, l = fns.length; i < l; i++) {
	        if(fn === fns[i]) {
	          fns.splice(i, 1);
	          this.emit("removeListenerAny", fn);
	          return this;
	        }
	      }
	    } else {
	      fns = this._all;
	      for(i = 0, l = fns.length; i < l; i++)
	        this.emit("removeListenerAny", fns[i]);
	      this._all = [];
	    }
	    return this;
	  };

	  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;

	  EventEmitter.prototype.removeAllListeners = function(type) {
	    if (arguments.length === 0) {
	      !this._events || init.call(this);
	      return this;
	    }

	    if(this.wildcard) {
	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
	      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);

	      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {
	        var leaf = leafs[iLeaf];
	        leaf._listeners = null;
	      }
	    }
	    else {
	      if (!this._events || !this._events[type]) return this;
	      this._events[type] = null;
	    }
	    return this;
	  };

	  EventEmitter.prototype.listeners = function(type) {
	    if(this.wildcard) {
	      var handlers = [];
	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();
	      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);
	      return handlers;
	    }

	    this._events || init.call(this);

	    if (!this._events[type]) this._events[type] = [];
	    if (!isArray(this._events[type])) {
	      this._events[type] = [this._events[type]];
	    }
	    return this._events[type];
	  };

	  EventEmitter.prototype.listenersAny = function() {

	    if(this._all) {
	      return this._all;
	    }
	    else {
	      return [];
	    }

	  };

	  if (true) {
	     // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return EventEmitter;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // CommonJS
	    module.exports = EventEmitter;
	  }
	  else {
	    // Browser global.
	    window.EventEmitter2 = EventEmitter;
	  }
	}();


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;/* WEBPACK VAR INJECTION */(function(process, setImmediate, module, Buffer) {(function(root, factory) {
	  if(true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    root.forge = factory();
	  }
	})(this, function() {
	/**
	 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
	 * Available via the MIT or new BSD license.
	 * see: http://github.com/jrburke/almond for details
	 */
	//Going sloppy to avoid 'use strict' string cost, but strict practices should
	//be followed.
	/*jslint sloppy: true */
	/*global setTimeout: false */

	var requirejs, require, define;
	(function (undef) {
	    var main, req, makeMap, handlers,
	        defined = {},
	        waiting = {},
	        config = {},
	        defining = {},
	        hasOwn = Object.prototype.hasOwnProperty,
	        aps = [].slice,
	        jsSuffixRegExp = /\.js$/;

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    /**
	     * Given a relative module name, like ./something, normalize it to
	     * a real name that can be mapped to a path.
	     * @param {String} name the relative name
	     * @param {String} baseName a real name that the name arg is relative
	     * to.
	     * @returns {String} normalized name
	     */
	    function normalize(name, baseName) {
	        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
	            foundI, foundStarMap, starI, i, j, part,
	            baseParts = baseName && baseName.split("/"),
	            map = config.map,
	            starMap = (map && map['*']) || {};

	        //Adjust any relative paths.
	        if (name && name.charAt(0) === ".") {
	            //If have a base name, try to normalize against it,
	            //otherwise, assume it is a top-level require that will
	            //be relative to baseUrl in the end.
	            if (baseName) {
	                //Convert baseName to array, and lop off the last part,
	                //so that . matches that "directory" and not name of the baseName's
	                //module. For instance, baseName of "one/two/three", maps to
	                //"one/two/three.js", but we want the directory, "one/two" for
	                //this normalization.
	                baseParts = baseParts.slice(0, baseParts.length - 1);
	                name = name.split('/');
	                lastIndex = name.length - 1;

	                // Node .js allowance:
	                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	                }

	                name = baseParts.concat(name);

	                //start trimDots
	                for (i = 0; i < name.length; i += 1) {
	                    part = name[i];
	                    if (part === ".") {
	                        name.splice(i, 1);
	                        i -= 1;
	                    } else if (part === "..") {
	                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
	                            //End of the line. Keep at least one non-dot
	                            //path segment at the front so it can be mapped
	                            //correctly to disk. Otherwise, there is likely
	                            //no path mapping for a path starting with '..'.
	                            //This can still fail, but catches the most reasonable
	                            //uses of ..
	                            break;
	                        } else if (i > 0) {
	                            name.splice(i - 1, 2);
	                            i -= 2;
	                        }
	                    }
	                }
	                //end trimDots

	                name = name.join("/");
	            } else if (name.indexOf('./') === 0) {
	                // No baseName, so this is ID is resolved relative
	                // to baseUrl, pull off the leading dot.
	                name = name.substring(2);
	            }
	        }

	        //Apply map config if available.
	        if ((baseParts || starMap) && map) {
	            nameParts = name.split('/');

	            for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                    //Find the longest baseName segment match in the config.
	                    //So, do joins on the biggest to smallest lengths of baseParts.
	                    for (j = baseParts.length; j > 0; j -= 1) {
	                        mapValue = map[baseParts.slice(0, j).join('/')];

	                        //baseName segment has  config, find if it has one for
	                        //this name.
	                        if (mapValue) {
	                            mapValue = mapValue[nameSegment];
	                            if (mapValue) {
	                                //Match, update name to the new value.
	                                foundMap = mapValue;
	                                foundI = i;
	                                break;
	                            }
	                        }
	                    }
	                }

	                if (foundMap) {
	                    break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                    foundStarMap = starMap[nameSegment];
	                    starI = i;
	                }
	            }

	            if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	            }

	            if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	            }
	        }

	        return name;
	    }

	    function makeRequire(relName, forceSync) {
	        return function () {
	            //A version of a require function that passes a moduleName
	            //value for items that may need to
	            //look up paths relative to the moduleName
	            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
	        };
	    }

	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(depName) {
	        return function (value) {
	            defined[depName] = value;
	        };
	    }

	    function callDep(name) {
	        if (hasProp(waiting, name)) {
	            var args = waiting[name];
	            delete waiting[name];
	            defining[name] = true;
	            main.apply(undef, args);
	        }

	        if (!hasProp(defined, name) && !hasProp(defining, name)) {
	            throw new Error('No ' + name);
	        }
	        return defined[name];
	    }

	    //Turns a plugin!resource to [plugin, resource]
	    //with the plugin being undefined if the name
	    //did not have a plugin prefix.
	    function splitPrefix(name) {
	        var prefix,
	            index = name ? name.indexOf('!') : -1;
	        if (index > -1) {
	            prefix = name.substring(0, index);
	            name = name.substring(index + 1, name.length);
	        }
	        return [prefix, name];
	    }

	    /**
	     * Makes a name map, normalizing the name, and using a plugin
	     * for normalization if necessary. Grabs a ref to plugin
	     * too, as an optimization.
	     */
	    makeMap = function (name, relName) {
	        var plugin,
	            parts = splitPrefix(name),
	            prefix = parts[0];

	        name = parts[1];

	        if (prefix) {
	            prefix = normalize(prefix, relName);
	            plugin = callDep(prefix);
	        }

	        //Normalize according
	        if (prefix) {
	            if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relName));
	            } else {
	                name = normalize(name, relName);
	            }
	        } else {
	            name = normalize(name, relName);
	            parts = splitPrefix(name);
	            prefix = parts[0];
	            name = parts[1];
	            if (prefix) {
	                plugin = callDep(prefix);
	            }
	        }

	        //Using ridiculous property names for space reasons
	        return {
	            f: prefix ? prefix + '!' + name : name, //fullName
	            n: name,
	            pr: prefix,
	            p: plugin
	        };
	    };

	    function makeConfig(name) {
	        return function () {
	            return (config && config.config && config.config[name]) || {};
	        };
	    }

	    handlers = {
	        require: function (name) {
	            return makeRequire(name);
	        },
	        exports: function (name) {
	            var e = defined[name];
	            if (typeof e !== 'undefined') {
	                return e;
	            } else {
	                return (defined[name] = {});
	            }
	        },
	        module: function (name) {
	            return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	            };
	        }
	    };

	    main = function (name, deps, callback, relName) {
	        var cjsModule, depName, ret, map, i,
	            args = [],
	            callbackType = typeof callback,
	            usingExports;

	        //Use name if no relName
	        relName = relName || name;

	        //Call the callback to define the module, if necessary.
	        if (callbackType === 'undefined' || callbackType === 'function') {
	            //Pull out the defined dependencies and pass the ordered
	            //values to the callback.
	            //Default to [require, exports, module] if no deps
	            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	            for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relName);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                    args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                    //CommonJS module spec 1.1
	                    args[i] = handlers.exports(name);
	                    usingExports = true;
	                } else if (depName === "module") {
	                    //CommonJS module spec 1.1
	                    cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) ||
	                           hasProp(waiting, depName) ||
	                           hasProp(defining, depName)) {
	                    args[i] = callDep(depName);
	                } else if (map.p) {
	                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                    args[i] = defined[depName];
	                } else {
	                    throw new Error(name + ' missing ' + depName);
	                }
	            }

	            ret = callback ? callback.apply(defined[name], args) : undefined;

	            if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef &&
	                        cjsModule.exports !== defined[name]) {
	                    defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                    //Use the return value from the function.
	                    defined[name] = ret;
	                }
	            }
	        } else if (name) {
	            //May just be an object definition for the module. Only
	            //worry about defining if have a module name.
	            defined[name] = callback;
	        }
	    };

	    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	        if (typeof deps === "string") {
	            if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	            }
	            //Just return the module wanted. In this scenario, the
	            //deps arg is the module name, and second arg (if passed)
	            //is just the relName.
	            //Normalize module name, if it contains . or ..
	            return callDep(makeMap(deps, callback).f);
	        } else if (!deps.splice) {
	            //deps is a config object, not an array.
	            config = deps;
	            if (config.deps) {
	                req(config.deps, config.callback);
	            }
	            if (!callback) {
	                return;
	            }

	            if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	            } else {
	                deps = undef;
	            }
	        }

	        //Support require(['a'])
	        callback = callback || function () {};

	        //If relName is a function, it is an errback handler,
	        //so remove it.
	        if (typeof relName === 'function') {
	            relName = forceSync;
	            forceSync = alt;
	        }

	        //Simulate async callback;
	        if (forceSync) {
	            main(undef, deps, callback, relName);
	        } else {
	            //Using a non-zero value because of concern for what old browsers
	            //do, and latest browsers "upgrade" to 4 if lower value is used:
	            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	            //If want a value immediately, use require('id') instead -- something
	            //that works in almond on the global level, but not guaranteed and
	            //unlikely to work in other AMD implementations.
	            setTimeout(function () {
	                main(undef, deps, callback, relName);
	            }, 4);
	        }

	        return req;
	    };

	    /**
	     * Just drops the config on the floor, but returns req in case
	     * the config return value is used.
	     */
	    req.config = function (cfg) {
	        return req(cfg);
	    };

	    /**
	     * Expose module registry for debugging and tooling
	     */
	    requirejs._defined = defined;

	    define = function (name, deps, callback) {

	        //This module may not have dependencies
	        if (!deps.splice) {
	            //deps is not an array, so probably means
	            //an object literal or factory function for
	            //the value. Adjust args.
	            callback = deps;
	            deps = [];
	        }

	        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	            waiting[name] = [name, deps, callback];
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };
	}());

	define("node_modules/almond/almond", function(){});

	/**
	 * Utility functions for web applications.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* Utilities API */
	var util = forge.util = forge.util || {};

	// define setImmediate and nextTick
	(function() {
	  // use native nextTick
	  if(typeof process !== 'undefined' && process.nextTick) {
	    util.nextTick = process.nextTick;
	    if(typeof setImmediate === 'function') {
	      util.setImmediate = setImmediate;
	    } else {
	      // polyfill setImmediate with nextTick, older versions of node
	      // (those w/o setImmediate) won't totally starve IO
	      util.setImmediate = util.nextTick;
	    }
	    return;
	  }

	  // polyfill nextTick with native setImmediate
	  if(typeof setImmediate === 'function') {
	    util.setImmediate = setImmediate;
	    util.nextTick = function(callback) {
	      return setImmediate(callback);
	    };
	    return;
	  }

	  /* Note: A polyfill upgrade pattern is used here to allow combining
	  polyfills. For example, MutationObserver is fast, but blocks UI updates,
	  so it needs to allow UI updates periodically, so it falls back on
	  postMessage or setTimeout. */

	  // polyfill with setTimeout
	  util.setImmediate = function(callback) {
	    setTimeout(callback, 0);
	  };

	  // upgrade polyfill to use postMessage
	  if(typeof window !== 'undefined' &&
	    typeof window.postMessage === 'function') {
	    var msg = 'forge.setImmediate';
	    var callbacks = [];
	    util.setImmediate = function(callback) {
	      callbacks.push(callback);
	      // only send message when one hasn't been sent in
	      // the current turn of the event loop
	      if(callbacks.length === 1) {
	        window.postMessage(msg, '*');
	      }
	    };
	    function handler(event) {
	      if(event.source === window && event.data === msg) {
	        event.stopPropagation();
	        var copy = callbacks.slice();
	        callbacks.length = 0;
	        copy.forEach(function(callback) {
	          callback();
	        });
	      }
	    }
	    window.addEventListener('message', handler, true);
	  }

	  // upgrade polyfill to use MutationObserver
	  if(typeof MutationObserver !== 'undefined') {
	    // polyfill with MutationObserver
	    var now = Date.now();
	    var attr = true;
	    var div = document.createElement('div');
	    var callbacks = [];
	    new MutationObserver(function() {
	      var copy = callbacks.slice();
	      callbacks.length = 0;
	      copy.forEach(function(callback) {
	        callback();
	      });
	    }).observe(div, {attributes: true});
	    var oldSetImmediate = util.setImmediate;
	    util.setImmediate = function(callback) {
	      if(Date.now() - now > 15) {
	        now = Date.now();
	        oldSetImmediate(callback);
	      } else {
	        callbacks.push(callback);
	        // only trigger observer when it hasn't been triggered in
	        // the current turn of the event loop
	        if(callbacks.length === 1) {
	          div.setAttribute('a', attr = !attr);
	        }
	      }
	    };
	  }

	  util.nextTick = util.setImmediate;
	})();

	// define isArray
	util.isArray = Array.isArray || function(x) {
	  return Object.prototype.toString.call(x) === '[object Array]';
	};

	// define isArrayBuffer
	util.isArrayBuffer = function(x) {
	  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
	};

	// define isArrayBufferView
	util.isArrayBufferView = function(x) {
	  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
	};

	// TODO: set ByteBuffer to best available backing
	util.ByteBuffer = ByteStringBuffer;

	/** Buffer w/BinaryString backing */

	/**
	 * Constructor for a binary string backed byte buffer.
	 *
	 * @param [b] the bytes to wrap (either encoded as string, one byte per
	 *          character, or as an ArrayBuffer or Typed Array).
	 */
	function ByteStringBuffer(b) {
	  // TODO: update to match DataBuffer API

	  // the data in this buffer
	  this.data = '';
	  // the pointer for reading from this buffer
	  this.read = 0;

	  if(typeof b === 'string') {
	    this.data = b;
	  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
	    // convert native buffer to forge buffer
	    // FIXME: support native buffers internally instead
	    var arr = new Uint8Array(b);
	    try {
	      this.data = String.fromCharCode.apply(null, arr);
	    } catch(e) {
	      for(var i = 0; i < arr.length; ++i) {
	        this.putByte(arr[i]);
	      }
	    }
	  } else if(b instanceof ByteStringBuffer ||
	    (typeof b === 'object' && typeof b.data === 'string' &&
	    typeof b.read === 'number')) {
	    // copy existing buffer
	    this.data = b.data;
	    this.read = b.read;
	  }

	  // used for v8 optimization
	  this._constructedStringLength = 0;
	}
	util.ByteStringBuffer = ByteStringBuffer;

	/* Note: This is an optimization for V8-based browsers. When V8 concatenates
	  a string, the strings are only joined logically using a "cons string" or
	  "constructed/concatenated string". These containers keep references to one
	  another and can result in very large memory usage. For example, if a 2MB
	  string is constructed by concatenating 4 bytes together at a time, the
	  memory usage will be ~44MB; so ~22x increase. The strings are only joined
	  together when an operation requiring their joining takes place, such as
	  substr(). This function is called when adding data to this buffer to ensure
	  these types of strings are periodically joined to reduce the memory
	  footprint. */
	var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
	util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
	  this._constructedStringLength += x;
	  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
	    // this substr() should cause the constructed string to join
	    this.data.substr(0, 1);
	    this._constructedStringLength = 0;
	  }
	};

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util.ByteStringBuffer.prototype.length = function() {
	  return this.data.length - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util.ByteStringBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putByte = function(b) {
	  return this.putBytes(String.fromCharCode(b));
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
	  b = String.fromCharCode(b);
	  var d = this.data;
	  while(n > 0) {
	    if(n & 1) {
	      d += b;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      b += b;
	    }
	  }
	  this.data = d;
	  this._optimizeConstructedString(n);
	  return this;
	};

	/**
	 * Puts bytes in this buffer.
	 *
	 * @param bytes the bytes (as a UTF-8 encoded string) to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putBytes = function(bytes) {
	  this.data += bytes;
	  this._optimizeConstructedString(bytes.length);
	  return this;
	};

	/**
	 * Puts a UTF-16 encoded string into this buffer.
	 *
	 * @param str the string to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putString = function(str) {
	  return this.putBytes(util.encodeUtf8(str));
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt16 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt24 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt32 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt16Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt24Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt32Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 24 & 0xFF));
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putInt = function(i, n) {
	  var bytes = '';
	  do {
	    n -= 8;
	    bytes += String.fromCharCode((i >> n) & 0xFF);
	  } while(n > 0);
	  return this.putBytes(bytes);
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
	  return this.putBytes(buffer.getBytes());
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util.ByteStringBuffer.prototype.getByte = function() {
	  return this.data.charCodeAt(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.ByteStringBuffer.prototype.getInt16 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 8 ^
	    this.data.charCodeAt(this.read + 1));
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.ByteStringBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 16 ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.ByteStringBuffer.prototype.getInt32 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 24 ^
	    this.data.charCodeAt(this.read + 1) << 16 ^
	    this.data.charCodeAt(this.read + 2) << 8 ^
	    this.data.charCodeAt(this.read + 3));
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.ByteStringBuffer.prototype.getInt16Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.ByteStringBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.ByteStringBuffer.prototype.getInt32Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16 ^
	    this.data.charCodeAt(this.read + 3) << 24);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.ByteStringBuffer.prototype.getInt = function(n) {
	  var rval = 0;
	  do {
	    rval = (rval << 8) + this.data.charCodeAt(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.ByteStringBuffer.prototype.getSignedInt = function(n) {
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out into a UTF-8 string and clears them from the buffer.
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a UTF-8 string of bytes.
	 */
	util.ByteStringBuffer.prototype.getBytes = function(count) {
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
	 * the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of UTF-8 encoded characters.
	 */
	util.ByteStringBuffer.prototype.bytes = function(count) {
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util.ByteStringBuffer.prototype.at = function(i) {
	  return this.data.charCodeAt(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.setAt = function(i, b) {
	  this.data = this.data.substr(0, this.read + i) +
	    String.fromCharCode(b) +
	    this.data.substr(this.read + i + 1);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util.ByteStringBuffer.prototype.last = function() {
	  return this.data.charCodeAt(this.data.length - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util.ByteStringBuffer.prototype.copy = function() {
	  var c = util.createBuffer(this.data);
	  c.read = this.read;
	  return c;
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    this.data = this.data.slice(this.read);
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.clear = function() {
	  this.data = '';
	  this.read = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util.ByteStringBuffer.prototype.truncate = function(count) {
	  var len = Math.max(0, this.length() - count);
	  this.data = this.data.substr(this.read, len);
	  this.read = 0;
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util.ByteStringBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.length; ++i) {
	    var b = this.data.charCodeAt(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a UTF-16 string (standard JavaScript string).
	 *
	 * @return a UTF-16 string.
	 */
	util.ByteStringBuffer.prototype.toString = function() {
	  return util.decodeUtf8(this.bytes());
	};

	/** End Buffer w/BinaryString backing */


	/** Buffer w/UInt8Array backing */

	/**
	 * FIXME: Experimental. Do not use yet.
	 *
	 * Constructor for an ArrayBuffer-backed byte buffer.
	 *
	 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
	 * TypedArray.
	 *
	 * If a string is given, its encoding should be provided as an option,
	 * otherwise it will default to 'binary'. A 'binary' string is encoded such
	 * that each character is one byte in length and size.
	 *
	 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
	 * *directly* without any copying. Note that, if a write to the buffer requires
	 * more space, the buffer will allocate a new backing ArrayBuffer to
	 * accommodate. The starting read and write offsets for the buffer may be
	 * given as options.
	 *
	 * @param [b] the initial bytes for this buffer.
	 * @param options the options to use:
	 *          [readOffset] the starting read offset to use (default: 0).
	 *          [writeOffset] the starting write offset to use (default: the
	 *            length of the first parameter).
	 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
	 *            accommodate writes (default: 1024).
	 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
	 *            first parameter, if it is a string (default: 'binary').
	 */
	function DataBuffer(b, options) {
	  // default options
	  options = options || {};

	  // pointers for read from/write to buffer
	  this.read = options.readOffset || 0;
	  this.growSize = options.growSize || 1024;

	  var isArrayBuffer = util.isArrayBuffer(b);
	  var isArrayBufferView = util.isArrayBufferView(b);
	  if(isArrayBuffer || isArrayBufferView) {
	    // use ArrayBuffer directly
	    if(isArrayBuffer) {
	      this.data = new DataView(b);
	    } else {
	      // TODO: adjust read/write offset based on the type of view
	      // or specify that this must be done in the options ... that the
	      // offsets are byte-based
	      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
	    }
	    this.write = ('writeOffset' in options ?
	      options.writeOffset : this.data.byteLength);
	    return;
	  }

	  // initialize to empty array buffer and add any given bytes using putBytes
	  this.data = new DataView(new ArrayBuffer(0));
	  this.write = 0;

	  if(b !== null && b !== undefined) {
	    this.putBytes(b);
	  }

	  if('writeOffset' in options) {
	    this.write = options.writeOffset;
	  }
	}
	util.DataBuffer = DataBuffer;

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util.DataBuffer.prototype.length = function() {
	  return this.write - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util.DataBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Ensures this buffer has enough empty space to accommodate the given number
	 * of bytes. An optional parameter may be given that indicates a minimum
	 * amount to grow the buffer if necessary. If the parameter is not given,
	 * the buffer will be grown by some previously-specified default amount
	 * or heuristic.
	 *
	 * @param amount the number of bytes to accommodate.
	 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
	 *          necessary.
	 */
	util.DataBuffer.prototype.accommodate = function(amount, growSize) {
	  if(this.length() >= amount) {
	    return this;
	  }
	  growSize = Math.max(growSize || this.growSize, amount);

	  // grow buffer
	  var src = new Uint8Array(
	    this.data.buffer, this.data.byteOffset, this.data.byteLength);
	  var dst = new Uint8Array(this.length() + growSize);
	  dst.set(src);
	  this.data = new DataView(dst.buffer);

	  return this;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putByte = function(b) {
	  this.accommodate(1);
	  this.data.setUint8(this.write++, b);
	  return this;
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.fillWithByte = function(b, n) {
	  this.accommodate(n);
	  for(var i = 0; i < n; ++i) {
	    this.data.setUint8(b);
	  }
	  return this;
	};

	/**
	 * Puts bytes in this buffer. The bytes may be given as a string, an
	 * ArrayBuffer, a DataView, or a TypedArray.
	 *
	 * @param bytes the bytes to put.
	 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
	 *          'utf16', 'hex'), if it is a string (default: 'binary').
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
	  if(util.isArrayBufferView(bytes)) {
	    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
	    var len = src.byteLength - src.byteOffset;
	    this.accommodate(len);
	    var dst = new Uint8Array(this.data.buffer, this.write);
	    dst.set(src);
	    this.write += len;
	    return this;
	  }

	  if(util.isArrayBuffer(bytes)) {
	    var src = new Uint8Array(bytes);
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(this.data.buffer);
	    dst.set(src, this.write);
	    this.write += src.byteLength;
	    return this;
	  }

	  // bytes is a util.DataBuffer or equivalent
	  if(bytes instanceof util.DataBuffer ||
	    (typeof bytes === 'object' &&
	    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
	    util.isArrayBufferView(bytes.data))) {
	    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(bytes.data.byteLength, this.write);
	    dst.set(src);
	    this.write += src.byteLength;
	    return this;
	  }

	  if(bytes instanceof util.ByteStringBuffer) {
	    // copy binary string and process as the same as a string parameter below
	    bytes = bytes.data;
	    encoding = 'binary';
	  }

	  // string conversion
	  encoding = encoding || 'binary';
	  if(typeof bytes === 'string') {
	    var view;

	    // decode from string
	    if(encoding === 'hex') {
	      this.accommodate(Math.ceil(bytes.length / 2));
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.hex.decode(bytes, view, this.write);
	      return this;
	    }
	    if(encoding === 'base64') {
	      this.accommodate(Math.ceil(bytes.length / 4) * 3);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.base64.decode(bytes, view, this.write);
	      return this;
	    }

	    // encode text as UTF-8 bytes
	    if(encoding === 'utf8') {
	      // encode as UTF-8 then decode string as raw binary
	      bytes = util.encodeUtf8(bytes);
	      encoding = 'binary';
	    }

	    // decode string as raw binary
	    if(encoding === 'binary' || encoding === 'raw') {
	      // one byte per character
	      this.accommodate(bytes.length);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util.binary.raw.decode(view);
	      return this;
	    }

	    // encode text as UTF-16 bytes
	    if(encoding === 'utf16') {
	      // two bytes per character
	      this.accommodate(bytes.length * 2);
	      view = new Uint16Array(this.data.buffer, this.write);
	      this.write += util.text.utf16.encode(view);
	      return this;
	    }

	    throw new Error('Invalid encoding: ' + encoding);
	  }

	  throw Error('Invalid parameter: ' + bytes);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putBuffer = function(buffer) {
	  this.putBytes(buffer);
	  buffer.clear();
	  return this;
	};

	/**
	 * Puts a string into this buffer.
	 *
	 * @param str the string to put.
	 * @param [encoding] the encoding for the string (default: 'utf16').
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putString = function(str) {
	  return this.putBytes(str, 'utf16');
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt16 = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt24 = function(i) {
	  this.accommodate(3);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt32 = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt16Le = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i, true);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt24Le = function(i) {
	  this.accommodate(3);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt32Le = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i, true);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putInt = function(i, n) {
	  this.accommodate(n / 8);
	  do {
	    n -= 8;
	    this.data.setInt8(this.write++, (i >> n) & 0xFF);
	  } while(n > 0);
	  return this;
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.putSignedInt = function(i, n) {
	  this.accommodate(n / 8);
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util.DataBuffer.prototype.getByte = function() {
	  return this.data.getInt8(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.DataBuffer.prototype.getInt16 = function() {
	  var rval = this.data.getInt16(this.read);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.DataBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.getInt16(this.read) << 8 ^
	    this.data.getInt8(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.DataBuffer.prototype.getInt32 = function() {
	  var rval = this.data.getInt32(this.read);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util.DataBuffer.prototype.getInt16Le = function() {
	  var rval = this.data.getInt16(this.read, true);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util.DataBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.getInt8(this.read) ^
	    this.data.getInt16(this.read + 1, true) << 8);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util.DataBuffer.prototype.getInt32Le = function() {
	  var rval = this.data.getInt32(this.read, true);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.DataBuffer.prototype.getInt = function(n) {
	  var rval = 0;
	  do {
	    rval = (rval << 8) + this.data.getInt8(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer.
	 *
	 * @return the integer.
	 */
	util.DataBuffer.prototype.getSignedInt = function(n) {
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out into a UTF-8 string and clears them from the buffer.
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a UTF-8 string of bytes.
	 */
	util.DataBuffer.prototype.getBytes = function(count) {
	  // TODO: deprecate this method, it is poorly named and
	  // this.toString('binary') replaces it
	  // add a toTypedArray()/toArrayBuffer() function
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a UTF-8 encoded string of the bytes from this buffer without modifying
	 * the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of UTF-8 encoded characters.
	 */
	util.DataBuffer.prototype.bytes = function(count) {
	  // TODO: deprecate this method, it is poorly named, add "getString()"
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util.DataBuffer.prototype.at = function(i) {
	  return this.data.getUint8(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.setAt = function(i, b) {
	  this.data.setUint8(i, b);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util.DataBuffer.prototype.last = function() {
	  return this.data.getUint8(this.write - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util.DataBuffer.prototype.copy = function() {
	  return new util.DataBuffer(this);
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    var src = new Uint8Array(this.data.buffer, this.read);
	    var dst = new Uint8Array(src.byteLength);
	    dst.set(src);
	    this.data = new DataView(dst);
	    this.write -= this.read;
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.clear = function() {
	  this.data = new DataView(new ArrayBuffer(0));
	  this.read = this.write = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util.DataBuffer.prototype.truncate = function(count) {
	  this.write = Math.max(0, this.length() - count);
	  this.read = Math.min(this.read, this.write);
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util.DataBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.byteLength; ++i) {
	    var b = this.data.getUint8(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a string, using the given encoding. If no
	 * encoding is given, 'utf8' (UTF-8) is used.
	 *
	 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
	 *          'base64' (default: 'utf8').
	 *
	 * @return a string representation of the bytes in this buffer.
	 */
	util.DataBuffer.prototype.toString = function(encoding) {
	  var view = new Uint8Array(this.data, this.read, this.length());
	  encoding = encoding || 'utf8';

	  // encode to string
	  if(encoding === 'binary' || encoding === 'raw') {
	    return util.binary.raw.encode(view);
	  }
	  if(encoding === 'hex') {
	    return util.binary.hex.encode(view);
	  }
	  if(encoding === 'base64') {
	    return util.binary.base64.encode(view);
	  }

	  // decode to text
	  if(encoding === 'utf8') {
	    return util.text.utf8.decode(view);
	  }
	  if(encoding === 'utf16') {
	    return util.text.utf16.decode(view);
	  }

	  throw new Error('Invalid encoding: ' + encoding);
	};

	/** End Buffer w/UInt8Array backing */


	/**
	 * Creates a buffer that stores bytes. A value may be given to put into the
	 * buffer that is either a string of bytes or a UTF-16 string that will
	 * be encoded using UTF-8 (to do the latter, specify 'utf8' as the encoding).
	 *
	 * @param [input] the bytes to wrap (as a string) or a UTF-16 string to encode
	 *          as UTF-8.
	 * @param [encoding] (default: 'raw', other: 'utf8').
	 */
	util.createBuffer = function(input, encoding) {
	  // TODO: deprecate, use new ByteBuffer() instead
	  encoding = encoding || 'raw';
	  if(input !== undefined && encoding === 'utf8') {
	    input = util.encodeUtf8(input);
	  }
	  return new util.ByteBuffer(input);
	};

	/**
	 * Fills a string with a particular value. If you want the string to be a byte
	 * string, pass in String.fromCharCode(theByte).
	 *
	 * @param c the character to fill the string with, use String.fromCharCode
	 *          to fill the string with a byte value.
	 * @param n the number of characters of value c to fill with.
	 *
	 * @return the filled string.
	 */
	util.fillString = function(c, n) {
	  var s = '';
	  while(n > 0) {
	    if(n & 1) {
	      s += c;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      c += c;
	    }
	  }
	  return s;
	};

	/**
	 * Performs a per byte XOR between two byte strings and returns the result as a
	 * string of bytes.
	 *
	 * @param s1 first string of bytes.
	 * @param s2 second string of bytes.
	 * @param n the number of bytes to XOR.
	 *
	 * @return the XOR'd result.
	 */
	util.xorBytes = function(s1, s2, n) {
	  var s3 = '';
	  var b = '';
	  var t = '';
	  var i = 0;
	  var c = 0;
	  for(; n > 0; --n, ++i) {
	    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
	    if(c >= 10) {
	      s3 += t;
	      t = '';
	      c = 0;
	    }
	    t += String.fromCharCode(b);
	    ++c;
	  }
	  s3 += t;
	  return s3;
	};

	/**
	 * Converts a hex string into a 'binary' encoded string of bytes.
	 *
	 * @param hex the hexadecimal string to convert.
	 *
	 * @return the binary-encoded string of bytes.
	 */
	util.hexToBytes = function(hex) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
	  var rval = '';
	  var i = 0;
	  if(hex.length & 1 == 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    rval += String.fromCharCode(parseInt(hex[0], 16));
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
	  }
	  return rval;
	};

	/**
	 * Converts a 'binary' encoded string of bytes to hex.
	 *
	 * @param bytes the byte string to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util.bytesToHex = function(bytes) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
	  return util.createBuffer(bytes).toHex();
	};

	/**
	 * Converts an 32-bit integer to 4-big-endian byte string.
	 *
	 * @param i the integer.
	 *
	 * @return the byte string.
	 */
	util.int32ToBytes = function(i) {
	  return (
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	// base64 characters, reverse mapping
	var _base64 =
	  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	var _base64Idx = [
	/*43 -43 = 0*/
	/*'+',  1,  2,  3,'/' */
	   62, -1, -1, -1, 63,

	/*'0','1','2','3','4','5','6','7','8','9' */
	   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

	/*15, 16, 17,'=', 19, 20, 21 */
	  -1, -1, -1, 64, -1, -1, -1,

	/*65 - 43 = 22*/
	/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
	   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

	/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
	   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

	/*91 - 43 = 48 */
	/*48, 49, 50, 51, 52, 53 */
	  -1, -1, -1, -1, -1, -1,

	/*97 - 43 = 54*/
	/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
	   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

	/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
	   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
	];

	/**
	 * Base64 encodes a 'binary' encoded string of bytes.
	 *
	 * @param input the binary encoded string of bytes to base64-encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output.
	 */
	util.encode64 = function(input, maxline) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.length) {
	    chr1 = input.charCodeAt(i++);
	    chr2 = input.charCodeAt(i++);
	    chr3 = input.charCodeAt(i++);

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Base64 decodes a string into a 'binary' encoded string of bytes.
	 *
	 * @param input the base64-encoded input.
	 *
	 * @return the binary encoded string.
	 */
	util.decode64 = function(input) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  var output = '';
	  var enc1, enc2, enc3, enc4;
	  var i = 0;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
	      }
	    }
	  }

	  return output;
	};

	/**
	 * UTF-8 encodes the given UTF-16 encoded string (a standard JavaScript
	 * string). Non-ASCII characters will be encoded as multiple bytes according
	 * to UTF-8.
	 *
	 * @param str the string to encode.
	 *
	 * @return the UTF-8 encoded string.
	 */
	util.encodeUtf8 = function(str) {
	  return unescape(encodeURIComponent(str));
	};

	/**
	 * Decodes a UTF-8 encoded string into a UTF-16 string.
	 *
	 * @param str the string to decode.
	 *
	 * @return the UTF-16 encoded string (standard JavaScript string).
	 */
	util.decodeUtf8 = function(str) {
	  return decodeURIComponent(escape(str));
	};

	// binary encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util.binary = {
	  raw: {},
	  hex: {},
	  base64: {}
	};

	/**
	 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param bytes the Uint8Array to encode.
	 *
	 * @return the binary-encoded string.
	 */
	util.binary.raw.encode = function(bytes) {
	  return String.fromCharCode.apply(null, bytes);
	};

	/**
	 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param str the binary-encoded string to decode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.raw.decode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
	 * ByteBuffer as a string of hexadecimal characters.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util.binary.hex.encode = util.bytesToHex;

	/**
	 * Decodes a hex-encoded string to a Uint8Array.
	 *
	 * @param hex the hexadecimal string to convert.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.hex.decode = function(hex, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(hex.length / 2));
	  }
	  offset = offset || 0;
	  var i = 0, j = offset;
	  if(hex.length & 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    out[j++] = parseInt(hex[0], 16);
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    out[j++] = parseInt(hex.substr(i, 2), 16);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Base64-encodes a Uint8Array.
	 *
	 * @param input the Uint8Array to encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output string.
	 */
	util.binary.base64.encode = function(input, maxline) {
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.byteLength) {
	    chr1 = input[i++];
	    chr2 = input[i++];
	    chr3 = input[i++];

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Decodes a base64-encoded string to a Uint8Array.
	 *
	 * @param input the base64-encoded input string.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.binary.base64.decode = function(input, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
	  }

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  offset = offset || 0;
	  var enc1, enc2, enc3, enc4;
	  var i = 0, j = offset;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    out[j++] = (enc1 << 2) | (enc2 >> 4);
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        out[j++] = ((enc3 & 3) << 6) | enc4;
	      }
	    }
	  }

	  // make sure result is the exact decoded length
	  return output ?
	         (j - offset) :
	         out.subarray(0, j);
	};

	// text encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util.text = {
	  utf8: {},
	  utf16: {}
	};

	/**
	 * Encodes the given string as UTF-8 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.text.utf8.encode = function(str, output, offset) {
	  str = util.encodeUtf8(str);
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-8 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util.text.utf8.decode = function(bytes) {
	  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
	};

	/**
	 * Encodes the given string as UTF-16 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util.text.utf16.encode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length * 2);
	  }
	  var view = new Uint16Array(out.buffer);
	  offset = offset || 0;
	  var j = offset;
	  var k = offset;
	  for(var i = 0; i < str.length; ++i) {
	    view[k++] = str.charCodeAt(i);
	    j += 2;
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-16 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util.text.utf16.decode = function(bytes) {
	  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
	};

	/**
	 * Deflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true to return only raw deflate data, false to include zlib
	 *          header and trailer.
	 *
	 * @return the deflated data as a string.
	 */
	util.deflate = function(api, bytes, raw) {
	  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

	  // strip zlib header and trailer if necessary
	  if(raw) {
	    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
	    // there is a 4-byte DICT (alder-32) block before the data if
	    // its 5th bit is set
	    var start = 2;
	    var flg = bytes.charCodeAt(1);
	    if(flg & 0x20) {
	      start = 6;
	    }
	    // zlib trailer is 4 bytes of adler-32
	    bytes = bytes.substring(start, bytes.length - 4);
	  }

	  return bytes;
	};

	/**
	 * Inflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true if the incoming data has no zlib header or trailer and is
	 *          raw DEFLATE data.
	 *
	 * @return the inflated data as a string, null on error.
	 */
	util.inflate = function(api, bytes, raw) {
	  // TODO: add zlib header and trailer if necessary/possible
	  var rval = api.inflate(util.encode64(bytes)).rval;
	  return (rval === null) ? null : util.decode64(rval);
	};

	/**
	 * Sets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param obj the storage object, null to remove.
	 */
	var _setStorageObject = function(api, id, obj) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  var rval;
	  if(obj === null) {
	    rval = api.removeItem(id);
	  } else {
	    // json-encode and base64-encode object
	    obj = util.encode64(JSON.stringify(obj));
	    rval = api.setItem(id, obj);
	  }

	  // handle potential flash error
	  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
	    var error = new Error(rval.error.message);
	    error.id = rval.error.id;
	    error.name = rval.error.name;
	    throw error;
	  }
	};

	/**
	 * Gets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 *
	 * @return the storage object entry or null if none exists.
	 */
	var _getStorageObject = function(api, id) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  // get the existing entry
	  var rval = api.getItem(id);

	  /* Note: We check api.init because we can't do (api == localStorage)
	    on IE because of "Class doesn't support Automation" exception. Only
	    the flash api has an init method so this works too, but we need a
	    better solution in the future. */

	  // flash returns item wrapped in an object, handle special case
	  if(api.init) {
	    if(rval.rval === null) {
	      if(rval.error) {
	        var error = new Error(rval.error.message);
	        error.id = rval.error.id;
	        error.name = rval.error.name;
	        throw error;
	      }
	      // no error, but also no item
	      rval = null;
	    } else {
	      rval = rval.rval;
	    }
	  }

	  // handle decoding
	  if(rval !== null) {
	    // base64-decode and json-decode data
	    rval = JSON.parse(util.decode64(rval));
	  }

	  return rval;
	};

	/**
	 * Stores an item in local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 */
	var _setItem = function(api, id, key, data) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj === null) {
	    // create a new storage object
	    obj = {};
	  }
	  // update key
	  obj[key] = data;

	  // set storage object
	  _setStorageObject(api, id, obj);
	};

	/**
	 * Gets an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 *
	 * @return the item.
	 */
	var _getItem = function(api, id, key) {
	  // get storage object
	  var rval = _getStorageObject(api, id);
	  if(rval !== null) {
	    // return data at key
	    rval = (key in rval) ? rval[key] : null;
	  }

	  return rval;
	};

	/**
	 * Removes an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 */
	var _removeItem = function(api, id, key) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj !== null && key in obj) {
	    // remove key
	    delete obj[key];

	    // see if entry has no keys remaining
	    var empty = true;
	    for(var prop in obj) {
	      empty = false;
	      break;
	    }
	    if(empty) {
	      // remove entry entirely if no keys are left
	      obj = null;
	    }

	    // set storage object
	    _setStorageObject(api, id, obj);
	  }
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 */
	var _clearItems = function(api, id) {
	  _setStorageObject(api, id, null);
	};

	/**
	 * Calls a storage function.
	 *
	 * @param func the function to call.
	 * @param args the arguments for the function.
	 * @param location the location argument.
	 *
	 * @return the return value from the function.
	 */
	var _callStorageFunction = function(func, args, location) {
	  var rval = null;

	  // default storage types
	  if(typeof(location) === 'undefined') {
	    location = ['web', 'flash'];
	  }

	  // apply storage types in order of preference
	  var type;
	  var done = false;
	  var exception = null;
	  for(var idx in location) {
	    type = location[idx];
	    try {
	      if(type === 'flash' || type === 'both') {
	        if(args[0] === null) {
	          throw new Error('Flash local storage not available.');
	        }
	        rval = func.apply(this, args);
	        done = (type === 'flash');
	      }
	      if(type === 'web' || type === 'both') {
	        args[0] = localStorage;
	        rval = func.apply(this, args);
	        done = true;
	      }
	    } catch(ex) {
	      exception = ex;
	    }
	    if(done) {
	      break;
	    }
	  }

	  if(!done) {
	    throw exception;
	  }

	  return rval;
	};

	/**
	 * Stores an item on local disk.
	 *
	 * The available types of local storage include 'flash', 'web', and 'both'.
	 *
	 * The type 'flash' refers to flash local storage (SharedObject). In order
	 * to use flash local storage, the 'api' parameter must be valid. The type
	 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
	 * refers to storing using both 'flash' and 'web', not just one or the
	 * other.
	 *
	 * The location array should list the storage types to use in order of
	 * preference:
	 *
	 * ['flash']: flash only storage
	 * ['web']: web only storage
	 * ['both']: try to store in both
	 * ['flash','web']: store in flash first, but if not available, 'web'
	 * ['web','flash']: store in web first, but if not available, 'flash'
	 *
	 * The location array defaults to: ['web', 'flash']
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 * @param location an array with the preferred types of storage to use.
	 */
	util.setItem = function(api, id, key, data, location) {
	  _callStorageFunction(_setItem, arguments, location);
	};

	/**
	 * Gets an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 *
	 * @return the item.
	 */
	util.getItem = function(api, id, key, location) {
	  return _callStorageFunction(_getItem, arguments, location);
	};

	/**
	 * Removes an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 */
	util.removeItem = function(api, id, key, location) {
	  _callStorageFunction(_removeItem, arguments, location);
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface if flash is available.
	 * @param id the storage ID to use.
	 * @param location an array with the preferred types of storage to use.
	 */
	util.clearItems = function(api, id, location) {
	  _callStorageFunction(_clearItems, arguments, location);
	};

	/**
	 * Parses the scheme, host, and port from an http(s) url.
	 *
	 * @param str the url string.
	 *
	 * @return the parsed url object or null if the url is invalid.
	 */
	util.parseUrl = function(str) {
	  // FIXME: this regex looks a bit broken
	  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
	  regex.lastIndex = 0;
	  var m = regex.exec(str);
	  var url = (m === null) ? null : {
	    full: str,
	    scheme: m[1],
	    host: m[2],
	    port: m[3],
	    path: m[4]
	  };
	  if(url) {
	    url.fullHost = url.host;
	    if(url.port) {
	      if(url.port !== 80 && url.scheme === 'http') {
	        url.fullHost += ':' + url.port;
	      } else if(url.port !== 443 && url.scheme === 'https') {
	        url.fullHost += ':' + url.port;
	      }
	    } else if(url.scheme === 'http') {
	      url.port = 80;
	    } else if(url.scheme === 'https') {
	      url.port = 443;
	    }
	    url.full = url.scheme + '://' + url.fullHost;
	  }
	  return url;
	};

	/* Storage for query variables */
	var _queryVariables = null;

	/**
	 * Returns the window location query variables. Query is parsed on the first
	 * call and the same object is returned on subsequent calls. The mapping
	 * is from keys to an array of values. Parameters without values will have
	 * an object key set but no value added to the value array. Values are
	 * unescaped.
	 *
	 * ...?k1=v1&k2=v2:
	 * {
	 *   "k1": ["v1"],
	 *   "k2": ["v2"]
	 * }
	 *
	 * ...?k1=v1&k1=v2:
	 * {
	 *   "k1": ["v1", "v2"]
	 * }
	 *
	 * ...?k1=v1&k2:
	 * {
	 *   "k1": ["v1"],
	 *   "k2": []
	 * }
	 *
	 * ...?k1=v1&k1:
	 * {
	 *   "k1": ["v1"]
	 * }
	 *
	 * ...?k1&k1:
	 * {
	 *   "k1": []
	 * }
	 *
	 * @param query the query string to parse (optional, default to cached
	 *          results from parsing window location search query).
	 *
	 * @return object mapping keys to variables.
	 */
	util.getQueryVariables = function(query) {
	  var parse = function(q) {
	    var rval = {};
	    var kvpairs = q.split('&');
	    for(var i = 0; i < kvpairs.length; i++) {
	      var pos = kvpairs[i].indexOf('=');
	      var key;
	      var val;
	      if(pos > 0) {
	        key = kvpairs[i].substring(0, pos);
	        val = kvpairs[i].substring(pos + 1);
	      } else {
	        key = kvpairs[i];
	        val = null;
	      }
	      if(!(key in rval)) {
	        rval[key] = [];
	      }
	      // disallow overriding object prototype keys
	      if(!(key in Object.prototype) && val !== null) {
	        rval[key].push(unescape(val));
	      }
	    }
	    return rval;
	  };

	   var rval;
	   if(typeof(query) === 'undefined') {
	     // set cached variables if needed
	     if(_queryVariables === null) {
	       if(typeof(window) !== 'undefined' && window.location && window.location.search) {
	          // parse window search query
	          _queryVariables = parse(window.location.search.substring(1));
	       } else {
	          // no query variables available
	          _queryVariables = {};
	       }
	     }
	     rval = _queryVariables;
	   } else {
	     // parse given query
	     rval = parse(query);
	   }
	   return rval;
	};

	/**
	 * Parses a fragment into a path and query. This method will take a URI
	 * fragment and break it up as if it were the main URI. For example:
	 *    /bar/baz?a=1&b=2
	 * results in:
	 *    {
	 *       path: ["bar", "baz"],
	 *       query: {"k1": ["v1"], "k2": ["v2"]}
	 *    }
	 *
	 * @return object with a path array and query object.
	 */
	util.parseFragment = function(fragment) {
	  // default to whole fragment
	  var fp = fragment;
	  var fq = '';
	  // split into path and query if possible at the first '?'
	  var pos = fragment.indexOf('?');
	  if(pos > 0) {
	    fp = fragment.substring(0, pos);
	    fq = fragment.substring(pos + 1);
	  }
	  // split path based on '/' and ignore first element if empty
	  var path = fp.split('/');
	  if(path.length > 0 && path[0] === '') {
	    path.shift();
	  }
	  // convert query into object
	  var query = (fq === '') ? {} : util.getQueryVariables(fq);

	  return {
	    pathString: fp,
	    queryString: fq,
	    path: path,
	    query: query
	  };
	};

	/**
	 * Makes a request out of a URI-like request string. This is intended to
	 * be used where a fragment id (after a URI '#') is parsed as a URI with
	 * path and query parts. The string should have a path beginning and
	 * delimited by '/' and optional query parameters following a '?'. The
	 * query should be a standard URL set of key value pairs delimited by
	 * '&'. For backwards compatibility the initial '/' on the path is not
	 * required. The request object has the following API, (fully described
	 * in the method code):
	 *    {
	 *       path: <the path string part>.
	 *       query: <the query string part>,
	 *       getPath(i): get part or all of the split path array,
	 *       getQuery(k, i): get part or all of a query key array,
	 *       getQueryLast(k, _default): get last element of a query key array.
	 *    }
	 *
	 * @return object with request parameters.
	 */
	util.makeRequest = function(reqString) {
	  var frag = util.parseFragment(reqString);
	  var req = {
	    // full path string
	    path: frag.pathString,
	    // full query string
	    query: frag.queryString,
	    /**
	     * Get path or element in path.
	     *
	     * @param i optional path index.
	     *
	     * @return path or part of path if i provided.
	     */
	    getPath: function(i) {
	      return (typeof(i) === 'undefined') ? frag.path : frag.path[i];
	    },
	    /**
	     * Get query, values for a key, or value for a key index.
	     *
	     * @param k optional query key.
	     * @param i optional query key index.
	     *
	     * @return query, values for a key, or value for a key index.
	     */
	    getQuery: function(k, i) {
	      var rval;
	      if(typeof(k) === 'undefined') {
	        rval = frag.query;
	      } else {
	        rval = frag.query[k];
	        if(rval && typeof(i) !== 'undefined') {
	           rval = rval[i];
	        }
	      }
	      return rval;
	    },
	    getQueryLast: function(k, _default) {
	      var rval;
	      var vals = req.getQuery(k);
	      if(vals) {
	        rval = vals[vals.length - 1];
	      } else {
	        rval = _default;
	      }
	      return rval;
	    }
	  };
	  return req;
	};

	/**
	 * Makes a URI out of a path, an object with query parameters, and a
	 * fragment. Uses jQuery.param() internally for query string creation.
	 * If the path is an array, it will be joined with '/'.
	 *
	 * @param path string path or array of strings.
	 * @param query object with query parameters. (optional)
	 * @param fragment fragment string. (optional)
	 *
	 * @return string object with request parameters.
	 */
	util.makeLink = function(path, query, fragment) {
	  // join path parts if needed
	  path = jQuery.isArray(path) ? path.join('/') : path;

	  var qstr = jQuery.param(query || {});
	  fragment = fragment || '';
	  return path +
	    ((qstr.length > 0) ? ('?' + qstr) : '') +
	    ((fragment.length > 0) ? ('#' + fragment) : '');
	};

	/**
	 * Follows a path of keys deep into an object hierarchy and set a value.
	 * If a key does not exist or it's value is not an object, create an
	 * object in it's place. This can be destructive to a object tree if
	 * leaf nodes are given as non-final path keys.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 * @param value the value to set.
	 */
	util.setPath = function(object, keys, value) {
	  // need to start at an object
	  if(typeof(object) === 'object' && object !== null) {
	    var i = 0;
	    var len = keys.length;
	    while(i < len) {
	      var next = keys[i++];
	      if(i == len) {
	        // last
	        object[next] = value;
	      } else {
	        // more
	        var hasNext = (next in object);
	        if(!hasNext ||
	          (hasNext && typeof(object[next]) !== 'object') ||
	          (hasNext && object[next] === null)) {
	          object[next] = {};
	        }
	        object = object[next];
	      }
	    }
	  }
	};

	/**
	 * Follows a path of keys deep into an object hierarchy and return a value.
	 * If a key does not exist, create an object in it's place.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 * @param _default value to return if path not found.
	 *
	 * @return the value at the path if found, else default if given, else
	 *         undefined.
	 */
	util.getPath = function(object, keys, _default) {
	  var i = 0;
	  var len = keys.length;
	  var hasNext = true;
	  while(hasNext && i < len &&
	    typeof(object) === 'object' && object !== null) {
	    var next = keys[i++];
	    hasNext = next in object;
	    if(hasNext) {
	      object = object[next];
	    }
	  }
	  return (hasNext ? object : _default);
	};

	/**
	 * Follow a path of keys deep into an object hierarchy and delete the
	 * last one. If a key does not exist, do nothing.
	 * Used to avoid exceptions from missing parts of the path.
	 *
	 * @param object the starting object.
	 * @param keys an array of string keys.
	 */
	util.deletePath = function(object, keys) {
	  // need to start at an object
	  if(typeof(object) === 'object' && object !== null) {
	    var i = 0;
	    var len = keys.length;
	    while(i < len) {
	      var next = keys[i++];
	      if(i == len) {
	        // last
	        delete object[next];
	      } else {
	        // more
	        if(!(next in object) ||
	          (typeof(object[next]) !== 'object') ||
	          (object[next] === null)) {
	           break;
	        }
	        object = object[next];
	      }
	    }
	  }
	};

	/**
	 * Check if an object is empty.
	 *
	 * Taken from:
	 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
	 *
	 * @param object the object to check.
	 */
	util.isEmpty = function(obj) {
	  for(var prop in obj) {
	    if(obj.hasOwnProperty(prop)) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Format with simple printf-style interpolation.
	 *
	 * %%: literal '%'
	 * %s,%o: convert next argument into a string.
	 *
	 * @param format the string to format.
	 * @param ... arguments to interpolate into the format string.
	 */
	util.format = function(format) {
	  var re = /%./g;
	  // current match
	  var match;
	  // current part
	  var part;
	  // current arg index
	  var argi = 0;
	  // collected parts to recombine later
	  var parts = [];
	  // last index found
	  var last = 0;
	  // loop while matches remain
	  while((match = re.exec(format))) {
	    part = format.substring(last, re.lastIndex - 2);
	    // don't add empty strings (ie, parts between %s%s)
	    if(part.length > 0) {
	      parts.push(part);
	    }
	    last = re.lastIndex;
	    // switch on % code
	    var code = match[0][1];
	    switch(code) {
	    case 's':
	    case 'o':
	      // check if enough arguments were given
	      if(argi < arguments.length) {
	        parts.push(arguments[argi++ + 1]);
	      } else {
	        parts.push('<?>');
	      }
	      break;
	    // FIXME: do proper formating for numbers, etc
	    //case 'f':
	    //case 'd':
	    case '%':
	      parts.push('%');
	      break;
	    default:
	      parts.push('<%' + code + '?>');
	    }
	  }
	  // add trailing part of format string
	  parts.push(format.substring(last));
	  return parts.join('');
	};

	/**
	 * Formats a number.
	 *
	 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
	 */
	util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
	  // http://kevin.vanzonneveld.net
	  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  // +     bugfix by: Michael White (http://crestidg.com)
	  // +     bugfix by: Benjamin Lupton
	  // +     bugfix by: Allan Jensen (http://www.winternet.no)
	  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // *     example 1: number_format(1234.5678, 2, '.', '');
	  // *     returns 1: 1234.57

	  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
	  var d = dec_point === undefined ? ',' : dec_point;
	  var t = thousands_sep === undefined ?
	   '.' : thousands_sep, s = n < 0 ? '-' : '';
	  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
	  var j = (i.length > 3) ? i.length % 3 : 0;
	  return s + (j ? i.substr(0, j) + t : '') +
	    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
	    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
	};

	/**
	 * Formats a byte size.
	 *
	 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
	 */
	util.formatSize = function(size) {
	  if(size >= 1073741824) {
	    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
	  } else if(size >= 1048576) {
	    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
	  } else if(size >= 1024) {
	    size = util.formatNumber(size / 1024, 0) + ' KiB';
	  } else {
	    size = util.formatNumber(size, 0) + ' bytes';
	  }
	  return size;
	};

	/**
	 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 or IPv6 address to convert.
	 *
	 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
	 *         be parsed.
	 */
	util.bytesFromIP = function(ip) {
	  if(ip.indexOf('.') !== -1) {
	    return util.bytesFromIPv4(ip);
	  }
	  if(ip.indexOf(':') !== -1) {
	    return util.bytesFromIPv6(ip);
	  }
	  return null;
	};

	/**
	 * Converts an IPv4 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 address to convert.
	 *
	 * @return the 4-byte address or null if the address can't be parsed.
	 */
	util.bytesFromIPv4 = function(ip) {
	  ip = ip.split('.');
	  if(ip.length !== 4) {
	    return null;
	  }
	  var b = util.createBuffer();
	  for(var i = 0; i < ip.length; ++i) {
	    var num = parseInt(ip[i], 10);
	    if(isNaN(num)) {
	      return null;
	    }
	    b.putByte(num);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts an IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv6 address to convert.
	 *
	 * @return the 16-byte address or null if the address can't be parsed.
	 */
	util.bytesFromIPv6 = function(ip) {
	  var blanks = 0;
	  ip = ip.split(':').filter(function(e) {
	    if(e.length === 0) ++blanks;
	    return true;
	  });
	  var zeros = (8 - ip.length + blanks) * 2;
	  var b = util.createBuffer();
	  for(var i = 0; i < 8; ++i) {
	    if(!ip[i] || ip[i].length === 0) {
	      b.fillWithByte(0, zeros);
	      zeros = 0;
	      continue;
	    }
	    var bytes = util.hexToBytes(ip[i]);
	    if(bytes.length < 2) {
	      b.putByte(0);
	    }
	    b.putBytes(bytes);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
	 * an IPv6 string representation. The bytes must be in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
	 *         respectively, are given, otherwise null.
	 */
	util.bytesToIP = function(bytes) {
	  if(bytes.length === 4) {
	    return util.bytesToIPv4(bytes);
	  }
	  if(bytes.length === 16) {
	    return util.bytesToIPv6(bytes);
	  }
	  return null;
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 string representation or null for an invalid # of bytes.
	 */
	util.bytesToIPv4 = function(bytes) {
	  if(bytes.length !== 4) {
	    return null;
	  }
	  var ip = [];
	  for(var i = 0; i < bytes.length; ++i) {
	    ip.push(bytes.charCodeAt(i));
	  }
	  return ip.join('.');
	};

	/**
	 * Converts 16-bytes into an IPv16 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv16 string representation or null for an invalid # of bytes.
	 */
	util.bytesToIPv6 = function(bytes) {
	  if(bytes.length !== 16) {
	    return null;
	  }
	  var ip = [];
	  var zeroGroups = [];
	  var zeroMaxGroup = 0;
	  for(var i = 0; i < bytes.length; i += 2) {
	    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
	    // canonicalize zero representation
	    while(hex[0] === '0' && hex !== '0') {
	      hex = hex.substr(1);
	    }
	    if(hex === '0') {
	      var last = zeroGroups[zeroGroups.length - 1];
	      var idx = ip.length;
	      if(!last || idx !== last.end + 1) {
	        zeroGroups.push({start: idx, end: idx});
	      } else {
	        last.end = idx;
	        if((last.end - last.start) >
	          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
	          zeroMaxGroup = zeroGroups.length - 1;
	        }
	      }
	    }
	    ip.push(hex);
	  }
	  if(zeroGroups.length > 0) {
	    var group = zeroGroups[zeroMaxGroup];
	    // only shorten group of length > 0
	    if(group.end - group.start > 0) {
	      ip.splice(group.start, group.end - group.start + 1, '');
	      if(group.start === 0) {
	        ip.unshift('');
	      }
	      if(group.end === 7) {
	        ip.push('');
	      }
	    }
	  }
	  return ip.join(':');
	};

	/**
	 * Estimates the number of processes that can be run concurrently. If
	 * creating Web Workers, keep in mind that the main JavaScript process needs
	 * its own core.
	 *
	 * @param options the options to use:
	 *          update true to force an update (not use the cached value).
	 * @param callback(err, max) called once the operation completes.
	 */
	util.estimateCores = function(options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	  if('cores' in util && !options.update) {
	    return callback(null, util.cores);
	  }
	  if(typeof navigator !== 'undefined' &&
	    'hardwareConcurrency' in navigator &&
	    navigator.hardwareConcurrency > 0) {
	    util.cores = navigator.hardwareConcurrency;
	    return callback(null, util.cores);
	  }
	  if(typeof Worker === 'undefined') {
	    // workers not available
	    util.cores = 1;
	    return callback(null, util.cores);
	  }
	  if(typeof Blob === 'undefined') {
	    // can't estimate, default to 2
	    util.cores = 2;
	    return callback(null, util.cores);
	  }

	  // create worker concurrency estimation code as blob
	  var blobUrl = URL.createObjectURL(new Blob(['(',
	    function() {
	      self.addEventListener('message', function(e) {
	        // run worker for 4 ms
	        var st = Date.now();
	        var et = st + 4;
	        while(Date.now() < et);
	        self.postMessage({st: st, et: et});
	      });
	    }.toString(),
	  ')()'], {type: 'application/javascript'}));

	  // take 5 samples using 16 workers
	  sample([], 5, 16);

	  function sample(max, samples, numWorkers) {
	    if(samples === 0) {
	      // get overlap average
	      var avg = Math.floor(max.reduce(function(avg, x) {
	        return avg + x;
	      }, 0) / max.length);
	      util.cores = Math.max(1, avg);
	      URL.revokeObjectURL(blobUrl);
	      return callback(null, util.cores);
	    }
	    map(numWorkers, function(err, results) {
	      max.push(reduce(numWorkers, results));
	      sample(max, samples - 1, numWorkers);
	    });
	  }

	  function map(numWorkers, callback) {
	    var workers = [];
	    var results = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      var worker = new Worker(blobUrl);
	      worker.addEventListener('message', function(e) {
	        results.push(e.data);
	        if(results.length === numWorkers) {
	          for(var i = 0; i < numWorkers; ++i) {
	            workers[i].terminate();
	          }
	          callback(null, results);
	        }
	      });
	      workers.push(worker);
	    }
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].postMessage(i);
	    }
	  }

	  function reduce(numWorkers, results) {
	    // find overlapping time windows
	    var overlaps = [];
	    for(var n = 0; n < numWorkers; ++n) {
	      var r1 = results[n];
	      var overlap = overlaps[n] = [];
	      for(var i = 0; i < numWorkers; ++i) {
	        if(n === i) {
	          continue;
	        }
	        var r2 = results[i];
	        if((r1.st > r2.st && r1.st < r2.et) ||
	          (r2.st > r1.st && r2.st < r1.et)) {
	          overlap.push(i);
	        }
	      }
	    }
	    // get maximum overlaps ... don't include overlapping worker itself
	    // as the main JS process was also being scheduled during the work and
	    // would have to be subtracted from the estimate anyway
	    return overlaps.reduce(function(max, overlap) {
	      return Math.max(max, overlap.length);
	    }, 0);
	  }
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'util';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/util',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Cipher base API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.cipher = forge.cipher || {};

	// registered algorithms
	forge.cipher.algorithms = forge.cipher.algorithms || {};

	/**
	 * Creates a cipher object that can be used to encrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge.cipher.createCipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: false
	  });
	};

	/**
	 * Creates a decipher object that can be used to decrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge.cipher.createDecipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: true
	  });
	};

	/**
	 * Registers an algorithm by name. If the name was already registered, the
	 * algorithm API object will be overwritten.
	 *
	 * @param name the name of the algorithm.
	 * @param algorithm the algorithm API object.
	 */
	forge.cipher.registerAlgorithm = function(name, algorithm) {
	  name = name.toUpperCase();
	  forge.cipher.algorithms[name] = algorithm;
	};

	/**
	 * Gets a registered algorithm by name.
	 *
	 * @param name the name of the algorithm.
	 *
	 * @return the algorithm, if found, null if not.
	 */
	forge.cipher.getAlgorithm = function(name) {
	  name = name.toUpperCase();
	  if(name in forge.cipher.algorithms) {
	    return forge.cipher.algorithms[name];
	  }
	  return null;
	};

	var BlockCipher = forge.cipher.BlockCipher = function(options) {
	  this.algorithm = options.algorithm;
	  this.mode = this.algorithm.mode;
	  this.blockSize = this.mode.blockSize;
	  this._finish = false;
	  this._input = null;
	  this.output = null;
	  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
	  this._decrypt = options.decrypt;
	  this.algorithm.initialize(options);
	};

	/**
	 * Starts or restarts the encryption or decryption process, whichever
	 * was previously configured.
	 *
	 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
	 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
	 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
	 * 32-bit integers, then it must be 4 integers long.
	 *
	 * Note: an IV is not required or used in ECB mode.
	 *
	 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
	 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
	 * by NIST SP-800-38D but another length may be given.
	 *
	 * @param options the options to use:
	 *          iv the initialization vector to use as a binary-encoded string of
	 *            bytes, null to reuse the last ciphered block from a previous
	 *            update() (this "residue" method is for legacy support only).
	 *          additionalData additional authentication data as a binary-encoded
	 *            string of bytes, for 'GCM' mode, (default: none).
	 *          tagLength desired length of authentication tag, in bits, for
	 *            'GCM' mode (0-128, default: 128).
	 *          tag the authentication tag to check if decrypting, as a
	 *             binary-encoded string of bytes.
	 *          output the output the buffer to write to, null to create one.
	 */
	BlockCipher.prototype.start = function(options) {
	  options = options || {};
	  var opts = {};
	  for(var key in options) {
	    opts[key] = options[key];
	  }
	  opts.decrypt = this._decrypt;
	  this._finish = false;
	  this._input = forge.util.createBuffer();
	  this.output = options.output || forge.util.createBuffer();
	  this.mode.start(opts);
	};

	/**
	 * Updates the next block according to the cipher mode.
	 *
	 * @param input the buffer to read from.
	 */
	BlockCipher.prototype.update = function(input) {
	  if(input) {
	    // input given, so empty it into the input buffer
	    this._input.putBuffer(input);
	  }

	  // do cipher operation until it needs more input and not finished
	  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&
	    !this._finish) {}

	  // free consumed memory from input buffer
	  this._input.compact();
	};

	/**
	 * Finishes encrypting or decrypting.
	 *
	 * @param pad a padding function to use in CBC mode, null for default,
	 *          signature(blockSize, buffer, decrypt).
	 *
	 * @return true if successful, false on error.
	 */
	BlockCipher.prototype.finish = function(pad) {
	  // backwards-compatibility w/deprecated padding API
	  // Note: will overwrite padding functions even after another start() call
	  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
	    this.mode.pad = function(input) {
	      return pad(this.blockSize, input, false);
	    };
	    this.mode.unpad = function(output) {
	      return pad(this.blockSize, output, true);
	    };
	  }

	  // build options for padding and afterFinish functions
	  var options = {};
	  options.decrypt = this._decrypt;

	  // get # of bytes that won't fill a block
	  options.overflow = this._input.length() % this.blockSize;

	  if(!this._decrypt && this.mode.pad) {
	    if(!this.mode.pad(this._input, options)) {
	      return false;
	    }
	  }

	  // do final update
	  this._finish = true;
	  this.update();

	  if(this._decrypt && this.mode.unpad) {
	    if(!this.mode.unpad(this.output, options)) {
	      return false;
	    }
	  }

	  if(this.mode.afterFinish) {
	    if(!this.mode.afterFinish(this.output, options)) {
	      return false;
	    }
	  }

	  return true;
	};


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'cipher';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/cipher',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Supported cipher modes.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.cipher = forge.cipher || {};

	// supported cipher modes
	var modes = forge.cipher.modes = forge.cipher.modes || {};


	/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

	modes.ecb = function(options) {
	  options = options || {};
	  this.name = 'ECB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.ecb.prototype.start = function(options) {};

	modes.ecb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.ecb.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};


	/** Cipher-block Chaining (CBC) **/

	modes.cbc = function(options) {
	  options = options || {};
	  this.name = 'CBC';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.cbc.prototype.start = function(options) {
	  // Note: legacy support for using IV residue (has security flaws)
	  // if IV is null, reuse block from previous processing
	  if(options.iv === null) {
	    // must have a previous block
	    if(!this._prev) {
	      throw new Error('Invalid IV parameter.');
	    }
	    this._iv = this._prev.slice(0);
	  } else if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  } else {
	    // save IV as "previous" block
	    this._iv = transformIV(options.iv);
	    this._prev = this._iv.slice(0);
	  }
	};

	modes.cbc.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  // CBC XOR's IV (or previous block) with plaintext
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = this._prev[i] ^ input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output, save previous block
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	  this._prev = this._outBlock;
	};

	modes.cbc.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output, save previous ciphered block
	  // CBC XOR's IV (or previous block) with ciphertext
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._prev[i] ^ this._outBlock[i]);
	  }
	  this._prev = this._inBlock.slice(0);
	};

	modes.cbc.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.cbc.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};


	/** Cipher feedback (CFB) **/

	modes.cfb = function(options) {
	  options = options || {};
	  this.name = 'CFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
	      output.putInt32(this._inBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
	    this._partialOutput.putInt32(this._partialBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32();
	      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32();
	    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	/** Output feedback (OFB) **/

	modes.ofb = function(options) {
	  options = options || {};
	  this.name = 'OFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(input.length() === 0) {
	    return true;
	  }

	  // encrypt block (OFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output and update next input
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	      this._inBlock[i] = this._outBlock[i];
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._outBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;


	/** Counter (CTR) **/

	modes.ctr = function(options) {
	  options = options || {};
	  this.name = 'CTR';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CTR always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes > 0) {
	      // block still incomplete, restore input buffer
	      input.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // block complete, increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;


	/** Galois/Counter Mode (GCM) **/

	modes.gcm = function(options) {
	  options = options || {};
	  this.name = 'GCM';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge.util.createBuffer();
	  this._partialBytes = 0;

	  // R is actually this value concatenated with 120 more zero bits, but
	  // we only XOR against R so the other zeros have no effect -- we just
	  // apply this value to the first integer in a block
	  this._R = 0xE1000000;
	};

	modes.gcm.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // ensure IV is a byte buffer
	  var iv = forge.util.createBuffer(options.iv);

	  // no ciphered data processed yet
	  this._cipherLength = 0;

	  // default additional data is none
	  var additionalData;
	  if('additionalData' in options) {
	    additionalData = forge.util.createBuffer(options.additionalData);
	  } else {
	    additionalData = forge.util.createBuffer();
	  }

	  // default tag length is 128 bits
	  if('tagLength' in options) {
	    this._tagLength = options.tagLength;
	  } else {
	    this._tagLength = 128;
	  }

	  // if tag is given, ensure tag matches tag length
	  this._tag = null;
	  if(options.decrypt) {
	    // save tag to check later
	    this._tag = forge.util.createBuffer(options.tag).getBytes();
	    if(this._tag.length !== (this._tagLength / 8)) {
	      throw new Error('Authentication tag does not match tag length.');
	    }
	  }

	  // create tmp storage for hash calculation
	  this._hashBlock = new Array(this._ints);

	  // no tag generated yet
	  this.tag = null;

	  // generate hash subkey
	  // (apply block cipher to "zero" block)
	  this._hashSubkey = new Array(this._ints);
	  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

	  // generate table M
	  // use 4-bit tables (32 component decomposition of a 16 byte value)
	  // 8-bit tables take more space and are known to have security
	  // vulnerabilities (in native implementations)
	  this.componentBits = 4;
	  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);

	  // Note: support IV length different from 96 bits? (only supporting
	  // 96 bits is recommended by NIST SP-800-38D)
	  // generate J_0
	  var ivLength = iv.length();
	  if(ivLength === 12) {
	    // 96-bit IV
	    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
	  } else {
	    // IV is NOT 96-bits
	    this._j0 = [0, 0, 0, 0];
	    while(iv.length() > 0) {
	      this._j0 = this.ghash(
	        this._hashSubkey, this._j0,
	        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
	    }
	    this._j0 = this.ghash(
	      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
	  }

	  // generate ICB (initial counter block)
	  this._inBlock = this._j0.slice(0);
	  inc32(this._inBlock);
	  this._partialBytes = 0;

	  // consume authentication data
	  additionalData = forge.util.createBuffer(additionalData);
	  // save additional data length as a BE 64-bit number
	  this._aDataLength = from64To32(additionalData.length() * 8);
	  // pad additional data to 128 bit (16 byte) block size
	  var overflow = additionalData.length() % this.blockSize;
	  if(overflow) {
	    additionalData.fillWithByte(0, this.blockSize - overflow);
	  }
	  this._s = [0, 0, 0, 0];
	  while(additionalData.length() > 0) {
	    this._s = this.ghash(this._hashSubkey, this._s, [
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32()
	    ]);
	  }
	};

	modes.gcm.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(this._outBlock[i] ^= input.getInt32());
	    }
	    this._cipherLength += this.blockSize;
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes === 0 || finish) {
	      // handle overflow prior to hashing
	      if(finish) {
	        // get block overflow
	        var overflow = inputLength % this.blockSize;
	        this._cipherLength += overflow;
	        // truncate for hash function
	        this._partialOutput.truncate(this.blockSize - overflow);
	      } else {
	        this._cipherLength += this.blockSize;
	      }

	      // get output block for hashing
	      for(var i = 0; i < this._ints; ++i) {
	        this._outBlock[i] = this._partialOutput.getInt32();
	      }
	      this._partialOutput.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      // block still incomplete, restore input buffer, get partial output,
	      // and return early
	      input.read -= this.blockSize;
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // update hash block S
	  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.gcm.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {
	    return true;
	  }

	  // encrypt block (GCM always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);

	  // update hash block S
	  this._hashBlock[0] = input.getInt32();
	  this._hashBlock[1] = input.getInt32();
	  this._hashBlock[2] = input.getInt32();
	  this._hashBlock[3] = input.getInt32();
	  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

	  // XOR hash input with output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
	  }

	  // increment cipher data length
	  if(inputLength < this.blockSize) {
	    this._cipherLength += inputLength % this.blockSize;
	  } else {
	    this._cipherLength += this.blockSize;
	  }
	};

	modes.gcm.prototype.afterFinish = function(output, options) {
	  var rval = true;

	  // handle overflow
	  if(options.decrypt && options.overflow) {
	    output.truncate(this.blockSize - options.overflow);
	  }

	  // handle authentication tag
	  this.tag = forge.util.createBuffer();

	  // concatenate additional data length with cipher length
	  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));

	  // include lengths in hash
	  this._s = this.ghash(this._hashSubkey, this._s, lengths);

	  // do GCTR(J_0, S)
	  var tag = [];
	  this.cipher.encrypt(this._j0, tag);
	  for(var i = 0; i < this._ints; ++i) {
	    this.tag.putInt32(this._s[i] ^ tag[i]);
	  }

	  // trim tag to length
	  this.tag.truncate(this.tag.length() % (this._tagLength / 8));

	  // check authentication tag
	  if(options.decrypt && this.tag.bytes() !== this._tag) {
	    rval = false;
	  }

	  return rval;
	};

	/**
	 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
	 * field multiplication. The field, GF(2^128), is defined by the polynomial:
	 *
	 * x^128 + x^7 + x^2 + x + 1
	 *
	 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
	 * the value of a coefficient is 1, a bit is set. The value R, is the
	 * concatenation of this value and 120 zero bits, yielding a 128-bit value
	 * which matches the block size.
	 *
	 * This function will multiply two elements (vectors of bytes), X and Y, in
	 * the field GF(2^128). The result is initialized to zero. For each bit of
	 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
	 * by the current value of Y. For each bit, the value of Y will be raised by
	 * a power of x (multiplied by the polynomial x). This can be achieved by
	 * shifting Y once to the right. If the current value of Y, prior to being
	 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
	 * Otherwise, we must divide by R after shifting to find the remainder.
	 *
	 * @param x the first block to multiply by the second.
	 * @param y the second block to multiply by the first.
	 *
	 * @return the block result of the multiplication.
	 */
	modes.gcm.prototype.multiply = function(x, y) {
	  var z_i = [0, 0, 0, 0];
	  var v_i = y.slice(0);

	  // calculate Z_128 (block has 128 bits)
	  for(var i = 0; i < 128; ++i) {
	    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
	    // else Z_{i+1} = Z_i ^ V_i
	    // get x_i by finding 32-bit int position, then left shift 1 by remainder
	    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
	    if(x_i) {
	      z_i[0] ^= v_i[0];
	      z_i[1] ^= v_i[1];
	      z_i[2] ^= v_i[2];
	      z_i[3] ^= v_i[3];
	    }

	    // if LSB(V_i) is 1, V_i = V_i >> 1
	    // else V_i = (V_i >> 1) ^ R
	    this.pow(v_i, v_i);
	  }

	  return z_i;
	};

	modes.gcm.prototype.pow = function(x, out) {
	  // if LSB(x) is 1, x = x >>> 1
	  // else x = (x >>> 1) ^ R
	  var lsb = x[3] & 1;

	  // always do x >>> 1:
	  // starting with the rightmost integer, shift each integer to the right
	  // one bit, pulling in the bit from the integer to the left as its top
	  // most bit (do this for the last 3 integers)
	  for(var i = 3; i > 0; --i) {
	    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
	  }
	  // shift the first integer normally
	  out[0] = x[0] >>> 1;

	  // if lsb was not set, then polynomial had a degree of 127 and doesn't
	  // need to divided; otherwise, XOR with R to find the remainder; we only
	  // need to XOR the first integer since R technically ends w/120 zero bits
	  if(lsb) {
	    out[0] ^= this._R;
	  }
	};

	modes.gcm.prototype.tableMultiply = function(x) {
	  // assumes 4-bit tables are used
	  var z = [0, 0, 0, 0];
	  for(var i = 0; i < 32; ++i) {
	    var idx = (i / 8) | 0;
	    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;
	    var ah = this._m[i][x_i];
	    z[0] ^= ah[0];
	    z[1] ^= ah[1];
	    z[2] ^= ah[2];
	    z[3] ^= ah[3];
	  }
	  return z;
	};

	/**
	 * A continuing version of the GHASH algorithm that operates on a single
	 * block. The hash block, last hash value (Ym) and the new block to hash
	 * are given.
	 *
	 * @param h the hash block.
	 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
	 * @param x the block to hash.
	 *
	 * @return the hashed value (Ym).
	 */
	modes.gcm.prototype.ghash = function(h, y, x) {
	  y[0] ^= x[0];
	  y[1] ^= x[1];
	  y[2] ^= x[2];
	  y[3] ^= x[3];
	  return this.tableMultiply(y);
	  //return this.multiply(y, h);
	};

	/**
	 * Precomputes a table for multiplying against the hash subkey. This
	 * mechanism provides a substantial speed increase over multiplication
	 * performed without a table. The table-based multiplication this table is
	 * for solves X * H by multiplying each component of X by H and then
	 * composing the results together using XOR.
	 *
	 * This function can be used to generate tables with different bit sizes
	 * for the components, however, this implementation assumes there are
	 * 32 components of X (which is a 16 byte vector), therefore each component
	 * takes 4-bits (so the table is constructed with bits=4).
	 *
	 * @param h the hash subkey.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateHashTable = function(h, bits) {
	  // TODO: There are further optimizations that would use only the
	  // first table M_0 (or some variant) along with a remainder table;
	  // this can be explored in the future
	  var multiplier = 8 / bits;
	  var perInt = 4 * multiplier;
	  var size = 16 * multiplier;
	  var m = new Array(size);
	  for(var i = 0; i < size; ++i) {
	    var tmp = [0, 0, 0, 0];
	    var idx = (i / perInt) | 0;
	    var shft = ((perInt - 1 - (i % perInt)) * bits);
	    tmp[idx] = (1 << (bits - 1)) << shft;
	    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
	  }
	  return m;
	};

	/**
	 * Generates a table for multiplying against the hash subkey for one
	 * particular component (out of all possible component values).
	 *
	 * @param mid the pre-multiplied value for the middle key of the table.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
	  // compute the table quickly by minimizing the number of
	  // POW operations -- they only need to be performed for powers of 2,
	  // all other entries can be composed from those powers using XOR
	  var size = 1 << bits;
	  var half = size >>> 1;
	  var m = new Array(size);
	  m[half] = mid.slice(0);
	  var i = half >>> 1;
	  while(i > 0) {
	    // raise m0[2 * i] and store in m0[i]
	    this.pow(m[2 * i], m[i] = []);
	    i >>= 1;
	  }
	  i = 2;
	  while(i < half) {
	    for(var j = 1; j < i; ++j) {
	      var m_i = m[i];
	      var m_j = m[j];
	      m[i + j] = [
	        m_i[0] ^ m_j[0],
	        m_i[1] ^ m_j[1],
	        m_i[2] ^ m_j[2],
	        m_i[3] ^ m_j[3]
	      ];
	    }
	    i *= 2;
	  }
	  m[0] = [0, 0, 0, 0];
	  /* Note: We could avoid storing these by doing composition during multiply
	  calculate top half using composition by speed is preferred. */
	  for(i = half + 1; i < size; ++i) {
	    var c = m[i ^ half];
	    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
	  }
	  return m;
	};


	/** Utility functions */

	function transformIV(iv) {
	  if(typeof iv === 'string') {
	    // convert iv string into byte buffer
	    iv = forge.util.createBuffer(iv);
	  }

	  if(forge.util.isArray(iv) && iv.length > 4) {
	    // convert iv byte array into byte buffer
	    var tmp = iv;
	    iv = forge.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      iv.putByte(tmp[i]);
	    }
	  }
	  if(!forge.util.isArray(iv)) {
	    // convert iv byte buffer into 32-bit integer array
	    iv = [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()];
	  }

	  return iv;
	}

	function inc32(block) {
	  // increment last 32 bits of block only
	  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;
	}

	function from64To32(num) {
	  // convert 64-bit number to two BE Int32s
	  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];
	}


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'cipherModes';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/cipherModes',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Advanced Encryption Standard (AES) implementation.
	 *
	 * This implementation is based on the public domain library 'jscrypto' which
	 * was written by:
	 *
	 * Emily Stark (estark@stanford.edu)
	 * Mike Hamburg (mhamburg@stanford.edu)
	 * Dan Boneh (dabo@cs.stanford.edu)
	 *
	 * Parts of this code are based on the OpenSSL implementation of AES:
	 * http://www.openssl.org
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* AES API */
	forge.aes = forge.aes || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.createEncryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.aes.createDecryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new AES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the AES algorithm object.
	 */
	forge.aes.Algorithm = function(name, mode) {
	  if(!init) {
	    initialize();
	  }
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 16,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._w, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._w, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this AES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge.aes.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = options.key;
	  var tmp;

	  /* Note: The key may be a string of bytes, an array of bytes, a byte
	    buffer, or an array of 32-bit integers. If the key is in bytes, then
	    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
	    integers, it must be 4, 6, or 8 integers long. */

	  if(typeof key === 'string' &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key string into byte buffer
	    key = forge.util.createBuffer(key);
	  } else if(forge.util.isArray(key) &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key integer array into byte buffer
	    tmp = key;
	    key = forge.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      key.putByte(tmp[i]);
	    }
	  }

	  // convert key byte buffer into 32-bit integer array
	  if(!forge.util.isArray(key)) {
	    tmp = key;
	    key = [];

	    // key lengths of 16, 24, 32 bytes allowed
	    var len = tmp.length();
	    if(len === 16 || len === 24 || len === 32) {
	      len = len >>> 2;
	      for(var i = 0; i < len; ++i) {
	        key.push(tmp.getInt32());
	      }
	    }
	  }

	  // key must be an array of 32-bit integers by now
	  if(!forge.util.isArray(key) ||
	    !(key.length === 4 || key.length === 6 || key.length === 8)) {
	    throw new Error('Invalid key parameter.');
	  }

	  // encryption operation is always used for these modes
	  var mode = this.mode.name;
	  var encryptOp = (['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1);

	  // do key expansion
	  this._w = _expandKey(key, options.decrypt && !encryptOp);
	  this._init = true;
	};

	/**
	 * Expands a key. Typically only used for testing.
	 *
	 * @param key the symmetric key to expand, as an array of 32-bit words.
	 * @param decrypt true to expand for decryption, false for encryption.
	 *
	 * @return the expanded key.
	 */
	forge.aes._expandKey = function(key, decrypt) {
	  if(!init) {
	    initialize();
	  }
	  return _expandKey(key, decrypt);
	};

	/**
	 * Updates a single block. Typically only used for testing.
	 *
	 * @param w the expanded key to use.
	 * @param input an array of block-size 32-bit words.
	 * @param output an array of block-size 32-bit words.
	 * @param decrypt true to decrypt, false to encrypt.
	 */
	forge.aes._updateBlock = _updateBlock;


	/** Register AES algorithms **/

	registerAlgorithm('AES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('AES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('AES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('AES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('AES-CTR', forge.cipher.modes.ctr);
	registerAlgorithm('AES-GCM', forge.cipher.modes.gcm);

	function registerAlgorithm(name, mode) {
	  var factory = function() {
	    return new forge.aes.Algorithm(name, mode);
	  };
	  forge.cipher.registerAlgorithm(name, factory);
	}


	/** AES implementation **/

	var init = false; // not yet initialized
	var Nb = 4;       // number of words comprising the state (AES = 4)
	var sbox;         // non-linear substitution table used in key expansion
	var isbox;        // inversion of sbox
	var rcon;         // round constant word array
	var mix;          // mix-columns table
	var imix;         // inverse mix-columns table

	/**
	 * Performs initialization, ie: precomputes tables to optimize for speed.
	 *
	 * One way to understand how AES works is to imagine that 'addition' and
	 * 'multiplication' are interfaces that require certain mathematical
	 * properties to hold true (ie: they are associative) but they might have
	 * different implementations and produce different kinds of results ...
	 * provided that their mathematical properties remain true. AES defines
	 * its own methods of addition and multiplication but keeps some important
	 * properties the same, ie: associativity and distributivity. The
	 * explanation below tries to shed some light on how AES defines addition
	 * and multiplication of bytes and 32-bit words in order to perform its
	 * encryption and decryption algorithms.
	 *
	 * The basics:
	 *
	 * The AES algorithm views bytes as binary representations of polynomials
	 * that have either 1 or 0 as the coefficients. It defines the addition
	 * or subtraction of two bytes as the XOR operation. It also defines the
	 * multiplication of two bytes as a finite field referred to as GF(2^8)
	 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
	 * number of elements so GF(2^8) has 256 elements).
	 *
	 * This means that any two bytes can be represented as binary polynomials;
	 * when they multiplied together and modularly reduced by an irreducible
	 * polynomial of the 8th degree, the results are the field GF(2^8). The
	 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
	 * This multiplication is associative with 0x01 as the identity:
	 *
	 * (b * 0x01 = GF(b, 0x01) = b).
	 *
	 * The operation GF(b, 0x02) can be performed at the byte level by left
	 * shifting b once and then XOR'ing it (to perform the modular reduction)
	 * with 0x11b if b is >= 128. Repeated application of the multiplication
	 * of 0x02 can be used to implement the multiplication of any two bytes.
	 *
	 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
	 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
	 * factors can each be multiplied by 0x57 and then added together. To do
	 * the multiplication, values for 0x57 multiplied by each of these 3 factors
	 * can be precomputed and stored in a table. To add them, the values from
	 * the table are XOR'd together.
	 *
	 * AES also defines addition and multiplication of words, that is 4-byte
	 * numbers represented as polynomials of 3 degrees where the coefficients
	 * are the values of the bytes.
	 *
	 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
	 *
	 * Addition is performed by XOR'ing like powers of x. Multiplication
	 * is performed in two steps, the first is an algebriac expansion as
	 * you would do normally (where addition is XOR). But the result is
	 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
	 * next the result is modularly reduced by an AES-specific polynomial of
	 * degree 4 which will always produce a polynomial of less than 4 degrees
	 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
	 *
	 * The modular product of two polynomials 'a' and 'b' is thus:
	 *
	 * d(x) = d3x^3 + d2x^2 + d1x + d0
	 * with
	 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
	 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
	 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
	 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
	 *
	 * As a matrix:
	 *
	 * [d0] = [a0 a3 a2 a1][b0]
	 * [d1]   [a1 a0 a3 a2][b1]
	 * [d2]   [a2 a1 a0 a3][b2]
	 * [d3]   [a3 a2 a1 a0][b3]
	 *
	 * Special polynomials defined by AES (0x02 == {02}):
	 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
	 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
	 *
	 * These polynomials are used in the MixColumns() and InverseMixColumns()
	 * operations, respectively, to cause each element in the state to affect
	 * the output (referred to as diffusing).
	 *
	 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
	 * polynomial x3.
	 *
	 * The ShiftRows() method modifies the last 3 rows in the state (where
	 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
	 * The 1st byte in the second row is moved to the end of the row. The 1st
	 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
	 * 2nd, and 3rd bytes are moved in the fourth row.
	 *
	 * More details on how AES arithmetic works:
	 *
	 * In the polynomial representation of binary numbers, XOR performs addition
	 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
	 * corresponds with the multiplication of polynomials modulo an irreducible
	 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
	 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
	 * an AES-specific irreducible polynomial of degree 8.
	 *
	 * A polynomial is irreducible if its only divisors are one and itself. For
	 * the AES algorithm, this irreducible polynomial is:
	 *
	 * m(x) = x^8 + x^4 + x^3 + x + 1,
	 *
	 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
	 * 100011011 = 283 = 0x11b.
	 *
	 * For example, GF(0x57, 0x83) = 0xc1 because
	 *
	 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
	 * 0x85 = 131 = 10000101 = x^7 + x + 1
	 *
	 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
	 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
	 *    x^7 + x^5 + x^3 + x^2 + x +
	 *    x^6 + x^4 + x^2 + x + 1
	 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
	 *    y modulo (x^8 + x^4 + x^3 + x + 1)
	 * =  x^7 + x^6 + 1.
	 *
	 * The modular reduction by m(x) guarantees the result will be a binary
	 * polynomial of less than degree 8, so that it can fit in a byte.
	 *
	 * The operation to multiply a binary polynomial b with x (the polynomial
	 * x in binary representation is 00000010) is:
	 *
	 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
	 *
	 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
	 * most significant bit is 0 in b) then the result is already reduced. If
	 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
	 *
	 * It follows that multiplication by x (00000010 or 0x02) can be implemented
	 * by performing a left shift followed by a conditional bitwise XOR with
	 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
	 * higher powers of x can be implemented by repeated application of xtime().
	 *
	 * By adding intermediate results, multiplication by any constant can be
	 * implemented. For instance:
	 *
	 * GF(0x57, 0x13) = 0xfe because:
	 *
	 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
	 *
	 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
	 * datatype for b can be larger than 1 byte, so a left shift will not
	 * automatically eliminate bits that overflow a byte ... by XOR'ing the
	 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
	 *
	 * GF(0x57, 0x02) = xtime(0x57) = 0xae
	 * GF(0x57, 0x04) = xtime(0xae) = 0x47
	 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
	 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
	 *
	 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
	 *
	 * And by the distributive property (since XOR is addition and GF() is
	 * multiplication):
	 *
	 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
	 * = 0x57 ^ 0xae ^ 0x07
	 * = 0xfe.
	 */
	function initialize() {
	  init = true;

	  /* Populate the Rcon table. These are the values given by
	    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
	    in the field of GF(2^8), where i starts at 1.

	    rcon[0] = [0x00, 0x00, 0x00, 0x00]
	    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
	    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
	    ...
	    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
	    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

	    We only store the first byte because it is the only one used.
	  */
	  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

	  // compute xtime table which maps i onto GF(i, 0x02)
	  var xtime = new Array(256);
	  for(var i = 0; i < 128; ++i) {
	    xtime[i] = i << 1;
	    xtime[i + 128] = (i + 128) << 1 ^ 0x11B;
	  }

	  // compute all other tables
	  sbox = new Array(256);
	  isbox = new Array(256);
	  mix = new Array(4);
	  imix = new Array(4);
	  for(var i = 0; i < 4; ++i) {
	    mix[i] = new Array(256);
	    imix[i] = new Array(256);
	  }
	  var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
	  for(var i = 0; i < 256; ++i) {
	    /* We need to generate the SubBytes() sbox and isbox tables so that
	      we can perform byte substitutions. This requires us to traverse
	      all of the elements in GF, find their multiplicative inverses,
	      and apply to each the following affine transformation:

	      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
	            b(i + 7) mod 8 ^ ci
	      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
	      ith bit of a byte c with the value {63} or {01100011}.

	      It is possible to traverse every possible value in a Galois field
	      using what is referred to as a 'generator'. There are many
	      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
	      traverse GF we iterate 255 times, multiplying by our generator
	      each time.

	      On each iteration we can determine the multiplicative inverse for
	      the current element.

	      Suppose there is an element in GF 'e'. For a given generator 'g',
	      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
	      out that if use the inverse of a generator as another generator
	      it will produce all of the corresponding multiplicative inverses
	      at the same time. For this reason, we choose 5 as our inverse
	      generator because it only requires 2 multiplies and 1 add and its
	      inverse, 82, requires relatively few operations as well.

	      In order to apply the affine transformation, the multiplicative
	      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
	      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
	      'x'. Then 's' is left shifted and the high bit of 's' is made the
	      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
	      with 's' and stored in 'x'. On each subsequent iteration the same
	      operation is performed. When 4 iterations are complete, 'x' is
	      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
	      For example:

	      s = 01000001
	      x = 01000001

	      iteration 1: s = 10000010, x ^= s
	      iteration 2: s = 00000101, x ^= s
	      iteration 3: s = 00001010, x ^= s
	      iteration 4: s = 00010100, x ^= s
	      x ^= 0x63

	      This can be done with a loop where s = (s << 1) | (s >> 7). However,
	      it can also be done by using a single 16-bit (in this case 32-bit)
	      number 'sx'. Since XOR is an associative operation, we can set 'sx'
	      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
	      The most significant bits will flow into the high 8 bit positions
	      and be correctly XOR'd with one another. All that remains will be
	      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
	      afterwards.

	      At the same time we're populating sbox and isbox we can precompute
	      the multiplication we'll need to do to do MixColumns() later.
	    */

	    // apply affine transformation
	    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
	    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

	    // update tables
	    sbox[e] = sx;
	    isbox[sx] = e;

	    /* Mixing columns is done using matrix multiplication. The columns
	      that are to be mixed are each a single word in the current state.
	      The state has Nb columns (4 columns). Therefore each column is a
	      4 byte word. So to mix the columns in a single column 'c' where
	      its rows are r0, r1, r2, and r3, we use the following matrix
	      multiplication:

	      [2 3 1 1]*[r0,c]=[r'0,c]
	      [1 2 3 1] [r1,c] [r'1,c]
	      [1 1 2 3] [r2,c] [r'2,c]
	      [3 1 1 2] [r3,c] [r'3,c]

	      r0, r1, r2, and r3 are each 1 byte of one of the words in the
	      state (a column). To do matrix multiplication for each mixed
	      column c' we multiply the corresponding row from the left matrix
	      with the corresponding column from the right matrix. In total, we
	      get 4 equations:

	      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
	      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
	      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
	      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

	      As usual, the multiplication is as previously defined and the
	      addition is XOR. In order to optimize mixing columns we can store
	      the multiplication results in tables. If you think of the whole
	      column as a word (it might help to visualize by mentally rotating
	      the equations above by counterclockwise 90 degrees) then you can
	      see that it would be useful to map the multiplications performed on
	      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
	      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
	      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
	      respectively in the middle). This means that a table can be
	      constructed that uses r0 as an index to the word. We can do the
	      same with r1, r2, and r3, creating a total of 4 tables.

	      To construct a full c', we can just look up each byte of c in
	      their respective tables and XOR the results together.

	      Also, to build each table we only have to calculate the word
	      for 2,1,1,3 for every byte ... which we can do on each iteration
	      of this loop since we will iterate over every byte. After we have
	      calculated 2,1,1,3 we can get the results for the other tables
	      by cycling the byte at the end to the beginning. For instance
	      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
	      by moving the right most byte to the left most position just like
	      how you can imagine the 3 moved out of 2,1,1,3 and to the front
	      to produce 3,2,1,1.

	      There is another optimization in that the same multiples of
	      the current element we need in order to advance our generator
	      to the next iteration can be reused in performing the 2,1,1,3
	      calculation. We also calculate the inverse mix column tables,
	      with e,9,d,b being the inverse of 2,1,1,3.

	      When we're done, and we need to actually mix columns, the first
	      byte of each state word should be put through mix[0] (2,1,1,3),
	      the second through mix[1] (3,2,1,1) and so forth. Then they should
	      be XOR'd together to produce the fully mixed column.
	    */

	    // calculate mix and imix table values
	    sx2 = xtime[sx];
	    e2 = xtime[e];
	    e4 = xtime[e2];
	    e8 = xtime[e4];
	    me =
	      (sx2 << 24) ^  // 2
	      (sx << 16) ^   // 1
	      (sx << 8) ^    // 1
	      (sx ^ sx2);    // 3
	    ime =
	      (e2 ^ e4 ^ e8) << 24 ^  // E (14)
	      (e ^ e8) << 16 ^        // 9
	      (e ^ e4 ^ e8) << 8 ^    // D (13)
	      (e ^ e2 ^ e8);          // B (11)
	    // produce each of the mix tables by rotating the 2,1,1,3 value
	    for(var n = 0; n < 4; ++n) {
	      mix[n][e] = me;
	      imix[n][sx] = ime;
	      // cycle the right most byte to the left most position
	      // ie: 2,1,1,3 becomes 3,2,1,1
	      me = me << 24 | me >>> 8;
	      ime = ime << 24 | ime >>> 8;
	    }

	    // get next element and inverse
	    if(e === 0) {
	      // 1 is the inverse of 1
	      e = ei = 1;
	    } else {
	      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
	      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
	      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
	      ei ^= xtime[xtime[ei]];
	    }
	  }
	}

	/**
	 * Generates a key schedule using the AES key expansion algorithm.
	 *
	 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
	 * routine to generate a key schedule. The Key Expansion generates a total
	 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
	 * and each of the Nr rounds requires Nb words of key data. The resulting
	 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
	 * with i in the range 0 ≤ i < Nb(Nr + 1).
	 *
	 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
	 * AES-128 (Nb=4, Nk=4, Nr=10)
	 * AES-192 (Nb=4, Nk=6, Nr=12)
	 * AES-256 (Nb=4, Nk=8, Nr=14)
	 * Note: Nr=Nk+6.
	 *
	 * Nb is the number of columns (32-bit words) comprising the State (or
	 * number of bytes in a block). For AES, Nb=4.
	 *
	 * @param key the key to schedule (as an array of 32-bit words).
	 * @param decrypt true to modify the key schedule to decrypt, false not to.
	 *
	 * @return the generated key schedule.
	 */
	function _expandKey(key, decrypt) {
	  // copy the key's words to initialize the key schedule
	  var w = key.slice(0);

	  /* RotWord() will rotate a word, moving the first byte to the last
	    byte's position (shifting the other bytes left).

	    We will be getting the value of Rcon at i / Nk. 'i' will iterate
	    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
	    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
	    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
	    increase by 1. We use a counter iNk to keep track of this.
	   */

	  // go through the rounds expanding the key
	  var temp, iNk = 1;
	  var Nk = w.length;
	  var Nr1 = Nk + 6 + 1;
	  var end = Nb * Nr1;
	  for(var i = Nk; i < end; ++i) {
	    temp = w[i - 1];
	    if(i % Nk === 0) {
	      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
	      temp =
	        sbox[temp >>> 16 & 255] << 24 ^
	        sbox[temp >>> 8 & 255] << 16 ^
	        sbox[temp & 255] << 8 ^
	        sbox[temp >>> 24] ^ (rcon[iNk] << 24);
	      iNk++;
	    } else if(Nk > 6 && (i % Nk === 4)) {
	      // temp = SubWord(temp)
	      temp =
	        sbox[temp >>> 24] << 24 ^
	        sbox[temp >>> 16 & 255] << 16 ^
	        sbox[temp >>> 8 & 255] << 8 ^
	        sbox[temp & 255];
	    }
	    w[i] = w[i - Nk] ^ temp;
	  }

	   /* When we are updating a cipher block we always use the code path for
	     encryption whether we are decrypting or not (to shorten code and
	     simplify the generation of look up tables). However, because there
	     are differences in the decryption algorithm, other than just swapping
	     in different look up tables, we must transform our key schedule to
	     account for these changes:

	     1. The decryption algorithm gets its key rounds in reverse order.
	     2. The decryption algorithm adds the round key before mixing columns
	       instead of afterwards.

	     We don't need to modify our key schedule to handle the first case,
	     we can just traverse the key schedule in reverse order when decrypting.

	     The second case requires a little work.

	     The tables we built for performing rounds will take an input and then
	     perform SubBytes() and MixColumns() or, for the decrypt version,
	     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
	     us to AddRoundKey() before InvMixColumns(). This means we'll need to
	     apply some transformations to the round key to inverse-mix its columns
	     so they'll be correct for moving AddRoundKey() to after the state has
	     had its columns inverse-mixed.

	     To inverse-mix the columns of the state when we're decrypting we use a
	     lookup table that will apply InvSubBytes() and InvMixColumns() at the
	     same time. However, the round key's bytes are not inverse-substituted
	     in the decryption algorithm. To get around this problem, we can first
	     substitute the bytes in the round key so that when we apply the
	     transformation via the InvSubBytes()+InvMixColumns() table, it will
	     undo our substitution leaving us with the original value that we
	     want -- and then inverse-mix that value.

	     This change will correctly alter our key schedule so that we can XOR
	     each round key with our already transformed decryption state. This
	     allows us to use the same code path as the encryption algorithm.

	     We make one more change to the decryption key. Since the decryption
	     algorithm runs in reverse from the encryption algorithm, we reverse
	     the order of the round keys to avoid having to iterate over the key
	     schedule backwards when running the encryption algorithm later in
	     decryption mode. In addition to reversing the order of the round keys,
	     we also swap each round key's 2nd and 4th rows. See the comments
	     section where rounds are performed for more details about why this is
	     done. These changes are done inline with the other substitution
	     described above.
	  */
	  if(decrypt) {
	    var tmp;
	    var m0 = imix[0];
	    var m1 = imix[1];
	    var m2 = imix[2];
	    var m3 = imix[3];
	    var wnew = w.slice(0);
	    end = w.length;
	    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
	      // do not sub the first or last round key (round keys are Nb
	      // words) as no column mixing is performed before they are added,
	      // but do change the key order
	      if(i === 0 || i === (end - Nb)) {
	        wnew[i] = w[wi];
	        wnew[i + 1] = w[wi + 3];
	        wnew[i + 2] = w[wi + 2];
	        wnew[i + 3] = w[wi + 1];
	      } else {
	        // substitute each round key byte because the inverse-mix
	        // table will inverse-substitute it (effectively cancel the
	        // substitution because round key bytes aren't sub'd in
	        // decryption mode) and swap indexes 3 and 1
	        for(var n = 0; n < Nb; ++n) {
	          tmp = w[wi + n];
	          wnew[i + (3&-n)] =
	            m0[sbox[tmp >>> 24]] ^
	            m1[sbox[tmp >>> 16 & 255]] ^
	            m2[sbox[tmp >>> 8 & 255]] ^
	            m3[sbox[tmp & 255]];
	        }
	      }
	    }
	    w = wnew;
	  }

	  return w;
	}

	/**
	 * Updates a single block (16 bytes) using AES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param w the key schedule.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock(w, input, output, decrypt) {
	  /*
	  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[0, Nb-1])
	    for round = 1 step 1 to Nr–1
	      SubBytes(state)
	      ShiftRows(state)
	      MixColumns(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	    end for
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    out = state
	  end

	  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    for round = Nr-1 step -1 downto 1
	      InvShiftRows(state)
	      InvSubBytes(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	      InvMixColumns(state)
	    end for
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	    out = state
	  end
	  */

	  // Encrypt: AddRoundKey(state, w[0, Nb-1])
	  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	  var Nr = w.length / 4 - 1;
	  var m0, m1, m2, m3, sub;
	  if(decrypt) {
	    m0 = imix[0];
	    m1 = imix[1];
	    m2 = imix[2];
	    m3 = imix[3];
	    sub = isbox;
	  } else {
	    m0 = mix[0];
	    m1 = mix[1];
	    m2 = mix[2];
	    m3 = mix[3];
	    sub = sbox;
	  }
	  var a, b, c, d, a2, b2, c2;
	  a = input[0] ^ w[0];
	  b = input[decrypt ? 3 : 1] ^ w[1];
	  c = input[2] ^ w[2];
	  d = input[decrypt ? 1 : 3] ^ w[3];
	  var i = 3;

	  /* In order to share code we follow the encryption algorithm when both
	    encrypting and decrypting. To account for the changes required in the
	    decryption algorithm, we use different lookup tables when decrypting
	    and use a modified key schedule to account for the difference in the
	    order of transformations applied when performing rounds. We also get
	    key rounds in reverse order (relative to encryption). */
	  for(var round = 1; round < Nr; ++round) {
	    /* As described above, we'll be using table lookups to perform the
	      column mixing. Each column is stored as a word in the state (the
	      array 'input' has one column as a word at each index). In order to
	      mix a column, we perform these transformations on each row in c,
	      which is 1 byte in each word. The new column for c0 is c'0:

	               m0      m1      m2      m3
	      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
	      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
	      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
	      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

	      So using mix tables where c0 is a word with r0 being its upper
	      8 bits and r3 being its lower 8 bits:

	      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
	      ...
	      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

	      Therefore to mix the columns in each word in the state we
	      do the following (& 255 omitted for brevity):
	      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

	      However, before mixing, the algorithm requires us to perform
	      ShiftRows(). The ShiftRows() transformation cyclically shifts the
	      last 3 rows of the state over different offsets. The first row
	      (r = 0) is not shifted.

	      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
	      for 0 < r < 4 and 0 <= c < Nb and
	      shift(1, 4) = 1
	      shift(2, 4) = 2
	      shift(3, 4) = 3.

	      This causes the first byte in r = 1 to be moved to the end of
	      the row, the first 2 bytes in r = 2 to be moved to the end of
	      the row, the first 3 bytes in r = 3 to be moved to the end of
	      the row:

	      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
	      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
	      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

	      We can make these substitutions inline with our column mixing to
	      generate an updated set of equations to produce each word in the
	      state (note the columns have changed positions):

	      c0 c1 c2 c3 => c0 c1 c2 c3
	      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
	      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
	      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

	      Therefore:

	      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
	      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

	      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
	      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

	      ... and so forth for c'2 and c'3. The important distinction is
	      that the columns are cycling, with c0 being used with the m0
	      map when calculating c0, but c1 being used with the m0 map when
	      calculating c1 ... and so forth.

	      When performing the inverse we transform the mirror image and
	      skip the bottom row, instead of the top one, and move upwards:

	      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
	      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
	      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
	      c3 c2 c1 c0    c3 c2 c1 c0

	      If you compare the resulting matrices for ShiftRows()+MixColumns()
	      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
	      different (in encrypt mode vs. decrypt mode). So in order to use
	      the same code to handle both encryption and decryption, we will
	      need to do some mapping.

	      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
	      a row number in the state, then the resulting matrix in encryption
	      mode for applying the above transformations would be:

	      r1: a b c d
	      r2: b c d a
	      r3: c d a b
	      r4: d a b c

	      If we did the same in decryption mode we would get:

	      r1: a d c b
	      r2: b a d c
	      r3: c b a d
	      r4: d c b a

	      If instead we swap d and b (set b=c3 and d=c1), then we get:

	      r1: a b c d
	      r2: d a b c
	      r3: c d a b
	      r4: b c d a

	      Now the 1st and 3rd rows are the same as the encryption matrix. All
	      we need to do then to make the mapping exactly the same is to swap
	      the 2nd and 4th rows when in decryption mode. To do this without
	      having to do it on each iteration, we swapped the 2nd and 4th rows
	      in the decryption key schedule. We also have to do the swap above
	      when we first pull in the input and when we set the final output. */
	    a2 =
	      m0[a >>> 24] ^
	      m1[b >>> 16 & 255] ^
	      m2[c >>> 8 & 255] ^
	      m3[d & 255] ^ w[++i];
	    b2 =
	      m0[b >>> 24] ^
	      m1[c >>> 16 & 255] ^
	      m2[d >>> 8 & 255] ^
	      m3[a & 255] ^ w[++i];
	    c2 =
	      m0[c >>> 24] ^
	      m1[d >>> 16 & 255] ^
	      m2[a >>> 8 & 255] ^
	      m3[b & 255] ^ w[++i];
	    d =
	      m0[d >>> 24] ^
	      m1[a >>> 16 & 255] ^
	      m2[b >>> 8 & 255] ^
	      m3[c & 255] ^ w[++i];
	    a = a2;
	    b = b2;
	    c = c2;
	  }

	  /*
	    Encrypt:
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

	    Decrypt:
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	   */
	   // Note: rows are shifted inline
	  output[0] =
	    (sub[a >>> 24] << 24) ^
	    (sub[b >>> 16 & 255] << 16) ^
	    (sub[c >>> 8 & 255] << 8) ^
	    (sub[d & 255]) ^ w[++i];
	  output[decrypt ? 3 : 1] =
	    (sub[b >>> 24] << 24) ^
	    (sub[c >>> 16 & 255] << 16) ^
	    (sub[d >>> 8 & 255] << 8) ^
	    (sub[a & 255]) ^ w[++i];
	  output[2] =
	    (sub[c >>> 24] << 24) ^
	    (sub[d >>> 16 & 255] << 16) ^
	    (sub[a >>> 8 & 255] << 8) ^
	    (sub[b & 255]) ^ w[++i];
	  output[decrypt ? 1 : 3] =
	    (sub[d >>> 24] << 24) ^
	    (sub[a >>> 16 & 255] << 16) ^
	    (sub[b >>> 8 & 255] << 8) ^
	    (sub[c & 255]) ^ w[++i];
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('AES-<mode>', key);
	 * forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates a deprecated AES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use.
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'AES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'aes';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/aes',['require', 'module', './cipher', './cipherModes', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Object IDs for ASN.1.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.pki = forge.pki || {};
	var oids = forge.pki.oids = forge.oids = forge.oids || {};

	// algorithm OIDs
	oids['1.2.840.113549.1.1.1'] = 'rsaEncryption';
	oids['rsaEncryption'] = '1.2.840.113549.1.1.1';
	// Note: md2 & md4 not implemented
	//oids['1.2.840.113549.1.1.2'] = 'md2WithRSAEncryption';
	//oids['md2WithRSAEncryption'] = '1.2.840.113549.1.1.2';
	//oids['1.2.840.113549.1.1.3'] = 'md4WithRSAEncryption';
	//oids['md4WithRSAEncryption'] = '1.2.840.113549.1.1.3';
	oids['1.2.840.113549.1.1.4'] = 'md5WithRSAEncryption';
	oids['md5WithRSAEncryption'] = '1.2.840.113549.1.1.4';
	oids['1.2.840.113549.1.1.5'] = 'sha1WithRSAEncryption';
	oids['sha1WithRSAEncryption'] = '1.2.840.113549.1.1.5';
	oids['1.2.840.113549.1.1.7'] = 'RSAES-OAEP';
	oids['RSAES-OAEP'] = '1.2.840.113549.1.1.7';
	oids['1.2.840.113549.1.1.8'] = 'mgf1';
	oids['mgf1'] = '1.2.840.113549.1.1.8';
	oids['1.2.840.113549.1.1.9'] = 'pSpecified';
	oids['pSpecified'] = '1.2.840.113549.1.1.9';
	oids['1.2.840.113549.1.1.10'] = 'RSASSA-PSS';
	oids['RSASSA-PSS'] = '1.2.840.113549.1.1.10';
	oids['1.2.840.113549.1.1.11'] = 'sha256WithRSAEncryption';
	oids['sha256WithRSAEncryption'] = '1.2.840.113549.1.1.11';
	oids['1.2.840.113549.1.1.12'] = 'sha384WithRSAEncryption';
	oids['sha384WithRSAEncryption'] = '1.2.840.113549.1.1.12';
	oids['1.2.840.113549.1.1.13'] = 'sha512WithRSAEncryption';
	oids['sha512WithRSAEncryption'] = '1.2.840.113549.1.1.13';

	oids['1.3.14.3.2.7'] = 'desCBC';
	oids['desCBC'] = '1.3.14.3.2.7';

	oids['1.3.14.3.2.26'] = 'sha1';
	oids['sha1'] = '1.3.14.3.2.26';
	oids['2.16.840.1.101.3.4.2.1'] = 'sha256';
	oids['sha256'] = '2.16.840.1.101.3.4.2.1';
	oids['2.16.840.1.101.3.4.2.2'] = 'sha384';
	oids['sha384'] = '2.16.840.1.101.3.4.2.2';
	oids['2.16.840.1.101.3.4.2.3'] = 'sha512';
	oids['sha512'] = '2.16.840.1.101.3.4.2.3';
	oids['1.2.840.113549.2.5'] = 'md5';
	oids['md5'] = '1.2.840.113549.2.5';

	// pkcs#7 content types
	oids['1.2.840.113549.1.7.1'] = 'data';
	oids['data'] = '1.2.840.113549.1.7.1';
	oids['1.2.840.113549.1.7.2'] = 'signedData';
	oids['signedData'] = '1.2.840.113549.1.7.2';
	oids['1.2.840.113549.1.7.3'] = 'envelopedData';
	oids['envelopedData'] = '1.2.840.113549.1.7.3';
	oids['1.2.840.113549.1.7.4'] = 'signedAndEnvelopedData';
	oids['signedAndEnvelopedData'] = '1.2.840.113549.1.7.4';
	oids['1.2.840.113549.1.7.5'] = 'digestedData';
	oids['digestedData'] = '1.2.840.113549.1.7.5';
	oids['1.2.840.113549.1.7.6'] = 'encryptedData';
	oids['encryptedData'] = '1.2.840.113549.1.7.6';

	// pkcs#9 oids
	oids['1.2.840.113549.1.9.1'] = 'emailAddress';
	oids['emailAddress'] = '1.2.840.113549.1.9.1';
	oids['1.2.840.113549.1.9.2'] = 'unstructuredName';
	oids['unstructuredName'] = '1.2.840.113549.1.9.2';
	oids['1.2.840.113549.1.9.3'] = 'contentType';
	oids['contentType'] = '1.2.840.113549.1.9.3';
	oids['1.2.840.113549.1.9.4'] = 'messageDigest';
	oids['messageDigest'] = '1.2.840.113549.1.9.4';
	oids['1.2.840.113549.1.9.5'] = 'signingTime';
	oids['signingTime'] = '1.2.840.113549.1.9.5';
	oids['1.2.840.113549.1.9.6'] = 'counterSignature';
	oids['counterSignature'] = '1.2.840.113549.1.9.6';
	oids['1.2.840.113549.1.9.7'] = 'challengePassword';
	oids['challengePassword'] = '1.2.840.113549.1.9.7';
	oids['1.2.840.113549.1.9.8'] = 'unstructuredAddress';
	oids['unstructuredAddress'] = '1.2.840.113549.1.9.8';
	oids['1.2.840.113549.1.9.14'] = 'extensionRequest';
	oids['extensionRequest'] = '1.2.840.113549.1.9.14';

	oids['1.2.840.113549.1.9.20'] = 'friendlyName';
	oids['friendlyName'] = '1.2.840.113549.1.9.20';
	oids['1.2.840.113549.1.9.21'] = 'localKeyId';
	oids['localKeyId'] = '1.2.840.113549.1.9.21';
	oids['1.2.840.113549.1.9.22.1'] = 'x509Certificate';
	oids['x509Certificate'] = '1.2.840.113549.1.9.22.1';

	// pkcs#12 safe bags
	oids['1.2.840.113549.1.12.10.1.1'] = 'keyBag';
	oids['keyBag'] = '1.2.840.113549.1.12.10.1.1';
	oids['1.2.840.113549.1.12.10.1.2'] = 'pkcs8ShroudedKeyBag';
	oids['pkcs8ShroudedKeyBag'] = '1.2.840.113549.1.12.10.1.2';
	oids['1.2.840.113549.1.12.10.1.3'] = 'certBag';
	oids['certBag'] = '1.2.840.113549.1.12.10.1.3';
	oids['1.2.840.113549.1.12.10.1.4'] = 'crlBag';
	oids['crlBag'] = '1.2.840.113549.1.12.10.1.4';
	oids['1.2.840.113549.1.12.10.1.5'] = 'secretBag';
	oids['secretBag'] = '1.2.840.113549.1.12.10.1.5';
	oids['1.2.840.113549.1.12.10.1.6'] = 'safeContentsBag';
	oids['safeContentsBag'] = '1.2.840.113549.1.12.10.1.6';

	// password-based-encryption for pkcs#12
	oids['1.2.840.113549.1.5.13'] = 'pkcs5PBES2';
	oids['pkcs5PBES2'] = '1.2.840.113549.1.5.13';
	oids['1.2.840.113549.1.5.12'] = 'pkcs5PBKDF2';
	oids['pkcs5PBKDF2'] = '1.2.840.113549.1.5.12';

	oids['1.2.840.113549.1.12.1.1'] = 'pbeWithSHAAnd128BitRC4';
	oids['pbeWithSHAAnd128BitRC4'] = '1.2.840.113549.1.12.1.1';
	oids['1.2.840.113549.1.12.1.2'] = 'pbeWithSHAAnd40BitRC4';
	oids['pbeWithSHAAnd40BitRC4'] = '1.2.840.113549.1.12.1.2';
	oids['1.2.840.113549.1.12.1.3'] = 'pbeWithSHAAnd3-KeyTripleDES-CBC';
	oids['pbeWithSHAAnd3-KeyTripleDES-CBC'] = '1.2.840.113549.1.12.1.3';
	oids['1.2.840.113549.1.12.1.4'] = 'pbeWithSHAAnd2-KeyTripleDES-CBC';
	oids['pbeWithSHAAnd2-KeyTripleDES-CBC'] = '1.2.840.113549.1.12.1.4';
	oids['1.2.840.113549.1.12.1.5'] = 'pbeWithSHAAnd128BitRC2-CBC';
	oids['pbeWithSHAAnd128BitRC2-CBC'] = '1.2.840.113549.1.12.1.5';
	oids['1.2.840.113549.1.12.1.6'] = 'pbewithSHAAnd40BitRC2-CBC';
	oids['pbewithSHAAnd40BitRC2-CBC'] = '1.2.840.113549.1.12.1.6';

	// symmetric key algorithm oids
	oids['1.2.840.113549.3.7'] = 'des-EDE3-CBC';
	oids['des-EDE3-CBC'] = '1.2.840.113549.3.7';
	oids['2.16.840.1.101.3.4.1.2'] = 'aes128-CBC';
	oids['aes128-CBC'] = '2.16.840.1.101.3.4.1.2';
	oids['2.16.840.1.101.3.4.1.22'] = 'aes192-CBC';
	oids['aes192-CBC'] = '2.16.840.1.101.3.4.1.22';
	oids['2.16.840.1.101.3.4.1.42'] = 'aes256-CBC';
	oids['aes256-CBC'] = '2.16.840.1.101.3.4.1.42';

	// certificate issuer/subject OIDs
	oids['2.5.4.3'] = 'commonName';
	oids['commonName'] = '2.5.4.3';
	oids['2.5.4.5'] = 'serialName';
	oids['serialName'] = '2.5.4.5';
	oids['2.5.4.6'] = 'countryName';
	oids['countryName'] = '2.5.4.6';
	oids['2.5.4.7'] = 'localityName';
	oids['localityName'] = '2.5.4.7';
	oids['2.5.4.8'] = 'stateOrProvinceName';
	oids['stateOrProvinceName'] = '2.5.4.8';
	oids['2.5.4.10'] = 'organizationName';
	oids['organizationName'] = '2.5.4.10';
	oids['2.5.4.11'] = 'organizationalUnitName';
	oids['organizationalUnitName'] = '2.5.4.11';

	// X.509 extension OIDs
	oids['2.16.840.1.113730.1.1'] = 'nsCertType';
	oids['nsCertType'] = '2.16.840.1.113730.1.1';
	oids['2.5.29.1'] = 'authorityKeyIdentifier'; // deprecated, use .35
	oids['2.5.29.2'] = 'keyAttributes'; // obsolete use .37 or .15
	oids['2.5.29.3'] = 'certificatePolicies'; // deprecated, use .32
	oids['2.5.29.4'] = 'keyUsageRestriction'; // obsolete use .37 or .15
	oids['2.5.29.5'] = 'policyMapping'; // deprecated use .33
	oids['2.5.29.6'] = 'subtreesConstraint'; // obsolete use .30
	oids['2.5.29.7'] = 'subjectAltName'; // deprecated use .17
	oids['2.5.29.8'] = 'issuerAltName'; // deprecated use .18
	oids['2.5.29.9'] = 'subjectDirectoryAttributes';
	oids['2.5.29.10'] = 'basicConstraints'; // deprecated use .19
	oids['2.5.29.11'] = 'nameConstraints'; // deprecated use .30
	oids['2.5.29.12'] = 'policyConstraints'; // deprecated use .36
	oids['2.5.29.13'] = 'basicConstraints'; // deprecated use .19
	oids['2.5.29.14'] = 'subjectKeyIdentifier';
	oids['subjectKeyIdentifier'] = '2.5.29.14';
	oids['2.5.29.15'] = 'keyUsage';
	oids['keyUsage'] = '2.5.29.15';
	oids['2.5.29.16'] = 'privateKeyUsagePeriod';
	oids['2.5.29.17'] = 'subjectAltName';
	oids['subjectAltName'] = '2.5.29.17';
	oids['2.5.29.18'] = 'issuerAltName';
	oids['issuerAltName'] = '2.5.29.18';
	oids['2.5.29.19'] = 'basicConstraints';
	oids['basicConstraints'] = '2.5.29.19';
	oids['2.5.29.20'] = 'cRLNumber';
	oids['2.5.29.21'] = 'cRLReason';
	oids['2.5.29.22'] = 'expirationDate';
	oids['2.5.29.23'] = 'instructionCode';
	oids['2.5.29.24'] = 'invalidityDate';
	oids['2.5.29.25'] = 'cRLDistributionPoints'; // deprecated use .31
	oids['2.5.29.26'] = 'issuingDistributionPoint'; // deprecated use .28
	oids['2.5.29.27'] = 'deltaCRLIndicator';
	oids['2.5.29.28'] = 'issuingDistributionPoint';
	oids['2.5.29.29'] = 'certificateIssuer';
	oids['2.5.29.30'] = 'nameConstraints';
	oids['2.5.29.31'] = 'cRLDistributionPoints';
	oids['2.5.29.32'] = 'certificatePolicies';
	oids['2.5.29.33'] = 'policyMappings';
	oids['2.5.29.34'] = 'policyConstraints'; // deprecated use .36
	oids['2.5.29.35'] = 'authorityKeyIdentifier';
	oids['2.5.29.36'] = 'policyConstraints';
	oids['2.5.29.37'] = 'extKeyUsage';
	oids['extKeyUsage'] = '2.5.29.37';
	oids['2.5.29.46'] = 'freshestCRL';
	oids['2.5.29.54'] = 'inhibitAnyPolicy';

	// extKeyUsage purposes
	oids['1.3.6.1.5.5.7.3.1'] = 'serverAuth';
	oids['serverAuth'] = '1.3.6.1.5.5.7.3.1';
	oids['1.3.6.1.5.5.7.3.2'] = 'clientAuth';
	oids['clientAuth'] = '1.3.6.1.5.5.7.3.2';
	oids['1.3.6.1.5.5.7.3.3'] = 'codeSigning';
	oids['codeSigning'] = '1.3.6.1.5.5.7.3.3';
	oids['1.3.6.1.5.5.7.3.4'] = 'emailProtection';
	oids['emailProtection'] = '1.3.6.1.5.5.7.3.4';
	oids['1.3.6.1.5.5.7.3.8'] = 'timeStamping';
	oids['timeStamping'] = '1.3.6.1.5.5.7.3.8';

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'oids';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/oids',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of Abstract Syntax Notation Number One.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 *
	 * An API for storing data using the Abstract Syntax Notation Number One
	 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
	 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
	 * implementation exists for that purpose.
	 *
	 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
	 * syntax of information without restricting the way the information is encoded
	 * for transmission. It provides a standard that allows for open systems
	 * communication. ASN.1 defines the syntax of information data and a number of
	 * simple data types as well as a notation for describing them and specifying
	 * values for them.
	 *
	 * The RSA algorithm creates public and private keys that are often stored in
	 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
	 * class provides the most basic functionality required to store and load DSA
	 * keys that are encoded according to ASN.1.
	 *
	 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
	 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
	 * has stricter requirements for how data must be encoded.
	 *
	 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
	 * and a byte array for the value of this ASN1 structure which may be data or a
	 * list of ASN.1 structures.
	 *
	 * Each ASN.1 structure using BER is (Tag-Length-Value):
	 *
	 * | byte 0 | bytes X | bytes Y |
	 * |--------|---------|----------
	 * |  tag   | length  |  value  |
	 *
	 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
	 * be two or more octets, but that is not supported by this class. A tag is
	 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
	 * particular 'class'), 6 indicates whether or not the ASN.1 value is
	 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
	 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
	 * then the class is APPLICATION. If only bit 8 is set, then the class is
	 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
	 * The tag numbers for the data types for the class UNIVERSAL are listed below:
	 *
	 * UNIVERSAL 0 Reserved for use by the encoding rules
	 * UNIVERSAL 1 Boolean type
	 * UNIVERSAL 2 Integer type
	 * UNIVERSAL 3 Bitstring type
	 * UNIVERSAL 4 Octetstring type
	 * UNIVERSAL 5 Null type
	 * UNIVERSAL 6 Object identifier type
	 * UNIVERSAL 7 Object descriptor type
	 * UNIVERSAL 8 External type and Instance-of type
	 * UNIVERSAL 9 Real type
	 * UNIVERSAL 10 Enumerated type
	 * UNIVERSAL 11 Embedded-pdv type
	 * UNIVERSAL 12 UTF8String type
	 * UNIVERSAL 13 Relative object identifier type
	 * UNIVERSAL 14-15 Reserved for future editions
	 * UNIVERSAL 16 Sequence and Sequence-of types
	 * UNIVERSAL 17 Set and Set-of types
	 * UNIVERSAL 18-22, 25-30 Character string types
	 * UNIVERSAL 23-24 Time types
	 *
	 * The length of an ASN.1 structure is specified after the tag identifier.
	 * There is a definite form and an indefinite form. The indefinite form may
	 * be used if the encoding is constructed and not all immediately available.
	 * The indefinite form is encoded using a length byte with only the 8th bit
	 * set. The end of the constructed object is marked using end-of-contents
	 * octets (two zero bytes).
	 *
	 * The definite form looks like this:
	 *
	 * The length may take up 1 or more bytes, it depends on the length of the
	 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
	 * structure has a value that has a length greater than 127, more than 1 byte
	 * will be used to store its length, otherwise just one byte will be used.
	 * This is strict.
	 *
	 * In the case that the length of the ASN.1 value is less than 127, 1 octet
	 * (byte) is used to store the "short form" length. The 8th bit has a value of
	 * 0 indicating the length is "short form" and not "long form" and bits 7-1
	 * give the length of the data. (The 8th bit is the left-most, most significant
	 * bit: also known as big endian or network format).
	 *
	 * In the case that the length of the ASN.1 value is greater than 127, 2 to
	 * 127 octets (bytes) are used to store the "long form" length. The first
	 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
	 * give the number of additional octets. All following octets are in base 256
	 * with the most significant digit first (typical big-endian binary unsigned
	 * integer storage). So, for instance, if the length of a value was 257, the
	 * first byte would be set to:
	 *
	 * 10000010 = 130 = 0x82.
	 *
	 * This indicates there are 2 octets (base 256) for the length. The second and
	 * third bytes (the octets just mentioned) would store the length in base 256:
	 *
	 * octet 2: 00000001 = 1 * 256^1 = 256
	 * octet 3: 00000001 = 1 * 256^0 = 1
	 * total = 257
	 *
	 * The algorithm for converting a js integer value of 257 to base-256 is:
	 *
	 * var value = 257;
	 * var bytes = [];
	 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
	 * bytes[1] = value & 0xFF;        // least significant byte last
	 *
	 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
	 *
	 * An OID can be written like: "value1.value2.value3...valueN"
	 *
	 * The DER encoding rules:
	 *
	 * The first byte has the value 40 * value1 + value2.
	 * The following bytes, if any, encode the remaining values. Each value is
	 * encoded in base 128, most significant digit first (big endian), with as
	 * few digits as possible, and the most significant bit of each byte set
	 * to 1 except the last in each value's encoding. For example: Given the
	 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
	 * last one in each encoding is OR'd with 0x80):
	 *
	 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
	 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
	 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
	 *
	 * The final value is: 0x2A864886F70D.
	 * The full OID (including ASN.1 tag and length of 6 bytes) is:
	 * 0x06062A864886F70D
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* ASN.1 API */
	var asn1 = forge.asn1 = forge.asn1 || {};

	/**
	 * ASN.1 classes.
	 */
	asn1.Class = {
	  UNIVERSAL:        0x00,
	  APPLICATION:      0x40,
	  CONTEXT_SPECIFIC: 0x80,
	  PRIVATE:          0xC0
	};

	/**
	 * ASN.1 types. Not all types are supported by this implementation, only
	 * those necessary to implement a simple PKI are implemented.
	 */
	asn1.Type = {
	  NONE:             0,
	  BOOLEAN:          1,
	  INTEGER:          2,
	  BITSTRING:        3,
	  OCTETSTRING:      4,
	  NULL:             5,
	  OID:              6,
	  ODESC:            7,
	  EXTERNAL:         8,
	  REAL:             9,
	  ENUMERATED:      10,
	  EMBEDDED:        11,
	  UTF8:            12,
	  ROID:            13,
	  SEQUENCE:        16,
	  SET:             17,
	  PRINTABLESTRING: 19,
	  IA5STRING:       22,
	  UTCTIME:         23,
	  GENERALIZEDTIME: 24,
	  BMPSTRING:       30
	};

	/**
	 * Creates a new asn1 object.
	 *
	 * @param tagClass the tag class for the object.
	 * @param type the data type (tag number) for the object.
	 * @param constructed true if the asn1 object is in constructed form.
	 * @param value the value for the object, if it is not constructed.
	 *
	 * @return the asn1 object.
	 */
	asn1.create = function(tagClass, type, constructed, value) {
	  /* An asn1 object has a tagClass, a type, a constructed flag, and a
	    value. The value's type depends on the constructed flag. If
	    constructed, it will contain a list of other asn1 objects. If not,
	    it will contain the ASN.1 value as an array of bytes formatted
	    according to the ASN.1 data type. */

	  // remove undefined values
	  if(forge.util.isArray(value)) {
	    var tmp = [];
	    for(var i = 0; i < value.length; ++i) {
	      if(value[i] !== undefined) {
	        tmp.push(value[i]);
	      }
	    }
	    value = tmp;
	  }

	  return {
	    tagClass: tagClass,
	    type: type,
	    constructed: constructed,
	    composed: constructed || forge.util.isArray(value),
	    value: value
	  };
	};

	/**
	 * Gets the length of a BER-encoded ASN.1 value.
	 *
	 * In case the length is not specified, undefined is returned.
	 *
	 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
	 *          length byte.
	 *
	 * @return the length of the BER-encoded ASN.1 value or undefined.
	 */
	var _getValueLength = asn1.getBerValueLength = function(b) {
	  // TODO: move this function and related DER/BER functions to a der.js
	  // file; better abstract ASN.1 away from der/ber.
	  var b2 = b.getByte();
	  if(b2 === 0x80) {
	    return undefined;
	  }

	  // see if the length is "short form" or "long form" (bit 8 set)
	  var length;
	  var longForm = b2 & 0x80;
	  if(!longForm) {
	    // length is just the first byte
	    length = b2;
	  } else {
	    // the number of bytes the length is specified in bits 7 through 1
	    // and each length byte is in big-endian base-256
	    length = b.getInt((b2 & 0x7F) << 3);
	  }
	  return length;
	};

	/**
	 * Parses an asn1 object from a byte buffer in DER format.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param strict true to be strict when checking value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the parsed asn1 object.
	 */
	asn1.fromDer = function(bytes, strict) {
	  if(strict === undefined) {
	    strict = true;
	  }

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  // minimum length for ASN.1 DER structure is 2
	  if(bytes.length() < 2) {
	    var error = new Error('Too few bytes to parse DER.');
	    error.bytes = bytes.length();
	    throw error;
	  }

	  // get the first byte
	  var b1 = bytes.getByte();

	  // get the tag class
	  var tagClass = (b1 & 0xC0);

	  // get the type (bits 1-5)
	  var type = b1 & 0x1F;

	  // get the value length
	  var length = _getValueLength(bytes);

	  // ensure there are enough bytes to get the value
	  if(bytes.length() < length) {
	    if(strict) {
	      var error = new Error('Too few bytes to read ASN.1 value.');
	      error.detail = bytes.length() + ' < ' + length;
	      throw error;
	    }
	    // Note: be lenient with truncated values
	    length = bytes.length();
	  }

	  // prepare to get value
	  var value;

	  // constructed flag is bit 6 (32 = 0x20) of the first byte
	  var constructed = ((b1 & 0x20) === 0x20);

	  // determine if the value is composed of other ASN.1 objects (if its
	  // constructed it will be and if its a BITSTRING it may be)
	  var composed = constructed;
	  if(!composed && tagClass === asn1.Class.UNIVERSAL &&
	    type === asn1.Type.BITSTRING && length > 1) {
	    /* The first octet gives the number of bits by which the length of the
	      bit string is less than the next multiple of eight (this is called
	      the "number of unused bits").

	      The second and following octets give the value of the bit string
	      converted to an octet string. */
	    // if there are no unused bits, maybe the bitstring holds ASN.1 objs
	    var read = bytes.read;
	    var unused = bytes.getByte();
	    if(unused === 0) {
	      // if the first byte indicates UNIVERSAL or CONTEXT_SPECIFIC,
	      // and the length is valid, assume we've got an ASN.1 object
	      b1 = bytes.getByte();
	      var tc = (b1 & 0xC0);
	      if(tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC) {
	        try {
	          var len = _getValueLength(bytes);
	          composed = (len === length - (bytes.read - read));
	          if(composed) {
	            // adjust read/length to account for unused bits byte
	            ++read;
	            --length;
	          }
	        } catch(ex) {}
	      }
	    }
	    // restore read pointer
	    bytes.read = read;
	  }

	  if(composed) {
	    // parse child asn1 objects from the value
	    value = [];
	    if(length === undefined) {
	      // asn1 object of indefinite length, read until end tag
	      for(;;) {
	        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {
	          bytes.getBytes(2);
	          break;
	        }
	        value.push(asn1.fromDer(bytes, strict));
	      }
	    } else {
	      // parsing asn1 object of definite length
	      var start = bytes.length();
	      while(length > 0) {
	        value.push(asn1.fromDer(bytes, strict));
	        length -= start - bytes.length();
	        start = bytes.length();
	      }
	    }
	  } else {
	    // asn1 not composed, get raw value
	    // TODO: do DER to OID conversion and vice-versa in .toDer?

	    if(length === undefined) {
	      if(strict) {
	        throw new Error('Non-constructed ASN.1 object of indefinite length.');
	      }
	      // be lenient and use remaining bytes
	      length = bytes.length();
	    }

	    if(type === asn1.Type.BMPSTRING) {
	      value = '';
	      for(var i = 0; i < length; i += 2) {
	        value += String.fromCharCode(bytes.getInt16());
	      }
	    } else {
	      value = bytes.getBytes(length);
	    }
	  }

	  // create and return asn1 object
	  return asn1.create(tagClass, type, constructed, value);
	};

	/**
	 * Converts the given asn1 object to a buffer of bytes in DER format.
	 *
	 * @param asn1 the asn1 object to convert to bytes.
	 *
	 * @return the buffer of bytes.
	 */
	asn1.toDer = function(obj) {
	  var bytes = forge.util.createBuffer();

	  // build the first byte
	  var b1 = obj.tagClass | obj.type;

	  // for storing the ASN.1 value
	  var value = forge.util.createBuffer();

	  // if composed, use each child asn1 object's DER bytes as value
	  if(obj.composed) {
	    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
	    // from other asn1 objects
	    if(obj.constructed) {
	      b1 |= 0x20;
	    } else {
	      // type is a bit string, add unused bits of 0x00
	      value.putByte(0x00);
	    }

	    // add all of the child DER bytes together
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        value.putBuffer(asn1.toDer(obj.value[i]));
	      }
	    }
	  } else {
	    // use asn1.value directly
	    if(obj.type === asn1.Type.BMPSTRING) {
	      for(var i = 0; i < obj.value.length; ++i) {
	        value.putInt16(obj.value.charCodeAt(i));
	      }
	    } else {
	      value.putBytes(obj.value);
	    }
	  }

	  // add tag byte
	  bytes.putByte(b1);

	  // use "short form" encoding
	  if(value.length() <= 127) {
	    // one byte describes the length
	    // bit 8 = 0 and bits 7-1 = length
	    bytes.putByte(value.length() & 0x7F);
	  } else {
	    // use "long form" encoding
	    // 2 to 127 bytes describe the length
	    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
	    // other bytes: length in base 256, big-endian
	    var len = value.length();
	    var lenBytes = '';
	    do {
	      lenBytes += String.fromCharCode(len & 0xFF);
	      len = len >>> 8;
	    } while(len > 0);

	    // set first byte to # bytes used to store the length and turn on
	    // bit 8 to indicate long-form length is used
	    bytes.putByte(lenBytes.length | 0x80);

	    // concatenate length bytes in reverse since they were generated
	    // little endian and we need big endian
	    for(var i = lenBytes.length - 1; i >= 0; --i) {
	      bytes.putByte(lenBytes.charCodeAt(i));
	    }
	  }

	  // concatenate value bytes
	  bytes.putBuffer(value);
	  return bytes;
	};

	/**
	 * Converts an OID dot-separated string to a byte buffer. The byte buffer
	 * contains only the DER-encoded value, not any tag or length bytes.
	 *
	 * @param oid the OID dot-separated string.
	 *
	 * @return the byte buffer.
	 */
	asn1.oidToDer = function(oid) {
	  // split OID into individual values
	  var values = oid.split('.');
	  var bytes = forge.util.createBuffer();

	  // first byte is 40 * value1 + value2
	  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var last, valueBytes, value, b;
	  for(var i = 2; i < values.length; ++i) {
	    // produce value bytes in reverse because we don't know how many
	    // bytes it will take to store the value
	    last = true;
	    valueBytes = [];
	    value = parseInt(values[i], 10);
	    do {
	      b = value & 0x7F;
	      value = value >>> 7;
	      // if value is not last, then turn on 8th bit
	      if(!last) {
	        b |= 0x80;
	      }
	      valueBytes.push(b);
	      last = false;
	    } while(value > 0);

	    // add value bytes in reverse (needs to be in big endian)
	    for(var n = valueBytes.length - 1; n >= 0; --n) {
	      bytes.putByte(valueBytes[n]);
	    }
	  }

	  return bytes;
	};

	/**
	 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
	 * byte buffer should contain only the DER-encoded value, not any tag or
	 * length bytes.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the OID dot-separated string.
	 */
	asn1.derToOid = function(bytes) {
	  var oid;

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  // first byte is 40 * value1 + value2
	  var b = bytes.getByte();
	  oid = Math.floor(b / 40) + '.' + (b % 40);

	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var value = 0;
	  while(bytes.length() > 0) {
	    b = bytes.getByte();
	    value = value << 7;
	    // not the last byte for the value
	    if(b & 0x80) {
	      value += b & 0x7F;
	    } else {
	      // last byte
	      oid += '.' + (value + b);
	      value = 0;
	    }
	  }

	  return oid;
	};

	/**
	 * Converts a UTCTime value to a date.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates passed 2049. Parsing that structure hasn't been implemented yet.
	 *
	 * @param utc the UTCTime value to convert.
	 *
	 * @return the date.
	 */
	asn1.utcTimeToDate = function(utc) {
	  /* The following formats can be used:

	    YYMMDDhhmmZ
	    YYMMDDhhmm+hh'mm'
	    YYMMDDhhmm-hh'mm'
	    YYMMDDhhmmssZ
	    YYMMDDhhmmss+hh'mm'
	    YYMMDDhhmmss-hh'mm'

	    Where:

	    YY is the least significant two digits of the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  // if YY >= 50 use 19xx, if YY < 50 use 20xx
	  var year = parseInt(utc.substr(0, 2), 10);
	  year = (year >= 50) ? 1900 + year : 2000 + year;
	  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(utc.substr(4, 2), 10);
	  var hh = parseInt(utc.substr(6, 2), 10);
	  var mm = parseInt(utc.substr(8, 2), 10);
	  var ss = 0;

	  // not just YYMMDDhhmmZ
	  if(utc.length > 11) {
	    // get character after minutes
	    var c = utc.charAt(10);
	    var end = 10;

	    // see if seconds are present
	    if(c !== '+' && c !== '-') {
	      // get seconds
	      ss = parseInt(utc.substr(10, 2), 10);
	      end += 2;
	    }
	  }

	  // update date
	  date.setUTCFullYear(year, MM, DD);
	  date.setUTCHours(hh, mm, ss, 0);

	  if(end) {
	    // get +/- after end of time
	    c = utc.charAt(end);
	    if(c === '+' || c === '-') {
	      // get hours+minutes offset
	      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
	      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

	      // calculate offset in milliseconds
	      var offset = hhoffset * 60 + mmoffset;
	      offset *= 60000;

	      // apply offset
	      if(c === '+') {
	        date.setTime(+date - offset);
	      } else {
	        date.setTime(+date + offset);
	      }
	    }
	  }

	  return date;
	};

	/**
	 * Converts a GeneralizedTime value to a date.
	 *
	 * @param gentime the GeneralizedTime value to convert.
	 *
	 * @return the date.
	 */
	asn1.generalizedTimeToDate = function(gentime) {
	  /* The following formats can be used:

	    YYYYMMDDHHMMSS
	    YYYYMMDDHHMMSS.fff
	    YYYYMMDDHHMMSSZ
	    YYYYMMDDHHMMSS.fffZ
	    YYYYMMDDHHMMSS+hh'mm'
	    YYYYMMDDHHMMSS.fff+hh'mm'
	    YYYYMMDDHHMMSS-hh'mm'
	    YYYYMMDDHHMMSS.fff-hh'mm'

	    Where:

	    YYYY is the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    .fff is the second fraction, accurate to three decimal places
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  var YYYY = parseInt(gentime.substr(0, 4), 10);
	  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(gentime.substr(6, 2), 10);
	  var hh = parseInt(gentime.substr(8, 2), 10);
	  var mm = parseInt(gentime.substr(10, 2), 10);
	  var ss = parseInt(gentime.substr(12, 2), 10);
	  var fff = 0;
	  var offset = 0;
	  var isUTC = false;

	  if(gentime.charAt(gentime.length - 1) === 'Z') {
	    isUTC = true;
	  }

	  var end = gentime.length - 5, c = gentime.charAt(end);
	  if(c === '+' || c === '-') {
	    // get hours+minutes offset
	    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
	    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

	    // calculate offset in milliseconds
	    offset = hhoffset * 60 + mmoffset;
	    offset *= 60000;

	    // apply offset
	    if(c === '+') {
	      offset *= -1;
	    }

	    isUTC = true;
	  }

	  // check for second fraction
	  if(gentime.charAt(14) === '.') {
	    fff = parseFloat(gentime.substr(14), 10) * 1000;
	  }

	  if(isUTC) {
	    date.setUTCFullYear(YYYY, MM, DD);
	    date.setUTCHours(hh, mm, ss, fff);

	    // apply offset
	    date.setTime(+date + offset);
	  } else {
	    date.setFullYear(YYYY, MM, DD);
	    date.setHours(hh, mm, ss, fff);
	  }

	  return date;
	};

	/**
	 * Converts a date to a UTCTime value.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates passed 2049. Converting to a GeneralizedTime hasn't been
	 * implemented yet.
	 *
	 * @param date the date to convert.
	 *
	 * @return the UTCTime value.
	 */
	asn1.dateToUtcTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYMMDDhhmmssZ
	  var format = [];
	  format.push(('' + date.getUTCFullYear()).substr(2));
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a date to a GeneralizedTime value.
	 *
	 * @param date the date to convert.
	 *
	 * @return the GeneralizedTime value as a string.
	 */
	asn1.dateToGeneralizedTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYYYMMDDHHMMSSZ
	  var format = [];
	  format.push('' + date.getUTCFullYear());
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a javascript integer to a DER-encoded byte buffer to be used
	 * as the value for an INTEGER type.
	 *
	 * @param x the integer.
	 *
	 * @return the byte buffer.
	 */
	asn1.integerToDer = function(x) {
	  var rval = forge.util.createBuffer();
	  if(x >= -0x80 && x < 0x80) {
	    return rval.putSignedInt(x, 8);
	  }
	  if(x >= -0x8000 && x < 0x8000) {
	    return rval.putSignedInt(x, 16);
	  }
	  if(x >= -0x800000 && x < 0x800000) {
	    return rval.putSignedInt(x, 24);
	  }
	  if(x >= -0x80000000 && x < 0x80000000) {
	    return rval.putSignedInt(x, 32);
	  }
	  var error = new Error('Integer too large; max is 32-bits.');
	  error.integer = x;
	  throw error;
	};

	/**
	 * Converts a DER-encoded byte buffer to a javascript integer. This is
	 * typically used to decode the value of an INTEGER type.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the integer.
	 */
	asn1.derToInteger = function(bytes) {
	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge.util.createBuffer(bytes);
	  }

	  var n = bytes.length() * 8;
	  if(n > 32) {
	    throw new Error('Integer too large; max is 32-bits.');
	  }
	  return bytes.getSignedInt(n);
	};

	/**
	 * Validates the that given ASN.1 object is at least a super set of the
	 * given ASN.1 structure. Only tag classes and types are checked. An
	 * optional map may also be provided to capture ASN.1 values while the
	 * structure is checked.
	 *
	 * To capture an ASN.1 value, set an object in the validator's 'capture'
	 * parameter to the key to use in the capture map. To capture the full
	 * ASN.1 object, specify 'captureAsn1'.
	 *
	 * Objects in the validator may set a field 'optional' to true to indicate
	 * that it isn't necessary to pass validation.
	 *
	 * @param obj the ASN.1 object to validate.
	 * @param v the ASN.1 structure validator.
	 * @param capture an optional map to capture values in.
	 * @param errors an optional array for storing validation errors.
	 *
	 * @return true on success, false on failure.
	 */
	asn1.validate = function(obj, v, capture, errors) {
	  var rval = false;

	  // ensure tag class and type are the same if specified
	  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&
	    (obj.type === v.type || typeof(v.type) === 'undefined')) {
	    // ensure constructed flag is the same if specified
	    if(obj.constructed === v.constructed ||
	      typeof(v.constructed) === 'undefined') {
	      rval = true;

	      // handle sub values
	      if(v.value && forge.util.isArray(v.value)) {
	        var j = 0;
	        for(var i = 0; rval && i < v.value.length; ++i) {
	          rval = v.value[i].optional || false;
	          if(obj.value[j]) {
	            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);
	            if(rval) {
	              ++j;
	            } else if(v.value[i].optional) {
	              rval = true;
	            }
	          }
	          if(!rval && errors) {
	            errors.push(
	              '[' + v.name + '] ' +
	              'Tag class "' + v.tagClass + '", type "' +
	              v.type + '" expected value length "' +
	              v.value.length + '", got "' +
	              obj.value.length + '"');
	          }
	        }
	      }

	      if(rval && capture) {
	        if(v.capture) {
	          capture[v.capture] = obj.value;
	        }
	        if(v.captureAsn1) {
	          capture[v.captureAsn1] = obj;
	        }
	      }
	    } else if(errors) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected constructed "' + v.constructed + '", got "' +
	        obj.constructed + '"');
	    }
	  } else if(errors) {
	    if(obj.tagClass !== v.tagClass) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected tag class "' + v.tagClass + '", got "' +
	        obj.tagClass + '"');
	    }
	    if(obj.type !== v.type) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected type "' + v.type + '", got "' + obj.type + '"');
	    }
	  }
	  return rval;
	};

	// regex for testing for non-latin characters
	var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

	/**
	 * Pretty prints an ASN.1 object to a string.
	 *
	 * @param obj the object to write out.
	 * @param level the level in the tree.
	 * @param indentation the indentation to use.
	 *
	 * @return the string.
	 */
	asn1.prettyPrint = function(obj, level, indentation) {
	  var rval = '';

	  // set default level and indentation
	  level = level || 0;
	  indentation = indentation || 2;

	  // start new line for deep levels
	  if(level > 0) {
	    rval += '\n';
	  }

	  // create indent
	  var indent = '';
	  for(var i = 0; i < level * indentation; ++i) {
	    indent += ' ';
	  }

	  // print class:type
	  rval += indent + 'Tag: ';
	  switch(obj.tagClass) {
	  case asn1.Class.UNIVERSAL:
	    rval += 'Universal:';
	    break;
	  case asn1.Class.APPLICATION:
	    rval += 'Application:';
	    break;
	  case asn1.Class.CONTEXT_SPECIFIC:
	    rval += 'Context-Specific:';
	    break;
	  case asn1.Class.PRIVATE:
	    rval += 'Private:';
	    break;
	  }

	  if(obj.tagClass === asn1.Class.UNIVERSAL) {
	    rval += obj.type;

	    // known types
	    switch(obj.type) {
	    case asn1.Type.NONE:
	      rval += ' (None)';
	      break;
	    case asn1.Type.BOOLEAN:
	      rval += ' (Boolean)';
	      break;
	    case asn1.Type.BITSTRING:
	      rval += ' (Bit string)';
	      break;
	    case asn1.Type.INTEGER:
	      rval += ' (Integer)';
	      break;
	    case asn1.Type.OCTETSTRING:
	      rval += ' (Octet string)';
	      break;
	    case asn1.Type.NULL:
	      rval += ' (Null)';
	      break;
	    case asn1.Type.OID:
	      rval += ' (Object Identifier)';
	      break;
	    case asn1.Type.ODESC:
	      rval += ' (Object Descriptor)';
	      break;
	    case asn1.Type.EXTERNAL:
	      rval += ' (External or Instance of)';
	      break;
	    case asn1.Type.REAL:
	      rval += ' (Real)';
	      break;
	    case asn1.Type.ENUMERATED:
	      rval += ' (Enumerated)';
	      break;
	    case asn1.Type.EMBEDDED:
	      rval += ' (Embedded PDV)';
	      break;
	    case asn1.Type.UTF8:
	      rval += ' (UTF8)';
	      break;
	    case asn1.Type.ROID:
	      rval += ' (Relative Object Identifier)';
	      break;
	    case asn1.Type.SEQUENCE:
	      rval += ' (Sequence)';
	      break;
	    case asn1.Type.SET:
	      rval += ' (Set)';
	      break;
	    case asn1.Type.PRINTABLESTRING:
	      rval += ' (Printable String)';
	      break;
	    case asn1.Type.IA5String:
	      rval += ' (IA5String (ASCII))';
	      break;
	    case asn1.Type.UTCTIME:
	      rval += ' (UTC time)';
	      break;
	    case asn1.Type.GENERALIZEDTIME:
	      rval += ' (Generalized time)';
	      break;
	    case asn1.Type.BMPSTRING:
	      rval += ' (BMP String)';
	      break;
	    }
	  } else {
	    rval += obj.type;
	  }

	  rval += '\n';
	  rval += indent + 'Constructed: ' + obj.constructed + '\n';

	  if(obj.composed) {
	    var subvalues = 0;
	    var sub = '';
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        subvalues += 1;
	        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);
	        if((i + 1) < obj.value.length) {
	          sub += ',';
	        }
	      }
	    }
	    rval += indent + 'Sub values: ' + subvalues + sub;
	  } else {
	    rval += indent + 'Value: ';
	    if(obj.type === asn1.Type.OID) {
	      var oid = asn1.derToOid(obj.value);
	      rval += oid;
	      if(forge.pki && forge.pki.oids) {
	        if(oid in forge.pki.oids) {
	          rval += ' (' + forge.pki.oids[oid] + ') ';
	        }
	      }
	    }
	    if(obj.type === asn1.Type.INTEGER) {
	      try {
	        rval += asn1.derToInteger(obj.value);
	      } catch(ex) {
	        rval += '0x' + forge.util.bytesToHex(obj.value);
	      }
	    } else if(obj.type === asn1.Type.OCTETSTRING) {
	      if(!_nonLatinRegex.test(obj.value)) {
	        rval += '(' + obj.value + ') ';
	      }
	      rval += '0x' + forge.util.bytesToHex(obj.value);
	    } else if(obj.type === asn1.Type.UTF8) {
	      rval += forge.util.decodeUtf8(obj.value);
	    } else if(obj.type === asn1.Type.PRINTABLESTRING ||
	      obj.type === asn1.Type.IA5String) {
	      rval += obj.value;
	    } else if(_nonLatinRegex.test(obj.value)) {
	      rval += '0x' + forge.util.bytesToHex(obj.value);
	    } else if(obj.value.length === 0) {
	      rval += '[null]';
	    } else {
	      rval += obj.value;
	    }
	  }

	  return rval;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'asn1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/asn1',['require', 'module', './util', './oids'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Message Digest Algorithm 5 with 128-bit digest (MD5) implementation.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var md5 = forge.md5 = forge.md5 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.md5 = forge.md.algorithms.md5 = md5;

	/**
	 * Creates an MD5 message digest object.
	 *
	 * @return a message digest object.
	 */
	md5.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // MD5 state contains four 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(16);

	  // message digest object
	  var md = {
	    algorithm: 'md5',
	    blockLength: 64,
	    digestLength: 16,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x67452301,
	      h1: 0xEFCDAB89,
	      h2: 0x98BADCFE,
	      h3: 0x10325476
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate MD5 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in little-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry
	    var bits, carry = 0;
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      bits = md.fullMessageLength[i] * 8 + carry;
	      carry = (bits / 0x100000000) >>> 0;
	      finalBlock.putInt32Le(bits >>> 0);
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32Le(s2.h0);
	    rval.putInt32Le(s2.h1);
	    rval.putInt32Le(s2.h2);
	    rval.putInt32Le(s2.h3);
	    return rval;
	  };

	  return md;
	};

	// padding, constant tables for calculating md5
	var _padding = null;
	var _g = null;
	var _r = null;
	var _k = null;
	var _initialized = false;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // g values
	  _g = [
	    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	    1, 6, 11, 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12,
	    5, 8, 11, 14, 1, 4, 7, 10, 13, 0, 3, 6, 9, 12, 15, 2,
	    0, 7, 14, 5, 12, 3, 10, 1, 8, 15, 6, 13, 4, 11, 2, 9];

	  // rounds table
	  _r = [
	    7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,  7, 12, 17, 22,
	    5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,  5,  9, 14, 20,
	    4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,  4, 11, 16, 23,
	    6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21,  6, 10, 15, 21];

	  // get the result of abs(sin(i + 1)) as a 32-bit integer
	  _k = new Array(64);
	  for(var i = 0; i < 64; ++i) {
	    _k[i] = Math.floor(Math.abs(Math.sin(i + 1)) * 0x100000000);
	  }

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates an MD5 state with the given byte buffer.
	 *
	 * @param s the MD5 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, f, r, i;
	  var len = bytes.length();
	  while(len >= 64) {
	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;

	    // round 1
	    for(i = 0; i < 16; ++i) {
	      w[i] = bytes.getInt32Le();
	      f = d ^ (b & (c ^ d));
	      t = (a + f + _k[i] + w[i]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      f = c ^ (d & (b ^ c));
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 3
	    for(; i < 48; ++i) {
	      f = b ^ c ^ d;
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }
	    // round 4
	    for(; i < 64; ++i) {
	      f = c ^ (b | ~d);
	      t = (a + f + _k[i] + w[_g[i]]);
	      r = _r[i];
	      a = d;
	      d = c;
	      c = b;
	      b += (t << r) | (t >>> (32 - r));
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;

	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'md5';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/md5',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha1 = forge.sha1 = forge.sha1 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

	/**
	 * Creates a SHA-1 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha1.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // SHA-1 state contains five 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(80);

	  // message digest object
	  var md = {
	    algorithm: 'sha1',
	    blockLength: 64,
	    digestLength: 20,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x67452301,
	      h1: 0xEFCDAB89,
	      h2: 0x98BADCFE,
	      h3: 0x10325476,
	      h4: 0xC3D2E1F0
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	   /**
	    * Produces the digest.
	    *
	    * @return a byte buffer containing the digest value.
	    */
	   md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-1 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    return rval;
	  };

	  return md;
	};

	// sha-1 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-1 state with the given byte buffer.
	 *
	 * @param s the SHA-1 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, e, f, i;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 80 32-bit words according to SHA-1 algorithm
	    // and for 32-79 using Max Locktyukhin's optimization

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;

	    // round 1
	    for(i = 0; i < 16; ++i) {
	      t = bytes.getInt32();
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 20; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    for(; i < 40; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 3
	    for(; i < 60; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = (b & c) | (d & (b ^ c));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }
	    // round 4
	    for(; i < 80; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
	      e = d;
	      d = c;
	      c = (b << 30) | (b >>> 2);
	      b = a;
	      a = t;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;

	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha1',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
	 *
	 * See FIPS 180-2 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha256 = forge.sha256 = forge.sha256 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};
	forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

	/**
	 * Creates a SHA-256 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha256.create = function() {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  // SHA-256 state contains eight 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for word storage
	  var _w = new Array(64);

	  // message digest object
	  var md = {
	    algorithm: 'sha256',
	    blockLength: 64,
	    digestLength: 32,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _state = {
	      h0: 0x6A09E667,
	      h1: 0xBB67AE85,
	      h2: 0x3C6EF372,
	      h3: 0xA54FF53A,
	      h4: 0x510E527F,
	      h5: 0x9B05688C,
	      h6: 0x1F83D9AB,
	      h7: 0x5BE0CD19
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-256 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4,
	      h5: _state.h5,
	      h6: _state.h6,
	      h7: _state.h7
	    };
	    _update(s2, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    rval.putInt32(s2.h5);
	    rval.putInt32(s2.h6);
	    rval.putInt32(s2.h7);
	    return rval;
	  };

	  return md;
	};

	// sha-256 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	// table of constants
	var _k = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

	  // create K table for SHA-256
	  _k = [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-256 state with the given byte buffer.
	 *
	 * @param s the SHA-256 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 64 32-bit words according to SHA-256
	    for(i = 0; i < 16; ++i) {
	      w[i] = bytes.getInt32();
	    }
	    for(; i < 64; ++i) {
	      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
	      t1 = w[i - 2];
	      t1 =
	        ((t1 >>> 17) | (t1 << 15)) ^
	        ((t1 >>> 19) | (t1 << 13)) ^
	        (t1 >>> 10);
	      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
	      t2 = w[i - 15];
	      t2 =
	        ((t2 >>> 7) | (t2 << 25)) ^
	        ((t2 >>> 18) | (t2 << 14)) ^
	        (t2 >>> 3);
	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
	      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
	    }

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;
	    f = s.h5;
	    g = s.h6;
	    h = s.h7;

	    // round function
	    for(i = 0; i < 64; ++i) {
	      // Sum1(e)
	      s1 =
	        ((e >>> 6) | (e << 26)) ^
	        ((e >>> 11) | (e << 21)) ^
	        ((e >>> 25) | (e << 7));
	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch = g ^ (e & (f ^ g));
	      // Sum0(a)
	      s0 =
	        ((a >>> 2) | (a << 30)) ^
	        ((a >>> 13) | (a << 19)) ^
	        ((a >>> 22) | (a << 10));
	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj = (a & b) | (c & (a ^ b));

	      // main algorithm
	      t1 = h + s1 + ch + _k[i] + w[i];
	      t2 = s0 + maj;
	      h = g;
	      g = f;
	      f = e;
	      e = (d + t1) | 0;
	      d = c;
	      c = b;
	      b = a;
	      a = (t1 + t2) | 0;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;
	    s.h5 = (s.h5 + f) | 0;
	    s.h6 = (s.h6 + g) | 0;
	    s.h7 = (s.h7 + h) | 0;
	    len -= 64;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha256';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha256',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Secure Hash Algorithm with a 1024-bit block size implementation.
	 *
	 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
	 * SHA-256 (block size 512 bits), see sha256.js.
	 *
	 * See FIPS 180-4 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var sha512 = forge.sha512 = forge.sha512 || {};
	forge.md = forge.md || {};
	forge.md.algorithms = forge.md.algorithms || {};

	// SHA-512
	forge.md.sha512 = forge.md.algorithms.sha512 = sha512;

	// SHA-384
	var sha384 = forge.sha384 = forge.sha512.sha384 = forge.sha512.sha384 || {};
	sha384.create = function() {
	  return sha512.create('SHA-384');
	};
	forge.md.sha384 = forge.md.algorithms.sha384 = sha384;

	// SHA-512/256
	forge.sha512.sha256 = forge.sha512.sha256 || {
	  create: function() {
	    return sha512.create('SHA-512/256');
	  }
	};
	forge.md['sha512/256'] = forge.md.algorithms['sha512/256'] =
	  forge.sha512.sha256;

	// SHA-512/224
	forge.sha512.sha224 = forge.sha512.sha224 || {
	  create: function() {
	    return sha512.create('SHA-512/224');
	  }
	};
	forge.md['sha512/224'] = forge.md.algorithms['sha512/224'] =
	  forge.sha512.sha224;

	/**
	 * Creates a SHA-2 message digest object.
	 *
	 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
	 *          SHA-512/256).
	 *
	 * @return a message digest object.
	 */
	sha512.create = function(algorithm) {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  if(typeof algorithm === 'undefined') {
	    algorithm = 'SHA-512';
	  }

	  if(!(algorithm in _states)) {
	    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
	  }

	  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
	  var _state = _states[algorithm];
	  var _h = null;

	  // input buffer
	  var _input = forge.util.createBuffer();

	  // used for 64-bit word storage
	  var _w = new Array(80);
	  for(var wi = 0; wi < 80; ++wi) {
	    _w[wi] = new Array(2);
	  }

	  // message digest object
	  var md = {
	    // SHA-512 => sha512
	    algorithm: algorithm.replace('-', '').toLowerCase(),
	    blockLength: 128,
	    digestLength: 64,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 16
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength128 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength128 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge.util.createBuffer();
	    _h = new Array(_state.length);
	    for(var i = 0; i < _state.length; ++i) {
	      _h[i] = _state[i].slice(0);
	    }
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_h, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-512 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 896 mod 1024. In other words,
	    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 16 bytes (128
	    bits), that means that the last segment of the data must have 112 bytes
	    (896 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 896 mod 1024 because
	    1024 - 128 = 896.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 896 mod 1024, then 1024 padding bits must be added. */

	    var finalBlock = forge.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var messageLength = forge.util.createBuffer();
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next;
	    }

	    var h = new Array(_h.length);
	    for(var i = 0; i < _h.length; ++i) {
	      h[i] = _h[i].slice(0);
	    }
	    _update(h, _w, finalBlock);
	    var rval = forge.util.createBuffer();
	    var hlen;
	    if(algorithm === 'SHA-512') {
	      hlen = h.length;
	    } else if(algorithm === 'SHA-384') {
	      hlen = h.length - 2;
	    } else {
	      hlen = h.length - 4;
	    }
	    for(var i = 0; i < hlen; ++i) {
	      rval.putInt32(h[i][0]);
	      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {
	        rval.putInt32(h[i][1]);
	      }
	    }
	    return rval;
	  };

	  return md;
	};

	// sha-512 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	// table of constants
	var _k = null;

	// initial hash states
	var _states = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge.util.fillString(String.fromCharCode(0x00), 128);

	  // create K table for SHA-512
	  _k = [
	    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],
	    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],
	    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],
	    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],
	    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],
	    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],
	    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],
	    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],
	    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],
	    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],
	    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],
	    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],
	    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],
	    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],
	    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],
	    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],
	    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],
	    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],
	    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],
	    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],
	    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],
	    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],
	    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],
	    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],
	    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],
	    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],
	    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],
	    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],
	    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],
	    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],
	    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],
	    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],
	    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],
	    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],
	    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],
	    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],
	    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],
	    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],
	    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],
	    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]
	  ];

	  // initial hash states
	  _states = {};
	  _states['SHA-512'] = [
	    [0x6a09e667, 0xf3bcc908],
	    [0xbb67ae85, 0x84caa73b],
	    [0x3c6ef372, 0xfe94f82b],
	    [0xa54ff53a, 0x5f1d36f1],
	    [0x510e527f, 0xade682d1],
	    [0x9b05688c, 0x2b3e6c1f],
	    [0x1f83d9ab, 0xfb41bd6b],
	    [0x5be0cd19, 0x137e2179]
	  ];
	  _states['SHA-384'] = [
	    [0xcbbb9d5d, 0xc1059ed8],
	    [0x629a292a, 0x367cd507],
	    [0x9159015a, 0x3070dd17],
	    [0x152fecd8, 0xf70e5939],
	    [0x67332667, 0xffc00b31],
	    [0x8eb44a87, 0x68581511],
	    [0xdb0c2e0d, 0x64f98fa7],
	    [0x47b5481d, 0xbefa4fa4]
	  ];
	  _states['SHA-512/256'] = [
	    [0x22312194, 0xFC2BF72C],
	    [0x9F555FA3, 0xC84C64C2],
	    [0x2393B86B, 0x6F53B151],
	    [0x96387719, 0x5940EABD],
	    [0x96283EE2, 0xA88EFFE3],
	    [0xBE5E1E25, 0x53863992],
	    [0x2B0199FC, 0x2C85B8AA],
	    [0x0EB72DDC, 0x81C52CA2]
	  ];
	  _states['SHA-512/224'] = [
	    [0x8C3D37C8, 0x19544DA2],
	    [0x73E19966, 0x89DCD4D6],
	    [0x1DFAB7AE, 0x32FF9C82],
	    [0x679DD514, 0x582F9FCF],
	    [0x0F6D2B69, 0x7BD44DA8],
	    [0x77E36F73, 0x04C48942],
	    [0x3F9D85A8, 0x6A1D36C8],
	    [0x1112E6AD, 0x91D692A1]
	  ];

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-512 state with the given byte buffer.
	 *
	 * @param s the SHA-512 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (128 byte) chunks
	  var t1_hi, t1_lo;
	  var t2_hi, t2_lo;
	  var s0_hi, s0_lo;
	  var s1_hi, s1_lo;
	  var ch_hi, ch_lo;
	  var maj_hi, maj_lo;
	  var a_hi, a_lo;
	  var b_hi, b_lo;
	  var c_hi, c_lo;
	  var d_hi, d_lo;
	  var e_hi, e_lo;
	  var f_hi, f_lo;
	  var g_hi, g_lo;
	  var h_hi, h_lo;
	  var i, hi, lo, w2, w7, w15, w16;
	  var len = bytes.length();
	  while(len >= 128) {
	    // the w array will be populated with sixteen 64-bit big-endian words
	    // and then extended into 64 64-bit words according to SHA-512
	    for(i = 0; i < 16; ++i) {
	      w[i][0] = bytes.getInt32() >>> 0;
	      w[i][1] = bytes.getInt32() >>> 0;
	    }
	    for(; i < 80; ++i) {
	      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
	      w2 = w[i - 2];
	      hi = w2[0];
	      lo = w2[1];

	      // high bits
	      t1_hi = (
	        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19
	        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
	        (hi >>> 6)) >>> 0; // SHR 6
	      // low bits
	      t1_lo = (
	        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19
	        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
	        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6

	      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
	      w15 = w[i - 15];
	      hi = w15[0];
	      lo = w15[1];

	      // high bits
	      t2_hi = (
	        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1
	        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
	        (hi >>> 7)) >>> 0; // SHR 7
	      // low bits
	      t2_lo = (
	        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1
	        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
	        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7

	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
	      w7 = w[i - 7];
	      w16 = w[i - 16];
	      lo = (t1_lo + w7[1] + t2_lo + w16[1]);
	      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      w[i][1] = lo >>> 0;
	    }

	    // initialize hash value for this chunk
	    a_hi = s[0][0];
	    a_lo = s[0][1];
	    b_hi = s[1][0];
	    b_lo = s[1][1];
	    c_hi = s[2][0];
	    c_lo = s[2][1];
	    d_hi = s[3][0];
	    d_lo = s[3][1];
	    e_hi = s[4][0];
	    e_lo = s[4][1];
	    f_hi = s[5][0];
	    f_lo = s[5][1];
	    g_hi = s[6][0];
	    g_lo = s[6][1];
	    h_hi = s[7][0];
	    h_lo = s[7][1];

	    // round function
	    for(i = 0; i < 80; ++i) {
	      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
	      s1_hi = (
	        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
	        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
	        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)
	      s1_lo = (
	        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
	        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
	        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)

	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
	      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

	      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
	      s0_hi = (
	        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
	        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)
	      s0_lo = (
	        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
	        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)

	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
	      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

	      // main algorithm
	      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
	      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);
	      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      t1_lo = lo >>> 0;

	      // t2 = s0 + maj modulo 2^64 (carry lo overflow)
	      lo = s0_lo + maj_lo;
	      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      t2_lo = lo >>> 0;

	      h_hi = g_hi;
	      h_lo = g_lo;

	      g_hi = f_hi;
	      g_lo = f_lo;

	      f_hi = e_hi;
	      f_lo = e_lo;

	      // e = (d + t1) modulo 2^64 (carry lo overflow)
	      lo = d_lo + t1_lo;
	      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      e_lo = lo >>> 0;

	      d_hi = c_hi;
	      d_lo = c_lo;

	      c_hi = b_hi;
	      c_lo = b_lo;

	      b_hi = a_hi;
	      b_lo = a_lo;

	      // a = (t1 + t2) modulo 2^64 (carry lo overflow)
	      lo = t1_lo + t2_lo;
	      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      a_lo = lo >>> 0;
	    }

	    // update hash state (additional modulo 2^64)
	    lo = s[0][1] + a_lo;
	    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[0][1] = lo >>> 0;

	    lo = s[1][1] + b_lo;
	    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[1][1] = lo >>> 0;

	    lo = s[2][1] + c_lo;
	    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[2][1] = lo >>> 0;

	    lo = s[3][1] + d_lo;
	    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[3][1] = lo >>> 0;

	    lo = s[4][1] + e_lo;
	    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[4][1] = lo >>> 0;

	    lo = s[5][1] + f_lo;
	    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[5][1] = lo >>> 0;

	    lo = s[6][1] + g_lo;
	    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[6][1] = lo >>> 0;

	    lo = s[7][1] + h_lo;
	    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[7][1] = lo >>> 0;

	    len -= 128;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'sha512';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/sha512',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge message digests.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.md = forge.md || {};
	forge.md.algorithms = {
	  md5: forge.md5,
	  sha1: forge.sha1,
	  sha256: forge.sha256
	};
	forge.md.md5 = forge.md5;
	forge.md.sha1 = forge.sha1;
	forge.md.sha256 = forge.sha256;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'md';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/md',['require', 'module', './md5', './sha1', './sha256', './sha512'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Hash-based Message Authentication Code implementation. Requires a message
	 * digest object that can be obtained, for example, from forge.md.sha1 or
	 * forge.md.md5.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* HMAC API */
	var hmac = forge.hmac = forge.hmac || {};

	/**
	 * Creates an HMAC object that uses the given message digest object.
	 *
	 * @return an HMAC object.
	 */
	hmac.create = function() {
	  // the hmac key to use
	  var _key = null;

	  // the message digest to use
	  var _md = null;

	  // the inner padding
	  var _ipadding = null;

	  // the outer padding
	  var _opadding = null;

	  // hmac context
	  var ctx = {};

	  /**
	   * Starts or restarts the HMAC with the given key and message digest.
	   *
	   * @param md the message digest to use, null to reuse the previous one,
	   *           a string to use builtin 'sha1', 'md5', 'sha256'.
	   * @param key the key to use as a string, array of bytes, byte buffer,
	   *           or null to reuse the previous key.
	   */
	  ctx.start = function(md, key) {
	    if(md !== null) {
	      if(typeof md === 'string') {
	        // create builtin message digest
	        md = md.toLowerCase();
	        if(md in forge.md.algorithms) {
	          _md = forge.md.algorithms[md].create();
	        } else {
	          throw new Error('Unknown hash algorithm "' + md + '"');
	        }
	      } else {
	        // store message digest
	        _md = md;
	      }
	    }

	    if(key === null) {
	      // reuse previous key
	      key = _key;
	    } else {
	      if(typeof key === 'string') {
	        // convert string into byte buffer
	        key = forge.util.createBuffer(key);
	      } else if(forge.util.isArray(key)) {
	        // convert byte array into byte buffer
	        var tmp = key;
	        key = forge.util.createBuffer();
	        for(var i = 0; i < tmp.length; ++i) {
	          key.putByte(tmp[i]);
	        }
	      }

	      // if key is longer than blocksize, hash it
	      var keylen = key.length();
	      if(keylen > _md.blockLength) {
	        _md.start();
	        _md.update(key.bytes());
	        key = _md.digest();
	      }

	      // mix key into inner and outer padding
	      // ipadding = [0x36 * blocksize] ^ key
	      // opadding = [0x5C * blocksize] ^ key
	      _ipadding = forge.util.createBuffer();
	      _opadding = forge.util.createBuffer();
	      keylen = key.length();
	      for(var i = 0; i < keylen; ++i) {
	        var tmp = key.at(i);
	        _ipadding.putByte(0x36 ^ tmp);
	        _opadding.putByte(0x5C ^ tmp);
	      }

	      // if key is shorter than blocksize, add additional padding
	      if(keylen < _md.blockLength) {
	        var tmp = _md.blockLength - keylen;
	        for(var i = 0; i < tmp; ++i) {
	          _ipadding.putByte(0x36);
	          _opadding.putByte(0x5C);
	        }
	      }
	      _key = key;
	      _ipadding = _ipadding.bytes();
	      _opadding = _opadding.bytes();
	    }

	    // digest is done like so: hash(opadding | hash(ipadding | message))

	    // prepare to do inner hash
	    // hash(ipadding | message)
	    _md.start();
	    _md.update(_ipadding);
	  };

	  /**
	   * Updates the HMAC with the given message bytes.
	   *
	   * @param bytes the bytes to update with.
	   */
	  ctx.update = function(bytes) {
	    _md.update(bytes);
	  };

	  /**
	   * Produces the Message Authentication Code (MAC).
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  ctx.getMac = function() {
	    // digest is done like so: hash(opadding | hash(ipadding | message))
	    // here we do the outer hashing
	    var inner = _md.digest().bytes();
	    _md.start();
	    _md.update(_opadding);
	    _md.update(inner);
	    return _md.digest();
	  };
	  // alias for getMac
	  ctx.digest = ctx.getMac;

	  return ctx;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'hmac';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/hmac',['require', 'module', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
	 *
	 * See: RFC 1421.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 *
	 * A Forge PEM object has the following fields:
	 *
	 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
	 *
	 * procType: identifies the type of processing performed on the message,
	 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
	 *
	 * contentDomain: identifies the type of content in the message, typically
	 *   only uses the value: "RFC822".
	 *
	 * dekInfo: identifies the message encryption algorithm and mode and includes
	 *   any parameters for the algorithm, it has two subfields: algorithm and
	 *   parameters, eg: DES-CBC,F8143EDE5960C597.
	 *
	 * headers: contains all other PEM encapsulated headers -- where order is
	 *   significant (for pairing data like recipient ID + key info).
	 *
	 * body: the binary-encoded body.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for pem API
	var pem = forge.pem = forge.pem || {};

	/**
	 * Encodes (serializes) the given PEM object.
	 *
	 * @param msg the PEM message object to encode.
	 * @param options the options to use:
	 *          maxline the maximum characters per line for the body, (default: 64).
	 *
	 * @return the PEM-formatted string.
	 */
	pem.encode = function(msg, options) {
	  options = options || {};
	  var rval = '-----BEGIN ' + msg.type + '-----\r\n';

	  // encode special headers
	  var header;
	  if(msg.procType) {
	    header = {
	      name: 'Proc-Type',
	      values: [String(msg.procType.version), msg.procType.type]
	    };
	    rval += foldHeader(header);
	  }
	  if(msg.contentDomain) {
	    header = {name: 'Content-Domain', values: [msg.contentDomain]};
	    rval += foldHeader(header);
	  }
	  if(msg.dekInfo) {
	    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};
	    if(msg.dekInfo.parameters) {
	      header.values.push(msg.dekInfo.parameters);
	    }
	    rval += foldHeader(header);
	  }

	  if(msg.headers) {
	    // encode all other headers
	    for(var i = 0; i < msg.headers.length; ++i) {
	      rval += foldHeader(msg.headers[i]);
	    }
	  }

	  // terminate header
	  if(msg.procType) {
	    rval += '\r\n';
	  }

	  // add body
	  rval += forge.util.encode64(msg.body, options.maxline || 64) + '\r\n';

	  rval += '-----END ' + msg.type + '-----\r\n';
	  return rval;
	};

	/**
	 * Decodes (deserializes) all PEM messages found in the given string.
	 *
	 * @param str the PEM-formatted string to decode.
	 *
	 * @return the PEM message objects in an array.
	 */
	pem.decode = function(str) {
	  var rval = [];

	  // split string into PEM messages (be lenient w/EOF on BEGIN line)
	  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
	  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
	  var rCRLF = /\r?\n/;
	  var match;
	  while(true) {
	    match = rMessage.exec(str);
	    if(!match) {
	      break;
	    }

	    var msg = {
	      type: match[1],
	      procType: null,
	      contentDomain: null,
	      dekInfo: null,
	      headers: [],
	      body: forge.util.decode64(match[3])
	    };
	    rval.push(msg);

	    // no headers
	    if(!match[2]) {
	      continue;
	    }

	    // parse headers
	    var lines = match[2].split(rCRLF);
	    var li = 0;
	    while(match && li < lines.length) {
	      // get line, trim any rhs whitespace
	      var line = lines[li].replace(/\s+$/, '');

	      // RFC2822 unfold any following folded lines
	      for(var nl = li + 1; nl < lines.length; ++nl) {
	        var next = lines[nl];
	        if(!/\s/.test(next[0])) {
	          break;
	        }
	        line += next;
	        li = nl;
	      }

	      // parse header
	      match = line.match(rHeader);
	      if(match) {
	        var header = {name: match[1], values: []};
	        var values = match[2].split(',');
	        for(var vi = 0; vi < values.length; ++vi) {
	          header.values.push(ltrim(values[vi]));
	        }

	        // Proc-Type must be the first header
	        if(!msg.procType) {
	          if(header.name !== 'Proc-Type') {
	            throw new Error('Invalid PEM formatted message. The first ' +
	              'encapsulated header must be "Proc-Type".');
	          } else if(header.values.length !== 2) {
	            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' +
	              'header must have two subfields.');
	          }
	          msg.procType = {version: values[0], type: values[1]};
	        } else if(!msg.contentDomain && header.name === 'Content-Domain') {
	          // special-case Content-Domain
	          msg.contentDomain = values[0] || '';
	        } else if(!msg.dekInfo && header.name === 'DEK-Info') {
	          // special-case DEK-Info
	          if(header.values.length === 0) {
	            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	              'header must have at least one subfield.');
	          }
	          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};
	        } else {
	          msg.headers.push(header);
	        }
	      }

	      ++li;
	    }

	    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
	      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	        'header must be present if "Proc-Type" is "ENCRYPTED".');
	    }
	  }

	  if(rval.length === 0) {
	    throw new Error('Invalid PEM formatted message.');
	  }

	  return rval;
	};

	function foldHeader(header) {
	  var rval = header.name + ': ';

	  // ensure values with CRLF are folded
	  var values = [];
	  var insertSpace = function(match, $1) {
	    return ' ' + $1;
	  };
	  for(var i = 0; i < header.values.length; ++i) {
	    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
	  }
	  rval += values.join(',') + '\r\n';

	  // do folding
	  var length = 0;
	  var candidate = -1;
	  for(var i = 0; i < rval.length; ++i, ++length) {
	    if(length > 65 && candidate !== -1) {
	      var insert = rval[candidate];
	      if(insert === ',') {
	        ++candidate;
	        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
	      } else {
	        rval = rval.substr(0, candidate) +
	          '\r\n' + insert + rval.substr(candidate + 1);
	      }
	      length = (i - candidate - 1);
	      candidate = -1;
	      ++i;
	    } else if(rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
	      candidate = i;
	    }
	  }

	  return rval;
	}

	function ltrim(str) {
	  return str.replace(/^\s+/, '');
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pem';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pem',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * DES (Data Encryption Standard) implementation.
	 *
	 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
	 * It is based on the BSD-licensed implementation by Paul Tero:
	 *
	 * Paul Tero, July 2001
	 * http://www.tero.co.uk/des/
	 *
	 * Optimised for performance with large blocks by Michael Hayworth, November 2001
	 * http://www.netdealing.com
	 *
	 * THIS SOFTWARE IS PROVIDED "AS IS" AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
	 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
	 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
	 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
	 * SUCH DAMAGE.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* DES API */
	forge.des = forge.des || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge.des.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.des.createEncryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge.des.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge.des.createDecryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new DES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the DES algorithm object.
	 */
	forge.des.Algorithm = function(name, mode) {
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 8,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this DES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge.des.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = forge.util.createBuffer(options.key);
	  if(this.name.indexOf('3DES') === 0) {
	    if(key.length() !== 24) {
	      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
	    }
	  }

	  // do key expansion to 16 or 48 subkeys (single or triple DES)
	  this._keys = _createKeys(key);
	  this._init = true;
	};


	/** Register DES algorithms **/

	registerAlgorithm('DES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('DES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('DES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('DES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('DES-CTR', forge.cipher.modes.ctr);

	registerAlgorithm('3DES-ECB', forge.cipher.modes.ecb);
	registerAlgorithm('3DES-CBC', forge.cipher.modes.cbc);
	registerAlgorithm('3DES-CFB', forge.cipher.modes.cfb);
	registerAlgorithm('3DES-OFB', forge.cipher.modes.ofb);
	registerAlgorithm('3DES-CTR', forge.cipher.modes.ctr);

	function registerAlgorithm(name, mode) {
	  var factory = function() {
	    return new forge.des.Algorithm(name, mode);
	  };
	  forge.cipher.registerAlgorithm(name, factory);
	}


	/** DES implementation **/

	var spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];
	var spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];
	var spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];
	var spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];
	var spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];
	var spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];
	var spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];
	var spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];

	/**
	 * Create necessary sub keys.
	 *
	 * @param key the 64-bit or 192-bit key.
	 *
	 * @return the expanded keys.
	 */
	function _createKeys(key) {
	  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],
	      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],
	      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],
	      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],
	      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],
	      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],
	      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],
	      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],
	      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],
	      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],
	      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],
	      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],
	      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],
	      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];

	  // how many iterations (1 for des, 3 for triple des)
	  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
	  var iterations = key.length() > 8 ? 3 : 1;

	  // stores the return keys
	  var keys = [];

	  // now define the left shifts which need to be done
	  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

	  var n = 0, tmp;
	  for(var j = 0; j < iterations; j ++) {
	    var left = key.getInt32();
	    var right = key.getInt32();

	    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	    right ^= tmp;
	    left ^= (tmp << 4);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 2) ^ right) & 0x33333333;
	    right ^= tmp;
	    left ^= (tmp << 2);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	    left ^= tmp;
	    right ^= (tmp << 8);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    // right needs to be shifted and OR'd with last four bits of left
	    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

	    // left needs to be put upside down
	    left = ((right << 24) | ((right << 8) & 0xff0000) |
	      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));
	    right = tmp;

	    // now go through and perform these shifts on the left and right keys
	    for(var i = 0; i < shifts.length; ++i) {
	      //shift the keys either one or two bits to the left
	      if(shifts[i]) {
	        left = (left << 2) | (left >>> 26);
	        right = (right << 2) | (right >>> 26);
	      } else {
	        left = (left << 1) | (left >>> 27);
	        right = (right << 1) | (right >>> 27);
	      }
	      left &= -0xf;
	      right &= -0xf;

	      // now apply PC-2, in such a way that E is easier when encrypting or
	      // decrypting this conversion will look like PC-2 except only the last 6
	      // bits of each byte are used rather than 48 consecutive bits and the
	      // order of lines will be according to how the S selection functions will
	      // be applied: S2, S4, S6, S8, S1, S3, S5, S7
	      var lefttmp = (
	        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |
	        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |
	        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |
	        pc2bytes6[(left >>> 4) & 0xf]);
	      var righttmp = (
	        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |
	        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |
	        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |
	        pc2bytes13[(right >>> 4) & 0xf]);
	      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
	      keys[n++] = lefttmp ^ tmp;
	      keys[n++] = righttmp ^ (tmp << 16);
	    }
	  }

	  return keys;
	}

	/**
	 * Updates a single block (1 byte) using DES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param keys the expanded keys.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock(keys, input, output, decrypt) {
	  // set up loops for single or triple DES
	  var iterations = keys.length === 32 ? 3 : 9;
	  var looping;
	  if(iterations === 3) {
	    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
	  } else {
	    looping = (decrypt ?
	      [94, 62, -2, 32, 64, 2, 30, -2, -2] :
	      [0, 32, 2, 62, 30, -2, 64, 96, 2]);
	  }

	  var tmp;

	  var left = input[0];
	  var right = input[1];

	  // first each 64 bit chunk of the message must be permuted according to IP
	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  // rotate left 1 bit
	  left = ((left << 1) | (left >>> 31));
	  right = ((right << 1) | (right >>> 31));

	  for(var j = 0; j < iterations; j += 3) {
	    var endloop = looping[j + 1];
	    var loopinc = looping[j + 2];

	    // now go through and perform the encryption or decryption
	    for(var i = looping[j]; i != endloop; i += loopinc) {
	      var right1 = right ^ keys[i];
	      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

	      // passing these bytes through the S selection functions
	      tmp = left;
	      left = right;
	      right = tmp ^ (
	        spfunction2[(right1 >>> 24) & 0x3f] |
	        spfunction4[(right1 >>> 16) & 0x3f] |
	        spfunction6[(right1 >>>  8) & 0x3f] |
	        spfunction8[right1 & 0x3f] |
	        spfunction1[(right2 >>> 24) & 0x3f] |
	        spfunction3[(right2 >>> 16) & 0x3f] |
	        spfunction5[(right2 >>>  8) & 0x3f] |
	        spfunction7[right2 & 0x3f]);
	    }
	    // unreverse left and right
	    tmp = left;
	    left = right;
	    right = tmp;
	  }

	  // rotate right 1 bit
	  left = ((left >>> 1) | (left << 31));
	  right = ((right >>> 1) | (right << 31));

	  // now perform IP-1, which is IP in the opposite direction
	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  output[0] = left;
	  output[1] = right;
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('DES-<mode>', key);
	 * forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates a deprecated DES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use (64 or 192 bits).
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'DES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}


	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'des';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define(
	  'js/des',['require', 'module', './cipher', './cipherModes', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Password-Based Key-Derivation Function #2 implementation.
	 *
	 * See RFC 2898 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var pkcs5 = forge.pkcs5 = forge.pkcs5 || {};

	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var crypto;
	if(_nodejs && !forge.disableNativeCode) {
	  crypto = require('crypto');
	}

	/**
	 * Derives a key from a password.
	 *
	 * @param p the password as a binary-encoded string of bytes.
	 * @param s the salt as a binary-encoded string of bytes.
	 * @param c the iteration count, a positive integer.
	 * @param dkLen the intended length, in bytes, of the derived key,
	 *          (max: 2^32 - 1) * hash length of the PRF.
	 * @param [md] the message digest (or algorithm identifier as a string) to use
	 *          in the PRF, defaults to SHA-1.
	 * @param [callback(err, key)] presence triggers asynchronous version, called
	 *          once the operation completes.
	 *
	 * @return the derived key, as a binary-encoded string of bytes, for the
	 *           synchronous version (if no callback is specified).
	 */
	forge.pbkdf2 = pkcs5.pbkdf2 = function(p, s, c, dkLen, md, callback) {
	  if(typeof md === 'function') {
	    callback = md;
	    md = null;
	  }

	  // use native implementation if possible and not disabled, note that
	  // some node versions only support SHA-1, others allow digest to be changed
	  if(_nodejs && !forge.disableNativeCode && crypto.pbkdf2 &&
	    (md === null || typeof md !== 'object') &&
	    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {
	    if(typeof md !== 'string') {
	      // default prf to SHA-1
	      md = 'sha1';
	    }
	    s = new Buffer(s, 'binary');
	    if(!callback) {
	      if(crypto.pbkdf2Sync.length === 4) {
	        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');
	      }
	      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
	    }
	    if(crypto.pbkdf2Sync.length === 4) {
	      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, key.toString('binary'));
	      });
	    }
	    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {
	      if(err) {
	        return callback(err);
	      }
	      callback(null, key.toString('binary'));
	    });
	  }

	  if(typeof md === 'undefined' || md === null) {
	    // default prf to SHA-1
	    md = forge.md.sha1.create();
	  }
	  if(typeof md === 'string') {
	    if(!(md in forge.md.algorithms)) {
	      throw new Error('Unknown hash algorithm: ' + md);
	    }
	    md = forge.md[md].create();
	  }

	  var hLen = md.digestLength;

	  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
	    stop. */
	  if(dkLen > (0xFFFFFFFF * hLen)) {
	    var err = new Error('Derived key is too long.');
	    if(callback) {
	      return callback(err);
	    }
	    throw err;
	  }

	  /* 2. Let len be the number of hLen-octet blocks in the derived key,
	    rounding up, and let r be the number of octets in the last
	    block:

	    len = CEIL(dkLen / hLen),
	    r = dkLen - (len - 1) * hLen. */
	  var len = Math.ceil(dkLen / hLen);
	  var r = dkLen - (len - 1) * hLen;

	  /* 3. For each block of the derived key apply the function F defined
	    below to the password P, the salt S, the iteration count c, and
	    the block index to compute the block:

	    T_1 = F(P, S, c, 1),
	    T_2 = F(P, S, c, 2),
	    ...
	    T_len = F(P, S, c, len),

	    where the function F is defined as the exclusive-or sum of the
	    first c iterates of the underlying pseudorandom function PRF
	    applied to the password P and the concatenation of the salt S
	    and the block index i:

	    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

	    where

	    u_1 = PRF(P, S || INT(i)),
	    u_2 = PRF(P, u_1),
	    ...
	    u_c = PRF(P, u_{c-1}).

	    Here, INT(i) is a four-octet encoding of the integer i, most
	    significant octet first. */
	  var prf = forge.hmac.create();
	  prf.start(md, p);
	  var dk = '';
	  var xor, u_c, u_c1;

	  // sync version
	  if(!callback) {
	    for(var i = 1; i <= len; ++i) {
	      // PRF(P, S || INT(i)) (first iteration)
	      prf.start(null, null);
	      prf.update(s);
	      prf.update(forge.util.int32ToBytes(i));
	      xor = u_c1 = prf.digest().getBytes();

	      // PRF(P, u_{c-1}) (other iterations)
	      for(var j = 2; j <= c; ++j) {
	        prf.start(null, null);
	        prf.update(u_c1);
	        u_c = prf.digest().getBytes();
	        // F(p, s, c, i)
	        xor = forge.util.xorBytes(xor, u_c, hLen);
	        u_c1 = u_c;
	      }

	      /* 4. Concatenate the blocks and extract the first dkLen octets to
	        produce a derived key DK:

	        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	      dk += (i < len) ? xor : xor.substr(0, r);
	    }
	    /* 5. Output the derived key DK. */
	    return dk;
	  }

	  // async version
	  var i = 1, j;
	  function outer() {
	    if(i > len) {
	      // done
	      return callback(null, dk);
	    }

	    // PRF(P, S || INT(i)) (first iteration)
	    prf.start(null, null);
	    prf.update(s);
	    prf.update(forge.util.int32ToBytes(i));
	    xor = u_c1 = prf.digest().getBytes();

	    // PRF(P, u_{c-1}) (other iterations)
	    j = 2;
	    inner();
	  }

	  function inner() {
	    if(j <= c) {
	      prf.start(null, null);
	      prf.update(u_c1);
	      u_c = prf.digest().getBytes();
	      // F(p, s, c, i)
	      xor = forge.util.xorBytes(xor, u_c, hLen);
	      u_c1 = u_c;
	      ++j;
	      return forge.util.setImmediate(inner);
	    }

	    /* 4. Concatenate the blocks and extract the first dkLen octets to
	      produce a derived key DK:

	      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	    dk += (i < len) ? xor : xor.substr(0, r);

	    ++i;
	    outer();
	  }

	  outer();
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pbkdf2';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pbkdf2',['require', 'module', './hmac', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A javascript implementation of a cryptographically-secure
	 * Pseudo Random Number Generator (PRNG). The Fortuna algorithm is followed
	 * here though the use of SHA-256 is not enforced; when generating an
	 * a PRNG context, the hashing algorithm and block cipher used for
	 * the generator are specified via a plugin.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var _crypto = null;
	if(!forge.disableNativeCode && _nodejs && !process.versions['node-webkit']) {
	  _crypto = require('crypto');
	}

	/* PRNG API */
	var prng = forge.prng = forge.prng || {};

	/**
	 * Creates a new PRNG context.
	 *
	 * A PRNG plugin must be passed in that will provide:
	 *
	 * 1. A function that initializes the key and seed of a PRNG context. It
	 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
	 *   or transformation of the seed from a byte string into an array of
	 *   integers (or similar) should be performed.
	 * 2. The cryptographic function used by the generator. It takes a key and
	 *   a seed.
	 * 3. A seed increment function. It takes the seed and returns seed + 1.
	 * 4. An api to create a message digest.
	 *
	 * For an example, see random.js.
	 *
	 * @param plugin the PRNG plugin to use.
	 */
	prng.create = function(plugin) {
	  var ctx = {
	    plugin: plugin,
	    key: null,
	    seed: null,
	    time: null,
	    // number of reseeds so far
	    reseeds: 0,
	    // amount of data generated so far
	    generated: 0
	  };

	  // create 32 entropy pools (each is a message digest)
	  var md = plugin.md;
	  var pools = new Array(32);
	  for(var i = 0; i < 32; ++i) {
	    pools[i] = md.create();
	  }
	  ctx.pools = pools;

	  // entropy pools are written to cyclically, starting at index 0
	  ctx.pool = 0;

	  /**
	   * Generates random bytes. The bytes may be generated synchronously or
	   * asynchronously. Web workers must use the asynchronous interface or
	   * else the behavior is undefined.
	   *
	   * @param count the number of random bytes to generate.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generate = function(count, callback) {
	    // do synchronously
	    if(!callback) {
	      return ctx.generateSync(count);
	    }

	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;
	    var b = forge.util.createBuffer();

	    // reset key for every request
	    ctx.key = null;

	    generate();

	    function generate(err) {
	      if(err) {
	        return callback(err);
	      }

	      // sufficient bytes generated
	      if(b.length() >= count) {
	        return callback(null, b.getBytes(count));
	      }

	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        // prevent stack overflow
	        return forge.util.nextTick(function() {
	          _reseed(generate);
	        });
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

	      forge.util.setImmediate(generate);
	    }
	  };

	  /**
	   * Generates random bytes synchronously.
	   *
	   * @param count the number of random bytes to generate.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generateSync = function(count) {
	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;

	    // reset key for every request
	    ctx.key = null;

	    var b = forge.util.createBuffer();
	    while(b.length() < count) {
	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        _reseedSync();
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
	    }

	    return b.getBytes(count);
	  };

	  /**
	   * Private function that asynchronously reseeds a generator.
	   *
	   * @param callback(err) called once the operation completes.
	   */
	  function _reseed(callback) {
	    if(ctx.pools[0].messageLength >= 32) {
	      _seed();
	      return callback();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.seedFile(needed, function(err, bytes) {
	      if(err) {
	        return callback(err);
	      }
	      ctx.collect(bytes);
	      _seed();
	      callback();
	    });
	  }

	  /**
	   * Private function that synchronously reseeds a generator.
	   */
	  function _reseedSync() {
	    if(ctx.pools[0].messageLength >= 32) {
	      return _seed();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.collect(ctx.seedFileSync(needed));
	    _seed();
	  }

	  /**
	   * Private function that seeds a generator once enough bytes are available.
	   */
	  function _seed() {
	    // create a plugin-based message digest
	    var md = ctx.plugin.md.create();

	    // digest pool 0's entropy and restart it
	    md.update(ctx.pools[0].digest().getBytes());
	    ctx.pools[0].start();

	    // digest the entropy of other pools whose index k meet the
	    // condition '2^k mod n == 0' where n is the number of reseeds
	    var k = 1;
	    for(var i = 1; i < 32; ++i) {
	      // prevent signed numbers from being used
	      k = (k === 31) ? 0x80000000 : (k << 2);
	      if(k % ctx.reseeds === 0) {
	        md.update(ctx.pools[i].digest().getBytes());
	        ctx.pools[i].start();
	      }
	    }

	    // get digest for key bytes and iterate again for seed bytes
	    var keyBytes = md.digest().getBytes();
	    md.start();
	    md.update(keyBytes);
	    var seedBytes = md.digest().getBytes();

	    // update
	    ctx.key = ctx.plugin.formatKey(keyBytes);
	    ctx.seed = ctx.plugin.formatSeed(seedBytes);
	    ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;
	    ctx.generated = 0;
	  }

	  /**
	   * The built-in default seedFile. This seedFile is used when entropy
	   * is needed immediately.
	   *
	   * @param needed the number of bytes that are needed.
	   *
	   * @return the random bytes.
	   */
	  function defaultSeedFile(needed) {
	    // use window.crypto.getRandomValues strong source of entropy if available
	    var getRandomValues = null;
	    if(typeof window !== 'undefined') {
	      var _crypto = window.crypto || window.msCrypto;
	      if(_crypto && _crypto.getRandomValues) {
	        getRandomValues = function(arr) {
	          return _crypto.getRandomValues(arr);
	        };
	      }
	    }

	    var b = forge.util.createBuffer();
	    if(getRandomValues) {
	      while(b.length() < needed) {
	        // max byte length is 65536 before QuotaExceededError is thrown
	        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
	        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
	        var entropy = new Uint32Array(Math.floor(count));
	        try {
	          getRandomValues(entropy);
	          for(var i = 0; i < entropy.length; ++i) {
	            b.putInt32(entropy[i]);
	          }
	        } catch(e) {
	          /* only ignore QuotaExceededError */
	          if(!(typeof QuotaExceededError !== 'undefined' &&
	            e instanceof QuotaExceededError)) {
	            throw e;
	          }
	        }
	      }
	    }

	    // be sad and add some weak random data
	    if(b.length() < needed) {
	      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
	      implemented with David G. Carta's optimization: with 32 bit math
	      and without division (Public Domain). */
	      var hi, lo, next;
	      var seed = Math.floor(Math.random() * 0x010000);
	      while(b.length() < needed) {
	        lo = 16807 * (seed & 0xFFFF);
	        hi = 16807 * (seed >> 16);
	        lo += (hi & 0x7FFF) << 16;
	        lo += hi >> 15;
	        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
	        seed = lo & 0xFFFFFFFF;

	        // consume lower 3 bytes of seed
	        for(var i = 0; i < 3; ++i) {
	          // throw in more pseudo random
	          next = seed >>> (i << 3);
	          next ^= Math.floor(Math.random() * 0x0100);
	          b.putByte(String.fromCharCode(next & 0xFF));
	        }
	      }
	    }

	    return b.getBytes(needed);
	  }
	  // initialize seed file APIs
	  if(_crypto) {
	    // use nodejs async API
	    ctx.seedFile = function(needed, callback) {
	      _crypto.randomBytes(needed, function(err, bytes) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, bytes.toString());
	      });
	    };
	    // use nodejs sync API
	    ctx.seedFileSync = function(needed) {
	      return _crypto.randomBytes(needed).toString();
	    };
	  } else {
	    ctx.seedFile = function(needed, callback) {
	      try {
	        callback(null, defaultSeedFile(needed));
	      } catch(e) {
	        callback(e);
	      }
	    };
	    ctx.seedFileSync = defaultSeedFile;
	  }

	  /**
	   * Adds entropy to a prng ctx's accumulator.
	   *
	   * @param bytes the bytes of entropy as a string.
	   */
	  ctx.collect = function(bytes) {
	    // iterate over pools distributing entropy cyclically
	    var count = bytes.length;
	    for(var i = 0; i < count; ++i) {
	      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
	      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;
	    }
	  };

	  /**
	   * Collects an integer of n bits.
	   *
	   * @param i the integer entropy.
	   * @param n the number of bits in the integer.
	   */
	  ctx.collectInt = function(i, n) {
	    var bytes = '';
	    for(var x = 0; x < n; x += 8) {
	      bytes += String.fromCharCode((i >> x) & 0xFF);
	    }
	    ctx.collect(bytes);
	  };

	  /**
	   * Registers a Web Worker to receive immediate entropy from the main thread.
	   * This method is required until Web Workers can access the native crypto
	   * API. This method should be called twice for each created worker, once in
	   * the main thread, and once in the worker itself.
	   *
	   * @param worker the worker to register.
	   */
	  ctx.registerWorker = function(worker) {
	    // worker receives random bytes
	    if(worker === self) {
	      ctx.seedFile = function(needed, callback) {
	        function listener(e) {
	          var data = e.data;
	          if(data.forge && data.forge.prng) {
	            self.removeEventListener('message', listener);
	            callback(data.forge.prng.err, data.forge.prng.bytes);
	          }
	        }
	        self.addEventListener('message', listener);
	        self.postMessage({forge: {prng: {needed: needed}}});
	      };
	    } else {
	      // main thread sends random bytes upon request
	      var listener = function(e) {
	        var data = e.data;
	        if(data.forge && data.forge.prng) {
	          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
	            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});
	          });
	        }
	      };
	      // TODO: do we need to remove the event listener when the worker dies?
	      worker.addEventListener('message', listener);
	    }
	  };

	  return ctx;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'prng';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/prng',['require', 'module', './md', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});

	})();

	/**
	 * An API for getting cryptographically-secure random bytes. The bytes are
	 * generated using the Fortuna algorithm devised by Bruce Schneier and
	 * Niels Ferguson.
	 *
	 * Getting strong random bytes is not yet easy to do in javascript. The only
	 * truish random entropy that can be collected is from the mouse, keyboard, or
	 * from timing with respect to page loads, etc. This generator makes a poor
	 * attempt at providing random bytes when those sources haven't yet provided
	 * enough entropy to initially seed or to reseed the PRNG.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// forge.random already defined
	if(forge.random && forge.random.getBytes) {
	  return;
	}

	(function(jQuery) {

	// the default prng plugin, uses AES-128
	var prng_aes = {};
	var _prng_aes_output = new Array(4);
	var _prng_aes_buffer = forge.util.createBuffer();
	prng_aes.formatKey = function(key) {
	  // convert the key into 32-bit integers
	  var tmp = forge.util.createBuffer(key);
	  key = new Array(4);
	  key[0] = tmp.getInt32();
	  key[1] = tmp.getInt32();
	  key[2] = tmp.getInt32();
	  key[3] = tmp.getInt32();

	  // return the expanded key
	  return forge.aes._expandKey(key, false);
	};
	prng_aes.formatSeed = function(seed) {
	  // convert seed into 32-bit integers
	  var tmp = forge.util.createBuffer(seed);
	  seed = new Array(4);
	  seed[0] = tmp.getInt32();
	  seed[1] = tmp.getInt32();
	  seed[2] = tmp.getInt32();
	  seed[3] = tmp.getInt32();
	  return seed;
	};
	prng_aes.cipher = function(key, seed) {
	  forge.aes._updateBlock(key, seed, _prng_aes_output, false);
	  _prng_aes_buffer.putInt32(_prng_aes_output[0]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[1]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[2]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[3]);
	  return _prng_aes_buffer.getBytes();
	};
	prng_aes.increment = function(seed) {
	  // FIXME: do we care about carry or signed issues?
	  ++seed[3];
	  return seed;
	};
	prng_aes.md = forge.md.sha256;

	/**
	 * Creates a new PRNG.
	 */
	function spawnPrng() {
	  var ctx = forge.prng.create(prng_aes);

	  /**
	   * Gets random bytes. If a native secure crypto API is unavailable, this
	   * method tries to make the bytes more unpredictable by drawing from data that
	   * can be collected from the user of the browser, eg: mouse movement.
	   *
	   * If a callback is given, this method will be called asynchronously.
	   *
	   * @param count the number of random bytes to get.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytes = function(count, callback) {
	    return ctx.generate(count, callback);
	  };

	  /**
	   * Gets random bytes asynchronously. If a native secure crypto API is
	   * unavailable, this method tries to make the bytes more unpredictable by
	   * drawing from data that can be collected from the user of the browser,
	   * eg: mouse movement.
	   *
	   * @param count the number of random bytes to get.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytesSync = function(count) {
	    return ctx.generate(count);
	  };

	  return ctx;
	}

	// create default prng context
	var _ctx = spawnPrng();

	// add other sources of entropy only if window.crypto.getRandomValues is not
	// available -- otherwise this source will be automatically used by the prng
	var _nodejs = (
	  typeof process !== 'undefined' && process.versions && process.versions.node);
	var getRandomValues = null;
	if(typeof window !== 'undefined') {
	  var _crypto = window.crypto || window.msCrypto;
	  if(_crypto && _crypto.getRandomValues) {
	    getRandomValues = function(arr) {
	      return _crypto.getRandomValues(arr);
	    };
	  }
	}
	if(forge.disableNativeCode || (!_nodejs && !getRandomValues)) {
	  // if this is a web worker, do not use weak entropy, instead register to
	  // receive strong entropy asynchronously from the main thread
	  if(typeof window === 'undefined' || window.document === undefined) {
	    // FIXME:
	  }

	  // get load time entropy
	  _ctx.collectInt(+new Date(), 32);

	  // add some entropy from navigator object
	  if(typeof(navigator) !== 'undefined') {
	    var _navBytes = '';
	    for(var key in navigator) {
	      try {
	        if(typeof(navigator[key]) == 'string') {
	          _navBytes += navigator[key];
	        }
	      } catch(e) {
	        /* Some navigator keys might not be accessible, e.g. the geolocation
	          attribute throws an exception if touched in Mozilla chrome://
	          context.

	          Silently ignore this and just don't use this as a source of
	          entropy. */
	      }
	    }
	    _ctx.collect(_navBytes);
	    _navBytes = null;
	  }

	  // add mouse and keyboard collectors if jquery is available
	  if(jQuery) {
	    // set up mouse entropy capture
	    jQuery().mousemove(function(e) {
	      // add mouse coords
	      _ctx.collectInt(e.clientX, 16);
	      _ctx.collectInt(e.clientY, 16);
	    });

	    // set up keyboard entropy capture
	    jQuery().keypress(function(e) {
	      _ctx.collectInt(e.charCode, 8);
	    });
	  }
	}

	/* Random API */
	if(!forge.random) {
	  forge.random = _ctx;
	} else {
	  // extend forge.random with _ctx
	  for(var key in _ctx) {
	    forge.random[key] = _ctx[key];
	  }
	}

	// expose spawn PRNG
	forge.random.createInstance = spawnPrng;

	})(typeof(jQuery) !== 'undefined' ? jQuery : null);

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'random';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/random',['require', 'module', './aes', './md', './prng', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * RC2 implementation.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Information on the RC2 cipher is available from RFC #2268,
	 * http://www.ietf.org/rfc/rfc2268.txt
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var piTable = [
	  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
	  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
	  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
	  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
	  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
	  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
	  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
	  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
	  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
	  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
	  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
	  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
	  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
	  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
	  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
	  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
	];

	var s = [1, 2, 3, 5];


	/**
	 * Rotate a word left by given number of bits.
	 *
	 * Bits that are shifted out on the left are put back in on the right
	 * hand side.
	 *
	 * @param word The word to shift left.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var rol = function(word, bits) {
	  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
	};

	/**
	 * Rotate a word right by given number of bits.
	 *
	 * Bits that are shifted out on the right are put back in on the left
	 * hand side.
	 *
	 * @param word The word to shift right.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var ror = function(word, bits) {
	  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
	};


	/* RC2 API */
	forge.rc2 = forge.rc2 || {};

	/**
	 * Perform RC2 key expansion as per RFC #2268, section 2.
	 *
	 * @param key variable-length user key (between 1 and 128 bytes)
	 * @param effKeyBits number of effective key bits (default: 128)
	 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
	 */
	forge.rc2.expandKey = function(key, effKeyBits) {
	  if(typeof key === 'string') {
	    key = forge.util.createBuffer(key);
	  }
	  effKeyBits = effKeyBits || 128;

	  /* introduce variables that match the names used in RFC #2268 */
	  var L = key;
	  var T = key.length();
	  var T1 = effKeyBits;
	  var T8 = Math.ceil(T1 / 8);
	  var TM = 0xff >> (T1 & 0x07);
	  var i;

	  for(i = T; i < 128; i ++) {
	    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
	  }

	  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

	  for(i = 127 - T8; i >= 0; i --) {
	    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
	  }

	  return L;
	};


	/**
	 * Creates a RC2 cipher object.
	 *
	 * @param key the symmetric key to use (as base for key generation).
	 * @param bits the number of effective key bits.
	 * @param encrypt false for decryption, true for encryption.
	 *
	 * @return the cipher.
	 */
	var createCipher = function(key, bits, encrypt) {
	  var _finish = false, _input = null, _output = null, _iv = null;
	  var mixRound, mashRound;
	  var i, j, K = [];

	  /* Expand key and fill into K[] Array */
	  key = forge.rc2.expandKey(key, bits);
	  for(i = 0; i < 64; i ++) {
	    K.push(key.getInt16Le());
	  }

	  if(encrypt) {
	    /**
	     * Perform one mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 0; i < 4; i++) {
	        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        R[i] = rol(R[i], s[i]);
	        j ++;
	      }
	    };

	    /**
	     * Perform one mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 0; i < 4; i ++) {
	        R[i] += K[R[(i + 3) % 4] & 63];
	      }
	    };
	  } else {
	    /**
	     * Perform one r-mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] = ror(R[i], s[i]);
	        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        j --;
	      }
	    };

	    /**
	     * Perform one r-mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] -= K[R[(i + 3) % 4] & 63];
	      }
	    };
	  }

	  /**
	   * Run the specified cipher execution plan.
	   *
	   * This function takes four words from the input buffer, applies the IV on
	   * it (if requested) and runs the provided execution plan.
	   *
	   * The plan must be put together in form of a array of arrays.  Where the
	   * outer one is simply a list of steps to perform and the inner one needs
	   * to have two elements: the first one telling how many rounds to perform,
	   * the second one telling what to do (i.e. the function to call).
	   *
	   * @param {Array} plan The plan to execute.
	   */
	  var runPlan = function(plan) {
	    var R = [];

	    /* Get data from input buffer and fill the four words into R */
	    for(i = 0; i < 4; i ++) {
	      var val = _input.getInt16Le();

	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting, apply the IV first. */
	          val ^= _iv.getInt16Le();
	        } else {
	          /* We're decryption, keep cipher text for next block. */
	          _iv.putInt16Le(val);
	        }
	      }

	      R.push(val & 0xffff);
	    }

	    /* Reset global "j" variable as per spec. */
	    j = encrypt ? 0 : 63;

	    /* Run execution plan. */
	    for(var ptr = 0; ptr < plan.length; ptr ++) {
	      for(var ctr = 0; ctr < plan[ptr][0]; ctr ++) {
	        plan[ptr][1](R);
	      }
	    }

	    /* Write back result to output buffer. */
	    for(i = 0; i < 4; i ++) {
	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting in CBC-mode, feed back encrypted bytes into
	             IV buffer to carry it forward to next block. */
	          _iv.putInt16Le(R[i]);
	        } else {
	          R[i] ^= _iv.getInt16Le();
	        }
	      }

	      _output.putInt16Le(R[i]);
	    }
	  };


	  /* Create cipher object */
	  var cipher = null;
	  cipher = {
	    /**
	     * Starts or restarts the encryption or decryption process, whichever
	     * was previously configured.
	     *
	     * To use the cipher in CBC mode, iv may be given either as a string
	     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
	     *
	     * @param iv the initialization vector to use, null for ECB mode.
	     * @param output the output the buffer to write to, null to create one.
	     */
	    start: function(iv, output) {
	      if(iv) {
	        /* CBC mode */
	        if(typeof iv === 'string') {
	          iv = forge.util.createBuffer(iv);
	        }
	      }

	      _finish = false;
	      _input = forge.util.createBuffer();
	      _output = output || new forge.util.createBuffer();
	      _iv = iv;

	      cipher.output = _output;
	    },

	    /**
	     * Updates the next block.
	     *
	     * @param input the buffer to read from.
	     */
	    update: function(input) {
	      if(!_finish) {
	        // not finishing, so fill the input buffer with more input
	        _input.putBuffer(input);
	      }

	      while(_input.length() >= 8) {
	        runPlan([
	            [ 5, mixRound ],
	            [ 1, mashRound ],
	            [ 6, mixRound ],
	            [ 1, mashRound ],
	            [ 5, mixRound ]
	          ]);
	      }
	    },

	    /**
	     * Finishes encrypting or decrypting.
	     *
	     * @param pad a padding function to use, null for PKCS#7 padding,
	     *           signature(blockSize, buffer, decrypt).
	     *
	     * @return true if successful, false on error.
	     */
	    finish: function(pad) {
	      var rval = true;

	      if(encrypt) {
	        if(pad) {
	          rval = pad(8, _input, !encrypt);
	        } else {
	          // add PKCS#7 padding to block (each pad byte is the
	          // value of the number of pad bytes)
	          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());
	          _input.fillWithByte(padding, padding);
	        }
	      }

	      if(rval) {
	        // do final update
	        _finish = true;
	        cipher.update();
	      }

	      if(!encrypt) {
	        // check for error: input data not a multiple of block size
	        rval = (_input.length() === 0);
	        if(rval) {
	          if(pad) {
	            rval = pad(8, _output, !encrypt);
	          } else {
	            // ensure padding byte count is valid
	            var len = _output.length();
	            var count = _output.at(len - 1);

	            if(count > len) {
	              rval = false;
	            } else {
	              // trim off padding bytes
	              _output.truncate(count);
	            }
	          }
	        }
	      }

	      return rval;
	    }
	  };

	  return cipher;
	};


	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge.rc2.startEncrypting = function(key, iv, output) {
	  var cipher = forge.rc2.createEncryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start encrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge.rc2.createEncryptionCipher = function(key, bits) {
	  return createCipher(key, bits, true);
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge.rc2.startDecrypting = function(key, iv, output) {
	  var cipher = forge.rc2.createDecryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start decrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge.rc2.createDecryptionCipher = function(key, bits) {
	  return createCipher(key, bits, false);
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'rc2';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/rc2',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	// Copyright (c) 2005  Tom Wu
	// All Rights Reserved.
	// See "LICENSE" for details.

	// Basic JavaScript BN library - subset useful for RSA encryption.

	/*
	Licensing (LICENSE)
	-------------------

	This software is covered under the following copyright:
	*/
	/*
	 * Copyright (c) 2003-2005  Tom Wu
	 * All Rights Reserved.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
	 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
	 *
	 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
	 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
	 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
	 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
	 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 *
	 * In addition, the following condition applies:
	 *
	 * All redistributions must retain an intact copy of this copyright notice
	 * and disclaimer.
	 */
	/*
	Address all questions regarding this license to:

	  Tom Wu
	  tjw@cs.Stanford.EDU
	*/

	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// Bits per digit
	var dbits;

	// JavaScript engine analysis
	var canary = 0xdeadbeefcafe;
	var j_lm = ((canary&0xffffff)==0xefcafe);

	// (public) Constructor
	function BigInteger(a,b,c) {
	  this.data = [];
	  if(a != null)
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	}

	// return new, unset BigInteger
	function nbi() { return new BigInteger(null); }

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n) {
	  while(--n >= 0) {
	    var v = x*this.data[i++]+w.data[j]+c;
	    c = Math.floor(v/0x4000000);
	    w.data[j++] = v&0x3ffffff;
	  }
	  return c;
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n) {
	  var xl = x&0x7fff, xh = x>>15;
	  while(--n >= 0) {
	    var l = this.data[i]&0x7fff;
	    var h = this.data[i++]>>15;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);
	    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	    w.data[j++] = l&0x3fffffff;
	  }
	  return c;
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n) {
	  var xl = x&0x3fff, xh = x>>14;
	  while(--n >= 0) {
	    var l = this.data[i]&0x3fff;
	    var h = this.data[i++]>>14;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;
	    c = (l>>28)+(m>>14)+xh*h;
	    w.data[j++] = l&0xfffffff;
	  }
	  return c;
	}

	// node.js (no browser)
	if(typeof(navigator) === 'undefined')
	{
	   BigInteger.prototype.am = am3;
	   dbits = 28;
	} else if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	  BigInteger.prototype.am = am2;
	  dbits = 30;
	} else if(j_lm && (navigator.appName != "Netscape")) {
	  BigInteger.prototype.am = am1;
	  dbits = 26;
	} else { // Mozilla/Netscape seems to prefer am3
	  BigInteger.prototype.am = am3;
	  dbits = 28;
	}

	BigInteger.prototype.DB = dbits;
	BigInteger.prototype.DM = ((1<<dbits)-1);
	BigInteger.prototype.DV = (1<<dbits);

	var BI_FP = 52;
	BigInteger.prototype.FV = Math.pow(2,BI_FP);
	BigInteger.prototype.F1 = BI_FP-dbits;
	BigInteger.prototype.F2 = 2*dbits-BI_FP;

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this.data[0] = x;
	  else if(x < -1) this.data[0] = x+this.DV;
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { this.fromRadix(s,b); return; }
	  this.t = 0;
	  this.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      this.data[this.t++] = x;
	    else if(sh+k > this.DB) {
	      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	      this.data[this.t++] = (x>>(this.DB-sh));
	    } else
	      this.data[this.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= this.DB) sh -= this.DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    this.s = -1;
	    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	  }
	  this.clamp();
	  if(mi) BigInteger.ZERO.subTo(this,this);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s&this.DM;
	  while(this.t > 0 && this.data[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  if(this.s < 0) return "-"+this.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return this.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	  var p = this.DB-(i*this.DB)%k;
	  if(i-- > 0) {
	    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (this.data[i]&((1<<p)-1))<<(k-p);
	        d |= this.data[--i]>>(p+=this.DB-k);
	      } else {
	        d = (this.data[i]>>(p-=k))&km;
	        if(p <= 0) { p += this.DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return (this.s<0)?-r:r;
	  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if(this.t <= 0) return 0;
	  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var i;
	  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];
	  for(i = n-1; i >= 0; --i) r.data[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	  for(i = this.t-1; i >= 0; --i) {
	    r.data[i+ds+1] = (this.data[i]>>cbs)|c;
	    c = (this.data[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r.data[i] = 0;
	  r.data[ds] = c;
	  r.t = this.t+ds+1;
	  r.s = this.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  r.s = this.s;
	  var ds = Math.floor(n/this.DB);
	  if(ds >= this.t) { r.t = 0; return; }
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<bs)-1;
	  r.data[0] = this.data[ds]>>bs;
	  for(var i = ds+1; i < this.t; ++i) {
	    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;
	    r.data[i-ds] = this.data[i]>>bs;
	  }
	  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;
	  r.t = this.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this.data[i]-a.data[i];
	    r.data[i++] = c&this.DM;
	    c >>= this.DB;
	  }
	  if(a.t < this.t) {
	    c -= a.s;
	    while(i < this.t) {
	      c += this.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c += this.s;
	  } else {
	    c += this.s;
	    while(i < a.t) {
	      c -= a.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r.data[i++] = this.DV+c;
	  else if(c > 0) r.data[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var x = this.abs(), y = a.abs();
	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var i = r.t = 2*x.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x.data[i],r,2*i,0,1);
	    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	      r.data[i+x.t] -= x.DV;
	      r.data[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = this.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) this.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = this.s, ms = m.s;
	  var nsh = this.DB-nbits(pm.data[pm.t-1]);	// normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;
	  var y0 = y.data[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);
	  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);
	  if(r.compareTo(t) >= 0) {
	    r.data[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y);	// "negative" y so we can replace sub with am later
	  while(y.t < ys) y.data[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);
	    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r.data[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	  if(ts < 0) BigInteger.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if(this.t < 1) return 0;
	  var x = this.data[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;		// y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?this.DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(m.DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while(x.t <= this.mt2)	// pad x so am has enough room later
	    x.data[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x.data[i]*mp mod DV
	    var j = x.data[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	BigInteger.prototype.copyTo = bnpCopyTo;
	BigInteger.prototype.fromInt = bnpFromInt;
	BigInteger.prototype.fromString = bnpFromString;
	BigInteger.prototype.clamp = bnpClamp;
	BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger.prototype.lShiftTo = bnpLShiftTo;
	BigInteger.prototype.rShiftTo = bnpRShiftTo;
	BigInteger.prototype.subTo = bnpSubTo;
	BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger.prototype.squareTo = bnpSquareTo;
	BigInteger.prototype.divRemTo = bnpDivRemTo;
	BigInteger.prototype.invDigit = bnpInvDigit;
	BigInteger.prototype.isEven = bnpIsEven;
	BigInteger.prototype.exp = bnpExp;

	// public
	BigInteger.prototype.toString = bnToString;
	BigInteger.prototype.negate = bnNegate;
	BigInteger.prototype.abs = bnAbs;
	BigInteger.prototype.compareTo = bnCompareTo;
	BigInteger.prototype.bitLength = bnBitLength;
	BigInteger.prototype.mod = bnMod;
	BigInteger.prototype.modPowInt = bnModPowInt;

	// "constants"
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);

	// jsbn2 lib

	//Copyright (c) 2005-2009  Tom Wu
	//All Rights Reserved.
	//See "LICENSE" for details (See jsbn.js for LICENSE).

	//Extended JavaScript BN functions, required for RSA private ops.

	//Version 1.1: new BigInteger("0", 10) returns "proper" zero

	//(public)
	function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	//(public) return value as integer
	function bnIntValue() {
	if(this.s < 0) {
	 if(this.t == 1) return this.data[0]-this.DV;
	 else if(this.t == 0) return -1;
	} else if(this.t == 1) return this.data[0];
	else if(this.t == 0) return 0;
	// assumes 16 < DB < 32
	return ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];
	}

	//(public) return value as byte
	function bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }

	//(public) return value as short (assumes DB>=16)
	function bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }

	//(protected) return x s.t. r^x < DV
	function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	//(public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	if(this.s < 0) return -1;
	else if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
	else return 1;
	}

	//(protected) convert to radix string
	function bnpToRadix(b) {
	if(b == null) b = 10;
	if(this.signum() == 0 || b < 2 || b > 36) return "0";
	var cs = this.chunkSize(b);
	var a = Math.pow(b,cs);
	var d = nbv(a), y = nbi(), z = nbi(), r = "";
	this.divRemTo(d,y,z);
	while(y.signum() > 0) {
	 r = (a+z.intValue()).toString(b).substr(1) + r;
	 y.divRemTo(d,y,z);
	}
	return z.intValue().toString(b) + r;
	}

	//(protected) convert from radix string
	function bnpFromRadix(s,b) {
	this.fromInt(0);
	if(b == null) b = 10;
	var cs = this.chunkSize(b);
	var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	for(var i = 0; i < s.length; ++i) {
	 var x = intAt(s,i);
	 if(x < 0) {
	   if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	   continue;
	 }
	 w = b*w+x;
	 if(++j >= cs) {
	   this.dMultiply(d);
	   this.dAddOffset(w,0);
	   j = 0;
	   w = 0;
	 }
	}
	if(j > 0) {
	 this.dMultiply(Math.pow(b,j));
	 this.dAddOffset(w,0);
	}
	if(mi) BigInteger.ZERO.subTo(this,this);
	}

	//(protected) alternate constructor
	function bnpFromNumber(a,b,c) {
	if("number" == typeof b) {
	 // new BigInteger(int,int,RNG)
	 if(a < 2) this.fromInt(1);
	 else {
	   this.fromNumber(a,c);
	   if(!this.testBit(a-1))  // force MSB set
	     this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
	   if(this.isEven()) this.dAddOffset(1,0); // force odd
	   while(!this.isProbablePrime(b)) {
	     this.dAddOffset(2,0);
	     if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
	   }
	 }
	} else {
	 // new BigInteger(int,RNG)
	 var x = new Array(), t = a&7;
	 x.length = (a>>3)+1;
	 b.nextBytes(x);
	 if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	 this.fromString(x,256);
	}
	}

	//(public) convert to bigendian byte array
	function bnToByteArray() {
	var i = this.t, r = new Array();
	r[0] = this.s;
	var p = this.DB-(i*this.DB)%8, d, k = 0;
	if(i-- > 0) {
	 if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)
	   r[k++] = d|(this.s<<(this.DB-p));
	 while(i >= 0) {
	   if(p < 8) {
	     d = (this.data[i]&((1<<p)-1))<<(8-p);
	     d |= this.data[--i]>>(p+=this.DB-8);
	   } else {
	     d = (this.data[i]>>(p-=8))&0xff;
	     if(p <= 0) { p += this.DB; --i; }
	   }
	   if((d&0x80) != 0) d |= -256;
	   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	   if(k > 0 || d != this.s) r[k++] = d;
	 }
	}
	return r;
	}

	function bnEquals(a) { return(this.compareTo(a)==0); }
	function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
	function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

	//(protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r) {
	var i, f, m = Math.min(a.t,this.t);
	for(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);
	if(a.t < this.t) {
	 f = a.s&this.DM;
	 for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);
	 r.t = this.t;
	} else {
	 f = this.s&this.DM;
	 for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);
	 r.t = a.t;
	}
	r.s = op(this.s,a.s);
	r.clamp();
	}

	//(public) this & a
	function op_and(x,y) { return x&y; }
	function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	//(public) this | a
	function op_or(x,y) { return x|y; }
	function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	//(public) this ^ a
	function op_xor(x,y) { return x^y; }
	function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	//(public) this & ~a
	function op_andnot(x,y) { return x&~y; }
	function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	//(public) ~this
	function bnNot() {
	var r = nbi();
	for(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];
	r.t = this.t;
	r.s = ~this.s;
	return r;
	}

	//(public) this << n
	function bnShiftLeft(n) {
	var r = nbi();
	if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	return r;
	}

	//(public) this >> n
	function bnShiftRight(n) {
	var r = nbi();
	if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	return r;
	}

	//return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	if(x == 0) return -1;
	var r = 0;
	if((x&0xffff) == 0) { x >>= 16; r += 16; }
	if((x&0xff) == 0) { x >>= 8; r += 8; }
	if((x&0xf) == 0) { x >>= 4; r += 4; }
	if((x&3) == 0) { x >>= 2; r += 2; }
	if((x&1) == 0) ++r;
	return r;
	}

	//(public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	for(var i = 0; i < this.t; ++i)
	 if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);
	if(this.s < 0) return this.t*this.DB;
	return -1;
	}

	//return number of 1 bits in x
	function cbit(x) {
	var r = 0;
	while(x != 0) { x &= x-1; ++r; }
	return r;
	}

	//(public) return number of set bits
	function bnBitCount() {
	var r = 0, x = this.s&this.DM;
	for(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);
	return r;
	}

	//(public) true iff nth bit is set
	function bnTestBit(n) {
	var j = Math.floor(n/this.DB);
	if(j >= this.t) return(this.s!=0);
	return((this.data[j]&(1<<(n%this.DB)))!=0);
	}

	//(protected) this op (1<<n)
	function bnpChangeBit(n,op) {
	var r = BigInteger.ONE.shiftLeft(n);
	this.bitwiseTo(r,op,r);
	return r;
	}

	//(public) this | (1<<n)
	function bnSetBit(n) { return this.changeBit(n,op_or); }

	//(public) this & ~(1<<n)
	function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	//(public) this ^ (1<<n)
	function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	//(protected) r = this + a
	function bnpAddTo(a,r) {
	var i = 0, c = 0, m = Math.min(a.t,this.t);
	while(i < m) {
	 c += this.data[i]+a.data[i];
	 r.data[i++] = c&this.DM;
	 c >>= this.DB;
	}
	if(a.t < this.t) {
	 c += a.s;
	 while(i < this.t) {
	   c += this.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += this.s;
	} else {
	 c += this.s;
	 while(i < a.t) {
	   c += a.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += a.s;
	}
	r.s = (c<0)?-1:0;
	if(c > 0) r.data[i++] = c;
	else if(c < -1) r.data[i++] = this.DV+c;
	r.t = i;
	r.clamp();
	}

	//(public) this + a
	function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	//(public) this - a
	function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	//(public) this * a
	function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	//(public) this / a
	function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	//(public) this % a
	function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	//(public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	var q = nbi(), r = nbi();
	this.divRemTo(a,q,r);
	return new Array(q,r);
	}

	//(protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	this.data[this.t] = this.am(0,n-1,this,0,0,this.t);
	++this.t;
	this.clamp();
	}

	//(protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w) {
	if(n == 0) return;
	while(this.t <= w) this.data[this.t++] = 0;
	this.data[w] += n;
	while(this.data[w] >= this.DV) {
	 this.data[w] -= this.DV;
	 if(++w >= this.t) this.data[this.t++] = 0;
	 ++this.data[w];
	}
	}

	//A "null" reducer
	function NullExp() {}
	function nNop(x) { return x; }
	function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	function nSqrTo(x,r) { x.squareTo(r); }

	NullExp.prototype.convert = nNop;
	NullExp.prototype.revert = nNop;
	NullExp.prototype.mulTo = nMulTo;
	NullExp.prototype.sqrTo = nSqrTo;

	//(public) this^e
	function bnPow(e) { return this.exp(e,new NullExp()); }

	//(protected) r = lower n words of "this * a", a.t <= n
	//"this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r) {
	var i = Math.min(this.t+a.t,n);
	r.s = 0; // assumes a,this >= 0
	r.t = i;
	while(i > 0) r.data[--i] = 0;
	var j;
	for(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);
	for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);
	r.clamp();
	}

	//(protected) r = "this * a" without lower n words, n > 0
	//"this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r) {
	--n;
	var i = r.t = this.t+a.t-n;
	r.s = 0; // assumes a,this >= 0
	while(--i >= 0) r.data[i] = 0;
	for(i = Math.max(n-this.t,0); i < a.t; ++i)
	 r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);
	r.clamp();
	r.drShiftTo(1,r);
	}

	//Barrett modular reduction
	function Barrett(m) {
	// setup Barrett
	this.r2 = nbi();
	this.q3 = nbi();
	BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	this.mu = this.r2.divide(m);
	this.m = m;
	}

	function barrettConvert(x) {
	if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	else if(x.compareTo(this.m) < 0) return x;
	else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	}

	function barrettRevert(x) { return x; }

	//x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	x.drShiftTo(this.m.t-1,this.r2);
	if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	x.subTo(this.r2,x);
	while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	//r = x^2 mod m; x != r
	function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	//r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Barrett.prototype.convert = barrettConvert;
	Barrett.prototype.revert = barrettRevert;
	Barrett.prototype.reduce = barrettReduce;
	Barrett.prototype.mulTo = barrettMulTo;
	Barrett.prototype.sqrTo = barrettSqrTo;

	//(public) this^e % m (HAC 14.85)
	function bnModPow(e,m) {
	var i = e.bitLength(), k, r = nbv(1), z;
	if(i <= 0) return r;
	else if(i < 18) k = 1;
	else if(i < 48) k = 3;
	else if(i < 144) k = 4;
	else if(i < 768) k = 5;
	else k = 6;
	if(i < 8)
	 z = new Classic(m);
	else if(m.isEven())
	 z = new Barrett(m);
	else
	 z = new Montgomery(m);

	// precomputation
	var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	g[1] = z.convert(this);
	if(k > 1) {
	 var g2 = nbi();
	 z.sqrTo(g[1],g2);
	 while(n <= km) {
	   g[n] = nbi();
	   z.mulTo(g2,g[n-2],g[n]);
	   n += 2;
	 }
	}

	var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	i = nbits(e.data[j])-1;
	while(j >= 0) {
	 if(i >= k1) w = (e.data[j]>>(i-k1))&km;
	 else {
	   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);
	   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);
	 }

	 n = k;
	 while((w&1) == 0) { w >>= 1; --n; }
	 if((i -= n) < 0) { i += this.DB; --j; }
	 if(is1) {  // ret == 1, don't bother squaring or multiplying it
	   g[w].copyTo(r);
	   is1 = false;
	 } else {
	   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	   z.mulTo(r2,g[w],r);
	 }

	 while(j >= 0 && (e.data[j]&(1<<i)) == 0) {
	   z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	   if(--i < 0) { i = this.DB-1; --j; }
	 }
	}
	return z.revert(r);
	}

	//(public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	var x = (this.s<0)?this.negate():this.clone();
	var y = (a.s<0)?a.negate():a.clone();
	if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	if(g < 0) return x;
	if(i < g) g = i;
	if(g > 0) {
	 x.rShiftTo(g,x);
	 y.rShiftTo(g,y);
	}
	while(x.signum() > 0) {
	 if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	 if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	 if(x.compareTo(y) >= 0) {
	   x.subTo(y,x);
	   x.rShiftTo(1,x);
	 } else {
	   y.subTo(x,y);
	   y.rShiftTo(1,y);
	 }
	}
	if(g > 0) y.lShiftTo(g,y);
	return y;
	}

	//(protected) this % n, n < 2^26
	function bnpModInt(n) {
	if(n <= 0) return 0;
	var d = this.DV%n, r = (this.s<0)?n-1:0;
	if(this.t > 0)
	 if(d == 0) r = this.data[0]%n;
	 else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;
	return r;
	}

	//(public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	var ac = m.isEven();
	if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	var u = m.clone(), v = this.clone();
	var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	while(u.signum() != 0) {
	 while(u.isEven()) {
	   u.rShiftTo(1,u);
	   if(ac) {
	     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	     a.rShiftTo(1,a);
	   } else if(!b.isEven()) b.subTo(m,b);
	   b.rShiftTo(1,b);
	 }
	 while(v.isEven()) {
	   v.rShiftTo(1,v);
	   if(ac) {
	     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	     c.rShiftTo(1,c);
	   } else if(!d.isEven()) d.subTo(m,d);
	   d.rShiftTo(1,d);
	 }
	 if(u.compareTo(v) >= 0) {
	   u.subTo(v,u);
	   if(ac) a.subTo(c,a);
	   b.subTo(d,b);
	 } else {
	   v.subTo(u,v);
	   if(ac) c.subTo(a,c);
	   d.subTo(b,d);
	 }
	}
	if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	if(d.compareTo(m) >= 0) return d.subtract(m);
	if(d.signum() < 0) d.addTo(m,d); else return d;
	if(d.signum() < 0) return d.add(m); else return d;
	}

	var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
	var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	//(public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	var i, x = this.abs();
	if(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {
	 for(i = 0; i < lowprimes.length; ++i)
	   if(x.data[0] == lowprimes[i]) return true;
	 return false;
	}
	if(x.isEven()) return false;
	i = 1;
	while(i < lowprimes.length) {
	 var m = lowprimes[i], j = i+1;
	 while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	 m = x.modInt(m);
	 while(i < j) if(m%lowprimes[i++] == 0) return false;
	}
	return x.millerRabin(t);
	}

	//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	var n1 = this.subtract(BigInteger.ONE);
	var k = n1.getLowestSetBit();
	if(k <= 0) return false;
	var r = n1.shiftRight(k);
	var prng = bnGetPrng();
	var a;
	for(var i = 0; i < t; ++i) {
	 // select witness 'a' at random from between 1 and n1
	 do {
	   a = new BigInteger(this.bitLength(), prng);
	 }
	 while(a.compareTo(BigInteger.ONE) <= 0 || a.compareTo(n1) >= 0);
	 var y = a.modPow(r,this);
	 if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	   var j = 1;
	   while(j++ < k && y.compareTo(n1) != 0) {
	     y = y.modPowInt(2,this);
	     if(y.compareTo(BigInteger.ONE) == 0) return false;
	   }
	   if(y.compareTo(n1) != 0) return false;
	 }
	}
	return true;
	}

	// get pseudo random number generator
	function bnGetPrng() {
	  // create prng with api that matches BigInteger secure random
	  return {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = Math.floor(Math.random() * 0x0100);
	      }
	    }
	  };
	}

	//protected
	BigInteger.prototype.chunkSize = bnpChunkSize;
	BigInteger.prototype.toRadix = bnpToRadix;
	BigInteger.prototype.fromRadix = bnpFromRadix;
	BigInteger.prototype.fromNumber = bnpFromNumber;
	BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	BigInteger.prototype.changeBit = bnpChangeBit;
	BigInteger.prototype.addTo = bnpAddTo;
	BigInteger.prototype.dMultiply = bnpDMultiply;
	BigInteger.prototype.dAddOffset = bnpDAddOffset;
	BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	BigInteger.prototype.modInt = bnpModInt;
	BigInteger.prototype.millerRabin = bnpMillerRabin;

	//public
	BigInteger.prototype.clone = bnClone;
	BigInteger.prototype.intValue = bnIntValue;
	BigInteger.prototype.byteValue = bnByteValue;
	BigInteger.prototype.shortValue = bnShortValue;
	BigInteger.prototype.signum = bnSigNum;
	BigInteger.prototype.toByteArray = bnToByteArray;
	BigInteger.prototype.equals = bnEquals;
	BigInteger.prototype.min = bnMin;
	BigInteger.prototype.max = bnMax;
	BigInteger.prototype.and = bnAnd;
	BigInteger.prototype.or = bnOr;
	BigInteger.prototype.xor = bnXor;
	BigInteger.prototype.andNot = bnAndNot;
	BigInteger.prototype.not = bnNot;
	BigInteger.prototype.shiftLeft = bnShiftLeft;
	BigInteger.prototype.shiftRight = bnShiftRight;
	BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	BigInteger.prototype.bitCount = bnBitCount;
	BigInteger.prototype.testBit = bnTestBit;
	BigInteger.prototype.setBit = bnSetBit;
	BigInteger.prototype.clearBit = bnClearBit;
	BigInteger.prototype.flipBit = bnFlipBit;
	BigInteger.prototype.add = bnAdd;
	BigInteger.prototype.subtract = bnSubtract;
	BigInteger.prototype.multiply = bnMultiply;
	BigInteger.prototype.divide = bnDivide;
	BigInteger.prototype.remainder = bnRemainder;
	BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	BigInteger.prototype.modPow = bnModPow;
	BigInteger.prototype.modInverse = bnModInverse;
	BigInteger.prototype.pow = bnPow;
	BigInteger.prototype.gcd = bnGCD;
	BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

	//BigInteger interfaces not implemented in jsbn:

	//BigInteger(int signum, byte[] magnitude)
	//double doubleValue()
	//float floatValue()
	//int hashCode()
	//long longValue()
	//static BigInteger valueOf(long val)

	forge.jsbn = forge.jsbn || {};
	forge.jsbn.BigInteger = BigInteger;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'jsbn';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/jsbn',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
	 *
	 * Modified but based on the following MIT and BSD licensed code:
	 *
	 * https://github.com/kjur/jsjws/blob/master/rsa.js:
	 *
	 * The 'jsjws'(JSON Web Signature JavaScript Library) License
	 *
	 * Copyright (c) 2012 Kenji Urushima
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
	 *
	 * RSAES-OAEP.js
	 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
	 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
	 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
	 * Contact: ellis@nukinetics.com
	 * Distributed under the BSD License.
	 *
	 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
	 *
	 * @author Evan Jones (http://evanjones.ca/)
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for PKCS#1 API
	var pkcs1 = forge.pkcs1 = forge.pkcs1 || {};

	/**
	 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
	 * and seed.
	 *
	 * This method does not perform RSA encryption, it only encodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param message the message to encode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          seed the seed to use.
	 *          md the message digest object to use, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the encoded message bytes.
	 */
	pkcs1.encode_rsa_oaep = function(key, message, options) {
	  // parse arguments
	  var label;
	  var seed;
	  var md;
	  var mgf1Md;
	  // legacy args (label, seed, md)
	  if(typeof options === 'string') {
	    label = options;
	    seed = arguments[3] || undefined;
	    md = arguments[4] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    seed = options.seed || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // default OAEP to SHA-1 message digest
	  if(!md) {
	    md = forge.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  // compute length in bytes and check output
	  var keyLength = Math.ceil(key.n.bitLength() / 8);
	  var maxLength = keyLength - 2 * md.digestLength - 2;
	  if(message.length > maxLength) {
	    var error = new Error('RSAES-OAEP input message length is too long.');
	    error.length = message.length;
	    error.maxLength = maxLength;
	    throw error;
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest();

	  var PS = '';
	  var PS_length = maxLength - message.length;
	  for (var i = 0; i < PS_length; i++) {
	    PS += '\x00';
	  }

	  var DB = lHash.getBytes() + PS + '\x01' + message;

	  if(!seed) {
	    seed = forge.random.getBytes(md.digestLength);
	  } else if(seed.length !== md.digestLength) {
	    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +
	      'match the digest length.')
	    error.seedLength = seed.length;
	    error.digestLength = md.digestLength;
	    throw error;
	  }

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var maskedDB = forge.util.xorBytes(DB, dbMask, DB.length);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var maskedSeed = forge.util.xorBytes(seed, seedMask, seed.length);

	  // return encoded message
	  return '\x00' + maskedSeed + maskedDB;
	};

	/**
	 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
	 * label (L).
	 *
	 * This method does not perform RSA decryption, it only decodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param em the encoded message to decode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          md the message digest object to use for OAEP, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the decoded message bytes.
	 */
	pkcs1.decode_rsa_oaep = function(key, em, options) {
	  // parse args
	  var label;
	  var md;
	  var mgf1Md;
	  // legacy args
	  if(typeof options === 'string') {
	    label = options;
	    md = arguments[3] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // compute length in bytes
	  var keyLength = Math.ceil(key.n.bitLength() / 8);

	  if(em.length !== keyLength) {
	    var error = new Error('RSAES-OAEP encoded message length is invalid.');
	    error.length = em.length;
	    error.expectedLength = keyLength;
	    throw error;
	  }

	  // default OAEP to SHA-1 message digest
	  if(md === undefined) {
	    md = forge.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  if(keyLength < 2 * md.digestLength + 2) {
	    throw new Error('RSAES-OAEP key is too short for the hash function.');
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest().getBytes();

	  // split the message into its parts
	  var y = em.charAt(0);
	  var maskedSeed = em.substring(1, md.digestLength + 1);
	  var maskedDB = em.substring(1 + md.digestLength);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var seed = forge.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var db = forge.util.xorBytes(maskedDB, dbMask, maskedDB.length);

	  var lHashPrime = db.substring(0, md.digestLength);

	  // constant time check that all values match what is expected
	  var error = (y !== '\x00');

	  // constant time check lHash vs lHashPrime
	  for(var i = 0; i < md.digestLength; ++i) {
	    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));
	  }

	  // "constant time" find the 0x1 byte separating the padding (zeros) from the
	  // message
	  // TODO: It must be possible to do this in a better/smarter way?
	  var in_ps = 1;
	  var index = md.digestLength;
	  for(var j = md.digestLength; j < db.length; j++) {
	    var code = db.charCodeAt(j);

	    var is_0 = (code & 0x1) ^ 0x1;

	    // non-zero if not 0 or 1 in the ps section
	    var error_mask = in_ps ? 0xfffe : 0x0000;
	    error |= (code & error_mask);

	    // latch in_ps to zero after we find 0x1
	    in_ps = in_ps & is_0;
	    index += in_ps;
	  }

	  if(error || db.charCodeAt(index) !== 0x1) {
	    throw new Error('Invalid RSAES-OAEP padding.');
	  }

	  return db.substring(index + 1);
	};

	function rsa_mgf1(seed, maskLength, hash) {
	  // default to SHA-1 message digest
	  if(!hash) {
	    hash = forge.md.sha1.create();
	  }
	  var t = '';
	  var count = Math.ceil(maskLength / hash.digestLength);
	  for(var i = 0; i < count; ++i) {
	    var c = String.fromCharCode(
	      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);
	    hash.start();
	    hash.update(seed + c);
	    t += hash.digest().getBytes();
	  }
	  return t.substring(0, maskLength);
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs1',['require', 'module', './util', './random', './sha1'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Prime number generation API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// forge.prime already defined
	if(forge.prime) {
	  return;
	}

	/* PRIME API */
	var prime = forge.prime = forge.prime || {};

	var BigInteger = forge.jsbn.BigInteger;

	// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
	var THIRTY = new BigInteger(null);
	THIRTY.fromInt(30);
	var op_or = function(x, y) {return x|y;};

	/**
	 * Generates a random probable prime with the given number of bits.
	 *
	 * Alternative algorithms can be specified by name as a string or as an
	 * object with custom options like so:
	 *
	 * {
	 *   name: 'PRIMEINC',
	 *   options: {
	 *     maxBlockTime: <the maximum amount of time to block the main
	 *       thread before allowing I/O other JS to run>,
	 *     millerRabinTests: <the number of miller-rabin tests to run>,
	 *     workerScript: <the worker script URL>,
	 *     workers: <the number of web workers (if supported) to use,
	 *       -1 to use estimated cores minus one>.
	 *     workLoad: the size of the work load, ie: number of possible prime
	 *       numbers for each web worker to check per work assignment,
	 *       (default: 100).
	 *   }
	 * }
	 *
	 * @param bits the number of bits for the prime number.
	 * @param options the options to use.
	 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
	 *          [prng] a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *
	 * @return callback(err, num) called once the operation completes.
	 */
	prime.generateProbablePrime = function(bits, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  // default to PRIMEINC algorithm
	  var algorithm = options.algorithm || 'PRIMEINC';
	  if(typeof algorithm === 'string') {
	    algorithm = {name: algorithm};
	  }
	  algorithm.options = algorithm.options || {};

	  // create prng with api that matches BigInteger secure random
	  var prng = options.prng || forge.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  if(algorithm.name === 'PRIMEINC') {
	    return primeincFindPrime(bits, rng, algorithm.options, callback);
	  }

	  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
	};

	function primeincFindPrime(bits, rng, options, callback) {
	  if('workers' in options) {
	    return primeincFindPrimeWithWorkers(bits, rng, options, callback);
	  }
	  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	}

	function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
	  // initialize random number
	  var num = generateRandom(bits, rng);

	  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
	  number we are given is always aligned at 30k + 1. Each time the number is
	  determined not to be prime we add to get to the next 'i', eg: if the number
	  was at 30k + 1 we add 6. */
	  var deltaIdx = 0;

	  // get required number of MR tests
	  var mrTests = getMillerRabinTests(num.bitLength());
	  if('millerRabinTests' in options) {
	    mrTests = options.millerRabinTests;
	  }

	  // find prime nearest to 'num' for maxBlockTime ms
	  // 10 ms gives 5ms of leeway for other calculations before dropping
	  // below 60fps (1000/60 == 16.67), but in reality, the number will
	  // likely be higher due to an 'atomic' big int modPow
	  var maxBlockTime = 10;
	  if('maxBlockTime' in options) {
	    maxBlockTime = options.maxBlockTime;
	  }
	  var start = +new Date();
	  do {
	    // overflow, regenerate random number
	    if(num.bitLength() > bits) {
	      num = generateRandom(bits, rng);
	    }
	    // do primality test
	    if(num.isProbablePrime(mrTests)) {
	      return callback(null, num);
	    }
	    // get next potential prime
	    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));

	  // keep trying (setImmediate would be better here)
	  forge.util.setImmediate(function() {
	    primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	  });
	}

	function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
	  // web workers unavailable
	  if(typeof Worker === 'undefined') {
	    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	  }

	  // initialize random number
	  var num = generateRandom(bits, rng);

	  // use web workers to generate keys
	  var numWorkers = options.workers;
	  var workLoad = options.workLoad || 100;
	  var range = workLoad * 30 / 8;
	  var workerScript = options.workerScript || 'forge/prime.worker.js';
	  if(numWorkers === -1) {
	    return forge.util.estimateCores(function(err, cores) {
	      if(err) {
	        // default to 2
	        cores = 2;
	      }
	      numWorkers = cores - 1;
	      generate();
	    });
	  }
	  generate();

	  function generate() {
	    // require at least 1 worker
	    numWorkers = Math.max(1, numWorkers);

	    // TODO: consider optimizing by starting workers outside getPrime() ...
	    // note that in order to clean up they will have to be made internally
	    // asynchronous which may actually be slower

	    // start workers immediately
	    var workers = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      // FIXME: fix path or use blob URLs
	      workers[i] = new Worker(workerScript);
	    }
	    var running = numWorkers;

	    // listen for requests from workers and assign ranges to find prime
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].addEventListener('message', workerMessage);
	    }

	    /* Note: The distribution of random numbers is unknown. Therefore, each
	    web worker is continuously allocated a range of numbers to check for a
	    random number until one is found.

	    Every 30 numbers will be checked just 8 times, because prime numbers
	    have the form:

	    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

	    Therefore, if we want a web worker to run N checks before asking for
	    a new range of numbers, each range must contain N*30/8 numbers.

	    For 100 checks (workLoad), this is a range of 375. */

	    var found = false;
	    function workerMessage(e) {
	      // ignore message, prime already found
	      if(found) {
	        return;
	      }

	      --running;
	      var data = e.data;
	      if(data.found) {
	        // terminate all workers
	        for(var i = 0; i < workers.length; ++i) {
	          workers[i].terminate();
	        }
	        found = true;
	        return callback(null, new BigInteger(data.prime, 16));
	      }

	      // overflow, regenerate random number
	      if(num.bitLength() > bits) {
	        num = generateRandom(bits, rng);
	      }

	      // assign new range to check
	      var hex = num.toString(16);

	      // start prime search
	      e.target.postMessage({
	        hex: hex,
	        workLoad: workLoad
	      });

	      num.dAddOffset(range, 0);
	    }
	  }
	}

	/**
	 * Generates a random number using the given number of bits and RNG.
	 *
	 * @param bits the number of bits for the number.
	 * @param rng the random number generator to use.
	 *
	 * @return the random number.
	 */
	function generateRandom(bits, rng) {
	  var num = new BigInteger(bits, rng);
	  // force MSB set
	  var bits1 = bits - 1;
	  if(!num.testBit(bits1)) {
	    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
	  }
	  // align number on 30k+1 boundary
	  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
	  return num;
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'prime';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/prime',['require', 'module', './util', './jsbn', './random'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});

	})();

	/**
	 * Javascript implementation of basic RSA algorithms.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The only algorithm currently supported for PKI is RSA.
	 *
	 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
	 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
	 * and a subjectPublicKey of type bit string.
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of RSA, there aren't any.
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm AlgorithmIdentifier,
	 *   subjectPublicKey BIT STRING
	 * }
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * For an RSA public key, the subjectPublicKey is:
	 *
	 * RSAPublicKey ::= SEQUENCE {
	 *   modulus            INTEGER,    -- n
	 *   publicExponent     INTEGER     -- e
	 * }
	 *
	 * PrivateKeyInfo ::= SEQUENCE {
	 *   version                   Version,
	 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
	 *   privateKey                PrivateKey,
	 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * Version ::= INTEGER
	 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
	 * PrivateKey ::= OCTET STRING
	 * Attributes ::= SET OF Attribute
	 *
	 * An RSA private key as the following structure:
	 *
	 * RSAPrivateKey ::= SEQUENCE {
	 *   version Version,
	 *   modulus INTEGER, -- n
	 *   publicExponent INTEGER, -- e
	 *   privateExponent INTEGER, -- d
	 *   prime1 INTEGER, -- p
	 *   prime2 INTEGER, -- q
	 *   exponent1 INTEGER, -- d mod (p-1)
	 *   exponent2 INTEGER, -- d mod (q-1)
	 *   coefficient INTEGER -- (inverse of q) mod p
	 * }
	 *
	 * Version ::= INTEGER
	 *
	 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
	 */
	(function() {
	function initModule(forge) {
	/* ########## Begin module implementation ########## */

	if(typeof BigInteger === 'undefined') {
	  var BigInteger = forge.jsbn.BigInteger;
	}

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/*
	 * RSA encryption and decryption, see RFC 2313.
	 */
	forge.pki = forge.pki || {};
	forge.pki.rsa = forge.rsa = forge.rsa || {};
	var pki = forge.pki;

	// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

	// validator for a PrivateKeyInfo structure
	var privateKeyValidator = {
	  // PrivateKeyInfo
	  name: 'PrivateKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'PrivateKeyInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // privateKeyAlgorithm
	    name: 'PrivateKeyInfo.privateKeyAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'privateKeyOid'
	    }]
	  }, {
	    // PrivateKey
	    name: 'PrivateKeyInfo',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'privateKey'
	  }]
	};

	// validator for an RSA private key
	var rsaPrivateKeyValidator = {
	  // RSAPrivateKey
	  name: 'RSAPrivateKey',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'RSAPrivateKey.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // modulus (n)
	    name: 'RSAPrivateKey.modulus',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPrivateKey.publicExponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPublicExponent'
	  }, {
	    // privateExponent (d)
	    name: 'RSAPrivateKey.privateExponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrivateExponent'
	  }, {
	    // prime1 (p)
	    name: 'RSAPrivateKey.prime1',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime1'
	  }, {
	    // prime2 (q)
	    name: 'RSAPrivateKey.prime2',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime2'
	  }, {
	    // exponent1 (d mod (p-1))
	    name: 'RSAPrivateKey.exponent1',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent1'
	  }, {
	    // exponent2 (d mod (q-1))
	    name: 'RSAPrivateKey.exponent2',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent2'
	  }, {
	    // coefficient ((inverse of q) mod p)
	    name: 'RSAPrivateKey.coefficient',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyCoefficient'
	  }]
	};

	// validator for an RSA public key
	var rsaPublicKeyValidator = {
	  // RSAPublicKey
	  name: 'RSAPublicKey',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // modulus (n)
	    name: 'RSAPublicKey.modulus',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPublicKey.exponent',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyExponent'
	  }]
	};

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator = forge.pki.rsa.publicKeyValidator = {
	  name: 'SubjectPublicKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'subjectPublicKeyInfo',
	  value: [{
	    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'publicKeyOid'
	    }]
	  }, {
	    // subjectPublicKey
	    name: 'SubjectPublicKeyInfo.subjectPublicKey',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    value: [{
	      // RSAPublicKey
	      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      optional: true,
	      captureAsn1: 'rsaPublicKey'
	    }]
	  }]
	};

	/**
	 * Wrap digest in DigestInfo object.
	 *
	 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
	 *
	 * DigestInfo ::= SEQUENCE {
	 *   digestAlgorithm DigestAlgorithmIdentifier,
	 *   digest Digest
	 * }
	 *
	 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	 * Digest ::= OCTET STRING
	 *
	 * @param md the message digest object with the hash to sign.
	 *
	 * @return the encoded message (ready for RSA encrytion)
	 */
	var emsaPkcs1v15encode = function(md) {
	  // get the oid for the algorithm
	  var oid;
	  if(md.algorithm in pki.oids) {
	    oid = pki.oids[md.algorithm];
	  } else {
	    var error = new Error('Unknown message digest algorithm.');
	    error.algorithm = md.algorithm;
	    throw error;
	  }
	  var oidBytes = asn1.oidToDer(oid).getBytes();

	  // create the digest info
	  var digestInfo = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  var digestAlgorithm = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  digestAlgorithm.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));
	  digestAlgorithm.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));
	  var digest = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
	    false, md.digest().getBytes());
	  digestInfo.value.push(digestAlgorithm);
	  digestInfo.value.push(digest);

	  // encode digest info
	  return asn1.toDer(digestInfo).getBytes();
	};

	/**
	 * Performs x^c mod n (RSA encryption or decryption operation).
	 *
	 * @param x the number to raise and mod.
	 * @param key the key to use.
	 * @param pub true if the key is public, false if private.
	 *
	 * @return the result of x^c mod n.
	 */
	var _modPow = function(x, key, pub) {
	  if(pub) {
	    return x.modPow(key.e, key.n);
	  }

	  if(!key.p || !key.q) {
	    // allow calculation without CRT params (slow)
	    return x.modPow(key.d, key.n);
	  }

	  // pre-compute dP, dQ, and qInv if necessary
	  if(!key.dP) {
	    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));
	  }
	  if(!key.dQ) {
	    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));
	  }
	  if(!key.qInv) {
	    key.qInv = key.q.modInverse(key.p);
	  }

	  /* Chinese remainder theorem (CRT) states:

	    Suppose n1, n2, ..., nk are positive integers which are pairwise
	    coprime (n1 and n2 have no common factors other than 1). For any
	    integers x1, x2, ..., xk there exists an integer x solving the
	    system of simultaneous congruences (where ~= means modularly
	    congruent so a ~= b mod n means a mod n = b mod n):

	    x ~= x1 mod n1
	    x ~= x2 mod n2
	    ...
	    x ~= xk mod nk

	    This system of congruences has a single simultaneous solution x
	    between 0 and n - 1. Furthermore, each xk solution and x itself
	    is congruent modulo the product n = n1*n2*...*nk.
	    So x1 mod n = x2 mod n = xk mod n = x mod n.

	    The single simultaneous solution x can be solved with the following
	    equation:

	    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

	    Where x is less than n, xi = x mod ni.

	    For RSA we are only concerned with k = 2. The modulus n = pq, where
	    p and q are coprime. The RSA decryption algorithm is:

	    y = x^d mod n

	    Given the above:

	    x1 = x^d mod p
	    r1 = n/p = q
	    s1 = q^-1 mod p
	    x2 = x^d mod q
	    r2 = n/q = p
	    s2 = p^-1 mod q

	    So y = (x1r1s1 + x2r2s2) mod n
	         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

	    According to Fermat's Little Theorem, if the modulus P is prime,
	    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
	    Since A is not divisible by P it follows that if:
	    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

	    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
	    to calculate). In order to calculate x^d mod p more quickly the
	    exponent d mod (p - 1) is stored in the RSA private key (the same
	    is done for x^d mod q). These values are referred to as dP and dQ
	    respectively. Therefore we now have:

	    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

	    Since we'll be reducing x^dP by modulo p (same for q) we can also
	    reduce x by p (and q respectively) before hand. Therefore, let

	    xp = ((x mod p)^dP mod p), and
	    xq = ((x mod q)^dQ mod q), yielding:

	    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

	    This can be further reduced to a simple algorithm that only
	    requires 1 inverse (the q inverse is used) to be used and stored.
	    The algorithm is called Garner's algorithm. If qInv is the
	    inverse of q, we simply calculate:

	    y = (qInv*(xp - xq) mod p) * q + xq

	    However, there are two further complications. First, we need to
	    ensure that xp > xq to prevent signed BigIntegers from being used
	    so we add p until this is true (since we will be mod'ing with
	    p anyway). Then, there is a known timing attack on algorithms
	    using the CRT. To mitigate this risk, "cryptographic blinding"
	    should be used. This requires simply generating a random number r
	    between 0 and n-1 and its inverse and multiplying x by r^e before
	    calculating y and then multiplying y by r^-1 afterwards. Note that
	    r must be coprime with n (gcd(r, n) === 1) in order to have an
	    inverse.
	  */

	  // cryptographic blinding
	  var r;
	  do {
	    r = new BigInteger(
	      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),
	      16);
	  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));
	  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

	  // calculate xp and xq
	  var xp = x.mod(key.p).modPow(key.dP, key.p);
	  var xq = x.mod(key.q).modPow(key.dQ, key.q);

	  // xp must be larger than xq to avoid signed bit usage
	  while(xp.compareTo(xq) < 0) {
	    xp = xp.add(key.p);
	  }

	  // do last step
	  var y = xp.subtract(xq)
	    .multiply(key.qInv).mod(key.p)
	    .multiply(key.q).add(xq);

	  // remove effect of random for cryptographic blinding
	  y = y.multiply(r.modInverse(key.n)).mod(key.n);

	  return y;
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
	 * 'encrypt' on a public key object instead.
	 *
	 * Performs RSA encryption.
	 *
	 * The parameter bt controls whether to put padding bytes before the
	 * message passed in. Set bt to either true or false to disable padding
	 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
	 * signaling whether the encryption operation is a public key operation
	 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
	 *
	 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
	 * (for signing) or 0x02 (for encryption). The key operation mode (private
	 * or public) is derived from this flag in that case).
	 *
	 * @param m the message to encrypt as a byte string.
	 * @param key the RSA key to use.
	 * @param bt for PKCS#1 v1.5 padding, the block type to use
	 *   (0x01 for private key, 0x02 for public),
	 *   to disable padding: true = public key, false = private key.
	 *
	 * @return the encrypted bytes as a string.
	 */
	pki.rsa.encrypt = function(m, key, bt) {
	  var pub = bt;
	  var eb;

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  if(bt !== false && bt !== true) {
	    // legacy, default to PKCS#1 v1.5 padding
	    pub = (bt === 0x02);
	    eb = _encodePkcs1_v1_5(m, key, bt);
	  } else {
	    eb = forge.util.createBuffer();
	    eb.putBytes(m);
	  }

	  // load encryption block as big integer 'x'
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var x = new BigInteger(eb.toHex(), 16);

	  // do RSA encryption
	  var y = _modPow(x, key, pub);

	  // convert y into the encrypted data byte string, if y is shorter in
	  // bytes than k, then prepend zero bytes to fill up ed
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var yhex = y.toString(16);
	  var ed = forge.util.createBuffer();
	  var zeros = k - Math.ceil(yhex.length / 2);
	  while(zeros > 0) {
	    ed.putByte(0x00);
	    --zeros;
	  }
	  ed.putBytes(forge.util.hexToBytes(yhex));
	  return ed.getBytes();
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
	 * 'verify' on a public key object instead.
	 *
	 * Performs RSA decryption.
	 *
	 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
	 * or not.  Set ml = false to disable padding removal completely
	 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
	 * the RSA encryption block.
	 *
	 * @param ed the encrypted data to decrypt in as a byte string.
	 * @param key the RSA key to use.
	 * @param pub true for a public key operation, false for private.
	 * @param ml the message length, if known, false to disable padding.
	 *
	 * @return the decrypted message as a byte string.
	 */
	pki.rsa.decrypt = function(ed, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  // error if the length of the encrypted data ED is not k
	  if(ed.length !== k) {
	    var error = new Error('Encrypted message length is invalid.');
	    error.length = ed.length;
	    error.expected = k;
	    throw error;
	  }

	  // convert encrypted data into a big integer
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);

	  // y must be less than the modulus or it wasn't the result of
	  // a previous mod operation (encryption) using that modulus
	  if(y.compareTo(key.n) >= 0) {
	    throw new Error('Encrypted message is invalid.');
	  }

	  // do RSA decryption
	  var x = _modPow(y, key, pub);

	  // create the encryption block, if x is shorter in bytes than k, then
	  // prepend zero bytes to fill up eb
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var xhex = x.toString(16);
	  var eb = forge.util.createBuffer();
	  var zeros = k - Math.ceil(xhex.length / 2);
	  while(zeros > 0) {
	    eb.putByte(0x00);
	    --zeros;
	  }
	  eb.putBytes(forge.util.hexToBytes(xhex));

	  if(ml !== false) {
	    // legacy, default to PKCS#1 v1.5 padding
	    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
	  }

	  // return message
	  return eb.getBytes();
	};

	/**
	 * Creates an RSA key-pair generation state object. It is used to allow
	 * key-generation to be performed in steps. It also allows for a UI to
	 * display progress updates.
	 *
	 * @param bits the size for the private key in bits, defaults to 2048.
	 * @param e the public exponent to use, defaults to 65537 (0x10001).
	 * @param [options] the options to use.
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 *
	 * @return the state object to use to generate the key-pair.
	 */
	pki.rsa.createKeyPairGenerationState = function(bits, e, options) {
	  // TODO: migrate step-based prime generation code to forge.prime

	  // set default bits
	  if(typeof(bits) === 'string') {
	    bits = parseInt(bits, 10);
	  }
	  bits = bits || 2048;

	  // create prng with api that matches BigInteger secure random
	  options = options || {};
	  var prng = options.prng || forge.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  var algorithm = options.algorithm || 'PRIMEINC';

	  // create PRIMEINC algorithm state
	  var rval;
	  if(algorithm === 'PRIMEINC') {
	    rval = {
	      algorithm: algorithm,
	      state: 0,
	      bits: bits,
	      rng: rng,
	      eInt: e || 65537,
	      e: new BigInteger(null),
	      p: null,
	      q: null,
	      qBits: bits >> 1,
	      pBits: bits - (bits >> 1),
	      pqState: 0,
	      num: null,
	      keys: null
	    };
	    rval.e.fromInt(rval.eInt);
	  } else {
	    throw new Error('Invalid key generation algorithm: ' + algorithm);
	  }

	  return rval;
	};

	/**
	 * Attempts to runs the key-generation algorithm for at most n seconds
	 * (approximately) using the given state. When key-generation has completed,
	 * the keys will be stored in state.keys.
	 *
	 * To use this function to update a UI while generating a key or to prevent
	 * causing browser lockups/warnings, set "n" to a value other than 0. A
	 * simple pattern for generating a key and showing a progress indicator is:
	 *
	 * var state = pki.rsa.createKeyPairGenerationState(2048);
	 * var step = function() {
	 *   // step key-generation, run algorithm for 100 ms, repeat
	 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
	 *     setTimeout(step, 1);
	 *   } else {
	 *     // key-generation complete
	 *     // TODO: turn off progress indicator here
	 *     // TODO: use the generated key-pair in "state.keys"
	 *   }
	 * };
	 * // TODO: turn on progress indicator here
	 * setTimeout(step, 0);
	 *
	 * @param state the state to use.
	 * @param n the maximum number of milliseconds to run the algorithm for, 0
	 *          to run the algorithm to completion.
	 *
	 * @return true if the key-generation completed, false if not.
	 */
	pki.rsa.stepKeyPairGenerationState = function(state, n) {
	  // set default algorithm if not set
	  if(!('algorithm' in state)) {
	    state.algorithm = 'PRIMEINC';
	  }

	  // TODO: migrate step-based prime generation code to forge.prime
	  // TODO: abstract as PRIMEINC algorithm

	  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
	  // with some minor optimizations and designed to run in steps

	  // local state vars
	  var THIRTY = new BigInteger(null);
	  THIRTY.fromInt(30);
	  var deltaIdx = 0;
	  var op_or = function(x,y) { return x|y; };

	  // keep stepping until time limit is reached or done
	  var t1 = +new Date();
	  var t2;
	  var total = 0;
	  while(state.keys === null && (n <= 0 || total < n)) {
	    // generate p or q
	    if(state.state === 0) {
	      /* Note: All primes are of the form:

	        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

	        When we generate a random number, we always align it at 30k + 1. Each
	        time the number is determined not to be prime we add to get to the
	        next 'i', eg: if the number was at 30k + 1 we add 6. */
	      var bits = (state.p === null) ? state.pBits : state.qBits;
	      var bits1 = bits - 1;

	      // get a random number
	      if(state.pqState === 0) {
	        state.num = new BigInteger(bits, state.rng);
	        // force MSB set
	        if(!state.num.testBit(bits1)) {
	          state.num.bitwiseTo(
	            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);
	        }
	        // align number on 30k+1 boundary
	        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
	        deltaIdx = 0;

	        ++state.pqState;
	      } else if(state.pqState === 1) {
	        // try to make the number a prime
	        if(state.num.bitLength() > bits) {
	          // overflow, try again
	          state.pqState = 0;
	          // do primality test
	        } else if(state.num.isProbablePrime(
	          _getMillerRabinTests(state.num.bitLength()))) {
	          ++state.pqState;
	        } else {
	          // get next potential prime
	          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	        }
	      } else if(state.pqState === 2) {
	        // ensure number is coprime with e
	        state.pqState =
	          (state.num.subtract(BigInteger.ONE).gcd(state.e)
	          .compareTo(BigInteger.ONE) === 0) ? 3 : 0;
	      } else if(state.pqState === 3) {
	        // store p or q
	        state.pqState = 0;
	        if(state.p === null) {
	          state.p = state.num;
	        } else {
	          state.q = state.num;
	        }

	        // advance state if both p and q are ready
	        if(state.p !== null && state.q !== null) {
	          ++state.state;
	        }
	        state.num = null;
	      }
	    } else if(state.state === 1) {
	      // ensure p is larger than q (swap them if not)
	      if(state.p.compareTo(state.q) < 0) {
	        state.num = state.p;
	        state.p = state.q;
	        state.q = state.num;
	      }
	      ++state.state;
	    } else if(state.state === 2) {
	      // compute phi: (p - 1)(q - 1) (Euler's totient function)
	      state.p1 = state.p.subtract(BigInteger.ONE);
	      state.q1 = state.q.subtract(BigInteger.ONE);
	      state.phi = state.p1.multiply(state.q1);
	      ++state.state;
	    } else if(state.state === 3) {
	      // ensure e and phi are coprime
	      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {
	        // phi and e are coprime, advance
	        ++state.state;
	      } else {
	        // phi and e aren't coprime, so generate a new p and q
	        state.p = null;
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 4) {
	      // create n, ensure n is has the right number of bits
	      state.n = state.p.multiply(state.q);

	      // ensure n is right number of bits
	      if(state.n.bitLength() === state.bits) {
	        // success, advance
	        ++state.state;
	      } else {
	        // failed, get new q
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 5) {
	      // set keys
	      var d = state.e.modInverse(state.phi);
	      state.keys = {
	        privateKey: pki.rsa.setPrivateKey(
	          state.n, state.e, d, state.p, state.q,
	          d.mod(state.p1), d.mod(state.q1),
	          state.q.modInverse(state.p)),
	        publicKey: pki.rsa.setPublicKey(state.n, state.e)
	      };
	    }

	    // update timing
	    t2 = +new Date();
	    total += t2 - t1;
	    t1 = t2;
	  }

	  return state.keys !== null;
	};

	/**
	 * Generates an RSA public-private key pair in a single call.
	 *
	 * To generate a key-pair in steps (to allow for progress updates and to
	 * prevent blocking or warnings in slow browsers) then use the key-pair
	 * generation state functions.
	 *
	 * To generate a key-pair asynchronously (either through web-workers, if
	 * available, or by breaking up the work on the main thread), pass a
	 * callback function.
	 *
	 * @param [bits] the size for the private key in bits, defaults to 2048.
	 * @param [e] the public exponent to use, defaults to 65537.
	 * @param [options] options for key-pair generation, if given then 'bits'
	 *          and 'e' must *not* be given:
	 *          bits the size for the private key in bits, (default: 2048).
	 *          e the public exponent to use, (default: 65537 (0x10001)).
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 *          e the public exponent to use, defaults to 65537.
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 * @param [callback(err, keypair)] called once the operation completes.
	 *
	 * @return an object with privateKey and publicKey properties.
	 */
	pki.rsa.generateKeyPair = function(bits, e, options, callback) {
	  // (bits), (options), (callback)
	  if(arguments.length === 1) {
	    if(typeof bits === 'object') {
	      options = bits;
	      bits = undefined;
	    } else if(typeof bits === 'function') {
	      callback = bits;
	      bits = undefined;
	    }
	  } else if(arguments.length === 2) {
	    // (bits, e), (bits, options), (bits, callback), (options, callback)
	    if(typeof bits === 'number') {
	      if(typeof e === 'function') {
	        callback = e;
	        e = undefined;
	      } else if(typeof e !== 'number') {
	        options = e;
	        e = undefined;
	      }
	    } else {
	      options = bits;
	      callback = e;
	      bits = undefined;
	      e = undefined;
	    }
	  } else if(arguments.length === 3) {
	    // (bits, e, options), (bits, e, callback), (bits, options, callback)
	    if(typeof e === 'number') {
	      if(typeof options === 'function') {
	        callback = options;
	        options = undefined;
	      }
	    } else {
	      callback = options;
	      options = e;
	      e = undefined;
	    }
	  }
	  options = options || {};
	  if(bits === undefined) {
	    bits = options.bits || 2048;
	  }
	  if(e === undefined) {
	    e = options.e || 0x10001;
	  }
	  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);
	  if(!callback) {
	    pki.rsa.stepKeyPairGenerationState(state, 0);
	    return state.keys;
	  }
	  _generateKeyPair(state, options, callback);
	};

	/**
	 * Sets an RSA public key from BigIntegers modulus and exponent.
	 *
	 * @param n the modulus.
	 * @param e the exponent.
	 *
	 * @return the public key.
	 */
	pki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {
	  var key = {
	    n: n,
	    e: e
	  };

	  /**
	   * Encrypts the given data with this public key. Newer applications
	   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
	   * legacy applications.
	   *
	   * @param data the byte string to encrypt.
	   * @param scheme the encryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA encryption,
	   *          an object with an 'encode' property set to a function
	   *          with the signature 'function(data, key)' that returns
	   *          a binary-encoded string representing the encoded data.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the encrypted byte string.
	   */
	  key.encrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = {
	        encode: function(m, key, pub) {
	          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
	        }
	      };
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        encode: function(m, key) {
	          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = { encode: function(e) { return e; } };
	    } else if(typeof scheme === 'string') {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // do scheme-based encoding then rsa encryption
	    var e = scheme.encode(data, key, true);
	    return pki.rsa.encrypt(e, key, true);
	  };

	  /**
	   * Verifies the given signature against the given digest.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
	   * signature is an OCTET STRING that holds a DigestInfo.
	   *
	   * DigestInfo ::= SEQUENCE {
	   *   digestAlgorithm DigestAlgorithmIdentifier,
	   *   digest Digest
	   * }
	   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	   * Digest ::= OCTET STRING
	   *
	   * To perform PSS signature verification, provide an instance
	   * of Forge PSS object as the scheme parameter.
	   *
	   * @param digest the message digest hash to compare against the signature,
	   *          as a binary-encoded string.
	   * @param signature the signature to verify, as a binary-encoded string.
	   * @param scheme signature verification scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be expected, but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	   key.verify = function(digest, signature, scheme) {
	     if(typeof scheme === 'string') {
	       scheme = scheme.toUpperCase();
	     } else if(scheme === undefined) {
	       scheme = 'RSASSA-PKCS1-V1_5';
	     }

	     if(scheme === 'RSASSA-PKCS1-V1_5') {
	       scheme = {
	         verify: function(digest, d) {
	           // remove padding
	           d = _decodePkcs1_v1_5(d, key, true);
	           // d is ASN.1 BER-encoded DigestInfo
	           var obj = asn1.fromDer(d);
	           // compare the given digest to the decrypted one
	           return digest === obj.value[1].value;
	         }
	       };
	     } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	       scheme = {
	         verify: function(digest, d) {
	           // remove padding
	           d = _decodePkcs1_v1_5(d, key, true);
	           return digest === d;
	         }
	       };
	     }

	     // do rsa decryption w/o any decoding, then verify -- which does decoding
	     var d = pki.rsa.decrypt(signature, key, true, false);
	     return scheme.verify(digest, d, key.n.bitLength());
	  };

	  return key;
	};

	/**
	 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
	 * prime exponents, and modular multiplicative inverse.
	 *
	 * @param n the modulus.
	 * @param e the public exponent.
	 * @param d the private exponent ((inverse of e) mod n).
	 * @param p the first prime.
	 * @param q the second prime.
	 * @param dP exponent1 (d mod (p-1)).
	 * @param dQ exponent2 (d mod (q-1)).
	 * @param qInv ((inverse of q) mod p)
	 *
	 * @return the private key.
	 */
	pki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(
	  n, e, d, p, q, dP, dQ, qInv) {
	  var key = {
	    n: n,
	    e: e,
	    d: d,
	    p: p,
	    q: q,
	    dP: dP,
	    dQ: dQ,
	    qInv: qInv
	  };

	  /**
	   * Decrypts the given data with this private key. The decryption scheme
	   * must match the one used to encrypt the data.
	   *
	   * @param data the byte string to decrypt.
	   * @param scheme the decryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA decryption.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the decrypted byte string.
	   */
	  key.decrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    // do rsa decryption w/o any decoding
	    var d = pki.rsa.decrypt(data, key, false, false);

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = { decode: _decodePkcs1_v1_5 };
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        decode: function(d, key) {
	          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = { decode: function(d) { return d; } };
	    } else {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // decode according to scheme
	    return scheme.decode(d, key, false);
	  };

	  /**
	   * Signs the given digest, producing a signature.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
	   * an instance of Forge PSS object as the scheme parameter.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param scheme the signature scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be used but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return the signature as a byte string.
	   */
	  key.sign = function(md, scheme) {
	    /* Note: The internal implementation of RSA operations is being
	      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
	      code like the use of an encoding block identifier 'bt' will eventually
	      be removed. */

	    // private key operation
	    var bt = false;

	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    }

	    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
	      scheme = { encode: emsaPkcs1v15encode };
	      bt = 0x01;
	    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	      scheme = { encode: function() { return md; } };
	      bt = 0x01;
	    }

	    // encode and then encrypt
	    var d = scheme.encode(md, key.n.bitLength());
	    return pki.rsa.encrypt(d, key, bt);
	  };

	  return key;
	};

	/**
	 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
	 *
	 * @param rsaKey the ASN.1 RSAPrivateKey.
	 *
	 * @return the ASN.1 PrivateKeyInfo.
	 */
	pki.wrapRsaPrivateKey = function(rsaKey) {
	  // PrivateKeyInfo
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (0)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(0).getBytes()),
	    // privateKeyAlgorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // PrivateKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      asn1.toDer(rsaKey).getBytes())
	    ]);
	};

	/**
	 * Converts a private key from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
	 *          RSAPrivateKey or an RSAPrivateKey.
	 *
	 * @return the private key.
	 */
	pki.privateKeyFromAsn1 = function(obj) {
	  // get PrivateKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {
	    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));
	  }

	  // get RSAPrivateKey
	  capture = {};
	  errors = [];
	  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read private key. ' +
	      'ASN.1 object does not contain an RSAPrivateKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // Note: Version is currently ignored.
	  // capture.privateKeyVersion
	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n, e, d, p, q, dP, dQ, qInv;
	  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();
	  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();
	  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
	  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();
	  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();
	  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();
	  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();
	  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();

	  // set private key
	  return pki.setRsaPrivateKey(
	    new BigInteger(n, 16),
	    new BigInteger(e, 16),
	    new BigInteger(d, 16),
	    new BigInteger(p, 16),
	    new BigInteger(q, 16),
	    new BigInteger(dP, 16),
	    new BigInteger(dQ, 16),
	    new BigInteger(qInv, 16));
	};

	/**
	 * Converts a private key to an ASN.1 RSAPrivateKey.
	 *
	 * @param key the private key.
	 *
	 * @return the ASN.1 representation of an RSAPrivateKey.
	 */
	pki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {
	  // RSAPrivateKey
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (0 = only 2 primes, 1 multiple primes)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(0).getBytes()),
	    // modulus (n)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.e)),
	    // privateExponent (d)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.d)),
	    // privateKeyPrime1 (p)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.p)),
	    // privateKeyPrime2 (q)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.q)),
	    // privateKeyExponent1 (dP)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.dP)),
	    // privateKeyExponent2 (dQ)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.dQ)),
	    // coefficient (qInv)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.qInv))
	  ]);
	};

	/**
	 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @return the public key.
	 */
	pki.publicKeyFromAsn1 = function(obj) {
	  // get SubjectPublicKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {
	    // get oid
	    var oid = asn1.derToOid(capture.publicKeyOid);
	    if(oid !== pki.oids.rsaEncryption) {
	      var error = new Error('Cannot read public key. Unknown OID.');
	      error.oid = oid;
	      throw error;
	    }
	    obj = capture.rsaPublicKey;
	  }

	  // get RSA params
	  errors = [];
	  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read public key. ' +
	      'ASN.1 object does not contain an RSAPublicKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();
	  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();

	  // set public key
	  return pki.setRsaPublicKey(
	    new BigInteger(n, 16),
	    new BigInteger(e, 16));
	};

	/**
	 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a SubjectPublicKeyInfo.
	 */
	pki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {
	  // SubjectPublicKeyInfo
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // AlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),
	      // parameters (null)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // subjectPublicKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [
	      pki.publicKeyToRSAPublicKey(key)
	    ])
	  ]);
	};

	/**
	 * Converts a public key to an ASN.1 RSAPublicKey.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a RSAPublicKey.
	 */
	pki.publicKeyToRSAPublicKey = function(key) {
	  // RSAPublicKey
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // modulus (n)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      _bnToBytes(key.e))
	  ]);
	};

	/**
	 * Encodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param m the message to encode.
	 * @param key the RSA key to use.
	 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
	 *          (for encryption).
	 *
	 * @return the padded byte buffer.
	 */
	function _encodePkcs1_v1_5(m, key, bt) {
	  var eb = forge.util.createBuffer();

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* use PKCS#1 v1.5 padding */
	  if(m.length > (k - 11)) {
	    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
	    error.length = m.length;
	    error.max = k - 11;
	    throw error;
	  }

	  /* A block type BT, a padding string PS, and the data D shall be
	    formatted into an octet string EB, the encryption block:

	    EB = 00 || BT || PS || 00 || D

	    The block type BT shall be a single octet indicating the structure of
	    the encryption block. For this version of the document it shall have
	    value 00, 01, or 02. For a private-key operation, the block type
	    shall be 00 or 01. For a public-key operation, it shall be 02.

	    The padding string PS shall consist of k-3-||D|| octets. For block
	    type 00, the octets shall have value 00; for block type 01, they
	    shall have value FF; and for block type 02, they shall be
	    pseudorandomly generated and nonzero. This makes the length of the
	    encryption block EB equal to k. */

	  // build the encryption block
	  eb.putByte(0x00);
	  eb.putByte(bt);

	  // create the padding
	  var padNum = k - 3 - m.length;
	  var padByte;
	  // private key op
	  if(bt === 0x00 || bt === 0x01) {
	    padByte = (bt === 0x00) ? 0x00 : 0xFF;
	    for(var i = 0; i < padNum; ++i) {
	      eb.putByte(padByte);
	    }
	  } else {
	    // public key op
	    // pad with random non-zero values
	    while(padNum > 0) {
	      var numZeros = 0;
	      var padBytes = forge.random.getBytes(padNum);
	      for(var i = 0; i < padNum; ++i) {
	        padByte = padBytes.charCodeAt(i);
	        if(padByte === 0) {
	          ++numZeros;
	        } else {
	          eb.putByte(padByte);
	        }
	      }
	      padNum = numZeros;
	    }
	  }

	  // zero followed by message
	  eb.putByte(0x00);
	  eb.putBytes(m);

	  return eb;
	}

	/**
	 * Decodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param em the message to decode.
	 * @param key the RSA key to use.
	 * @param pub true if the key is a public key, false if it is private.
	 * @param ml the message length, if specified.
	 *
	 * @return the decoded bytes.
	 */
	function _decodePkcs1_v1_5(em, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* It is an error if any of the following conditions occurs:

	    1. The encryption block EB cannot be parsed unambiguously.
	    2. The padding string PS consists of fewer than eight octets
	      or is inconsisent with the block type BT.
	    3. The decryption process is a public-key operation and the block
	      type BT is not 00 or 01, or the decryption process is a
	      private-key operation and the block type is not 02.
	   */

	  // parse the encryption block
	  var eb = forge.util.createBuffer(em);
	  var first = eb.getByte();
	  var bt = eb.getByte();
	  if(first !== 0x00 ||
	    (pub && bt !== 0x00 && bt !== 0x01) ||
	    (!pub && bt != 0x02) ||
	    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {
	    throw new Error('Encryption block is invalid.');
	  }

	  var padNum = 0;
	  if(bt === 0x00) {
	    // check all padding bytes for 0x00
	    padNum = k - 3 - ml;
	    for(var i = 0; i < padNum; ++i) {
	      if(eb.getByte() !== 0x00) {
	        throw new Error('Encryption block is invalid.');
	      }
	    }
	  } else if(bt === 0x01) {
	    // find the first byte that isn't 0xFF, should be after all padding
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() !== 0xFF) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  } else if(bt === 0x02) {
	    // look for 0x00 byte
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() === 0x00) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  }

	  // zero must be 0x00 and padNum must be (k - 3 - message length)
	  var zero = eb.getByte();
	  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {
	    throw new Error('Encryption block is invalid.');
	  }

	  return eb.getBytes();
	}

	/**
	 * Runs the key-generation algorithm asynchronously, either in the background
	 * via Web Workers, or using the main thread and setImmediate.
	 *
	 * @param state the key-pair generation state.
	 * @param [options] options for key-pair generation:
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2, -1 to use estimated cores minus one).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 * @param callback(err, keypair) called once the operation completes.
	 */
	function _generateKeyPair(state, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  var opts = {
	    algorithm: {
	      name: options.algorithm || 'PRIMEINC',
	      options: {
	        workers: options.workers || 2,
	        workLoad: options.workLoad || 100,
	        workerScript: options.workerScript
	      }
	    }
	  };
	  if('prng' in options) {
	    opts.prng = options.prng;
	  }

	  generate();

	  function generate() {
	    // find p and then q (done in series to simplify)
	    getPrime(state.pBits, function(err, num) {
	      if(err) {
	        return callback(err);
	      }
	      state.p = num;
	      if(state.q !== null) {
	        return finish(err, state.q);
	      }
	      getPrime(state.qBits, finish);
	    });
	  }

	  function getPrime(bits, callback) {
	    forge.prime.generateProbablePrime(bits, opts, callback);
	  }

	  function finish(err, num) {
	    if(err) {
	      return callback(err);
	    }

	    // set q
	    state.q = num;

	    // ensure p is larger than q (swap them if not)
	    if(state.p.compareTo(state.q) < 0) {
	      var tmp = state.p;
	      state.p = state.q;
	      state.q = tmp;
	    }

	    // ensure p is coprime with e
	    if(state.p.subtract(BigInteger.ONE).gcd(state.e)
	      .compareTo(BigInteger.ONE) !== 0) {
	      state.p = null;
	      generate();
	      return;
	    }

	    // ensure q is coprime with e
	    if(state.q.subtract(BigInteger.ONE).gcd(state.e)
	      .compareTo(BigInteger.ONE) !== 0) {
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // compute phi: (p - 1)(q - 1) (Euler's totient function)
	    state.p1 = state.p.subtract(BigInteger.ONE);
	    state.q1 = state.q.subtract(BigInteger.ONE);
	    state.phi = state.p1.multiply(state.q1);

	    // ensure e and phi are coprime
	    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {
	      // phi and e aren't coprime, so generate a new p and q
	      state.p = state.q = null;
	      generate();
	      return;
	    }

	    // create n, ensure n is has the right number of bits
	    state.n = state.p.multiply(state.q);
	    if(state.n.bitLength() !== state.bits) {
	      // failed, get new q
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // set keys
	    var d = state.e.modInverse(state.phi);
	    state.keys = {
	      privateKey: pki.rsa.setPrivateKey(
	        state.n, state.e, d, state.p, state.q,
	        d.mod(state.p1), d.mod(state.q1),
	        state.q.modInverse(state.p)),
	      publicKey: pki.rsa.setPublicKey(state.n, state.e)
	    };

	    callback(null, state.keys);
	  }
	}

	/**
	 * Converts a positive BigInteger into 2's-complement big-endian bytes.
	 *
	 * @param b the big integer to convert.
	 *
	 * @return the bytes.
	 */
	function _bnToBytes(b) {
	  // prepend 0x00 if first byte >= 0x80
	  var hex = b.toString(16);
	  if(hex[0] >= '8') {
	    hex = '00' + hex;
	  }
	  return forge.util.hexToBytes(hex);
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function _getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'rsa';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/rsa',[
	  'require',
	  'module',
	  './asn1',
	  './jsbn',
	  './oids',
	  './pkcs1',
	  './prime',
	  './random',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Password-based encryption functions.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * An EncryptedPrivateKeyInfo:
	 *
	 * EncryptedPrivateKeyInfo ::= SEQUENCE {
	 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
	 *   encryptedData        EncryptedData }
	 *
	 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedData ::= OCTET STRING
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	if(typeof BigInteger === 'undefined') {
	  var BigInteger = forge.jsbn.BigInteger;
	}

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Password-based encryption implementation. */
	var pki = forge.pki = forge.pki || {};
	pki.pbe = forge.pbe = forge.pbe || {};
	var oids = pki.oids;

	// validator for an EncryptedPrivateKeyInfo structure
	// Note: Currently only works w/algorithm params
	var encryptedPrivateKeyValidator = {
	  name: 'EncryptedPrivateKeyInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encryptionOid'
	    }, {
	      name: 'AlgorithmIdentifier.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'encryptionParams'
	    }]
	  }, {
	    // encryptedData
	    name: 'EncryptedPrivateKeyInfo.encryptedData',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encryptedData'
	  }]
	};

	// validator for a PBES2Algorithms structure
	// Note: Currently only works w/PBKDF2 + AES encryption schemes
	var PBES2AlgorithmsValidator = {
	  name: 'PBES2Algorithms',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'PBES2Algorithms.keyDerivationFunc',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.keyDerivationFunc.oid',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'kdfOid'
	    }, {
	      name: 'PBES2Algorithms.params',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'PBES2Algorithms.params.salt',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OCTETSTRING,
	        constructed: false,
	        capture: 'kdfSalt'
	      }, {
	        name: 'PBES2Algorithms.params.iterationCount',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.INTEGER,
	        onstructed: true,
	        capture: 'kdfIterationCount'
	      }]
	    }]
	  }, {
	    name: 'PBES2Algorithms.encryptionScheme',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.encryptionScheme.oid',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encOid'
	    }, {
	      name: 'PBES2Algorithms.encryptionScheme.iv',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OCTETSTRING,
	      constructed: false,
	      capture: 'encIv'
	    }]
	  }]
	};

	var pkcs12PbeParamsValidator = {
	  name: 'pkcs-12PbeParams',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'pkcs-12PbeParams.salt',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'salt'
	  }, {
	    name: 'pkcs-12PbeParams.iterations',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'iterations'
	  }]
	};

	/**
	 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
	 *
	 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
	 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
	 *
	 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
	 *
	 * PBES2-params ::= SEQUENCE {
	 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
	 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
	 * }
	 *
	 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
	 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
	 *
	 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
	 *
	 * PBKDF2-params ::= SEQUENCE {
	 *   salt CHOICE {
	 *     specified OCTET STRING,
	 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
	 *   },
	 *   iterationCount INTEGER (1..MAX),
	 *   keyLength INTEGER (1..MAX) OPTIONAL,
	 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
	 * }
	 *
	 * @param obj the ASN.1 PrivateKeyInfo object.
	 * @param password the password to encrypt with.
	 * @param options:
	 *          algorithm the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
	 *          count the iteration count to use.
	 *          saltSize the salt size to use.
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptPrivateKeyInfo = function(obj, password, options) {
	  // set default options
	  options = options || {};
	  options.saltSize = options.saltSize || 8;
	  options.count = options.count || 2048;
	  options.algorithm = options.algorithm || 'aes128';

	  // generate PBE params
	  var salt = forge.random.getBytesSync(options.saltSize);
	  var count = options.count;
	  var countBytes = asn1.integerToDer(count);
	  var dkLen;
	  var encryptionAlgorithm;
	  var encryptedData;
	  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
	    // Do PBES2
	    var ivLen, encOid, cipherFn;
	    switch(options.algorithm) {
	    case 'aes128':
	      dkLen = 16;
	      ivLen = 16;
	      encOid = oids['aes128-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'aes192':
	      dkLen = 24;
	      ivLen = 16;
	      encOid = oids['aes192-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'aes256':
	      dkLen = 32;
	      ivLen = 16;
	      encOid = oids['aes256-CBC'];
	      cipherFn = forge.aes.createEncryptionCipher;
	      break;
	    case 'des':
	      dkLen = 8;
	      ivLen = 8;
	      encOid = oids['desCBC'];
	      cipherFn = forge.des.createEncryptionCipher;
	      break;
	    default:
	      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	      error.algorithm = options.algorithm;
	      throw error;
	    }

	    // encrypt private key using pbe SHA-1 and AES/DES
	    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen);
	    var iv = forge.random.getBytesSync(ivLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(asn1.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    encryptionAlgorithm = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // keyDerivationFunc
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),
	          // PBKDF2-params
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // salt
	            asn1.create(
	              asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
	            // iteration count
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	              countBytes.getBytes())
	          ])
	        ]),
	        // encryptionScheme
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(encOid).getBytes()),
	          // iv
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)
	        ])
	      ])
	    ]);
	  } else if(options.algorithm === '3des') {
	    // Do PKCS12 PBE
	    dkLen = 24;

	    var saltBytes = new forge.util.ByteBuffer(salt);
	    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
	    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
	    var cipher = forge.des.createEncryptionCipher(dk);
	    cipher.start(iv);
	    cipher.update(asn1.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    encryptionAlgorithm = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),
	      // pkcs-12PbeParams
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // salt
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),
	        // iteration count
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	          countBytes.getBytes())
	      ])
	    ]);
	  } else {
	    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // EncryptedPrivateKeyInfo
	  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // encryptionAlgorithm
	    encryptionAlgorithm,
	    // encryptedData
	    asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)
	  ]);
	  return rval;
	};

	/**
	 * Decrypts a ASN.1 PrivateKeyInfo object.
	 *
	 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
	 * @param password the password to decrypt with.
	 *
	 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
	 */
	pki.decryptPrivateKeyInfo = function(obj, password) {
	  var rval = null;

	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // get cipher
	  var oid = asn1.derToOid(capture.encryptionOid);
	  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);

	  // get encrypted data
	  var encrypted = forge.util.createBuffer(capture.encryptedData);

	  cipher.update(encrypted);
	  if(cipher.finish()) {
	    rval = asn1.fromDer(cipher.output);
	  }

	  return rval;
	};

	/**
	 * Converts a EncryptedPrivateKeyInfo to PEM format.
	 *
	 * @param epki the EncryptedPrivateKeyInfo.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted encrypted private key.
	 */
	pki.encryptedPrivateKeyToPem = function(epki, maxline) {
	  // convert to DER, then PEM-encode
	  var msg = {
	    type: 'ENCRYPTED PRIVATE KEY',
	    body: asn1.toDer(epki).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
	 * is not performed.
	 *
	 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptedPrivateKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {
	    var error = new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM header type is "ENCRYPTED PRIVATE KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  return asn1.fromDer(msg.body);
	};

	/**
	 * Encrypts an RSA private key. By default, the key will be wrapped in
	 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
	 * This is the standard, preferred way to encrypt a private key.
	 *
	 * To produce a non-standard PEM-encrypted private key that uses encapsulated
	 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
	 * private key encryption), set the 'legacy' option to true. Note: Using this
	 * option will cause the iteration count to be forced to 1.
	 *
	 * Note: The 'des' algorithm is supported, but it is not considered to be
	 * secure because it only uses a single 56-bit key. If possible, it is highly
	 * recommended that a different algorithm be used.
	 *
	 * @param rsaKey the RSA key to encrypt.
	 * @param password the password to use.
	 * @param options:
	 *          algorithm: the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
	 *          count: the iteration count to use.
	 *          saltSize: the salt size to use.
	 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
	 *            headers (DEK-Info) private key.
	 *
	 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki.encryptRsaPrivateKey = function(rsaKey, password, options) {
	  // standard PKCS#8
	  options = options || {};
	  if(!options.legacy) {
	    // encrypt PrivateKeyInfo
	    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));
	    rval = pki.encryptPrivateKeyInfo(rval, password, options);
	    return pki.encryptedPrivateKeyToPem(rval);
	  }

	  // legacy non-PKCS#8
	  var algorithm;
	  var iv;
	  var dkLen;
	  var cipherFn;
	  switch(options.algorithm) {
	  case 'aes128':
	    algorithm = 'AES-128-CBC';
	    dkLen = 16;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case 'aes192':
	    algorithm = 'AES-192-CBC';
	    dkLen = 24;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case 'aes256':
	    algorithm = 'AES-256-CBC';
	    dkLen = 32;
	    iv = forge.random.getBytesSync(16);
	    cipherFn = forge.aes.createEncryptionCipher;
	    break;
	  case '3des':
	    algorithm = 'DES-EDE3-CBC';
	    dkLen = 24;
	    iv = forge.random.getBytesSync(8);
	    cipherFn = forge.des.createEncryptionCipher;
	    break;
	  case 'des':
	    algorithm = 'DES-CBC';
	    dkLen = 8;
	    iv = forge.random.getBytesSync(8);
	    cipherFn = forge.des.createEncryptionCipher;
	    break;
	  default:
	    var error = new Error('Could not encrypt RSA private key; unsupported ' +
	      'encryption algorithm "' + options.algorithm + '".');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // encrypt private key using OpenSSL legacy key derivation
	  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	  var cipher = cipherFn(dk);
	  cipher.start(iv);
	  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));
	  cipher.finish();

	  var msg = {
	    type: 'RSA PRIVATE KEY',
	    procType: {
	      version: '4',
	      type: 'ENCRYPTED'
	    },
	    dekInfo: {
	      algorithm: algorithm,
	      parameters: forge.util.bytesToHex(iv).toUpperCase()
	    },
	    body: cipher.output.getBytes()
	  };
	  return forge.pem.encode(msg);
	};

	/**
	 * Decrypts an RSA private key.
	 *
	 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
	 * @param password the password to use.
	 *
	 * @return the RSA key on success, null on failure.
	 */
	pki.decryptRsaPrivateKey = function(pem, password) {
	  var rval = null;

	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&
	    msg.type !== 'PRIVATE KEY' &&
	    msg.type !== 'RSA PRIVATE KEY') {
	    var error = new Error('Could not convert private key from PEM; PEM header type ' +
	      'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
	    error.headerType = error;
	    throw error;
	  }

	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    var dkLen;
	    var cipherFn;
	    switch(msg.dekInfo.algorithm) {
	    case 'DES-CBC':
	      dkLen = 8;
	      cipherFn = forge.des.createDecryptionCipher;
	      break;
	    case 'DES-EDE3-CBC':
	      dkLen = 24;
	      cipherFn = forge.des.createDecryptionCipher;
	      break;
	    case 'AES-128-CBC':
	      dkLen = 16;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'AES-192-CBC':
	      dkLen = 24;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'AES-256-CBC':
	      dkLen = 32;
	      cipherFn = forge.aes.createDecryptionCipher;
	      break;
	    case 'RC2-40-CBC':
	      dkLen = 5;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 40);
	      };
	      break;
	    case 'RC2-64-CBC':
	      dkLen = 8;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 64);
	      };
	      break;
	    case 'RC2-128-CBC':
	      dkLen = 16;
	      cipherFn = function(key) {
	        return forge.rc2.createDecryptionCipher(key, 128);
	      };
	      break;
	    default:
	      var error = new Error('Could not decrypt private key; unsupported ' +
	        'encryption algorithm "' + msg.dekInfo.algorithm + '".');
	      error.algorithm = msg.dekInfo.algorithm;
	      throw error;
	    }

	    // use OpenSSL legacy key derivation
	    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);
	    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(forge.util.createBuffer(msg.body));
	    if(cipher.finish()) {
	      rval = cipher.output.getBytes();
	    } else {
	      return rval;
	    }
	  } else {
	    rval = msg.body;
	  }

	  if(msg.type === 'ENCRYPTED PRIVATE KEY') {
	    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);
	  } else {
	    // decryption already performed above
	    rval = asn1.fromDer(rval);
	  }

	  if(rval !== null) {
	    rval = pki.privateKeyFromAsn1(rval);
	  }

	  return rval;
	};

	/**
	 * Derives a PKCS#12 key.
	 *
	 * @param password the password to derive the key material from, null or
	 *          undefined for none.
	 * @param salt the salt, as a ByteBuffer, to use.
	 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
	 * @param iter the iteration count.
	 * @param n the number of bytes to derive from the password.
	 * @param md the message digest to use, defaults to SHA-1.
	 *
	 * @return a ByteBuffer with the bytes derived from the password.
	 */
	pki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
	  var j, l;

	  if(typeof md === 'undefined' || md === null) {
	    md = forge.md.sha1.create();
	  }

	  var u = md.digestLength;
	  var v = md.blockLength;
	  var result = new forge.util.ByteBuffer();

	  /* Convert password to Unicode byte buffer + trailing 0-byte. */
	  var passBuf = new forge.util.ByteBuffer();
	  if(password !== null && password !== undefined) {
	    for(l = 0; l < password.length; l++) {
	      passBuf.putInt16(password.charCodeAt(l));
	    }
	    passBuf.putInt16(0);
	  }

	  /* Length of salt and password in BYTES. */
	  var p = passBuf.length();
	  var s = salt.length();

	  /* 1. Construct a string, D (the "diversifier"), by concatenating
	        v copies of ID. */
	  var D = new forge.util.ByteBuffer();
	  D.fillWithByte(id, v);

	  /* 2. Concatenate copies of the salt together to create a string S of length
	        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
	        to create S).
	        Note that if the salt is the empty string, then so is S. */
	  var Slen = v * Math.ceil(s / v);
	  var S = new forge.util.ByteBuffer();
	  for(l = 0; l < Slen; l ++) {
	    S.putByte(salt.at(l % s));
	  }

	  /* 3. Concatenate copies of the password together to create a string P of
	        length v * ceil(p / v) bytes (the final copy of the password may be
	        truncated to create P).
	        Note that if the password is the empty string, then so is P. */
	  var Plen = v * Math.ceil(p / v);
	  var P = new forge.util.ByteBuffer();
	  for(l = 0; l < Plen; l ++) {
	    P.putByte(passBuf.at(l % p));
	  }

	  /* 4. Set I=S||P to be the concatenation of S and P. */
	  var I = S;
	  I.putBuffer(P);

	  /* 5. Set c=ceil(n / u). */
	  var c = Math.ceil(n / u);

	  /* 6. For i=1, 2, ..., c, do the following: */
	  for(var i = 1; i <= c; i ++) {
	    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
	    var buf = new forge.util.ByteBuffer();
	    buf.putBytes(D.bytes());
	    buf.putBytes(I.bytes());
	    for(var round = 0; round < iter; round ++) {
	      md.start();
	      md.update(buf.getBytes());
	      buf = md.digest();
	    }

	    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
	          final copy of Ai may be truncated to create B). */
	    var B = new forge.util.ByteBuffer();
	    for(l = 0; l < v; l ++) {
	      B.putByte(buf.at(l % u));
	    }

	    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
	          where k=ceil(s / v) + ceil(p / v), modify I by setting
	          Ij=(Ij+B+1) mod 2v for each j.  */
	    var k = Math.ceil(s / v) + Math.ceil(p / v);
	    var Inew = new forge.util.ByteBuffer();
	    for(j = 0; j < k; j ++) {
	      var chunk = new forge.util.ByteBuffer(I.getBytes(v));
	      var x = 0x1ff;
	      for(l = B.length() - 1; l >= 0; l --) {
	        x = x >> 8;
	        x += B.at(l) + chunk.at(l);
	        chunk.setAt(l, x & 0xff);
	      }
	      Inew.putBuffer(chunk);
	    }
	    I = Inew;

	    /* Add Ai to A. */
	    result.putBuffer(buf);
	  }

	  result.truncate(result.length() - n);
	  return result;
	};

	/**
	 * Get new Forge cipher object instance.
	 *
	 * @param oid the OID (in string notation).
	 * @param params the ASN.1 params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki.pbe.getCipher = function(oid, params, password) {
	  switch(oid) {
	  case pki.oids['pkcs5PBES2']:
	    return pki.pbe.getCipherForPBES2(oid, params, password);

	  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
	    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);

	  default:
	    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'pkcs5PBES2',
	      'pbeWithSHAAnd3-KeyTripleDES-CBC',
	      'pbewithSHAAnd40BitRC2-CBC'
	    ];
	    throw error;
	  }
	};

	/**
	 * Get new Forge cipher object instance according to PBES2 params block.
	 *
	 * The returned cipher instance is already started using the IV
	 * from PBES2 parameter block.
	 *
	 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
	 * @param params the ASN.1 PBES2-params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki.pbe.getCipherForPBES2 = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // check oids
	  oid = asn1.derToOid(capture.kdfOid);
	  if(oid !== pki.oids['pkcs5PBKDF2']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported key derivation function OID.');
	    error.oid = oid;
	    error.supportedOids = ['pkcs5PBKDF2'];
	    throw error;
	  }
	  oid = asn1.derToOid(capture.encOid);
	  if(oid !== pki.oids['aes128-CBC'] &&
	    oid !== pki.oids['aes192-CBC'] &&
	    oid !== pki.oids['aes256-CBC'] &&
	    oid !== pki.oids['des-EDE3-CBC'] &&
	    oid !== pki.oids['desCBC']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported encryption scheme OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
	    throw error;
	  }

	  // set PBE params
	  var salt = capture.kdfSalt;
	  var count = forge.util.createBuffer(capture.kdfIterationCount);
	  count = count.getInt(count.length() << 3);
	  var dkLen;
	  var cipherFn;
	  switch(pki.oids[oid]) {
	  case 'aes128-CBC':
	    dkLen = 16;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'aes192-CBC':
	    dkLen = 24;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'aes256-CBC':
	    dkLen = 32;
	    cipherFn = forge.aes.createDecryptionCipher;
	    break;
	  case 'des-EDE3-CBC':
	    dkLen = 24;
	    cipherFn = forge.des.createDecryptionCipher;
	    break;
	  case 'desCBC':
	    dkLen = 8;
	    cipherFn = forge.des.createDecryptionCipher;
	    break;
	  }

	  // decrypt private key using pbe SHA-1 and AES/DES
	  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen);
	  var iv = capture.encIv;
	  var cipher = cipherFn(dk);
	  cipher.start(iv);

	  return cipher;
	};

	/**
	 * Get new Forge cipher object instance for PKCS#12 PBE.
	 *
	 * The returned cipher instance is already started using the key & IV
	 * derived from the provided password and PKCS#12 PBE salt.
	 *
	 * @param oid The PKCS#12 PBE OID (in string notation).
	 * @param params The ASN.1 PKCS#12 PBE-params object.
	 * @param password The password to decrypt with.
	 *
	 * @return the new cipher object instance.
	 */
	pki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var salt = forge.util.createBuffer(capture.salt);
	  var count = forge.util.createBuffer(capture.iterations);
	  count = count.getInt(count.length() << 3);

	  var dkLen, dIvLen, cipherFn;
	  switch(oid) {
	    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	      dkLen = 24;
	      dIvLen = 8;
	      cipherFn = forge.des.startDecrypting;
	      break;

	    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:
	      dkLen = 5;
	      dIvLen = 8;
	      cipherFn = function(key, iv) {
	        var cipher = forge.rc2.createDecryptionCipher(key, 40);
	        cipher.start(iv, null);
	        return cipher;
	      };
	      break;

	    default:
	      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
	      error.oid = oid;
	      throw error;
	  }

	  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen);
	  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen);

	  return cipherFn(key, iv);
	};

	/**
	 * OpenSSL's legacy key derivation function.
	 *
	 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
	 *
	 * @param password the password to derive the key from.
	 * @param salt the salt to use, null for none.
	 * @param dkLen the number of bytes needed for the derived key.
	 * @param [options] the options to use:
	 *          [md] an optional message digest object to use.
	 */
	pki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
	  if(typeof md === 'undefined' || md === null) {
	    md = forge.md.md5.create();
	  }
	  if(salt === null) {
	    salt = '';
	  }
	  var digests = [hash(md, password + salt)];
	  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {
	    digests.push(hash(md, digests[i - 1] + password + salt));
	  }
	  return digests.join('').substr(0, dkLen);
	};

	function hash(md, bytes) {
	  return md.start().update(bytes).digest().getBytes();
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pbe';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pbe',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './md',
	  './oids',
	  './pem',
	  './pbkdf2',
	  './random',
	  './rc2',
	  './rsa',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * The ASN.1 representation of PKCS#7 is as follows
	 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
	 *
	 * A PKCS#7 message consists of a ContentInfo on root level, which may
	 * contain any number of further ContentInfo nested into it.
	 *
	 * ContentInfo ::= SEQUENCE {
	 *   contentType                ContentType,
	 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
	 * }
	 *
	 * ContentType ::= OBJECT IDENTIFIER
	 *
	 * EnvelopedData ::= SEQUENCE {
	 *   version                    Version,
	 *   recipientInfos             RecipientInfos,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * EncryptedData ::= SEQUENCE {
	 *   version                    Version,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
	 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
	 *
	 * SignedData ::= SEQUENCE {
	 *   version           INTEGER,
	 *   digestAlgorithms  DigestAlgorithmIdentifiers,
	 *   contentInfo       ContentInfo,
	 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
	 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
	 *   signerInfos       SignerInfos
	 * }
	 *
	 * SignerInfos ::= SET OF SignerInfo
	 *
	 * SignerInfo ::= SEQUENCE {
	 *   version                    Version,
	 *   issuerAndSerialNumber      IssuerAndSerialNumber,
	 *   digestAlgorithm            DigestAlgorithmIdentifier,
	 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
	 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
	 *   encryptedDigest            EncryptedDigest,
	 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * EncryptedDigest ::= OCTET STRING
	 *
	 * Attributes ::= SET OF Attribute
	 *
	 * Attribute ::= SEQUENCE {
	 *   attrType    OBJECT IDENTIFIER,
	 *   attrValues  SET OF AttributeValue
	 * }
	 *
	 * AttributeValue ::= ANY
	 *
	 * Version ::= INTEGER
	 *
	 * RecipientInfos ::= SET OF RecipientInfo
	 *
	 * EncryptedContentInfo ::= SEQUENCE {
	 *   contentType                 ContentType,
	 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
	 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
	 * }
	 *
	 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of AES and DES3, there is only one,
	 * the IV.
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *    algorithm OBJECT IDENTIFIER,
	 *    parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * EncryptedContent ::= OCTET STRING
	 *
	 * RecipientInfo ::= SEQUENCE {
	 *   version                     Version,
	 *   issuerAndSerialNumber       IssuerAndSerialNumber,
	 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
	 *   encryptedKey                EncryptedKey
	 * }
	 *
	 * IssuerAndSerialNumber ::= SEQUENCE {
	 *   issuer                      Name,
	 *   serialNumber                CertificateSerialNumber
	 * }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedKey ::= OCTET STRING
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for ASN.1 API
	var asn1 = forge.asn1;

	// shortcut for PKCS#7 API
	var p7v = forge.pkcs7asn1 = forge.pkcs7asn1 || {};
	forge.pkcs7 = forge.pkcs7 || {};
	forge.pkcs7.asn1 = p7v;

	var contentInfoValidator = {
	  name: 'ContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'ContentInfo.ContentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'ContentInfo.content',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    captureAsn1: 'content'
	  }]
	};
	p7v.contentInfoValidator = contentInfoValidator;

	var encryptedContentInfoValidator = {
	  name: 'EncryptedContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedContentInfo.contentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      captureAsn1: 'encParameter'
	    }]
	  }, {
	    name: 'EncryptedContentInfo.encryptedContent',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
	     * other implementations do generate.
	     *
	     * OpenSSL generates a structure like this:
	     * SEQUENCE {
	     *    ...
	     *    [0]
	     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *       ...
	     * }
	     *
	     * Whereas other implementations (and this PKCS#7 module) generate:
	     * SEQUENCE {
	     *    ...
	     *    [0] {
	     *       OCTET STRING
	     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *          ...
	     *    }
	     * }
	     *
	     * In order to support both, we just capture the context specific
	     * field here.  The OCTET STRING bit is removed below.
	     */
	    capture: 'encryptedContent',
	    captureAsn1: 'encryptedContentAsn1'
	  }]
	};

	p7v.envelopedDataValidator = {
	  name: 'EnvelopedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EnvelopedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'EnvelopedData.RecipientInfos',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    captureAsn1: 'recipientInfos'
	  }].concat(encryptedContentInfoValidator)
	};

	p7v.encryptedDataValidator = {
	  name: 'EncryptedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }].concat(encryptedContentInfoValidator)
	};

	var signerValidator = {
	  name: 'SignerInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignerInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false
	  }, {
	    name: 'SignerInfo.issuerAndSerialNumber',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.issuerAndSerialNumber.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'SignerInfo.digestAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.digestAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'digestAlgorithm'
	    }, {
	      name: 'SignerInfo.digestAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'digestParameter',
	      optional: true
	    }]
	  }, {
	    name: 'SignerInfo.authenticatedAttributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'authenticatedAttributes'
	  }, {
	    name: 'SignerInfo.digestEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    capture: 'signatureAlgorithm'
	  }, {
	    name: 'SignerInfo.encryptedDigest',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'signature'
	  }, {
	    name: 'SignerInfo.unauthenticatedAttributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    optional: true,
	    capture: 'unauthenticatedAttributes'
	  }]
	};

	p7v.signedDataValidator = {
	  name: 'SignedData',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignedData.Version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'SignedData.DigestAlgorithms',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    captureAsn1: 'digestAlgorithms'
	  },
	  contentInfoValidator,
	  {
	    name: 'SignedData.Certificates',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    optional: true,
	    captureAsn1: 'certificates'
	  }, {
	    name: 'SignedData.CertificateRevocationLists',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    optional: true,
	    captureAsn1: 'crls'
	  }, {
	    name: 'SignedData.SignerInfos',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    capture: 'signerInfos',
	    optional: true,
	    value: [signerValidator]
	  }]
	};

	p7v.recipientInfoValidator = {
	  name: 'RecipientInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'RecipientInfo.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'RecipientInfo.issuerAndSerial',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.issuerAndSerial.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'RecipientInfo.issuerAndSerial.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'RecipientInfo.keyEncryptionAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
	      tagClass: asn1.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'encParameter'
	    }]
	  }, {
	    name: 'RecipientInfo.encryptedKey',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encKey'
	  }]
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs7asn1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs7asn1',['require', 'module', './asn1', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of mask generation function MGF1.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.mgf = forge.mgf || {};
	var mgf1 = forge.mgf.mgf1 = forge.mgf1 = forge.mgf1 || {};

	/**
	 * Creates a MGF1 mask generation function object.
	 *
	 * @param md the message digest API to use (eg: forge.md.sha1.create()).
	 *
	 * @return a mask generation function object.
	 */
	mgf1.create = function(md) {
	  var mgf = {
	    /**
	     * Generate mask of specified length.
	     *
	     * @param {String} seed The seed for mask generation.
	     * @param maskLen Number of bytes to generate.
	     * @return {String} The generated mask.
	     */
	    generate: function(seed, maskLen) {
	      /* 2. Let T be the empty octet string. */
	      var t = new forge.util.ByteBuffer();

	      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */
	      var len = Math.ceil(maskLen / md.digestLength);
	      for(var i = 0; i < len; i++) {
	        /* a. Convert counter to an octet string C of length 4 octets */
	        var c = new forge.util.ByteBuffer();
	        c.putInt32(i);

	        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
	         * string T: */
	        md.start();
	        md.update(seed + c.getBytes());
	        t.putBuffer(md.digest());
	      }

	      /* Output the leading maskLen octets of T as the octet string mask. */
	      t.truncate(t.length() - maskLen);
	      return t.getBytes();
	    }
	  };

	  return mgf;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'mgf1';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/mgf1',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge mask generation functions.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.mgf = forge.mgf || {};
	forge.mgf.mgf1 = forge.mgf1;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'mgf';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/mgf',['require', 'module', './mgf1'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#1 PSS signature padding.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for PSS API
	var pss = forge.pss = forge.pss || {};

	/**
	 * Creates a PSS signature scheme object.
	 *
	 * There are several ways to provide a salt for encoding:
	 *
	 * 1. Specify the saltLength only and the built-in PRNG will generate it.
	 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
	 *   will be used.
	 * 3. Specify the salt itself as a forge.util.ByteBuffer.
	 *
	 * @param options the options to use:
	 *          md the message digest object to use, a forge md instance.
	 *          mgf the mask generation function to use, a forge mgf instance.
	 *          [saltLength] the length of the salt in octets.
	 *          [prng] the pseudo-random number generator to use to produce a salt.
	 *          [salt] the salt to use when encoding.
	 *
	 * @return a signature scheme object.
	 */
	pss.create = function(options) {
	  // backwards compatibility w/legacy args: hash, mgf, sLen
	  if(arguments.length === 3) {
	    options = {
	      md: arguments[0],
	      mgf: arguments[1],
	      saltLength: arguments[2]
	    };
	  }

	  var hash = options.md;
	  var mgf = options.mgf;
	  var hLen = hash.digestLength;

	  var salt_ = options.salt || null;
	  if(typeof salt_ === 'string') {
	    // assume binary-encoded string
	    salt_ = forge.util.createBuffer(salt_);
	  }

	  var sLen;
	  if('saltLength' in options) {
	    sLen = options.saltLength;
	  } else if(salt_ !== null) {
	    sLen = salt_.length();
	  } else {
	    throw new Error('Salt length not specified or specific salt not given.');
	  }

	  if(salt_ !== null && salt_.length() !== sLen) {
	    throw new Error('Given salt length does not match length of given salt.');
	  }

	  var prng = options.prng || forge.random;

	  var pssobj = {};

	  /**
	   * Encodes a PSS signature.
	   *
	   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return the encoded message as a binary-encoded string of length
	   *           ceil((modBits - 1) / 8).
	   */
	  pssobj.encode = function(md, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* 2. Let mHash = Hash(M), an octet string of length hLen. */
	    var mHash = md.digest().getBytes();

	    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Message is too long to encrypt.');
	    }

	    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
	     *    then salt is the empty string. */
	    var salt;
	    if(salt_ === null) {
	      salt = prng.getBytesSync(sLen);
	    } else {
	      salt = salt_.bytes();
	    }

	    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */
	    var m_ = new forge.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 6. Let H = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h = hash.digest().getBytes();

	    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
	     *    zero octets.  The length of PS may be 0. */
	    var ps = new forge.util.ByteBuffer();
	    ps.fillWithByte(0, emLen - sLen - hLen - 2);

	    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
	     *    emLen - hLen - 1. */
	    ps.putByte(0x01);
	    ps.putBytes(salt);
	    var db = ps.getBytes();

	    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var maskLen = emLen - hLen - 1;
	    var dbMask = mgf.generate(h, maskLen);

	    /* 10. Let maskedDB = DB \xor dbMask. */
	    var maskedDB = '';
	    for(i = 0; i < maskLen; i ++) {
	      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
	     *     maskedDB to zero. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +
	      maskedDB.substr(1);

	    /* 12. Let EM = maskedDB || H || 0xbc.
	     * 13. Output EM. */
	    return maskedDB + h + String.fromCharCode(0xbc);
	  };

	  /**
	   * Verifies a PSS signature.
	   *
	   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
	   *
	   * @param mHash the message digest hash, as a binary-encoded string, to
	   *         compare against the signature.
	   * @param em the encoded message, as a binary-encoded string
	   *          (RSA decryption result).
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	  pssobj.verify = function(mHash, em, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* c. Convert the message representative m to an encoded message EM
	     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
	     *    is the length in bits of the RSA modulus n */
	    em = em.substr(-emLen);

	    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Inconsistent parameters to PSS signature verification.');
	    }

	    /* 4. If the rightmost octet of EM does not have hexadecimal value
	     *    0xbc, output "inconsistent" and stop. */
	    if(em.charCodeAt(emLen - 1) !== 0xbc) {
	      throw new Error('Encoded message does not end in 0xBC.');
	    }

	    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
	     *    let H be the next hLen octets. */
	    var maskLen = emLen - hLen - 1;
	    var maskedDB = em.substr(0, maskLen);
	    var h = em.substr(maskLen, hLen);

	    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
	     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    if((maskedDB.charCodeAt(0) & mask) !== 0) {
	      throw new Error('Bits beyond keysize not zero as expected.');
	    }

	    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var dbMask = mgf.generate(h, maskLen);

	    /* 8. Let DB = maskedDB \xor dbMask. */
	    var db = '';
	    for(i = 0; i < maskLen; i ++) {
	      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
	     * in DB to zero. */
	    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);

	    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
	     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
	     * position is "position 1") does not have hexadecimal value 0x01,
	     * output "inconsistent" and stop. */
	    var checkLen = emLen - hLen - sLen - 2;
	    for(i = 0; i < checkLen; i ++) {
	      if(db.charCodeAt(i) !== 0x00) {
	        throw new Error('Leftmost octets not zero as expected');
	      }
	    }

	    if(db.charCodeAt(checkLen) !== 0x01) {
	      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
	    }

	    /* 11. Let salt be the last sLen octets of DB. */
	    var salt = db.substr(-sLen);

	    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */
	    var m_ = new forge.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 13. Let H' = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h_ = hash.digest().getBytes();

	    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */
	    return h === h_;
	  };

	  return pssobj;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pss';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pss',['require', 'module', './random', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of X.509 and related components (such as
	 * Certification Signing Requests) of a Public Key Infrastructure.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The ASN.1 representation of an X.509v3 certificate is as follows
	 * (see RFC 2459):
	 *
	 * Certificate ::= SEQUENCE {
	 *   tbsCertificate       TBSCertificate,
	 *   signatureAlgorithm   AlgorithmIdentifier,
	 *   signatureValue       BIT STRING
	 * }
	 *
	 * TBSCertificate ::= SEQUENCE {
	 *   version         [0]  EXPLICIT Version DEFAULT v1,
	 *   serialNumber         CertificateSerialNumber,
	 *   signature            AlgorithmIdentifier,
	 *   issuer               Name,
	 *   validity             Validity,
	 *   subject              Name,
	 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
	 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
	 *                        -- If present, version shall be v3
	 * }
	 *
	 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * Name ::= CHOICE {
	 *   // only one possible choice for now
	 *   RDNSequence
	 * }
	 *
	 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
	 *
	 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
	 *
	 * AttributeTypeAndValue ::= SEQUENCE {
	 *   type     AttributeType,
	 *   value    AttributeValue
	 * }
	 * AttributeType ::= OBJECT IDENTIFIER
	 * AttributeValue ::= ANY DEFINED BY AttributeType
	 *
	 * Validity ::= SEQUENCE {
	 *   notBefore      Time,
	 *   notAfter       Time
	 * }
	 *
	 * Time ::= CHOICE {
	 *   utcTime        UTCTime,
	 *   generalTime    GeneralizedTime
	 * }
	 *
	 * UniqueIdentifier ::= BIT STRING
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm            AlgorithmIdentifier,
	 *   subjectPublicKey     BIT STRING
	 * }
	 *
	 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
	 *
	 * Extension ::= SEQUENCE {
	 *   extnID      OBJECT IDENTIFIER,
	 *   critical    BOOLEAN DEFAULT FALSE,
	 *   extnValue   OCTET STRING
	 * }
	 *
	 * The only key algorithm currently supported for PKI is RSA.
	 *
	 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
	 *
	 * PKCS#10 v1.7 describes certificate signing requests:
	 *
	 * CertificationRequestInfo:
	 *
	 * CertificationRequestInfo ::= SEQUENCE {
	 *   version       INTEGER { v1(0) } (v1,...),
	 *   subject       Name,
	 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
	 *   attributes    [0] Attributes{{ CRIAttributes }}
	 * }
	 *
	 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
	 *
	 * CRIAttributes  ATTRIBUTE  ::= {
	 *   ... -- add any locally defined attributes here -- }
	 *
	 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
	 *   type   ATTRIBUTE.&id({IOSet}),
	 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
	 * }
	 *
	 * CertificationRequest ::= SEQUENCE {
	 *   certificationRequestInfo CertificationRequestInfo,
	 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
	 *   signature          BIT STRING
	 * }
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Public Key Infrastructure (PKI) implementation. */
	var pki = forge.pki = forge.pki || {};
	var oids = pki.oids;

	// short name OID mappings
	var _shortNames = {};
	_shortNames['CN'] = oids['commonName'];
	_shortNames['commonName'] = 'CN';
	_shortNames['C'] = oids['countryName'];
	_shortNames['countryName'] = 'C';
	_shortNames['L'] = oids['localityName'];
	_shortNames['localityName'] = 'L';
	_shortNames['ST'] = oids['stateOrProvinceName'];
	_shortNames['stateOrProvinceName'] = 'ST';
	_shortNames['O'] = oids['organizationName'];
	_shortNames['organizationName'] = 'O';
	_shortNames['OU'] = oids['organizationalUnitName'];
	_shortNames['organizationalUnitName'] = 'OU';
	_shortNames['E'] = oids['emailAddress'];
	_shortNames['emailAddress'] = 'E';

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator = forge.pki.rsa.publicKeyValidator;

	// validator for an X.509v3 certificate
	var x509CertificateValidator = {
	  name: 'Certificate',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'Certificate.TBSCertificate',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'tbsCertificate',
	    value: [{
	      name: 'Certificate.TBSCertificate.version',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 0,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.version.integer',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.INTEGER,
	        constructed: false,
	        capture: 'certVersion'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.serialNumber',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      capture: 'certSerialNumber'
	    }, {
	      name: 'Certificate.TBSCertificate.signature',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.signature.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'certinfoSignatureOid'
	      }, {
	        name: 'Certificate.TBSCertificate.signature.parameters',
	        tagClass: asn1.Class.UNIVERSAL,
	        optional: true,
	        captureAsn1: 'certinfoSignatureParams'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.issuer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certIssuer'
	    }, {
	      name: 'Certificate.TBSCertificate.validity',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      // Note: UTC and generalized times may both appear so the capture
	      // names are based on their detected order, the names used below
	      // are only for the common case, which validity time really means
	      // "notBefore" and which means "notAfter" will be determined by order
	      value: [{
	        // notBefore (Time) (UTC time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity1UTCTime'
	      }, {
	        // notBefore (Time) (generalized time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity2GeneralizedTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity3UTCTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity4GeneralizedTime'
	      }]
	    }, {
	      // Name (subject) (RDNSequence)
	      name: 'Certificate.TBSCertificate.subject',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certSubject'
	    },
	      // SubjectPublicKeyInfo
	      publicKeyValidator,
	    {
	      // issuerUniqueID (optional)
	      name: 'Certificate.TBSCertificate.issuerUniqueID',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 1,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.BITSTRING,
	        constructed: false,
	        capture: 'certIssuerUniqueId'
	      }]
	    }, {
	      // subjectUniqueID (optional)
	      name: 'Certificate.TBSCertificate.subjectUniqueID',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 2,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.BITSTRING,
	        constructed: false,
	        capture: 'certSubjectUniqueId'
	      }]
	    }, {
	      // Extensions (optional)
	      name: 'Certificate.TBSCertificate.extensions',
	      tagClass: asn1.Class.CONTEXT_SPECIFIC,
	      type: 3,
	      constructed: true,
	      captureAsn1: 'certExtensions',
	      optional: true
	    }]
	  }, {
	    // AlgorithmIdentifier (signature algorithm)
	    name: 'Certificate.signatureAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      // algorithm
	      name: 'Certificate.signatureAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'certSignatureOid'
	    }, {
	      name: 'Certificate.TBSCertificate.signature.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      optional: true,
	      captureAsn1: 'certSignatureParams'
	    }]
	  }, {
	    // SignatureValue
	    name: 'Certificate.signatureValue',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    capture: 'certSignature'
	  }]
	};

	var rsassaPssParameterValidator = {
	  name: 'rsapss',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'rsapss.hashAlgorithm',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    value: [{
	      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'hashOid'
	        /* parameter block omitted, for SHA1 NULL anyhow. */
	      }]
	    }]
	  }, {
	    name: 'rsapss.maskGenAlgorithm',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    value: [{
	      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false,
	        capture: 'maskGenOid'
	      }, {
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SEQUENCE,
	        constructed: true,
	        value: [{
	          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
	          tagClass: asn1.Class.UNIVERSAL,
	          type: asn1.Type.OID,
	          constructed: false,
	          capture: 'maskGenHashOid'
	          /* parameter block omitted, for SHA1 NULL anyhow. */
	        }]
	      }]
	    }]
	  }, {
	    name: 'rsapss.saltLength',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 2,
	    optional: true,
	    value: [{
	      name: 'rsapss.saltLength.saltLength',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.INTEGER,
	      constructed: false,
	      capture: 'saltLength'
	    }]
	  }, {
	    name: 'rsapss.trailerField',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 3,
	    optional: true,
	    value: [{
	      name: 'rsapss.trailer.trailer',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.INTEGER,
	      constructed: false,
	      capture: 'trailer'
	    }]
	  }]
	};

	// validator for a CertificationRequestInfo structure
	var certificationRequestInfoValidator = {
	  name: 'CertificationRequestInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'certificationRequestInfo',
	  value: [{
	    name: 'CertificationRequestInfo.integer',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'certificationRequestInfoVersion'
	  }, {
	    // Name (subject) (RDNSequence)
	    name: 'CertificationRequestInfo.subject',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'certificationRequestInfoSubject'
	  },
	  // SubjectPublicKeyInfo
	  publicKeyValidator,
	  {
	    name: 'CertificationRequestInfo.attributes',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'certificationRequestInfoAttributes',
	    value: [{
	      name: 'CertificationRequestInfo.attributes',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'CertificationRequestInfo.attributes.type',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OID,
	        constructed: false
	      }, {
	        name: 'CertificationRequestInfo.attributes.value',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SET,
	        constructed: true
	      }]
	    }]
	  }]
	};

	// validator for a CertificationRequest structure
	var certificationRequestValidator = {
	  name: 'CertificationRequest',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'csr',
	  value: [
	    certificationRequestInfoValidator, {
	    // AlgorithmIdentifier (signature algorithm)
	    name: 'CertificationRequest.signatureAlgorithm',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      // algorithm
	      name: 'CertificationRequest.signatureAlgorithm.algorithm',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OID,
	      constructed: false,
	      capture: 'csrSignatureOid'
	    }, {
	      name: 'CertificationRequest.signatureAlgorithm.parameters',
	      tagClass: asn1.Class.UNIVERSAL,
	      optional: true,
	      captureAsn1: 'csrSignatureParams'
	    }]
	  }, {
	    // signature
	    name: 'CertificationRequest.signature',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.BITSTRING,
	    constructed: false,
	    capture: 'csrSignature'
	  }]
	};

	/**
	 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
	 * sets into an array with objects that have type and value properties.
	 *
	 * @param rdn the RDNSequence to convert.
	 * @param md a message digest to append type and value to if provided.
	 */
	pki.RDNAttributesAsArray = function(rdn, md) {
	  var rval = [];

	  // each value in 'rdn' in is a SET of RelativeDistinguishedName
	  var set, attr, obj;
	  for(var si = 0; si < rdn.value.length; ++si) {
	    // get the RelativeDistinguishedName set
	    set = rdn.value[si];

	    // each value in the SET is an AttributeTypeAndValue sequence
	    // containing first a type (an OID) and second a value (defined by
	    // the OID)
	    for(var i = 0; i < set.value.length; ++i) {
	      obj = {};
	      attr = set.value[i];
	      obj.type = asn1.derToOid(attr.value[0].value);
	      obj.value = attr.value[1].value;
	      obj.valueTagClass = attr.value[1].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      if(md) {
	        md.update(obj.type);
	        md.update(obj.value);
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Converts ASN.1 CRIAttributes into an array with objects that have type and
	 * value properties.
	 *
	 * @param attributes the CRIAttributes to convert.
	 */
	pki.CRIAttributesAsArray = function(attributes) {
	  var rval = [];

	  // each value in 'attributes' in is a SEQUENCE with an OID and a SET
	  for(var si = 0; si < attributes.length; ++si) {
	    // get the attribute sequence
	    var seq = attributes[si];

	    // each value in the SEQUENCE containing first a type (an OID) and
	    // second a set of values (defined by the OID)
	    var type = asn1.derToOid(seq.value[0].value);
	    var values = seq.value[1].value;
	    for(var vi = 0; vi < values.length; ++vi) {
	      var obj = {};
	      obj.type = type;
	      obj.value = values[vi].value;
	      obj.valueTagClass = values[vi].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      // parse extensions
	      if(obj.type === oids.extensionRequest) {
	        obj.extensions = [];
	        for(var ei = 0; ei < obj.value.length; ++ei) {
	          obj.extensions.push(pki.certificateExtensionFromAsn1(obj.value[ei]));
	        }
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Gets an issuer or subject attribute from its name, type, or short name.
	 *
	 * @param obj the issuer or subject object.
	 * @param options a short name string or an object with:
	 *          shortName the short name for the attribute.
	 *          name the name for the attribute.
	 *          type the type for the attribute.
	 *
	 * @return the attribute.
	 */
	function _getAttribute(obj, options) {
	  if(typeof options === 'string') {
	    options = {shortName: options};
	  }

	  var rval = null;
	  var attr;
	  for(var i = 0; rval === null && i < obj.attributes.length; ++i) {
	    attr = obj.attributes[i];
	    if(options.type && options.type === attr.type) {
	      rval = attr;
	    } else if(options.name && options.name === attr.name) {
	      rval = attr;
	    } else if(options.shortName && options.shortName === attr.shortName) {
	      rval = attr;
	    }
	  }
	  return rval;
	}

	/**
	 * Converts signature parameters from ASN.1 structure.
	 *
	 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
	 * no parameters.
	 *
	 * RSASSA-PSS-params  ::=  SEQUENCE  {
	 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
	 *                             sha1Identifier,
	 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
	 *                             mgf1SHA1Identifier,
	 *   saltLength         [2] INTEGER DEFAULT 20,
	 *   trailerField       [3] INTEGER DEFAULT 1
	 * }
	 *
	 * HashAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * @param oid The OID specifying the signature algorithm
	 * @param obj The ASN.1 structure holding the parameters
	 * @param fillDefaults Whether to use return default values where omitted
	 * @return signature parameter object
	 */
	var _readSignatureParameters = function(oid, obj, fillDefaults) {
	  var params = {};

	  if(oid !== oids['RSASSA-PSS']) {
	    return params;
	  }

	  if(fillDefaults) {
	    params = {
	      hash: {
	        algorithmOid: oids['sha1']
	      },
	      mgf: {
	        algorithmOid: oids['mgf1'],
	        hash: {
	          algorithmOid: oids['sha1']
	        }
	      },
	      saltLength: 20
	    };
	  }

	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
	    var error = new Error('Cannot read RSASSA-PSS parameter block.');
	    error.errors = errors;
	    throw error;
	  }

	  if(capture.hashOid !== undefined) {
	    params.hash = params.hash || {};
	    params.hash.algorithmOid = asn1.derToOid(capture.hashOid);
	  }

	  if(capture.maskGenOid !== undefined) {
	    params.mgf = params.mgf || {};
	    params.mgf.algorithmOid = asn1.derToOid(capture.maskGenOid);
	    params.mgf.hash = params.mgf.hash || {};
	    params.mgf.hash.algorithmOid = asn1.derToOid(capture.maskGenHashOid);
	  }

	  if(capture.saltLength !== undefined) {
	    params.saltLength = capture.saltLength.charCodeAt(0);
	  }

	  return params;
	};

	/**
	 * Converts an X.509 certificate from PEM format.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. This will scan the TBSCertificate part of the ASN.1
	 * object while it is converted so it doesn't need to be converted back
	 * to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certificate.
	 */
	pki.certificateFromPem = function(pem, computeHash, strict) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE' &&
	    msg.type !== 'X509 CERTIFICATE' &&
	    msg.type !== 'TRUSTED CERTIFICATE') {
	    var error = new Error('Could not convert certificate from PEM; PEM header type ' +
	      'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body, strict);

	  return pki.certificateFromAsn1(obj, computeHash);
	};

	/**
	 * Converts an X.509 certificate to PEM format.
	 *
	 * @param cert the certificate.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certificate.
	 */
	pki.certificateToPem = function(cert, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE',
	    body: asn1.toDer(pki.certificateToAsn1(cert)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key from PEM format.
	 *
	 * @param pem the PEM-formatted public key.
	 *
	 * @return the public key.
	 */
	pki.publicKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
	    var error = new Error('Could not convert public key from PEM; PEM header ' +
	      'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return pki.publicKeyFromAsn1(obj);
	};

	/**
	 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki.publicKeyToPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'PUBLIC KEY',
	    body: asn1.toDer(pki.publicKeyToAsn1(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key to PEM format (using an RSAPublicKey).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki.publicKeyToRSAPublicKeyPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'RSA PUBLIC KEY',
	    body: asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Gets a fingerprint for the given public key.
	 *
	 * @param options the options to use.
	 *          [md] the message digest object to use (defaults to forge.md.sha1).
	 *          [type] the type of fingerprint, such as 'RSAPublicKey',
	 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
	 *          [encoding] an alternative output encoding, such as 'hex'
	 *            (defaults to none, outputs a byte buffer).
	 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
	 *            output, eg: ':' (defaults to none).
	 *
	 * @return the fingerprint as a byte buffer or other encoding based on options.
	 */
	pki.getPublicKeyFingerprint = function(key, options) {
	  options = options || {};
	  var md = options.md || forge.md.sha1.create();
	  var type = options.type || 'RSAPublicKey';

	  var bytes;
	  switch(type) {
	  case 'RSAPublicKey':
	    bytes = asn1.toDer(pki.publicKeyToRSAPublicKey(key)).getBytes();
	    break;
	  case 'SubjectPublicKeyInfo':
	    bytes = asn1.toDer(pki.publicKeyToAsn1(key)).getBytes();
	    break;
	  default:
	    throw new Error('Unknown fingerprint type "' + options.type + '".');
	  }

	  // hash public key bytes
	  md.start();
	  md.update(bytes);
	  var digest = md.digest();
	  if(options.encoding === 'hex') {
	    var hex = digest.toHex();
	    if(options.delimiter) {
	      return hex.match(/.{2}/g).join(options.delimiter);
	    }
	    return hex;
	  } else if(options.encoding === 'binary') {
	    return digest.getBytes();
	  } else if(options.encoding) {
	    throw new Error('Unknown encoding "' + options.encoding + '".');
	  }
	  return digest;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from PEM format.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. This will scan the CertificationRequestInfo part of
	 * the ASN.1 object while it is converted so it doesn't need to be converted
	 * back to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certification request (CSR).
	 */
	pki.certificationRequestFromPem = function(pem, computeHash, strict) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE REQUEST') {
	    var error = new Error('Could not convert certification request from PEM; ' +
	      'PEM header type is not "CERTIFICATE REQUEST".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert certification request from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body, strict);

	  return pki.certificationRequestFromAsn1(obj, computeHash);
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) to PEM format.
	 *
	 * @param csr the certification request.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certification request.
	 */
	pki.certificationRequestToPem = function(csr, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE REQUEST',
	    body: asn1.toDer(pki.certificationRequestToAsn1(csr)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Creates an empty X.509v3 RSA certificate.
	 *
	 * @return the certificate.
	 */
	pki.createCertificate = function() {
	  var cert = {};
	  cert.version = 0x02;
	  cert.serialNumber = '00';
	  cert.signatureOid = null;
	  cert.signature = null;
	  cert.siginfo = {};
	  cert.siginfo.algorithmOid = null;
	  cert.validity = {};
	  cert.validity.notBefore = new Date();
	  cert.validity.notAfter = new Date();

	  cert.issuer = {};
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = [];
	  cert.issuer.hash = null;

	  cert.subject = {};
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = [];
	  cert.subject.hash = null;

	  cert.extensions = [];
	  cert.publicKey = null;
	  cert.md = null;

	  /**
	   * Sets the subject of this certificate.
	   *
	   * @param attrs the array of subject attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setSubject = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.subject.attributes = attrs;
	    delete cert.subject.uniqueId;
	    if(uniqueId) {
	      cert.subject.uniqueId = uniqueId;
	    }
	    cert.subject.hash = null;
	  };

	  /**
	   * Sets the issuer of this certificate.
	   *
	   * @param attrs the array of issuer attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setIssuer = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.issuer.attributes = attrs;
	    delete cert.issuer.uniqueId;
	    if(uniqueId) {
	      cert.issuer.uniqueId = uniqueId;
	    }
	    cert.issuer.hash = null;
	  };

	  /**
	   * Sets the extensions of this certificate.
	   *
	   * @param exts the array of extensions to use.
	   */
	  cert.setExtensions = function(exts) {
	    for(var i = 0; i < exts.length; ++i) {
	      _fillMissingExtensionFields(exts[i], {cert: cert});
	    }
	    // set new extensions
	    cert.extensions = exts;
	  };

	  /**
	   * Gets an extension by its name or id.
	   *
	   * @param options the name to use or an object with:
	   *          name the name to use.
	   *          id the id to use.
	   *
	   * @return the extension or null if not found.
	   */
	  cert.getExtension = function(options) {
	    if(typeof options === 'string') {
	      options = {name: options};
	    }

	    var rval = null;
	    var ext;
	    for(var i = 0; rval === null && i < cert.extensions.length; ++i) {
	      ext = cert.extensions[i];
	      if(options.id && ext.id === options.id) {
	        rval = ext;
	      } else if(options.name && ext.name === options.name) {
	        rval = ext;
	      }
	    }
	    return rval;
	  };

	  /**
	   * Signs this certificate using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  cert.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    cert.md = md || forge.md.sha1.create();
	    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certificate digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = cert.md.algorithm;
	      throw error;
	    }
	    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;

	    // get TBSCertificate, convert to DER
	    cert.tbsCertificate = pki.getTBSCertificate(cert);
	    var bytes = asn1.toDer(cert.tbsCertificate);

	    // digest and sign
	    cert.md.update(bytes.getBytes());
	    cert.signature = key.sign(cert.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certificate using this
	   * certificate's public key.
	   *
	   * @param child the certificate to verify.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verify = function(child) {
	    var rval = false;

	    if(!cert.issued(child)) {
	      var issuer = child.issuer;
	      var subject = cert.subject;
	      var error = new Error('The parent certificate did not issue the given child ' +
	        'certificate; the child certificate\'s issuer does not match the ' +
	        'parent\'s subject.');
	      error.expectedIssuer = issuer.attributes;
	      error.actualIssuer = subject.attributes;
	      throw error;
	    }

	    var md = child.md;
	    if(md === null) {
	      // check signature OID for supported signature types
	      if(child.signatureOid in oids) {
	        var oid = oids[child.signatureOid];
	        switch(oid) {
	        case 'sha1WithRSAEncryption':
	          md = forge.md.sha1.create();
	          break;
	        case 'md5WithRSAEncryption':
	          md = forge.md.md5.create();
	          break;
	        case 'sha256WithRSAEncryption':
	          md = forge.md.sha256.create();
	          break;
	        case 'sha512WithRSAEncryption':
	          md = forge.md.sha512.create();
	          break;
	        case 'RSASSA-PSS':
	          md = forge.md.sha256.create();
	          break;
	        }
	      }
	      if(md === null) {
	        var error = new Error('Could not compute certificate digest. ' +
	          'Unknown signature OID.');
	        error.signatureOid = child.signatureOid;
	        throw error;
	      }

	      // produce DER formatted TBSCertificate and digest it
	      var tbsCertificate = child.tbsCertificate || pki.getTBSCertificate(child);
	      var bytes = asn1.toDer(tbsCertificate);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      var scheme;

	      switch(child.signatureOid) {
	      case oids.sha1WithRSAEncryption:
	        scheme = undefined;  /* use PKCS#1 v1.5 padding scheme */
	        break;
	      case oids['RSASSA-PSS']:
	        var hash, mgf;

	        /* initialize mgf */
	        hash = oids[child.signatureParameters.mgf.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported MGF hash function.');
	          error.oid = child.signatureParameters.mgf.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        mgf = oids[child.signatureParameters.mgf.algorithmOid];
	        if(mgf === undefined || forge.mgf[mgf] === undefined) {
	          var error = new Error('Unsupported MGF function.');
	          error.oid = child.signatureParameters.mgf.algorithmOid;
	          error.name = mgf;
	          throw error;
	        }

	        mgf = forge.mgf[mgf].create(forge.md[hash].create());

	        /* initialize hash function */
	        hash = oids[child.signatureParameters.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          throw {
	            message: 'Unsupported RSASSA-PSS hash function.',
	            oid: child.signatureParameters.hash.algorithmOid,
	            name: hash
	          };
	        }

	        scheme = forge.pss.create(forge.md[hash].create(), mgf,
	          child.signatureParameters.saltLength);
	        break;
	      }

	      // verify signature on cert using public key
	      rval = cert.publicKey.verify(
	        md.digest().getBytes(), child.signature, scheme);
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's issuer matches the passed
	   * certificate's subject. Note that no signature check is performed.
	   *
	   * @param parent the certificate to check.
	   *
	   * @return true if this certificate's issuer matches the passed certificate's
	   *         subject.
	   */
	  cert.isIssuer = function(parent) {
	    var rval = false;

	    var i = cert.issuer;
	    var s = parent.subject;

	    // compare hashes if present
	    if(i.hash && s.hash) {
	      rval = (i.hash === s.hash);
	    } else if(i.attributes.length === s.attributes.length) {
	      // all attributes are the same so issuer matches subject
	      rval = true;
	      var iattr, sattr;
	      for(var n = 0; rval && n < i.attributes.length; ++n) {
	        iattr = i.attributes[n];
	        sattr = s.attributes[n];
	        if(iattr.type !== sattr.type || iattr.value !== sattr.value) {
	          // attribute mismatch
	          rval = false;
	        }
	      }
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's subject matches the issuer of the
	   * given certificate). Note that not signature check is performed.
	   *
	   * @param child the certificate to check.
	   *
	   * @return true if this certificate's subject matches the passed
	   *         certificate's issuer.
	   */
	  cert.issued = function(child) {
	    return child.isIssuer(cert);
	  };

	  /**
	   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
	   *
	   * @return the subjectKeyIdentifier for this certificate as byte buffer.
	   */
	  cert.generateSubjectKeyIdentifier = function() {
	    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

	      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
	        value of the BIT STRING subjectPublicKey (excluding the tag,
	        length, and number of unused bits).

	      (2) The keyIdentifier is composed of a four bit type field with
	        the value 0100 followed by the least significant 60 bits of the
	        SHA-1 hash of the value of the BIT STRING subjectPublicKey
	        (excluding the tag, length, and number of unused bit string bits).
	    */

	    // skipping the tag, length, and number of unused bits is the same
	    // as just using the RSAPublicKey (for RSA keys, which are the
	    // only ones supported)
	    return pki.getPublicKeyFingerprint(cert.publicKey, {type: 'RSAPublicKey'});
	  };

	  /**
	   * Verifies the subjectKeyIdentifier extension value for this certificate
	   * against its public key. If no extension is found, false will be
	   * returned.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verifySubjectKeyIdentifier = function() {
	    var oid = oids['subjectKeyIdentifier'];
	    for(var i = 0; i < cert.extensions.length; ++i) {
	      var ext = cert.extensions[i];
	      if(ext.id === oid) {
	        var ski = cert.generateSubjectKeyIdentifier().getBytes();
	        return (forge.util.hexToBytes(ext.subjectKeyIdentifier) === ski);
	      }
	    }
	    return false;
	  };

	  return cert;
	};

	/**
	 * Converts an X.509v3 RSA certificate from an ASN.1 object.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
	 * object needs to be scanned before the cert object is created.
	 *
	 * @param obj the asn1 representation of an X.509v3 RSA certificate.
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certificate.
	 */
	pki.certificateFromAsn1 = function(obj, computeHash) {
	  // validate certificate and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, x509CertificateValidator, capture, errors)) {
	    var error = new Error('Cannot read X.509 certificate. ' +
	      'ASN.1 object is not an X509v3 Certificate.');
	    error.errors = errors;
	    throw error;
	  }

	  // ensure signature is not interpreted as an embedded ASN.1 object
	  if(typeof capture.certSignature !== 'string') {
	    var certSignature = '\x00';
	    for(var i = 0; i < capture.certSignature.length; ++i) {
	      certSignature += asn1.toDer(capture.certSignature[i]).getBytes();
	    }
	    capture.certSignature = certSignature;
	  }

	  // get oid
	  var oid = asn1.derToOid(capture.publicKeyOid);
	  if(oid !== pki.oids['rsaEncryption']) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certificate
	  var cert = pki.createCertificate();
	  cert.version = capture.certVersion ?
	    capture.certVersion.charCodeAt(0) : 0;
	  var serial = forge.util.createBuffer(capture.certSerialNumber);
	  cert.serialNumber = serial.toHex();
	  cert.signatureOid = forge.asn1.derToOid(capture.certSignatureOid);
	  cert.signatureParameters = _readSignatureParameters(
	    cert.signatureOid, capture.certSignatureParams, true);
	  cert.siginfo.algorithmOid = forge.asn1.derToOid(capture.certinfoSignatureOid);
	  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid,
	    capture.certinfoSignatureParams, false);
	  // skip "unused bits" in signature value BITSTRING
	  var signature = forge.util.createBuffer(capture.certSignature);
	  ++signature.read;
	  cert.signature = signature.getBytes();

	  var validity = [];
	  if(capture.certValidity1UTCTime !== undefined) {
	    validity.push(asn1.utcTimeToDate(capture.certValidity1UTCTime));
	  }
	  if(capture.certValidity2GeneralizedTime !== undefined) {
	    validity.push(asn1.generalizedTimeToDate(
	      capture.certValidity2GeneralizedTime));
	  }
	  if(capture.certValidity3UTCTime !== undefined) {
	    validity.push(asn1.utcTimeToDate(capture.certValidity3UTCTime));
	  }
	  if(capture.certValidity4GeneralizedTime !== undefined) {
	    validity.push(asn1.generalizedTimeToDate(
	      capture.certValidity4GeneralizedTime));
	  }
	  if(validity.length > 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; more ' +
	      'than two times were provided in the certificate.');
	  }
	  if(validity.length < 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; they ' +
	      'were not provided as either UTCTime or GeneralizedTime.');
	  }
	  cert.validity.notBefore = validity[0];
	  cert.validity.notAfter = validity[1];

	  // keep TBSCertificate to preserve signature when exporting
	  cert.tbsCertificate = capture.tbsCertificate;

	  if(computeHash) {
	    // check signature OID for supported signature types
	    cert.md = null;
	    if(cert.signatureOid in oids) {
	      var oid = oids[cert.signatureOid];
	      switch(oid) {
	      case 'sha1WithRSAEncryption':
	        cert.md = forge.md.sha1.create();
	        break;
	      case 'md5WithRSAEncryption':
	        cert.md = forge.md.md5.create();
	        break;
	      case 'sha256WithRSAEncryption':
	        cert.md = forge.md.sha256.create();
	        break;
	      case 'sha512WithRSAEncryption':
	        cert.md = forge.md.sha512.create();
	        break;
	      case 'RSASSA-PSS':
	        cert.md = forge.md.sha256.create();
	        break;
	      }
	    }
	    if(cert.md === null) {
	      var error = new Error('Could not compute certificate digest. ' +
	        'Unknown signature OID.');
	      error.signatureOid = cert.signatureOid;
	      throw error;
	    }

	    // produce DER formatted TBSCertificate and digest it
	    var bytes = asn1.toDer(cert.tbsCertificate);
	    cert.md.update(bytes.getBytes());
	  }

	  // handle issuer, build issuer message digest
	  var imd = forge.md.sha1.create();
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = pki.RDNAttributesAsArray(capture.certIssuer, imd);
	  if(capture.certIssuerUniqueId) {
	    cert.issuer.uniqueId = capture.certIssuerUniqueId;
	  }
	  cert.issuer.hash = imd.digest().toHex();

	  // handle subject, build subject message digest
	  var smd = forge.md.sha1.create();
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = pki.RDNAttributesAsArray(capture.certSubject, smd);
	  if(capture.certSubjectUniqueId) {
	    cert.subject.uniqueId = capture.certSubjectUniqueId;
	  }
	  cert.subject.hash = smd.digest().toHex();

	  // handle extensions
	  if(capture.certExtensions) {
	    cert.extensions = pki.certificateExtensionsFromAsn1(capture.certExtensions);
	  } else {
	    cert.extensions = [];
	  }

	  // convert RSA public key from ASN.1
	  cert.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  return cert;
	};

	/**
	 * Converts an ASN.1 extensions object (with extension sequences as its
	 * values) into an array of extension objects with types and values.
	 *
	 * Supported extensions:
	 *
	 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
	 * KeyUsage ::= BIT STRING {
	 *   digitalSignature        (0),
	 *   nonRepudiation          (1),
	 *   keyEncipherment         (2),
	 *   dataEncipherment        (3),
	 *   keyAgreement            (4),
	 *   keyCertSign             (5),
	 *   cRLSign                 (6),
	 *   encipherOnly            (7),
	 *   decipherOnly            (8)
	 * }
	 *
	 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
	 * BasicConstraints ::= SEQUENCE {
	 *   cA                      BOOLEAN DEFAULT FALSE,
	 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
	 * }
	 *
	 * subjectAltName EXTENSION ::= {
	 *   SYNTAX GeneralNames
	 *   IDENTIFIED BY id-ce-subjectAltName
	 * }
	 *
	 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
	 *
	 * GeneralName ::= CHOICE {
	 *   otherName      [0] INSTANCE OF OTHER-NAME,
	 *   rfc822Name     [1] IA5String,
	 *   dNSName        [2] IA5String,
	 *   x400Address    [3] ORAddress,
	 *   directoryName  [4] Name,
	 *   ediPartyName   [5] EDIPartyName,
	 *   uniformResourceIdentifier [6] IA5String,
	 *   IPAddress      [7] OCTET STRING,
	 *   registeredID   [8] OBJECT IDENTIFIER
	 * }
	 *
	 * OTHER-NAME ::= TYPE-IDENTIFIER
	 *
	 * EDIPartyName ::= SEQUENCE {
	 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
	 *   partyName    [1] DirectoryString {ub-name}
	 * }
	 *
	 * @param exts the extensions ASN.1 with extension sequences to parse.
	 *
	 * @return the array.
	 */
	pki.certificateExtensionsFromAsn1 = function(exts) {
	  var rval = [];
	  for(var i = 0; i < exts.value.length; ++i) {
	    // get extension sequence
	    var extseq = exts.value[i];
	    for(var ei = 0; ei < extseq.value.length; ++ei) {
	      rval.push(pki.certificateExtensionFromAsn1(extseq.value[ei]));
	    }
	  }

	  return rval;
	};

	/**
	 * Parses a single certificate extension from ASN.1.
	 *
	 * @param ext the extension in ASN.1 format.
	 *
	 * @return the parsed extension as an object.
	 */
	pki.certificateExtensionFromAsn1 = function(ext) {
	  // an extension has:
	  // [0] extnID      OBJECT IDENTIFIER
	  // [1] critical    BOOLEAN DEFAULT FALSE
	  // [2] extnValue   OCTET STRING
	  var e = {};
	  e.id = asn1.derToOid(ext.value[0].value);
	  e.critical = false;
	  if(ext.value[1].type === asn1.Type.BOOLEAN) {
	    e.critical = (ext.value[1].value.charCodeAt(0) !== 0x00);
	    e.value = ext.value[2].value;
	  } else {
	    e.value = ext.value[1].value;
	  }
	  // if the oid is known, get its name
	  if(e.id in oids) {
	    e.name = oids[e.id];

	    // handle key usage
	    if(e.name === 'keyUsage') {
	      // get value as BIT STRING
	      var ev = asn1.fromDer(e.value);
	      var b2 = 0x00;
	      var b3 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
	      }
	      // set flags
	      e.digitalSignature = (b2 & 0x80) === 0x80;
	      e.nonRepudiation = (b2 & 0x40) === 0x40;
	      e.keyEncipherment = (b2 & 0x20) === 0x20;
	      e.dataEncipherment = (b2 & 0x10) === 0x10;
	      e.keyAgreement = (b2 & 0x08) === 0x08;
	      e.keyCertSign = (b2 & 0x04) === 0x04;
	      e.cRLSign = (b2 & 0x02) === 0x02;
	      e.encipherOnly = (b2 & 0x01) === 0x01;
	      e.decipherOnly = (b3 & 0x80) === 0x80;
	    } else if(e.name === 'basicConstraints') {
	      // handle basic constraints
	      // get value as SEQUENCE
	      var ev = asn1.fromDer(e.value);
	      // get cA BOOLEAN flag (defaults to false)
	      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.BOOLEAN) {
	        e.cA = (ev.value[0].value.charCodeAt(0) !== 0x00);
	      } else {
	        e.cA = false;
	      }
	      // get path length constraint
	      var value = null;
	      if(ev.value.length > 0 && ev.value[0].type === asn1.Type.INTEGER) {
	        value = ev.value[0].value;
	      } else if(ev.value.length > 1) {
	        value = ev.value[1].value;
	      }
	      if(value !== null) {
	        e.pathLenConstraint = asn1.derToInteger(value);
	      }
	    } else if(e.name === 'extKeyUsage') {
	      // handle extKeyUsage
	      // value is a SEQUENCE of OIDs
	      var ev = asn1.fromDer(e.value);
	      for(var vi = 0; vi < ev.value.length; ++vi) {
	        var oid = asn1.derToOid(ev.value[vi].value);
	        if(oid in oids) {
	          e[oids[oid]] = true;
	        } else {
	          e[oid] = true;
	        }
	      }
	    } else if(e.name === 'nsCertType') {
	      // handle nsCertType
	      // get value as BIT STRING
	      var ev = asn1.fromDer(e.value);
	      var b2 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	      }
	      // set flags
	      e.client = (b2 & 0x80) === 0x80;
	      e.server = (b2 & 0x40) === 0x40;
	      e.email = (b2 & 0x20) === 0x20;
	      e.objsign = (b2 & 0x10) === 0x10;
	      e.reserved = (b2 & 0x08) === 0x08;
	      e.sslCA = (b2 & 0x04) === 0x04;
	      e.emailCA = (b2 & 0x02) === 0x02;
	      e.objCA = (b2 & 0x01) === 0x01;
	    } else if(
	      e.name === 'subjectAltName' ||
	      e.name === 'issuerAltName') {
	      // handle subjectAltName/issuerAltName
	      e.altNames = [];

	      // ev is a SYNTAX SEQUENCE
	      var gn;
	      var ev = asn1.fromDer(e.value);
	      for(var n = 0; n < ev.value.length; ++n) {
	        // get GeneralName
	        gn = ev.value[n];

	        var altName = {
	          type: gn.type,
	          value: gn.value
	        };
	        e.altNames.push(altName);

	        // Note: Support for types 1,2,6,7,8
	        switch(gn.type) {
	        // rfc822Name
	        case 1:
	        // dNSName
	        case 2:
	        // uniformResourceIdentifier (URI)
	        case 6:
	          break;
	        // IPAddress
	        case 7:
	          // convert to IPv4/IPv6 string representation
	          altName.ip = forge.util.bytesToIP(gn.value);
	          break;
	        // registeredID
	        case 8:
	          altName.oid = asn1.derToOid(gn.value);
	          break;
	        default:
	          // unsupported
	        }
	      }
	    } else if(e.name === 'subjectKeyIdentifier') {
	      // value is an OCTETSTRING w/the hash of the key-type specific
	      // public key structure (eg: RSAPublicKey)
	      var ev = asn1.fromDer(e.value);
	      e.subjectKeyIdentifier = forge.util.bytesToHex(ev.value);
	    }
	  }
	  return e;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
	 * ASN.1 object needs to be scanned before the csr object is created.
	 *
	 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certification request (CSR).
	 */
	pki.certificationRequestFromAsn1 = function(obj, computeHash) {
	  // validate certification request and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, certificationRequestValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#10 certificate request. ' +
	      'ASN.1 object is not a PKCS#10 CertificationRequest.');
	    error.errors = errors;
	    throw error;
	  }

	  // ensure signature is not interpreted as an embedded ASN.1 object
	  if(typeof capture.csrSignature !== 'string') {
	    var csrSignature = '\x00';
	    for(var i = 0; i < capture.csrSignature.length; ++i) {
	      csrSignature += asn1.toDer(capture.csrSignature[i]).getBytes();
	    }
	    capture.csrSignature = csrSignature;
	  }

	  // get oid
	  var oid = asn1.derToOid(capture.publicKeyOid);
	  if(oid !== pki.oids.rsaEncryption) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certification request
	  var csr = pki.createCertificationRequest();
	  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
	  csr.signatureOid = forge.asn1.derToOid(capture.csrSignatureOid);
	  csr.signatureParameters = _readSignatureParameters(
	    csr.signatureOid, capture.csrSignatureParams, true);
	  csr.siginfo.algorithmOid = forge.asn1.derToOid(capture.csrSignatureOid);
	  csr.siginfo.parameters = _readSignatureParameters(
	    csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
	  // skip "unused bits" in signature value BITSTRING
	  var signature = forge.util.createBuffer(capture.csrSignature);
	  ++signature.read;
	  csr.signature = signature.getBytes();

	  // keep CertificationRequestInfo to preserve signature when exporting
	  csr.certificationRequestInfo = capture.certificationRequestInfo;

	  if(computeHash) {
	    // check signature OID for supported signature types
	    csr.md = null;
	    if(csr.signatureOid in oids) {
	      var oid = oids[csr.signatureOid];
	      switch(oid) {
	      case 'sha1WithRSAEncryption':
	        csr.md = forge.md.sha1.create();
	        break;
	      case 'md5WithRSAEncryption':
	        csr.md = forge.md.md5.create();
	        break;
	      case 'sha256WithRSAEncryption':
	        csr.md = forge.md.sha256.create();
	        break;
	      case 'sha512WithRSAEncryption':
	        csr.md = forge.md.sha512.create();
	        break;
	      case 'RSASSA-PSS':
	        csr.md = forge.md.sha256.create();
	        break;
	      }
	    }
	    if(csr.md === null) {
	      var error = new Error('Could not compute certification request digest. ' +
	        'Unknown signature OID.');
	      error.signatureOid = csr.signatureOid;
	      throw error;
	    }

	    // produce DER formatted CertificationRequestInfo and digest it
	    var bytes = asn1.toDer(csr.certificationRequestInfo);
	    csr.md.update(bytes.getBytes());
	  }

	  // handle subject, build subject message digest
	  var smd = forge.md.sha1.create();
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = pki.RDNAttributesAsArray(
	    capture.certificationRequestInfoSubject, smd);
	  csr.subject.hash = smd.digest().toHex();

	  // convert RSA public key from ASN.1
	  csr.publicKey = pki.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  // convert attributes from ASN.1
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.attributes = pki.CRIAttributesAsArray(
	    capture.certificationRequestInfoAttributes || []);

	  return csr;
	};

	/**
	 * Creates an empty certification request (a CSR or certificate signing
	 * request). Once created, its public key and attributes can be set and then
	 * it can be signed.
	 *
	 * @return the empty certification request.
	 */
	pki.createCertificationRequest = function() {
	  var csr = {};
	  csr.version = 0x00;
	  csr.signatureOid = null;
	  csr.signature = null;
	  csr.siginfo = {};
	  csr.siginfo.algorithmOid = null;

	  csr.subject = {};
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = [];
	  csr.subject.hash = null;

	  csr.publicKey = null;
	  csr.attributes = [];
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.md = null;

	  /**
	   * Sets the subject of this certification request.
	   *
	   * @param attrs the array of subject attributes to use.
	   */
	  csr.setSubject = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.subject.attributes = attrs;
	    csr.subject.hash = null;
	  };

	  /**
	   * Sets the attributes of this certification request.
	   *
	   * @param attrs the array of attributes to use.
	   */
	  csr.setAttributes = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.attributes = attrs;
	  };

	  /**
	   * Signs this certification request using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  csr.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    csr.md = md || forge.md.sha1.create();
	    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certification request digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = csr.md.algorithm;
	      throw error;
	    }
	    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;

	    // get CertificationRequestInfo, convert to DER
	    csr.certificationRequestInfo = pki.getCertificationRequestInfo(csr);
	    var bytes = asn1.toDer(csr.certificationRequestInfo);

	    // digest and sign
	    csr.md.update(bytes.getBytes());
	    csr.signature = key.sign(csr.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certification request using
	   * its public key.
	   *
	   * A CSR that has been exported to a file in PEM format can be verified using
	   * OpenSSL using this command:
	   *
	   * openssl req -in <the-csr-pem-file> -verify -noout -text
	   *
	   * @return true if verified, false if not.
	   */
	  csr.verify = function() {
	    var rval = false;

	    var md = csr.md;
	    if(md === null) {
	      // check signature OID for supported signature types
	      if(csr.signatureOid in oids) {
	        // TODO: create DRY `OID to md` function
	        var oid = oids[csr.signatureOid];
	        switch(oid) {
	        case 'sha1WithRSAEncryption':
	          md = forge.md.sha1.create();
	          break;
	        case 'md5WithRSAEncryption':
	          md = forge.md.md5.create();
	          break;
	        case 'sha256WithRSAEncryption':
	          md = forge.md.sha256.create();
	          break;
	        case 'sha512WithRSAEncryption':
	          md = forge.md.sha512.create();
	          break;
	        case 'RSASSA-PSS':
	          md = forge.md.sha256.create();
	          break;
	        }
	      }
	      if(md === null) {
	        var error = new Error('Could not compute certification request digest. ' +
	          'Unknown signature OID.');
	        error.signatureOid = csr.signatureOid;
	        throw error;
	      }

	      // produce DER formatted CertificationRequestInfo and digest it
	      var cri = csr.certificationRequestInfo ||
	        pki.getCertificationRequestInfo(csr);
	      var bytes = asn1.toDer(cri);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      var scheme;

	      switch(csr.signatureOid) {
	      case oids.sha1WithRSAEncryption:
	        /* use PKCS#1 v1.5 padding scheme */
	        break;
	      case oids['RSASSA-PSS']:
	        var hash, mgf;

	        /* initialize mgf */
	        hash = oids[csr.signatureParameters.mgf.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported MGF hash function.');
	          error.oid = csr.signatureParameters.mgf.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        mgf = oids[csr.signatureParameters.mgf.algorithmOid];
	        if(mgf === undefined || forge.mgf[mgf] === undefined) {
	          var error = new Error('Unsupported MGF function.');
	          error.oid = csr.signatureParameters.mgf.algorithmOid;
	          error.name = mgf;
	          throw error;
	        }

	        mgf = forge.mgf[mgf].create(forge.md[hash].create());

	        /* initialize hash function */
	        hash = oids[csr.signatureParameters.hash.algorithmOid];
	        if(hash === undefined || forge.md[hash] === undefined) {
	          var error = new Error('Unsupported RSASSA-PSS hash function.');
	          error.oid = csr.signatureParameters.hash.algorithmOid;
	          error.name = hash;
	          throw error;
	        }

	        scheme = forge.pss.create(forge.md[hash].create(), mgf,
	          csr.signatureParameters.saltLength);
	        break;
	      }

	      // verify signature on csr using its public key
	      rval = csr.publicKey.verify(
	        md.digest().getBytes(), csr.signature, scheme);
	    }

	    return rval;
	  };

	  return csr;
	};

	/**
	 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
	 *
	 * @param obj the subject or issuer (distinguished name).
	 *
	 * @return the ASN.1 RDNSequence.
	 */
	function _dnToAsn1(obj) {
	  // create an empty RDNSequence
	  var rval = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	  // iterate over attributes
	  var attr, set;
	  var attrs = obj.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1.Type.PRINTABLESTRING;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;

	      if(valueTagClass === asn1.Type.UTF8) {
	        value = forge.util.encodeUtf8(value);
	      }
	      // FIXME: handle more encodings
	    }

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    set = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // AttributeType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(attr.type).getBytes()),
	        // AttributeValue
	        asn1.create(asn1.Class.UNIVERSAL, valueTagClass, false, value)
	      ])
	    ]);
	    rval.value.push(set);
	  }

	  return rval;
	}

	/**
	 * Gets all printable attributes (typically of an issuer or subject) in a
	 * simplified JSON format for display.
	 *
	 * @param attrs the attributes.
	 *
	 * @return the JSON for display.
	 */
	function _getAttributesAsJson(attrs) {
	  var rval = {};
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    if(attr.shortName && (
	      attr.valueTagClass === asn1.Type.UTF8 ||
	      attr.valueTagClass === asn1.Type.PRINTABLESTRING ||
	      attr.valueTagClass === asn1.Type.IA5STRING)) {
	      var value = attr.value;
	      if(attr.valueTagClass === asn1.Type.UTF8) {
	        value = forge.util.encodeUtf8(attr.value);
	      }
	      if(!(attr.shortName in rval)) {
	        rval[attr.shortName] = value;
	      } else if(forge.util.isArray(rval[attr.shortName])) {
	        rval[attr.shortName].push(value);
	      } else {
	        rval[attr.shortName] = [rval[attr.shortName], value];
	      }
	    }
	  }
	  return rval;
	}

	/**
	 * Fills in missing fields in attributes.
	 *
	 * @param attrs the attributes to fill missing fields in.
	 */
	function _fillMissingFields(attrs) {
	  var attr;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];

	    // populate missing name
	    if(typeof attr.name === 'undefined') {
	      if(attr.type && attr.type in pki.oids) {
	        attr.name = pki.oids[attr.type];
	      } else if(attr.shortName && attr.shortName in _shortNames) {
	        attr.name = pki.oids[_shortNames[attr.shortName]];
	      }
	    }

	    // populate missing type (OID)
	    if(typeof attr.type === 'undefined') {
	      if(attr.name && attr.name in pki.oids) {
	        attr.type = pki.oids[attr.name];
	      } else {
	        var error = new Error('Attribute type not specified.');
	        error.attribute = attr;
	        throw error;
	      }
	    }

	    // populate missing shortname
	    if(typeof attr.shortName === 'undefined') {
	      if(attr.name && attr.name in _shortNames) {
	        attr.shortName = _shortNames[attr.name];
	      }
	    }

	    // convert extensions to value
	    if(attr.type === oids.extensionRequest) {
	      attr.valueConstructed = true;
	      attr.valueTagClass = asn1.Type.SEQUENCE;
	      if(!attr.value && attr.extensions) {
	        attr.value = [];
	        for(var ei = 0; ei < attr.extensions.length; ++ei) {
	          attr.value.push(pki.certificateExtensionToAsn1(
	            _fillMissingExtensionFields(attr.extensions[ei])));
	        }
	      }
	    }

	    if(typeof attr.value === 'undefined') {
	      var error = new Error('Attribute value not specified.');
	      error.attribute = attr;
	      throw error;
	    }
	  }
	}

	/**
	 * Fills in missing fields in certificate extensions.
	 *
	 * @param e the extension.
	 * @param [options] the options to use.
	 *          [cert] the certificate the extensions are for.
	 *
	 * @return the extension.
	 */
	function _fillMissingExtensionFields(e, options) {
	  options = options || {};

	  // populate missing name
	  if(typeof e.name === 'undefined') {
	    if(e.id && e.id in pki.oids) {
	      e.name = pki.oids[e.id];
	    }
	  }

	  // populate missing id
	  if(typeof e.id === 'undefined') {
	    if(e.name && e.name in pki.oids) {
	      e.id = pki.oids[e.name];
	    } else {
	      var error = new Error('Extension ID not specified.');
	      error.extension = e;
	      throw error;
	    }
	  }

	  if(typeof e.value !== 'undefined') {
	    return e;
	  }

	  // handle missing value:

	  // value is a BIT STRING
	  if(e.name === 'keyUsage') {
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;
	    var b3 = 0x00;
	    if(e.digitalSignature) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.nonRepudiation) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.keyEncipherment) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.dataEncipherment) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.keyAgreement) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.keyCertSign) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.cRLSign) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.encipherOnly) {
	      b2 |= 0x01;
	      unused = 0;
	    }
	    if(e.decipherOnly) {
	      b3 |= 0x80;
	      unused = 7;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b3 !== 0) {
	      value += String.fromCharCode(b2) + String.fromCharCode(b3);
	    } else if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
	  } else if(e.name === 'basicConstraints') {
	    // basicConstraints is a SEQUENCE
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	    // cA BOOLEAN flag defaults to false
	    if(e.cA) {
	      e.value.value.push(asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
	        String.fromCharCode(0xFF)));
	    }
	    if('pathLenConstraint' in e) {
	      e.value.value.push(asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(e.pathLenConstraint).getBytes()));
	    }
	  } else if(e.name === 'extKeyUsage') {
	    // extKeyUsage is a SEQUENCE of OIDs
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	    var seq = e.value.value;
	    for(var key in e) {
	      if(e[key] !== true) {
	        continue;
	      }
	      // key is name in OID map
	      if(key in oids) {
	        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
	          false, asn1.oidToDer(oids[key]).getBytes()));
	      } else if(key.indexOf('.') !== -1) {
	        // assume key is an OID
	        seq.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID,
	          false, asn1.oidToDer(key).getBytes()));
	      }
	    }
	  } else if(e.name === 'nsCertType') {
	    // nsCertType is a BIT STRING
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;

	    if(e.client) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.server) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.email) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.objsign) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.reserved) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.sslCA) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.emailCA) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.objCA) {
	      b2 |= 0x01;
	      unused = 0;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, value);
	  } else if(e.name === 'subjectAltName' || e.name === 'issuerAltName') {
	    // SYNTAX SEQUENCE
	    e.value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	    var altName;
	    for(var n = 0; n < e.altNames.length; ++n) {
	      altName = e.altNames[n];
	      var value = altName.value;
	      // handle IP
	      if(altName.type === 7 && altName.ip) {
	        value = forge.util.bytesFromIP(altName.ip);
	        if(value === null) {
	          var error = new Error(
	            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
	          error.extension = e;
	          throw error;
	        }
	      } else if(altName.type === 8) {
	        // handle OID
	        if(altName.oid) {
	          value = asn1.oidToDer(asn1.oidToDer(altName.oid));
	        } else {
	          // deprecated ... convert value to OID
	          value = asn1.oidToDer(value);
	        }
	      }
	      e.value.value.push(asn1.create(
	        asn1.Class.CONTEXT_SPECIFIC, altName.type, false,
	        value));
	    }
	  } else if(e.name === 'subjectKeyIdentifier' && options.cert) {
	    var ski = options.cert.generateSubjectKeyIdentifier();
	    e.subjectKeyIdentifier = ski.toHex();
	    // OCTETSTRING w/digest
	    e.value = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, ski.getBytes());
	  }

	  // ensure value has been defined by now
	  if(typeof e.value === 'undefined') {
	    var error = new Error('Extension value not specified.');
	    error.extension = e;
	    throw error;
	  }

	  return e;
	}

	/**
	 * Convert signature parameters object to ASN.1
	 *
	 * @param {String} oid Signature algorithm OID
	 * @param params The signature parametrs object
	 * @return ASN.1 object representing signature parameters
	 */
	function _signatureParametersToAsn1(oid, params) {
	  switch(oid) {
	  case oids['RSASSA-PSS']:
	    var parts = [];

	    if(params.hash.algorithmOid !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(params.hash.algorithmOid).getBytes()),
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ])
	      ]));
	    }

	    if(params.mgf.algorithmOid !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(params.mgf.algorithmOid).getBytes()),
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	          ])
	        ])
	      ]));
	    }

	    if(params.saltLength !== undefined) {
	      parts.push(asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	          asn1.integerToDer(params.saltLength).getBytes())
	      ]));
	    }

	    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, parts);

	  default:
	    return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '');
	  }
	}

	/**
	 * Converts a certification request's attributes to an ASN.1 set of
	 * CRIAttributes.
	 *
	 * @param csr certification request.
	 *
	 * @return the ASN.1 set of CRIAttributes.
	 */
	function _CRIAttributesToAsn1(csr) {
	  // create an empty context-specific container
	  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

	  // no attributes, return empty container
	  if(csr.attributes.length === 0) {
	    return rval;
	  }

	  // each attribute has a sequence with a type and a set of values
	  var attrs = csr.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1.Type.UTF8;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;
	    }
	    if(valueTagClass === asn1.Type.UTF8) {
	      value = forge.util.encodeUtf8(value);
	    }
	    var valueConstructed = false;
	    if('valueConstructed' in attr) {
	      valueConstructed = attr.valueConstructed;
	    }
	    // FIXME: handle more encodings

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // AttributeType
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(attr.type).getBytes()),
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	        // AttributeValue
	        asn1.create(
	          asn1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)
	      ])
	    ]);
	    rval.value.push(seq);
	  }

	  return rval;
	}

	/**
	 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 TBSCertificate.
	 */
	pki.getTBSCertificate = function(cert) {
	  // TBSCertificate
	  var tbs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	      // integer
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(cert.version).getBytes())
	    ]),
	    // serialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      forge.util.hexToBytes(cert.serialNumber)),
	    // signature
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(
	        cert.siginfo.algorithmOid, cert.siginfo.parameters)
	    ]),
	    // issuer
	    _dnToAsn1(cert.issuer),
	    // validity
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // notBefore
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(cert.validity.notBefore)),
	      // notAfter
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(cert.validity.notAfter))
	    ]),
	    // subject
	    _dnToAsn1(cert.subject),
	    // SubjectPublicKeyInfo
	    pki.publicKeyToAsn1(cert.publicKey)
	  ]);

	  if(cert.issuer.uniqueId) {
	    // issuerUniqueID (optional)
	    tbs.value.push(
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	          String.fromCharCode(0x00) +
	          cert.issuer.uniqueId
	        )
	      ])
	    );
	  }
	  if(cert.subject.uniqueId) {
	    // subjectUniqueID (optional)
	    tbs.value.push(
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 2, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	          String.fromCharCode(0x00) +
	          cert.subject.uniqueId
	        )
	      ])
	    );
	  }

	  if(cert.extensions.length > 0) {
	    // extensions (optional)
	    tbs.value.push(pki.certificateExtensionsToAsn1(cert.extensions));
	  }

	  return tbs;
	};

	/**
	 * Gets the ASN.1 CertificationRequestInfo part of a
	 * PKCS#10 CertificationRequest.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 CertificationRequestInfo.
	 */
	pki.getCertificationRequestInfo = function(csr) {
	  // CertificationRequestInfo
	  var cri = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(csr.version).getBytes()),
	    // subject
	    _dnToAsn1(csr.subject),
	    // SubjectPublicKeyInfo
	    pki.publicKeyToAsn1(csr.publicKey),
	    // attributes
	    _CRIAttributesToAsn1(csr)
	  ]);

	  return cri;
	};

	/**
	 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
	 *
	 * @param dn the DistinguishedName.
	 *
	 * @return the asn1 representation of a DistinguishedName.
	 */
	pki.distinguishedNameToAsn1 = function(dn) {
	  return _dnToAsn1(dn);
	};

	/**
	 * Converts an X.509v3 RSA certificate to an ASN.1 object.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 representation of an X.509v3 RSA certificate.
	 */
	pki.certificateToAsn1 = function(cert) {
	  // prefer cached TBSCertificate over generating one
	  var tbsCertificate = cert.tbsCertificate || pki.getTBSCertificate(cert);

	  // Certificate
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // TBSCertificate
	    tbsCertificate,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(cert.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
	    ]),
	    // SignatureValue
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + cert.signature)
	  ]);
	};

	/**
	 * Converts X.509v3 certificate extensions to ASN.1.
	 *
	 * @param exts the extensions to convert.
	 *
	 * @return the extensions in ASN.1 format.
	 */
	pki.certificateExtensionsToAsn1 = function(exts) {
	  // create top-level extension container
	  var rval = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 3, true, []);

	  // create extension sequence (stores a sequence for each extension)
	  var seq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);
	  rval.value.push(seq);

	  for(var i = 0; i < exts.length; ++i) {
	    seq.value.push(pki.certificateExtensionToAsn1(exts[i]));
	  }

	  return rval;
	};

	/**
	 * Converts a single certificate extension to ASN.1.
	 *
	 * @param ext the extension to convert.
	 *
	 * @return the extension in ASN.1 format.
	 */
	pki.certificateExtensionToAsn1 = function(ext) {
	  // create a sequence for each extension
	  var extseq = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);

	  // extnID (OID)
	  extseq.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	    asn1.oidToDer(ext.id).getBytes()));

	  // critical defaults to false
	  if(ext.critical) {
	    // critical BOOLEAN DEFAULT FALSE
	    extseq.value.push(asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.BOOLEAN, false,
	      String.fromCharCode(0xFF)));
	  }

	  var value = ext.value;
	  if(typeof ext.value !== 'string') {
	    // value is asn.1
	    value = asn1.toDer(value).getBytes();
	  }

	  // extnValue (OCTET STRING)
	  extseq.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, value));

	  return extseq;
	};

	/**
	 * Converts a PKCS#10 certification request to an ASN.1 object.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 representation of a certification request.
	 */
	pki.certificationRequestToAsn1 = function(csr) {
	  // prefer cached CertificationRequestInfo over generating one
	  var cri = csr.certificationRequestInfo ||
	    pki.getCertificationRequestInfo(csr);

	  // Certificate
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // CertificationRequestInfo
	    cri,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(csr.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
	    ]),
	    // signature
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + csr.signature)
	  ]);
	};

	/**
	 * Creates a CA store.
	 *
	 * @param certs an optional array of certificate objects or PEM-formatted
	 *          certificate strings to add to the CA store.
	 *
	 * @return the CA store.
	 */
	pki.createCaStore = function(certs) {
	  // create CA store
	  var caStore = {
	    // stored certificates
	    certs: {}
	  };

	  /**
	   * Gets the certificate that issued the passed certificate or its
	   * 'parent'.
	   *
	   * @param cert the certificate to get the parent for.
	   *
	   * @return the parent certificate or null if none was found.
	   */
	  caStore.getIssuer = function(cert) {
	    var rval = getBySubject(cert.issuer);

	    // see if there are multiple matches
	    /*if(forge.util.isArray(rval)) {
	      // TODO: resolve multiple matches by checking
	      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
	      // FIXME: or alternatively do authority key mapping
	      // if possible (X.509v1 certs can't work?)
	      throw new Error('Resolving multiple issuer matches not implemented yet.');
	    }*/

	    return rval;
	  };

	  /**
	   * Adds a trusted certificate to the store.
	   *
	   * @param cert the certificate to add as a trusted certificate (either a
	   *          pki.certificate object or a PEM-formatted certificate).
	   */
	  caStore.addCertificate = function(cert) {
	    // convert from pem if necessary
	    if(typeof cert === 'string') {
	      cert = forge.pki.certificateFromPem(cert);
	    }

	    // produce subject hash if it doesn't exist
	    if(!cert.subject.hash) {
	      var md = forge.md.sha1.create();
	      cert.subject.attributes =  pki.RDNAttributesAsArray(
	        _dnToAsn1(cert.subject), md);
	      cert.subject.hash = md.digest().toHex();
	    }

	    if(cert.subject.hash in caStore.certs) {
	      // subject hash already exists, append to array
	      var tmp = caStore.certs[cert.subject.hash];
	      if(!forge.util.isArray(tmp)) {
	        tmp = [tmp];
	      }
	      tmp.push(cert);
	    } else {
	      caStore.certs[cert.subject.hash] = cert;
	    }
	  };

	  /**
	   * Checks to see if the given certificate is in the store.
	   *
	   * @param cert the certificate to check.
	   *
	   * @return true if the certificate is in the store, false if not.
	   */
	  caStore.hasCertificate = function(cert) {
	    var match = getBySubject(cert.subject);
	    if(!match) {
	      return false;
	    }
	    if(!forge.util.isArray(match)) {
	      match = [match];
	    }
	    // compare DER-encoding of certificates
	    var der1 = asn1.toDer(pki.certificateToAsn1(cert)).getBytes();
	    for(var i = 0; i < match.length; ++i) {
	      var der2 = asn1.toDer(pki.certificateToAsn1(match[i])).getBytes();
	      if(der1 === der2) {
	        return true;
	      }
	    }
	    return false;
	  };

	  function getBySubject(subject) {
	    // produce subject hash if it doesn't exist
	    if(!subject.hash) {
	      var md = forge.md.sha1.create();
	      subject.attributes =  pki.RDNAttributesAsArray(_dnToAsn1(subject), md);
	      subject.hash = md.digest().toHex();
	    }
	    return caStore.certs[subject.hash] || null;
	  }

	  // auto-add passed in certs
	  if(certs) {
	    // parse PEM-formatted certificates as necessary
	    for(var i = 0; i < certs.length; ++i) {
	      var cert = certs[i];
	      caStore.addCertificate(cert);
	    }
	  }

	  return caStore;
	};

	/**
	 * Certificate verification errors, based on TLS.
	 */
	pki.certificateError = {
	  bad_certificate: 'forge.pki.BadCertificate',
	  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
	  certificate_revoked: 'forge.pki.CertificateRevoked',
	  certificate_expired: 'forge.pki.CertificateExpired',
	  certificate_unknown: 'forge.pki.CertificateUnknown',
	  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
	};

	/**
	 * Verifies a certificate chain against the given Certificate Authority store
	 * with an optional custom verify callback.
	 *
	 * @param caStore a certificate store to verify against.
	 * @param chain the certificate chain to verify, with the root or highest
	 *          authority at the end (an array of certificates).
	 * @param verify called for every certificate in the chain.
	 *
	 * The verify callback has the following signature:
	 *
	 * verified - Set to true if certificate was verified, otherwise the
	 *   pki.certificateError for why the certificate failed.
	 * depth - The current index in the chain, where 0 is the end point's cert.
	 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
	 *   end point.
	 *
	 * The function returns true on success and on failure either the appropriate
	 * pki.certificateError or an object with 'error' set to the appropriate
	 * pki.certificateError and 'message' set to a custom error message.
	 *
	 * @return true if successful, error thrown if not.
	 */
	pki.verifyCertificateChain = function(caStore, chain, verify) {
	  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
	    Section 6: Certification Path Validation
	    See inline parentheticals related to this particular implementation.

	    The primary goal of path validation is to verify the binding between
	    a subject distinguished name or a subject alternative name and subject
	    public key, as represented in the end entity certificate, based on the
	    public key of the trust anchor. This requires obtaining a sequence of
	    certificates that support that binding. That sequence should be provided
	    in the passed 'chain'. The trust anchor should be in the given CA
	    store. The 'end entity' certificate is the certificate provided by the
	    end point (typically a server) and is the first in the chain.

	    To meet this goal, the path validation process verifies, among other
	    things, that a prospective certification path (a sequence of n
	    certificates or a 'chain') satisfies the following conditions:

	    (a) for all x in {1, ..., n-1}, the subject of certificate x is
	          the issuer of certificate x+1;

	    (b) certificate 1 is issued by the trust anchor;

	    (c) certificate n is the certificate to be validated; and

	    (d) for all x in {1, ..., n}, the certificate was valid at the
	          time in question.

	    Note that here 'n' is index 0 in the chain and 1 is the last certificate
	    in the chain and it must be signed by a certificate in the connection's
	    CA store.

	    The path validation process also determines the set of certificate
	    policies that are valid for this path, based on the certificate policies
	    extension, policy mapping extension, policy constraints extension, and
	    inhibit any-policy extension.

	    Note: Policy mapping extension not supported (Not Required).

	    Note: If the certificate has an unsupported critical extension, then it
	    must be rejected.

	    Note: A certificate is self-issued if the DNs that appear in the subject
	    and issuer fields are identical and are not empty.

	    The path validation algorithm assumes the following seven inputs are
	    provided to the path processing logic. What this specific implementation
	    will use is provided parenthetically:

	    (a) a prospective certification path of length n (the 'chain')
	    (b) the current date/time: ('now').
	    (c) user-initial-policy-set: A set of certificate policy identifiers
	          naming the policies that are acceptable to the certificate user.
	          The user-initial-policy-set contains the special value any-policy
	          if the user is not concerned about certificate policy
	          (Not implemented. Any policy is accepted).
	    (d) trust anchor information, describing a CA that serves as a trust
	          anchor for the certification path. The trust anchor information
	          includes:

	      (1)  the trusted issuer name,
	      (2)  the trusted public key algorithm,
	      (3)  the trusted public key, and
	      (4)  optionally, the trusted public key parameters associated
	             with the public key.

	      (Trust anchors are provided via certificates in the CA store).

	      The trust anchor information may be provided to the path processing
	      procedure in the form of a self-signed certificate. The trusted anchor
	      information is trusted because it was delivered to the path processing
	      procedure by some trustworthy out-of-band procedure. If the trusted
	      public key algorithm requires parameters, then the parameters are
	      provided along with the trusted public key (No parameters used in this
	      implementation).

	    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
	          allowed in the certification path.
	          (Not implemented, no policy checking)

	    (f) initial-explicit-policy, which indicates if the path must be valid
	          for at least one of the certificate policies in the user-initial-
	          policy-set.
	          (Not implemented, no policy checking)

	    (g) initial-any-policy-inhibit, which indicates whether the
	          anyPolicy OID should be processed if it is included in a
	          certificate.
	          (Not implemented, so any policy is valid provided that it is
	          not marked as critical) */

	  /* Basic Path Processing:

	    For each certificate in the 'chain', the following is checked:

	    1. The certificate validity period includes the current time.
	    2. The certificate was signed by its parent (where the parent is either
	       the next in the chain or from the CA store). Allow processing to
	       continue to the next step if no parent is found but the certificate is
	       in the CA store.
	    3. TODO: The certificate has not been revoked.
	    4. The certificate issuer name matches the parent's subject name.
	    5. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is within one of the permitted subtrees of X.500 distinguished names
	       and that each of the alternative names in the subjectAltName extension
	       (critical or non-critical) is within one of the permitted subtrees for
	       that name type.
	    6. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is not within one of the excluded subtrees for X.500 distinguished
	       names and none of the subjectAltName extension names are excluded for
	       that name type.
	    7. The other steps in the algorithm for basic path processing involve
	       handling the policy extension which is not presently supported in this
	       implementation. Instead, if a critical policy extension is found, the
	       certificate is rejected as not supported.
	    8. If the certificate is not the first or if its the only certificate in
	       the chain (having no parent from the CA store or is self-signed) and it
	       has a critical key usage extension, verify that the keyCertSign bit is
	       set. If the key usage extension exists, verify that the basic
	       constraints extension exists. If the basic constraints extension exists,
	       verify that the cA flag is set. If pathLenConstraint is set, ensure that
	       the number of certificates that precede in the chain (come earlier
	       in the chain as implemented below), excluding the very first in the
	       chain (typically the end-entity one), isn't greater than the
	       pathLenConstraint. This constraint limits the number of intermediate
	       CAs that may appear below a CA before only end-entity certificates
	       may be issued. */

	  // copy cert chain references to another array to protect against changes
	  // in verify callback
	  chain = chain.slice(0);
	  var certs = chain.slice(0);

	  // get current date
	  var now = new Date();

	  // verify each cert in the chain using its parent, where the parent
	  // is either the next in the chain or from the CA store
	  var first = true;
	  var error = null;
	  var depth = 0;
	  do {
	    var cert = chain.shift();
	    var parent = null;
	    var selfSigned = false;

	    // 1. check valid time
	    if(now < cert.validity.notBefore || now > cert.validity.notAfter) {
	      error = {
	        message: 'Certificate is not valid yet or has expired.',
	        error: pki.certificateError.certificate_expired,
	        notBefore: cert.validity.notBefore,
	        notAfter: cert.validity.notAfter,
	        now: now
	      };
	    }

	    // 2. verify with parent from chain or CA store
	    if(error === null) {
	      parent = chain[0] || caStore.getIssuer(cert);
	      if(parent === null) {
	        // check for self-signed cert
	        if(cert.isIssuer(cert)) {
	          selfSigned = true;
	          parent = cert;
	        }
	      }

	      if(parent) {
	        // FIXME: current CA store implementation might have multiple
	        // certificates where the issuer can't be determined from the
	        // certificate (happens rarely with, eg: old certificates) so normalize
	        // by always putting parents into an array
	        // TODO: there's may be an extreme degenerate case currently uncovered
	        // where an old intermediate certificate seems to have a matching parent
	        // but none of the parents actually verify ... but the intermediate
	        // is in the CA and it should pass this check; needs investigation
	        var parents = parent;
	        if(!forge.util.isArray(parents)) {
	          parents = [parents];
	        }

	        // try to verify with each possible parent (typically only one)
	        var verified = false;
	        while(!verified && parents.length > 0) {
	          parent = parents.shift();
	          try {
	            verified = parent.verify(cert);
	          } catch(ex) {
	            // failure to verify, don't care why, try next one
	          }
	        }

	        if(!verified) {
	          error = {
	            message: 'Certificate signature is invalid.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }

	      if(error === null && (!parent || selfSigned) &&
	        !caStore.hasCertificate(cert)) {
	        // no parent issuer and certificate itself is not trusted
	        error = {
	          message: 'Certificate is not trusted.',
	          error: pki.certificateError.unknown_ca
	        };
	      }
	    }

	    // TODO: 3. check revoked

	    // 4. check for matching issuer/subject
	    if(error === null && parent && !cert.isIssuer(parent)) {
	      // parent is not issuer
	      error = {
	        message: 'Certificate issuer is invalid.',
	        error: pki.certificateError.bad_certificate
	      };
	    }

	    // 5. TODO: check names with permitted names tree

	    // 6. TODO: check names against excluded names tree

	    // 7. check for unsupported critical extensions
	    if(error === null) {
	      // supported extensions
	      var se = {
	        keyUsage: true,
	        basicConstraints: true
	      };
	      for(var i = 0; error === null && i < cert.extensions.length; ++i) {
	        var ext = cert.extensions[i];
	        if(ext.critical && !(ext.name in se)) {
	          error = {
	            message:
	              'Certificate has an unsupported critical extension.',
	            error: pki.certificateError.unsupported_certificate
	          };
	        }
	      }
	    }

	    // 8. check for CA if cert is not first or is the only certificate
	    // remaining in chain with no parent or is self-signed
	    if(error === null &&
	      (!first || (chain.length === 0 && (!parent || selfSigned)))) {
	      // first check keyUsage extension and then basic constraints
	      var bcExt = cert.getExtension('basicConstraints');
	      var keyUsageExt = cert.getExtension('keyUsage');
	      if(keyUsageExt !== null) {
	        // keyCertSign must be true and there must be a basic
	        // constraints extension
	        if(!keyUsageExt.keyCertSign || bcExt === null) {
	          // bad certificate
	          error = {
	            message:
	              'Certificate keyUsage or basicConstraints conflict ' +
	              'or indicate that the certificate is not a CA. ' +
	              'If the certificate is the only one in the chain or ' +
	              'isn\'t the first then the certificate must be a ' +
	              'valid CA.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }
	      // basic constraints cA flag must be set
	      if(error === null && bcExt !== null && !bcExt.cA) {
	        // bad certificate
	        error = {
	          message:
	            'Certificate basicConstraints indicates the certificate ' +
	            'is not a CA.',
	          error: pki.certificateError.bad_certificate
	        };
	      }
	      // if error is not null and keyUsage is available, then we know it
	      // has keyCertSign and there is a basic constraints extension too,
	      // which means we can check pathLenConstraint (if it exists)
	      if(error === null && keyUsageExt !== null &&
	        'pathLenConstraint' in bcExt) {
	        // pathLen is the maximum # of intermediate CA certs that can be
	        // found between the current certificate and the end-entity (depth 0)
	        // certificate; this number does not include the end-entity (depth 0,
	        // last in the chain) even if it happens to be a CA certificate itself
	        var pathLen = depth - 1;
	        if(pathLen > bcExt.pathLenConstraint) {
	          // pathLenConstraint violated, bad certificate
	          error = {
	            message:
	              'Certificate basicConstraints pathLenConstraint violated.',
	            error: pki.certificateError.bad_certificate
	          };
	        }
	      }
	    }

	    // call application callback
	    var vfd = (error === null) ? true : error.error;
	    var ret = verify ? verify(vfd, depth, certs) : vfd;
	    if(ret === true) {
	      // clear any set error
	      error = null;
	    } else {
	      // if passed basic tests, set default message and alert
	      if(vfd === true) {
	        error = {
	          message: 'The application rejected the certificate.',
	          error: pki.certificateError.bad_certificate
	        };
	      }

	      // check for custom error info
	      if(ret || ret === 0) {
	        // set custom message and error
	        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	          if(ret.message) {
	             error.message = ret.message;
	          }
	          if(ret.error) {
	            error.error = ret.error;
	          }
	        } else if(typeof ret === 'string') {
	          // set custom error
	          error.error = ret;
	        }
	      }

	      // throw error
	      throw error;
	    }

	    // no longer first cert in chain
	    first = false;
	    ++depth;
	  } while(chain.length > 0);

	  return true;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'x509';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge.pki;
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/x509',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './md',
	  './mgf',
	  './oids',
	  './pem',
	  './pss',
	  './rsa',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#12.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * The ASN.1 representation of PKCS#12 is as follows
	 * (see ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-12/pkcs-12-tc1.pdf for details)
	 *
	 * PFX ::= SEQUENCE {
	 *   version  INTEGER {v3(3)}(v3,...),
	 *   authSafe ContentInfo,
	 *   macData  MacData OPTIONAL
	 * }
	 *
	 * MacData ::= SEQUENCE {
	 *   mac DigestInfo,
	 *   macSalt OCTET STRING,
	 *   iterations INTEGER DEFAULT 1
	 * }
	 * Note: The iterations default is for historical reasons and its use is
	 * deprecated. A higher value, like 1024, is recommended.
	 *
	 * DigestInfo is defined in PKCS#7 as follows:
	 *
	 * DigestInfo ::= SEQUENCE {
	 *   digestAlgorithm DigestAlgorithmIdentifier,
	 *   digest Digest
	 * }
	 *
	 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of SHA1 there is none.
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *    algorithm OBJECT IDENTIFIER,
	 *    parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * Digest ::= OCTET STRING
	 *
	 *
	 * ContentInfo ::= SEQUENCE {
	 *   contentType ContentType,
	 *   content     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL
	 * }
	 *
	 * ContentType ::= OBJECT IDENTIFIER
	 *
	 * AuthenticatedSafe ::= SEQUENCE OF ContentInfo
	 * -- Data if unencrypted
	 * -- EncryptedData if password-encrypted
	 * -- EnvelopedData if public key-encrypted
	 *
	 *
	 * SafeContents ::= SEQUENCE OF SafeBag
	 *
	 * SafeBag ::= SEQUENCE {
	 *   bagId     BAG-TYPE.&id ({PKCS12BagSet})
	 *   bagValue  [0] EXPLICIT BAG-TYPE.&Type({PKCS12BagSet}{@bagId}),
	 *   bagAttributes SET OF PKCS12Attribute OPTIONAL
	 * }
	 *
	 * PKCS12Attribute ::= SEQUENCE {
	 *   attrId ATTRIBUTE.&id ({PKCS12AttrSet}),
	 *   attrValues SET OF ATTRIBUTE.&Type ({PKCS12AttrSet}{@attrId})
	 * } -- This type is compatible with the X.500 type ’Attribute’
	 *
	 * PKCS12AttrSet ATTRIBUTE ::= {
	 *   friendlyName | -- from PKCS #9
	 *   localKeyId, -- from PKCS #9
	 *   ... -- Other attributes are allowed
	 * }
	 *
	 * CertBag ::= SEQUENCE {
	 *   certId    BAG-TYPE.&id   ({CertTypes}),
	 *   certValue [0] EXPLICIT BAG-TYPE.&Type ({CertTypes}{@certId})
	 * }
	 *
	 * x509Certificate BAG-TYPE ::= {OCTET STRING IDENTIFIED BY {certTypes 1}}
	 *   -- DER-encoded X.509 certificate stored in OCTET STRING
	 *
	 * sdsiCertificate BAG-TYPE ::= {IA5String IDENTIFIED BY {certTypes 2}}
	 * -- Base64-encoded SDSI certificate stored in IA5String
	 *
	 * CertTypes BAG-TYPE ::= {
	 *   x509Certificate |
	 *   sdsiCertificate,
	 *   ... -- For future extensions
	 * }
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 & PKI API
	var asn1 = forge.asn1;
	var pki = forge.pki;

	// shortcut for PKCS#12 API
	var p12 = forge.pkcs12 = forge.pkcs12 || {};

	var contentInfoValidator = {
	  name: 'ContentInfo',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,  // a ContentInfo
	  constructed: true,
	  value: [{
	    name: 'ContentInfo.contentType',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'ContentInfo.content',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    captureAsn1: 'content'
	  }]
	};

	var pfxValidator = {
	  name: 'PFX',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'PFX.version',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  },
	  contentInfoValidator, {
	    name: 'PFX.macData',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SEQUENCE,
	    constructed: true,
	    optional: true,
	    captureAsn1: 'mac',
	    value: [{
	      name: 'PFX.macData.mac',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.SEQUENCE,  // DigestInfo
	      constructed: true,
	      value: [{
	        name: 'PFX.macData.mac.digestAlgorithm',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.SEQUENCE,  // DigestAlgorithmIdentifier
	        constructed: true,
	        value: [{
	          name: 'PFX.macData.mac.digestAlgorithm.algorithm',
	          tagClass: asn1.Class.UNIVERSAL,
	          type: asn1.Type.OID,
	          constructed: false,
	          capture: 'macAlgorithm'
	        }, {
	          name: 'PFX.macData.mac.digestAlgorithm.parameters',
	          tagClass: asn1.Class.UNIVERSAL,
	          captureAsn1: 'macAlgorithmParameters'
	        }]
	      }, {
	        name: 'PFX.macData.mac.digest',
	        tagClass: asn1.Class.UNIVERSAL,
	        type: asn1.Type.OCTETSTRING,
	        constructed: false,
	        capture: 'macDigest'
	      }]
	    }, {
	      name: 'PFX.macData.macSalt',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.OCTETSTRING,
	      constructed: false,
	      capture: 'macSalt'
	    }, {
	      name: 'PFX.macData.iterations',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Type.INTEGER,
	      constructed: false,
	      optional: true,
	      capture: 'macIterations'
	    }]
	  }]
	};

	var safeBagValidator = {
	  name: 'SafeBag',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SafeBag.bagId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'bagId'
	  }, {
	    name: 'SafeBag.bagValue',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    captureAsn1: 'bagValue'
	  }, {
	    name: 'SafeBag.bagAttributes',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    optional: true,
	    capture: 'bagAttributes'
	  }]
	};

	var attributeValidator = {
	  name: 'Attribute',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'Attribute.attrId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'oid'
	  }, {
	    name: 'Attribute.attrValues',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.SET,
	    constructed: true,
	    capture: 'values'
	  }]
	};

	var certBagValidator = {
	  name: 'CertBag',
	  tagClass: asn1.Class.UNIVERSAL,
	  type: asn1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'CertBag.certId',
	    tagClass: asn1.Class.UNIVERSAL,
	    type: asn1.Type.OID,
	    constructed: false,
	    capture: 'certId'
	  }, {
	    name: 'CertBag.certValue',
	    tagClass: asn1.Class.CONTEXT_SPECIFIC,
	    constructed: true,
	    /* So far we only support X.509 certificates (which are wrapped in
	       an OCTET STRING, hence hard code that here). */
	    value: [{
	      name: 'CertBag.certValue[0]',
	      tagClass: asn1.Class.UNIVERSAL,
	      type: asn1.Class.OCTETSTRING,
	      constructed: false,
	      capture: 'cert'
	    }]
	  }]
	};

	/**
	 * Search SafeContents structure for bags with matching attributes.
	 *
	 * The search can optionally be narrowed by a certain bag type.
	 *
	 * @param safeContents the SafeContents structure to search in.
	 * @param attrName the name of the attribute to compare against.
	 * @param attrValue the attribute value to search for.
	 * @param [bagType] bag type to narrow search by.
	 *
	 * @return an array of matching bags.
	 */
	function _getBagsByAttribute(safeContents, attrName, attrValue, bagType) {
	  var result = [];

	  for(var i = 0; i < safeContents.length; i ++) {
	    for(var j = 0; j < safeContents[i].safeBags.length; j ++) {
	      var bag = safeContents[i].safeBags[j];
	      if(bagType !== undefined && bag.type !== bagType) {
	        continue;
	      }
	      // only filter by bag type, no attribute specified
	      if(attrName === null) {
	        result.push(bag);
	        continue;
	      }
	      if(bag.attributes[attrName] !== undefined &&
	        bag.attributes[attrName].indexOf(attrValue) >= 0) {
	        result.push(bag);
	      }
	    }
	  }

	  return result;
	}

	/**
	 * Converts a PKCS#12 PFX in ASN.1 notation into a PFX object.
	 *
	 * @param obj The PKCS#12 PFX in ASN.1 notation.
	 * @param strict true to use strict DER decoding, false not to (default: true).
	 * @param {String} password Password to decrypt with (optional).
	 *
	 * @return PKCS#12 PFX object.
	 */
	p12.pkcs12FromAsn1 = function(obj, strict, password) {
	  // handle args
	  if(typeof strict === 'string') {
	    password = strict;
	    strict = true;
	  } else if(strict === undefined) {
	    strict = true;
	  }

	  // validate PFX and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, pfxValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#12 PFX. ' +
	      'ASN.1 object is not an PKCS#12 PFX.');
	    error.errors = error;
	    throw error;
	  }

	  var pfx = {
	    version: capture.version.charCodeAt(0),
	    safeContents: [],

	    /**
	     * Gets bags with matching attributes.
	     *
	     * @param filter the attributes to filter by:
	     *          [localKeyId] the localKeyId to search for.
	     *          [localKeyIdHex] the localKeyId in hex to search for.
	     *          [friendlyName] the friendly name to search for.
	     *          [bagType] bag type to narrow each attribute search by.
	     *
	     * @return a map of attribute type to an array of matching bags or, if no
	     *           attribute was given but a bag type, the map key will be the
	     *           bag type.
	     */
	    getBags: function(filter) {
	      var rval = {};

	      var localKeyId;
	      if('localKeyId' in filter) {
	        localKeyId = filter.localKeyId;
	      } else if('localKeyIdHex' in filter) {
	        localKeyId = forge.util.hexToBytes(filter.localKeyIdHex);
	      }

	      // filter on bagType only
	      if(localKeyId === undefined && !('friendlyName' in filter) &&
	        'bagType' in filter) {
	        rval[filter.bagType] = _getBagsByAttribute(
	          pfx.safeContents, null, null, filter.bagType);
	      }

	      if(localKeyId !== undefined) {
	        rval.localKeyId = _getBagsByAttribute(
	          pfx.safeContents, 'localKeyId',
	          localKeyId, filter.bagType);
	      }
	      if('friendlyName' in filter) {
	        rval.friendlyName = _getBagsByAttribute(
	          pfx.safeContents, 'friendlyName',
	          filter.friendlyName, filter.bagType);
	      }

	      return rval;
	    },

	    /**
	     * DEPRECATED: use getBags() instead.
	     *
	     * Get bags with matching friendlyName attribute.
	     *
	     * @param friendlyName the friendly name to search for.
	     * @param [bagType] bag type to narrow search by.
	     *
	     * @return an array of bags with matching friendlyName attribute.
	     */
	    getBagsByFriendlyName: function(friendlyName, bagType) {
	      return _getBagsByAttribute(
	        pfx.safeContents, 'friendlyName', friendlyName, bagType);
	    },

	    /**
	     * DEPRECATED: use getBags() instead.
	     *
	     * Get bags with matching localKeyId attribute.
	     *
	     * @param localKeyId the localKeyId to search for.
	     * @param [bagType] bag type to narrow search by.
	     *
	     * @return an array of bags with matching localKeyId attribute.
	     */
	    getBagsByLocalKeyId: function(localKeyId, bagType) {
	      return _getBagsByAttribute(
	        pfx.safeContents, 'localKeyId', localKeyId, bagType);
	    }
	  };

	  if(capture.version.charCodeAt(0) !== 3) {
	    var error = new Error('PKCS#12 PFX of version other than 3 not supported.');
	    error.version = capture.version.charCodeAt(0);
	    throw error;
	  }

	  if(asn1.derToOid(capture.contentType) !== pki.oids.data) {
	    var error = new Error('Only PKCS#12 PFX in password integrity mode supported.');
	    error.oid = asn1.derToOid(capture.contentType);
	    throw error;
	  }

	  var data = capture.content.value[0];
	  if(data.tagClass !== asn1.Class.UNIVERSAL ||
	     data.type !== asn1.Type.OCTETSTRING) {
	    throw new Error('PKCS#12 authSafe content data is not an OCTET STRING.');
	  }
	  data = _decodePkcs7Data(data);

	  // check for MAC
	  if(capture.mac) {
	    var md = null;
	    var macKeyBytes = 0;
	    var macAlgorithm = asn1.derToOid(capture.macAlgorithm);
	    switch(macAlgorithm) {
	    case pki.oids.sha1:
	      md = forge.md.sha1.create();
	      macKeyBytes = 20;
	      break;
	    case pki.oids.sha256:
	      md = forge.md.sha256.create();
	      macKeyBytes = 32;
	      break;
	    case pki.oids.sha384:
	      md = forge.md.sha384.create();
	      macKeyBytes = 48;
	      break;
	    case pki.oids.sha512:
	      md = forge.md.sha512.create();
	      macKeyBytes = 64;
	      break;
	    case pki.oids.md5:
	      md = forge.md.md5.create();
	      macKeyBytes = 16;
	      break;
	    }
	    if(md === null) {
	      throw new Error('PKCS#12 uses unsupported MAC algorithm: ' + macAlgorithm);
	    }

	    // verify MAC (iterations default to 1)
	    var macSalt = new forge.util.ByteBuffer(capture.macSalt);
	    var macIterations = (('macIterations' in capture) ?
	      parseInt(forge.util.bytesToHex(capture.macIterations), 16) : 1);
	    var macKey = p12.generateKey(
	      password, macSalt, 3, macIterations, macKeyBytes, md);
	    var mac = forge.hmac.create();
	    mac.start(md, macKey);
	    mac.update(data.value);
	    var macValue = mac.getMac();
	    if(macValue.getBytes() !== capture.macDigest) {
	      throw new Error('PKCS#12 MAC could not be verified. Invalid password?');
	    }
	  }

	  _decodeAuthenticatedSafe(pfx, data.value, strict, password);
	  return pfx;
	};

	/**
	 * Decodes PKCS#7 Data. PKCS#7 (RFC 2315) defines "Data" as an OCTET STRING,
	 * but it is sometimes an OCTET STRING that is composed/constructed of chunks,
	 * each its own OCTET STRING. This is BER-encoding vs. DER-encoding. This
	 * function transforms this corner-case into the usual simple,
	 * non-composed/constructed OCTET STRING.
	 *
	 * This function may be moved to ASN.1 at some point to better deal with
	 * more BER-encoding issues, should they arise.
	 *
	 * @param data the ASN.1 Data object to transform.
	 */
	function _decodePkcs7Data(data) {
	  // handle special case of "chunked" data content: an octet string composed
	  // of other octet strings
	  if(data.composed || data.constructed) {
	    var value = forge.util.createBuffer();
	    for(var i = 0; i < data.value.length; ++i) {
	      value.putBytes(data.value[i].value);
	    }
	    data.composed = data.constructed = false;
	    data.value = value.getBytes();
	  }
	  return data;
	}

	/**
	 * Decode PKCS#12 AuthenticatedSafe (BER encoded) into PFX object.
	 *
	 * The AuthenticatedSafe is a BER-encoded SEQUENCE OF ContentInfo.
	 *
	 * @param pfx The PKCS#12 PFX object to fill.
	 * @param {String} authSafe BER-encoded AuthenticatedSafe.
	 * @param strict true to use strict DER decoding, false not to.
	 * @param {String} password Password to decrypt with (optional).
	 */
	function _decodeAuthenticatedSafe(pfx, authSafe, strict, password) {
	  authSafe = asn1.fromDer(authSafe, strict);  /* actually it's BER encoded */

	  if(authSafe.tagClass !== asn1.Class.UNIVERSAL ||
	     authSafe.type !== asn1.Type.SEQUENCE ||
	     authSafe.constructed !== true) {
	    throw new Error('PKCS#12 AuthenticatedSafe expected to be a ' +
	      'SEQUENCE OF ContentInfo');
	  }

	  for(var i = 0; i < authSafe.value.length; i ++) {
	    var contentInfo = authSafe.value[i];

	    // validate contentInfo and capture data
	    var capture = {};
	    var errors = [];
	    if(!asn1.validate(contentInfo, contentInfoValidator, capture, errors)) {
	      var error = new Error('Cannot read ContentInfo.');
	      error.errors = errors;
	      throw error;
	    }

	    var obj = {
	      encrypted: false
	    };
	    var safeContents = null;
	    var data = capture.content.value[0];
	    switch(asn1.derToOid(capture.contentType)) {
	    case pki.oids.data:
	      if(data.tagClass !== asn1.Class.UNIVERSAL ||
	         data.type !== asn1.Type.OCTETSTRING) {
	        throw new Error('PKCS#12 SafeContents Data is not an OCTET STRING.');
	      }
	      safeContents = _decodePkcs7Data(data).value;
	      break;
	    case pki.oids.encryptedData:
	      safeContents = _decryptSafeContents(data, password);
	      obj.encrypted = true;
	      break;
	    default:
	      var error = new Error('Unsupported PKCS#12 contentType.');
	      error.contentType = asn1.derToOid(capture.contentType);
	      throw error;
	    }

	    obj.safeBags = _decodeSafeContents(safeContents, strict, password);
	    pfx.safeContents.push(obj);
	  }
	}

	/**
	 * Decrypt PKCS#7 EncryptedData structure.
	 *
	 * @param data ASN.1 encoded EncryptedContentInfo object.
	 * @param password The user-provided password.
	 *
	 * @return The decrypted SafeContents (ASN.1 object).
	 */
	function _decryptSafeContents(data, password) {
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(
	    data, forge.pkcs7.asn1.encryptedDataValidator, capture, errors)) {
	    var error = new Error('Cannot read EncryptedContentInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var oid = asn1.derToOid(capture.contentType);
	  if(oid !== pki.oids.data) {
	    var error = new Error(
	      'PKCS#12 EncryptedContentInfo ContentType is not Data.');
	    error.oid = oid;
	    throw error;
	  }

	  // get cipher
	  oid = asn1.derToOid(capture.encAlgorithm);
	  var cipher = pki.pbe.getCipher(oid, capture.encParameter, password);

	  // get encrypted data
	  var encryptedContentAsn1 = _decodePkcs7Data(capture.encryptedContentAsn1);
	  var encrypted = forge.util.createBuffer(encryptedContentAsn1.value);

	  cipher.update(encrypted);
	  if(!cipher.finish()) {
	    throw new Error('Failed to decrypt PKCS#12 SafeContents.');
	  }

	  return cipher.output.getBytes();
	}

	/**
	 * Decode PKCS#12 SafeContents (BER-encoded) into array of Bag objects.
	 *
	 * The safeContents is a BER-encoded SEQUENCE OF SafeBag.
	 *
	 * @param {String} safeContents BER-encoded safeContents.
	 * @param strict true to use strict DER decoding, false not to.
	 * @param {String} password Password to decrypt with (optional).
	 *
	 * @return {Array} Array of Bag objects.
	 */
	function _decodeSafeContents(safeContents, strict, password) {
	  // if strict and no safe contents, return empty safes
	  if(!strict && safeContents.length === 0) {
	    return [];
	  }

	  // actually it's BER-encoded
	  safeContents = asn1.fromDer(safeContents, strict);

	  if(safeContents.tagClass !== asn1.Class.UNIVERSAL ||
	    safeContents.type !== asn1.Type.SEQUENCE ||
	    safeContents.constructed !== true) {
	    throw new Error(
	      'PKCS#12 SafeContents expected to be a SEQUENCE OF SafeBag.');
	  }

	  var res = [];
	  for(var i = 0; i < safeContents.value.length; i++) {
	    var safeBag = safeContents.value[i];

	    // validate SafeBag and capture data
	    var capture = {};
	    var errors = [];
	    if(!asn1.validate(safeBag, safeBagValidator, capture, errors)) {
	      var error = new Error('Cannot read SafeBag.');
	      error.errors = errors;
	      throw error;
	    }

	    /* Create bag object and push to result array. */
	    var bag = {
	      type: asn1.derToOid(capture.bagId),
	      attributes: _decodeBagAttributes(capture.bagAttributes)
	    };
	    res.push(bag);

	    var validator, decoder;
	    var bagAsn1 = capture.bagValue.value[0];
	    switch(bag.type) {
	      case pki.oids.pkcs8ShroudedKeyBag:
	        /* bagAsn1 has a EncryptedPrivateKeyInfo, which we need to decrypt.
	           Afterwards we can handle it like a keyBag,
	           which is a PrivateKeyInfo. */
	        bagAsn1 = pki.decryptPrivateKeyInfo(bagAsn1, password);
	        if(bagAsn1 === null) {
	          throw new Error(
	            'Unable to decrypt PKCS#8 ShroudedKeyBag, wrong password?');
	        }

	        /* fall through */
	      case pki.oids.keyBag:
	        /* A PKCS#12 keyBag is a simple PrivateKeyInfo as understood by our
	           PKI module, hence we don't have to do validation/capturing here,
	           just pass what we already got. */
	        try {
	          bag.key = pki.privateKeyFromAsn1(bagAsn1);
	        } catch(e) {
	          // ignore unknown key type, pass asn1 value
	          bag.key = null;
	          bag.asn1 = bagAsn1;
	        }
	        continue;  /* Nothing more to do. */

	      case pki.oids.certBag:
	        /* A PKCS#12 certBag can wrap both X.509 and sdsi certificates.
	           Therefore put the SafeBag content through another validator to
	           capture the fields.  Afterwards check & store the results. */
	        validator = certBagValidator;
	        decoder = function() {
	          if(asn1.derToOid(capture.certId) !== pki.oids.x509Certificate) {
	            var error = new Error(
	              'Unsupported certificate type, only X.509 supported.');
	            error.oid = asn1.derToOid(capture.certId);
	            throw error;
	          }

	          // true=produce cert hash
	          var certAsn1 = asn1.fromDer(capture.cert, strict);
	          try {
	            bag.cert = pki.certificateFromAsn1(certAsn1, true);
	          } catch(e) {
	            // ignore unknown cert type, pass asn1 value
	            bag.cert = null;
	            bag.asn1 = certAsn1;
	          }
	        };
	        break;

	      default:
	        var error = new Error('Unsupported PKCS#12 SafeBag type.');
	        error.oid = bag.type;
	        throw error;
	    }

	    /* Validate SafeBag value (i.e. CertBag, etc.) and capture data if needed. */
	    if(validator !== undefined &&
	       !asn1.validate(bagAsn1, validator, capture, errors)) {
	      var error = new Error('Cannot read PKCS#12 ' + validator.name);
	      error.errors = errors;
	      throw error;
	    }

	    /* Call decoder function from above to store the results. */
	    decoder();
	  }

	  return res;
	}

	/**
	 * Decode PKCS#12 SET OF PKCS12Attribute into JavaScript object.
	 *
	 * @param attributes SET OF PKCS12Attribute (ASN.1 object).
	 *
	 * @return the decoded attributes.
	 */
	function _decodeBagAttributes(attributes) {
	  var decodedAttrs = {};

	  if(attributes !== undefined) {
	    for(var i = 0; i < attributes.length; ++i) {
	      var capture = {};
	      var errors = [];
	      if(!asn1.validate(attributes[i], attributeValidator, capture, errors)) {
	        var error = new Error('Cannot read PKCS#12 BagAttribute.');
	        error.errors = errors;
	        throw error;
	      }

	      var oid = asn1.derToOid(capture.oid);
	      if(pki.oids[oid] === undefined) {
	        // unsupported attribute type, ignore.
	        continue;
	      }

	      decodedAttrs[pki.oids[oid]] = [];
	      for(var j = 0; j < capture.values.length; ++j) {
	        decodedAttrs[pki.oids[oid]].push(capture.values[j].value);
	      }
	    }
	  }

	  return decodedAttrs;
	}

	/**
	 * Wraps a private key and certificate in a PKCS#12 PFX wrapper. If a
	 * password is provided then the private key will be encrypted.
	 *
	 * An entire certificate chain may also be included. To do this, pass
	 * an array for the "cert" parameter where the first certificate is
	 * the one that is paired with the private key and each subsequent one
	 * verifies the previous one. The certificates may be in PEM format or
	 * have been already parsed by Forge.
	 *
	 * @todo implement password-based-encryption for the whole package
	 *
	 * @param key the private key.
	 * @param cert the certificate (may be an array of certificates in order
	 *          to specify a certificate chain).
	 * @param password the password to use, null for none.
	 * @param options:
	 *          algorithm the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
	 *          count the iteration count to use.
	 *          saltSize the salt size to use.
	 *          useMac true to include a MAC, false not to, defaults to true.
	 *          localKeyId the local key ID to use, in hex.
	 *          friendlyName the friendly name to use.
	 *          generateLocalKeyId true to generate a random local key ID,
	 *            false not to, defaults to true.
	 *
	 * @return the PKCS#12 PFX ASN.1 object.
	 */
	p12.toPkcs12Asn1 = function(key, cert, password, options) {
	  // set default options
	  options = options || {};
	  options.saltSize = options.saltSize || 8;
	  options.count = options.count || 2048;
	  options.algorithm = options.algorithm || options.encAlgorithm || 'aes128';
	  if(!('useMac' in options)) {
	    options.useMac = true;
	  }
	  if(!('localKeyId' in options)) {
	    options.localKeyId = null;
	  }
	  if(!('generateLocalKeyId' in options)) {
	    options.generateLocalKeyId = true;
	  }

	  var localKeyId = options.localKeyId;
	  var bagAttrs;
	  if(localKeyId !== null) {
	    localKeyId = forge.util.hexToBytes(localKeyId);
	  } else if(options.generateLocalKeyId) {
	    // use SHA-1 of paired cert, if available
	    if(cert) {
	      var pairedCert = forge.util.isArray(cert) ? cert[0] : cert;
	      if(typeof pairedCert === 'string') {
	        pairedCert = pki.certificateFromPem(pairedCert);
	      }
	      var sha1 = forge.md.sha1.create();
	      sha1.update(asn1.toDer(pki.certificateToAsn1(pairedCert)).getBytes());
	      localKeyId = sha1.digest().getBytes();
	    } else {
	      // FIXME: consider using SHA-1 of public key (which can be generated
	      // from private key components), see: cert.generateSubjectKeyIdentifier
	      // generate random bytes
	      localKeyId = forge.random.getBytes(20);
	    }
	  }

	  var attrs = [];
	  if(localKeyId !== null) {
	    attrs.push(
	      // localKeyID
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // attrId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.localKeyId).getBytes()),
	        // attrValues
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            localKeyId)
	        ])
	      ]));
	  }
	  if('friendlyName' in options) {
	    attrs.push(
	      // friendlyName
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // attrId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.friendlyName).getBytes()),
	        // attrValues
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BMPSTRING, false,
	            options.friendlyName)
	        ])
	      ]));
	  }

	  if(attrs.length > 0) {
	    bagAttrs = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, attrs);
	  }

	  // collect contents for AuthenticatedSafe
	  var contents = [];

	  // create safe bag(s) for certificate chain
	  var chain = [];
	  if(cert !== null) {
	    if(forge.util.isArray(cert)) {
	      chain = cert;
	    } else {
	      chain = [cert];
	    }
	  }

	  var certSafeBags = [];
	  for(var i = 0; i < chain.length; ++i) {
	    // convert cert from PEM as necessary
	    cert = chain[i];
	    if(typeof cert === 'string') {
	      cert = pki.certificateFromPem(cert);
	    }

	    // SafeBag
	    var certBagAttrs = (i === 0) ? bagAttrs : undefined;
	    var certAsn1 = pki.certificateToAsn1(cert);
	    var certSafeBag =
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.certBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // CertBag
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // certId
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(pki.oids.x509Certificate).getBytes()),
	            // certValue (x509Certificate)
	            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	              asn1.create(
	                asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	                asn1.toDer(certAsn1).getBytes())
	            ])])]),
	        // bagAttributes (OPTIONAL)
	        certBagAttrs
	      ]);
	    certSafeBags.push(certSafeBag);
	  }

	  if(certSafeBags.length > 0) {
	    // SafeContents
	    var certSafeContents = asn1.create(
	      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, certSafeBags);

	    // ContentInfo
	    var certCI =
	      // PKCS#7 ContentInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // contentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          // OID for the content type is 'data'
	          asn1.oidToDer(pki.oids.data).getBytes()),
	        // content
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            asn1.toDer(certSafeContents).getBytes())
	        ])
	      ]);
	    contents.push(certCI);
	  }

	  // create safe contents for private key
	  var keyBag = null;
	  if(key !== null) {
	    // SafeBag
	    var pkAsn1 = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(key));
	    if(password === null) {
	      // no encryption
	      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.keyBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // PrivateKeyInfo
	          pkAsn1
	        ]),
	        // bagAttributes (OPTIONAL)
	        bagAttrs
	      ]);
	    } else {
	      // encrypted PrivateKeyInfo
	      keyBag = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // bagId
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(pki.oids.pkcs8ShroudedKeyBag).getBytes()),
	        // bagValue
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          // EncryptedPrivateKeyInfo
	          pki.encryptPrivateKeyInfo(pkAsn1, password, options)
	        ]),
	        // bagAttributes (OPTIONAL)
	        bagAttrs
	      ]);
	    }

	    // SafeContents
	    var keySafeContents =
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [keyBag]);

	    // ContentInfo
	    var keyCI =
	      // PKCS#7 ContentInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // contentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          // OID for the content type is 'data'
	          asn1.oidToDer(pki.oids.data).getBytes()),
	        // content
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	            asn1.toDer(keySafeContents).getBytes())
	        ])
	      ]);
	    contents.push(keyCI);
	  }

	  // create AuthenticatedSafe by stringing together the contents
	  var safe = asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, contents);

	  var macData;
	  if(options.useMac) {
	    // MacData
	    var sha1 = forge.md.sha1.create();
	    var macSalt = new forge.util.ByteBuffer(
	      forge.random.getBytes(options.saltSize));
	    var count = options.count;
	    // 160-bit key
	    var key = p12.generateKey(password, macSalt, 3, count, 20);
	    var mac = forge.hmac.create();
	    mac.start(sha1, key);
	    mac.update(asn1.toDer(safe).getBytes());
	    var macValue = mac.getMac();
	    macData = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // mac DigestInfo
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // digestAlgorithm
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // algorithm = SHA-1
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(pki.oids.sha1).getBytes()),
	          // parameters = Null
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ]),
	        // digest
	        asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,
	          false, macValue.getBytes())
	      ]),
	      // macSalt OCTET STRING
	      asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, macSalt.getBytes()),
	      // iterations INTEGER (XXX: Only support count < 65536)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        asn1.integerToDer(count).getBytes()
	      )
	    ]);
	  }

	  // PFX
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version (3)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(3).getBytes()),
	    // PKCS#7 ContentInfo
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // contentType
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        // OID for the content type is 'data'
	        asn1.oidToDer(pki.oids.data).getBytes()),
	      // content
	      asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	          asn1.toDer(safe).getBytes())
	      ])
	    ]),
	    macData
	  ]);
	};

	/**
	 * Derives a PKCS#12 key.
	 *
	 * @param password the password to derive the key material from, null or
	 *          undefined for none.
	 * @param salt the salt, as a ByteBuffer, to use.
	 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
	 * @param iter the iteration count.
	 * @param n the number of bytes to derive from the password.
	 * @param md the message digest to use, defaults to SHA-1.
	 *
	 * @return a ByteBuffer with the bytes derived from the password.
	 */
	p12.generateKey = forge.pbe.generatePkcs12Key;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs12';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs12',[
	  'require',
	  'module',
	  './asn1',
	  './hmac',
	  './oids',
	  './pkcs7asn1',
	  './pbe',
	  './random',
	  './rsa',
	  './sha1',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of a basic Public Key Infrastructure, including
	 * support for RSA public and private keys.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for asn.1 API
	var asn1 = forge.asn1;

	/* Public Key Infrastructure (PKI) implementation. */
	var pki = forge.pki = forge.pki || {};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED. Use pem.decode() instead.
	 *
	 * Converts PEM-formatted data to DER.
	 *
	 * @param pem the PEM-formatted data.
	 *
	 * @return the DER-formatted data.
	 */
	pki.pemToDer = function(pem) {
	  var msg = forge.pem.decode(pem)[0];
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert PEM to DER; PEM is encrypted.');
	  }
	  return forge.util.createBuffer(msg.body);
	};

	/**
	 * Converts an RSA private key from PEM format.
	 *
	 * @param pem the PEM-formatted private key.
	 *
	 * @return the private key.
	 */
	pki.privateKeyFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PRIVATE KEY' && msg.type !== 'RSA PRIVATE KEY') {
	    var error = new Error('Could not convert private key from PEM; PEM ' +
	      'header type is not "PRIVATE KEY" or "RSA PRIVATE KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert private key from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return pki.privateKeyFromAsn1(obj);
	};

	/**
	 * Converts an RSA private key to PEM format.
	 *
	 * @param key the private key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted private key.
	 */
	pki.privateKeyToPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'RSA PRIVATE KEY',
	    body: asn1.toDer(pki.privateKeyToAsn1(key)).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts a PrivateKeyInfo to PEM format.
	 *
	 * @param pki the PrivateKeyInfo.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted private key.
	 */
	pki.privateKeyInfoToPem = function(pki, maxline) {
	  // convert to DER, then PEM-encode
	  var msg = {
	    type: 'PRIVATE KEY',
	    body: asn1.toDer(pki).getBytes()
	  };
	  return forge.pem.encode(msg, {maxline: maxline});
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pki';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pki',[
	  'require',
	  'module',
	  './asn1',
	  './oids',
	  './pbe',
	  './pem',
	  './pbkdf2',
	  './pkcs12',
	  './pss',
	  './rsa',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A Javascript implementation of Transport Layer Security (TLS).
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
	 *
	 * The TLS Handshake Protocol involves the following steps:
	 *
	 * - Exchange hello messages to agree on algorithms, exchange random values,
	 * and check for session resumption.
	 *
	 * - Exchange the necessary cryptographic parameters to allow the client and
	 * server to agree on a premaster secret.
	 *
	 * - Exchange certificates and cryptographic information to allow the client
	 * and server to authenticate themselves.
	 *
	 * - Generate a master secret from the premaster secret and exchanged random
	 * values.
	 *
	 * - Provide security parameters to the record layer.
	 *
	 * - Allow the client and server to verify that their peer has calculated the
	 * same security parameters and that the handshake occurred without tampering
	 * by an attacker.
	 *
	 * Up to 4 different messages may be sent during a key exchange. The server
	 * certificate, the server key exchange, the client certificate, and the
	 * client key exchange.
	 *
	 * A typical handshake (from the client's perspective).
	 *
	 * 1. Client sends ClientHello.
	 * 2. Client receives ServerHello.
	 * 3. Client receives optional Certificate.
	 * 4. Client receives optional ServerKeyExchange.
	 * 5. Client receives ServerHelloDone.
	 * 6. Client sends optional Certificate.
	 * 7. Client sends ClientKeyExchange.
	 * 8. Client sends optional CertificateVerify.
	 * 9. Client sends ChangeCipherSpec.
	 * 10. Client sends Finished.
	 * 11. Client receives ChangeCipherSpec.
	 * 12. Client receives Finished.
	 * 13. Client sends/receives application data.
	 *
	 * To reuse an existing session:
	 *
	 * 1. Client sends ClientHello with session ID for reuse.
	 * 2. Client receives ServerHello with same session ID if reusing.
	 * 3. Client receives ChangeCipherSpec message if reusing.
	 * 4. Client receives Finished.
	 * 5. Client sends ChangeCipherSpec.
	 * 6. Client sends Finished.
	 *
	 * Note: Client ignores HelloRequest if in the middle of a handshake.
	 *
	 * Record Layer:
	 *
	 * The record layer fragments information blocks into TLSPlaintext records
	 * carrying data in chunks of 2^14 bytes or less. Client message boundaries are
	 * not preserved in the record layer (i.e., multiple client messages of the
	 * same ContentType MAY be coalesced into a single TLSPlaintext record, or a
	 * single message MAY be fragmented across several records).
	 *
	 * struct {
	 *   uint8 major;
	 *   uint8 minor;
	 * } ProtocolVersion;
	 *
	 * struct {
	 *   ContentType type;
	 *   ProtocolVersion version;
	 *   uint16 length;
	 *   opaque fragment[TLSPlaintext.length];
	 * } TLSPlaintext;
	 *
	 * type:
	 *   The higher-level protocol used to process the enclosed fragment.
	 *
	 * version:
	 *   The version of the protocol being employed. TLS Version 1.2 uses version
	 *   {3, 3}. TLS Version 1.0 uses version {3, 1}. Note that a client that
	 *   supports multiple versions of TLS may not know what version will be
	 *   employed before it receives the ServerHello.
	 *
	 * length:
	 *   The length (in bytes) of the following TLSPlaintext.fragment. The length
	 *   MUST NOT exceed 2^14 = 16384 bytes.
	 *
	 * fragment:
	 *   The application data. This data is transparent and treated as an
	 *   independent block to be dealt with by the higher-level protocol specified
	 *   by the type field.
	 *
	 * Implementations MUST NOT send zero-length fragments of Handshake, Alert, or
	 * ChangeCipherSpec content types. Zero-length fragments of Application data
	 * MAY be sent as they are potentially useful as a traffic analysis
	 * countermeasure.
	 *
	 * Note: Data of different TLS record layer content types MAY be interleaved.
	 * Application data is generally of lower precedence for transmission than
	 * other content types. However, records MUST be delivered to the network in
	 * the same order as they are protected by the record layer. Recipients MUST
	 * receive and process interleaved application layer traffic during handshakes
	 * subsequent to the first one on a connection.
	 *
	 * struct {
	 *   ContentType type;       // same as TLSPlaintext.type
	 *   ProtocolVersion version;// same as TLSPlaintext.version
	 *   uint16 length;
	 *   opaque fragment[TLSCompressed.length];
	 * } TLSCompressed;
	 *
	 * length:
	 *   The length (in bytes) of the following TLSCompressed.fragment.
	 *   The length MUST NOT exceed 2^14 + 1024.
	 *
	 * fragment:
	 *   The compressed form of TLSPlaintext.fragment.
	 *
	 * Note: A CompressionMethod.null operation is an identity operation; no fields
	 * are altered. In this implementation, since no compression is supported,
	 * uncompressed records are always the same as compressed records.
	 *
	 * Encryption Information:
	 *
	 * The encryption and MAC functions translate a TLSCompressed structure into a
	 * TLSCiphertext. The decryption functions reverse the process. The MAC of the
	 * record also includes a sequence number so that missing, extra, or repeated
	 * messages are detectable.
	 *
	 * struct {
	 *   ContentType type;
	 *   ProtocolVersion version;
	 *   uint16 length;
	 *   select (SecurityParameters.cipher_type) {
	 *     case stream: GenericStreamCipher;
	 *     case block:  GenericBlockCipher;
	 *     case aead:   GenericAEADCipher;
	 *   } fragment;
	 * } TLSCiphertext;
	 *
	 * type:
	 *   The type field is identical to TLSCompressed.type.
	 *
	 * version:
	 *   The version field is identical to TLSCompressed.version.
	 *
	 * length:
	 *   The length (in bytes) of the following TLSCiphertext.fragment.
	 *   The length MUST NOT exceed 2^14 + 2048.
	 *
	 * fragment:
	 *   The encrypted form of TLSCompressed.fragment, with the MAC.
	 *
	 * Note: Only CBC Block Ciphers are supported by this implementation.
	 *
	 * The TLSCompressed.fragment structures are converted to/from block
	 * TLSCiphertext.fragment structures.
	 *
	 * struct {
	 *   opaque IV[SecurityParameters.record_iv_length];
	 *   block-ciphered struct {
	 *     opaque content[TLSCompressed.length];
	 *     opaque MAC[SecurityParameters.mac_length];
	 *     uint8 padding[GenericBlockCipher.padding_length];
	 *     uint8 padding_length;
	 *   };
	 * } GenericBlockCipher;
	 *
	 * The MAC is generated as described in Section 6.2.3.1.
	 *
	 * IV:
	 *   The Initialization Vector (IV) SHOULD be chosen at random, and MUST be
	 *   unpredictable. Note that in versions of TLS prior to 1.1, there was no
	 *   IV field, and the last ciphertext block of the previous record (the "CBC
	 *   residue") was used as the IV. This was changed to prevent the attacks
	 *   described in [CBCATT]. For block ciphers, the IV length is of length
	 *   SecurityParameters.record_iv_length, which is equal to the
	 *   SecurityParameters.block_size.
	 *
	 * padding:
	 *   Padding that is added to force the length of the plaintext to be an
	 *   integral multiple of the block cipher's block length. The padding MAY be
	 *   any length up to 255 bytes, as long as it results in the
	 *   TLSCiphertext.length being an integral multiple of the block length.
	 *   Lengths longer than necessary might be desirable to frustrate attacks on
	 *   a protocol that are based on analysis of the lengths of exchanged
	 *   messages. Each uint8 in the padding data vector MUST be filled with the
	 *   padding length value. The receiver MUST check this padding and MUST use
	 *   the bad_record_mac alert to indicate padding errors.
	 *
	 * padding_length:
	 *   The padding length MUST be such that the total size of the
	 *   GenericBlockCipher structure is a multiple of the cipher's block length.
	 *   Legal values range from zero to 255, inclusive. This length specifies the
	 *   length of the padding field exclusive of the padding_length field itself.
	 *
	 * The encrypted data length (TLSCiphertext.length) is one more than the sum of
	 * SecurityParameters.block_length, TLSCompressed.length,
	 * SecurityParameters.mac_length, and padding_length.
	 *
	 * Example: If the block length is 8 bytes, the content length
	 * (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes, then the
	 * length before padding is 82 bytes (this does not include the IV. Thus, the
	 * padding length modulo 8 must be equal to 6 in order to make the total length
	 * an even multiple of 8 bytes (the block length). The padding length can be
	 * 6, 14, 22, and so on, through 254. If the padding length were the minimum
	 * necessary, 6, the padding would be 6 bytes, each containing the value 6.
	 * Thus, the last 8 octets of the GenericBlockCipher before block encryption
	 * would be xx 06 06 06 06 06 06 06, where xx is the last octet of the MAC.
	 *
	 * Note: With block ciphers in CBC mode (Cipher Block Chaining), it is critical
	 * that the entire plaintext of the record be known before any ciphertext is
	 * transmitted. Otherwise, it is possible for the attacker to mount the attack
	 * described in [CBCATT].
	 *
	 * Implementation note: Canvel et al. [CBCTIME] have demonstrated a timing
	 * attack on CBC padding based on the time required to compute the MAC. In
	 * order to defend against this attack, implementations MUST ensure that
	 * record processing time is essentially the same whether or not the padding
	 * is correct. In general, the best way to do this is to compute the MAC even
	 * if the padding is incorrect, and only then reject the packet. For instance,
	 * if the pad appears to be incorrect, the implementation might assume a
	 * zero-length pad and then compute the MAC. This leaves a small timing
	 * channel, since MAC performance depends, to some extent, on the size of the
	 * data fragment, but it is not believed to be large enough to be exploitable,
	 * due to the large block size of existing MACs and the small size of the
	 * timing signal.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/**
	 * Generates pseudo random bytes by mixing the result of two hash functions,
	 * MD5 and SHA-1.
	 *
	 * prf_TLS1(secret, label, seed) =
	 *   P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed);
	 *
	 * Each P_hash function functions as follows:
	 *
	 * P_hash(secret, seed) = HMAC_hash(secret, A(1) + seed) +
	 *                        HMAC_hash(secret, A(2) + seed) +
	 *                        HMAC_hash(secret, A(3) + seed) + ...
	 * A() is defined as:
	 *   A(0) = seed
	 *   A(i) = HMAC_hash(secret, A(i-1))
	 *
	 * The '+' operator denotes concatenation.
	 *
	 * As many iterations A(N) as are needed are performed to generate enough
	 * pseudo random byte output. If an iteration creates more data than is
	 * necessary, then it is truncated.
	 *
	 * Therefore:
	 * A(1) = HMAC_hash(secret, A(0))
	 *      = HMAC_hash(secret, seed)
	 * A(2) = HMAC_hash(secret, A(1))
	 *      = HMAC_hash(secret, HMAC_hash(secret, seed))
	 *
	 * Therefore:
	 * P_hash(secret, seed) =
	 *   HMAC_hash(secret, HMAC_hash(secret, A(0)) + seed) +
	 *   HMAC_hash(secret, HMAC_hash(secret, A(1)) + seed) +
	 *   ...
	 *
	 * Therefore:
	 * P_hash(secret, seed) =
	 *   HMAC_hash(secret, HMAC_hash(secret, seed) + seed) +
	 *   HMAC_hash(secret, HMAC_hash(secret, HMAC_hash(secret, seed)) + seed) +
	 *   ...
	 *
	 * @param secret the secret to use.
	 * @param label the label to use.
	 * @param seed the seed value to use.
	 * @param length the number of bytes to generate.
	 *
	 * @return the pseudo random bytes in a byte buffer.
	 */
	var prf_TLS1 = function(secret, label, seed, length) {
	  var rval = forge.util.createBuffer();

	  /* For TLS 1.0, the secret is split in half, into two secrets of equal
	    length. If the secret has an odd length then the last byte of the first
	    half will be the same as the first byte of the second. The length of the
	    two secrets is half of the secret rounded up. */
	  var idx = (secret.length >> 1);
	  var slen = idx + (secret.length & 1);
	  var s1 = secret.substr(0, slen);
	  var s2 = secret.substr(idx, slen);
	  var ai = forge.util.createBuffer();
	  var hmac = forge.hmac.create();
	  seed = label + seed;

	  // determine the number of iterations that must be performed to generate
	  // enough output bytes, md5 creates 16 byte hashes, sha1 creates 20
	  var md5itr = Math.ceil(length / 16);
	  var sha1itr = Math.ceil(length / 20);

	  // do md5 iterations
	  hmac.start('MD5', s1);
	  var md5bytes = forge.util.createBuffer();
	  ai.putBytes(seed);
	  for(var i = 0; i < md5itr; ++i) {
	    // HMAC_hash(secret, A(i-1))
	    hmac.start(null, null);
	    hmac.update(ai.getBytes());
	    ai.putBuffer(hmac.digest());

	    // HMAC_hash(secret, A(i) + seed)
	    hmac.start(null, null);
	    hmac.update(ai.bytes() + seed);
	    md5bytes.putBuffer(hmac.digest());
	  }

	  // do sha1 iterations
	  hmac.start('SHA1', s2);
	  var sha1bytes = forge.util.createBuffer();
	  ai.clear();
	  ai.putBytes(seed);
	  for(var i = 0; i < sha1itr; ++i) {
	    // HMAC_hash(secret, A(i-1))
	    hmac.start(null, null);
	    hmac.update(ai.getBytes());
	    ai.putBuffer(hmac.digest());

	    // HMAC_hash(secret, A(i) + seed)
	    hmac.start(null, null);
	    hmac.update(ai.bytes() + seed);
	    sha1bytes.putBuffer(hmac.digest());
	  }

	  // XOR the md5 bytes with the sha1 bytes
	  rval.putBytes(forge.util.xorBytes(
	    md5bytes.getBytes(), sha1bytes.getBytes(), length));

	  return rval;
	};

	/**
	 * Generates pseudo random bytes using a SHA256 algorithm. For TLS 1.2.
	 *
	 * @param secret the secret to use.
	 * @param label the label to use.
	 * @param seed the seed value to use.
	 * @param length the number of bytes to generate.
	 *
	 * @return the pseudo random bytes in a byte buffer.
	 */
	var prf_sha256 = function(secret, label, seed, length) {
	   // FIXME: implement me for TLS 1.2
	};

	/**
	 * Gets a MAC for a record using the SHA-1 hash algorithm.
	 *
	 * @param key the mac key.
	 * @param state the sequence number (array of two 32-bit integers).
	 * @param record the record.
	 *
	 * @return the sha-1 hash (20 bytes) for the given record.
	 */
	var hmac_sha1 = function(key, seqNum, record) {
	  /* MAC is computed like so:
	  HMAC_hash(
	    key, seqNum +
	      TLSCompressed.type +
	      TLSCompressed.version +
	      TLSCompressed.length +
	      TLSCompressed.fragment)
	  */
	  var hmac = forge.hmac.create();
	  hmac.start('SHA1', key);
	  var b = forge.util.createBuffer();
	  b.putInt32(seqNum[0]);
	  b.putInt32(seqNum[1]);
	  b.putByte(record.type);
	  b.putByte(record.version.major);
	  b.putByte(record.version.minor);
	  b.putInt16(record.length);
	  b.putBytes(record.fragment.bytes());
	  hmac.update(b.getBytes());
	  return hmac.digest().getBytes();
	};

	/**
	 * Compresses the TLSPlaintext record into a TLSCompressed record using the
	 * deflate algorithm.
	 *
	 * @param c the TLS connection.
	 * @param record the TLSPlaintext record to compress.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var deflate = function(c, record, s) {
	  var rval = false;

	  try {
	    var bytes = c.deflate(record.fragment.getBytes());
	    record.fragment = forge.util.createBuffer(bytes);
	    record.length = bytes.length;
	    rval = true;
	  } catch(ex) {
	    // deflate error, fail out
	  }

	  return rval;
	};

	/**
	 * Decompresses the TLSCompressed record into a TLSPlaintext record using the
	 * deflate algorithm.
	 *
	 * @param c the TLS connection.
	 * @param record the TLSCompressed record to decompress.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var inflate = function(c, record, s) {
	  var rval = false;

	  try {
	    var bytes = c.inflate(record.fragment.getBytes());
	    record.fragment = forge.util.createBuffer(bytes);
	    record.length = bytes.length;
	    rval = true;
	  } catch(ex) {
	    // inflate error, fail out
	  }

	  return rval;
	};

	/**
	 * Reads a TLS variable-length vector from a byte buffer.
	 *
	 * Variable-length vectors are defined by specifying a subrange of legal
	 * lengths, inclusively, using the notation <floor..ceiling>. When these are
	 * encoded, the actual length precedes the vector's contents in the byte
	 * stream. The length will be in the form of a number consuming as many bytes
	 * as required to hold the vector's specified maximum (ceiling) length. A
	 * variable-length vector with an actual length field of zero is referred to
	 * as an empty vector.
	 *
	 * @param b the byte buffer.
	 * @param lenBytes the number of bytes required to store the length.
	 *
	 * @return the resulting byte buffer.
	 */
	var readVector = function(b, lenBytes) {
	  var len = 0;
	  switch(lenBytes) {
	  case 1:
	    len = b.getByte();
	    break;
	  case 2:
	    len = b.getInt16();
	    break;
	  case 3:
	    len = b.getInt24();
	    break;
	  case 4:
	    len = b.getInt32();
	    break;
	  }

	  // read vector bytes into a new buffer
	  return forge.util.createBuffer(b.getBytes(len));
	};

	/**
	 * Writes a TLS variable-length vector to a byte buffer.
	 *
	 * @param b the byte buffer.
	 * @param lenBytes the number of bytes required to store the length.
	 * @param v the byte buffer vector.
	 */
	var writeVector = function(b, lenBytes, v) {
	  // encode length at the start of the vector, where the number of bytes for
	  // the length is the maximum number of bytes it would take to encode the
	  // vector's ceiling
	  b.putInt(v.length(), lenBytes << 3);
	  b.putBuffer(v);
	};

	/**
	 * The tls implementation.
	 */
	var tls = {};

	/**
	 * Version: TLS 1.2 = 3.3, TLS 1.1 = 3.2, TLS 1.0 = 3.1. Both TLS 1.1 and
	 * TLS 1.2 were still too new (ie: openSSL didn't implement them) at the time
	 * of this implementation so TLS 1.0 was implemented instead.
	 */
	tls.Versions = {
	  TLS_1_0: {major: 3, minor: 1},
	  TLS_1_1: {major: 3, minor: 2},
	  TLS_1_2: {major: 3, minor: 3}
	};
	tls.SupportedVersions = [
	  tls.Versions.TLS_1_1,
	  tls.Versions.TLS_1_0
	];
	tls.Version = tls.SupportedVersions[0];

	/**
	 * Maximum fragment size. True maximum is 16384, but we fragment before that
	 * to allow for unusual small increases during compression.
	 */
	tls.MaxFragment = 16384 - 1024;

	/**
	 * Whether this entity is considered the "client" or "server".
	 * enum { server, client } ConnectionEnd;
	 */
	tls.ConnectionEnd = {
	  server: 0,
	  client: 1
	};

	/**
	 * Pseudo-random function algorithm used to generate keys from the master
	 * secret.
	 * enum { tls_prf_sha256 } PRFAlgorithm;
	 */
	tls.PRFAlgorithm = {
	  tls_prf_sha256: 0
	};

	/**
	 * Bulk encryption algorithms.
	 * enum { null, rc4, des3, aes } BulkCipherAlgorithm;
	 */
	tls.BulkCipherAlgorithm = {
	  none: null,
	  rc4: 0,
	  des3: 1,
	  aes: 2
	};

	/**
	 * Cipher types.
	 * enum { stream, block, aead } CipherType;
	 */
	tls.CipherType = {
	  stream: 0,
	  block: 1,
	  aead: 2
	};

	/**
	 * MAC (Message Authentication Code) algorithms.
	 * enum { null, hmac_md5, hmac_sha1, hmac_sha256,
	 *   hmac_sha384, hmac_sha512} MACAlgorithm;
	 */
	tls.MACAlgorithm = {
	  none: null,
	  hmac_md5: 0,
	  hmac_sha1: 1,
	  hmac_sha256: 2,
	  hmac_sha384: 3,
	  hmac_sha512: 4
	};

	/**
	 * Compression algorithms.
	 * enum { null(0), deflate(1), (255) } CompressionMethod;
	 */
	tls.CompressionMethod = {
	  none: 0,
	  deflate: 1
	};

	/**
	 * TLS record content types.
	 * enum {
	 *   change_cipher_spec(20), alert(21), handshake(22),
	 *   application_data(23), (255)
	 * } ContentType;
	 */
	tls.ContentType = {
	  change_cipher_spec: 20,
	  alert: 21,
	  handshake: 22,
	  application_data: 23,
	  heartbeat: 24
	};

	/**
	 * TLS handshake types.
	 * enum {
	 *   hello_request(0), client_hello(1), server_hello(2),
	 *   certificate(11), server_key_exchange (12),
	 *   certificate_request(13), server_hello_done(14),
	 *   certificate_verify(15), client_key_exchange(16),
	 *   finished(20), (255)
	 * } HandshakeType;
	 */
	tls.HandshakeType = {
	  hello_request: 0,
	  client_hello: 1,
	  server_hello: 2,
	  certificate: 11,
	  server_key_exchange: 12,
	  certificate_request: 13,
	  server_hello_done: 14,
	  certificate_verify: 15,
	  client_key_exchange: 16,
	  finished: 20
	};

	/**
	 * TLS Alert Protocol.
	 *
	 * enum { warning(1), fatal(2), (255) } AlertLevel;
	 *
	 * enum {
	 *   close_notify(0),
	 *   unexpected_message(10),
	 *   bad_record_mac(20),
	 *   decryption_failed(21),
	 *   record_overflow(22),
	 *   decompression_failure(30),
	 *   handshake_failure(40),
	 *   bad_certificate(42),
	 *   unsupported_certificate(43),
	 *   certificate_revoked(44),
	 *   certificate_expired(45),
	 *   certificate_unknown(46),
	 *   illegal_parameter(47),
	 *   unknown_ca(48),
	 *   access_denied(49),
	 *   decode_error(50),
	 *   decrypt_error(51),
	 *   export_restriction(60),
	 *   protocol_version(70),
	 *   insufficient_security(71),
	 *   internal_error(80),
	 *   user_canceled(90),
	 *   no_renegotiation(100),
	 *   (255)
	 * } AlertDescription;
	 *
	 * struct {
	 *   AlertLevel level;
	 *   AlertDescription description;
	 * } Alert;
	 */
	tls.Alert = {};
	tls.Alert.Level = {
	  warning: 1,
	  fatal: 2
	};
	tls.Alert.Description = {
	  close_notify: 0,
	  unexpected_message: 10,
	  bad_record_mac: 20,
	  decryption_failed: 21,
	  record_overflow: 22,
	  decompression_failure: 30,
	  handshake_failure: 40,
	  bad_certificate: 42,
	  unsupported_certificate: 43,
	  certificate_revoked: 44,
	  certificate_expired: 45,
	  certificate_unknown: 46,
	  illegal_parameter: 47,
	  unknown_ca: 48,
	  access_denied: 49,
	  decode_error: 50,
	  decrypt_error: 51,
	  export_restriction: 60,
	  protocol_version: 70,
	  insufficient_security: 71,
	  internal_error: 80,
	  user_canceled: 90,
	  no_renegotiation: 100
	};

	/**
	 * TLS Heartbeat Message types.
	 * enum {
	 *   heartbeat_request(1),
	 *   heartbeat_response(2),
	 *   (255)
	 * } HeartbeatMessageType;
	 */
	tls.HeartbeatMessageType = {
	  heartbeat_request: 1,
	  heartbeat_response: 2
	};

	/**
	 * Supported cipher suites.
	 */
	tls.CipherSuites = {};

	/**
	 * Gets a supported cipher suite from its 2 byte ID.
	 *
	 * @param twoBytes two bytes in a string.
	 *
	 * @return the matching supported cipher suite or null.
	 */
	tls.getCipherSuite = function(twoBytes) {
	  var rval = null;
	  for(var key in tls.CipherSuites) {
	    var cs = tls.CipherSuites[key];
	    if(cs.id[0] === twoBytes.charCodeAt(0) &&
	      cs.id[1] === twoBytes.charCodeAt(1)) {
	      rval = cs;
	      break;
	    }
	  }
	  return rval;
	};

	/**
	 * Called when an unexpected record is encountered.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleUnexpected = function(c, record) {
	  // if connection is client and closed, ignore unexpected messages
	  var ignore = (!c.open && c.entity === tls.ConnectionEnd.client);
	  if(!ignore) {
	    c.error(c, {
	      message: 'Unexpected message. Received TLS record out of order.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unexpected_message
	      }
	    });
	  }
	};

	/**
	 * Called when a client receives a HelloRequest record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleHelloRequest = function(c, record, length) {
	  // ignore renegotiation requests from the server during a handshake, but
	  // if handshaking, send a warning alert that renegotation is denied
	  if(!c.handshaking && c.handshakes > 0) {
	    // send alert warning
	    tls.queue(c, tls.createAlert(c, {
	       level: tls.Alert.Level.warning,
	       description: tls.Alert.Description.no_renegotiation
	    }));
	    tls.flush(c);
	  }

	  // continue
	  c.process();
	};

	/**
	 * Parses a hello message from a ClientHello or ServerHello record.
	 *
	 * @param record the record to parse.
	 *
	 * @return the parsed message.
	 */
	tls.parseHelloMessage = function(c, record, length) {
	  var msg = null;

	  var client = (c.entity === tls.ConnectionEnd.client);

	  // minimum of 38 bytes in message
	  if(length < 38) {
	    c.error(c, {
	      message: client ?
	        'Invalid ServerHello message. Message too short.' :
	        'Invalid ClientHello message. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  } else {
	    // use 'remaining' to calculate # of remaining bytes in the message
	    var b = record.fragment;
	    var remaining = b.length();
	    msg = {
	      version: {
	        major: b.getByte(),
	        minor: b.getByte()
	      },
	      random: forge.util.createBuffer(b.getBytes(32)),
	      session_id: readVector(b, 1),
	      extensions: []
	    };
	    if(client) {
	      msg.cipher_suite = b.getBytes(2);
	      msg.compression_method = b.getByte();
	    } else {
	      msg.cipher_suites = readVector(b, 2);
	      msg.compression_methods = readVector(b, 1);
	    }

	    // read extensions if there are any bytes left in the message
	    remaining = length - (remaining - b.length());
	    if(remaining > 0) {
	      // parse extensions
	      var exts = readVector(b, 2);
	      while(exts.length() > 0) {
	        msg.extensions.push({
	          type: [exts.getByte(), exts.getByte()],
	          data: readVector(exts, 2)
	        });
	      }

	      // TODO: make extension support modular
	      if(!client) {
	        for(var i = 0; i < msg.extensions.length; ++i) {
	          var ext = msg.extensions[i];

	          // support SNI extension
	          if(ext.type[0] === 0x00 && ext.type[1] === 0x00) {
	            // get server name list
	            var snl = readVector(ext.data, 2);
	            while(snl.length() > 0) {
	              // read server name type
	              var snType = snl.getByte();

	              // only HostName type (0x00) is known, break out if
	              // another type is detected
	              if(snType !== 0x00) {
	                break;
	              }

	              // add host name to server name list
	              c.session.extensions.server_name.serverNameList.push(
	                readVector(snl, 2).getBytes());
	            }
	          }
	        }
	      }
	    }

	    // version already set, do not allow version change
	    if(c.session.version) {
	      if(msg.version.major !== c.session.version.major ||
	        msg.version.minor !== c.session.version.minor) {
	        return c.error(c, {
	          message: 'TLS version change is disallowed during renegotiation.',
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.protocol_version
	          }
	        });
	      }
	    }

	    // get the chosen (ServerHello) cipher suite
	    if(client) {
	      // FIXME: should be checking configured acceptable cipher suites
	      c.session.cipherSuite = tls.getCipherSuite(msg.cipher_suite);
	    } else {
	      // get a supported preferred (ClientHello) cipher suite
	      // choose the first supported cipher suite
	      var tmp = forge.util.createBuffer(msg.cipher_suites.bytes());
	      while(tmp.length() > 0) {
	        // FIXME: should be checking configured acceptable suites
	        // cipher suites take up 2 bytes
	        c.session.cipherSuite = tls.getCipherSuite(tmp.getBytes(2));
	        if(c.session.cipherSuite !== null) {
	          break;
	        }
	      }
	    }

	    // cipher suite not supported
	    if(c.session.cipherSuite === null) {
	      return c.error(c, {
	        message: 'No cipher suites in common.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.handshake_failure
	        },
	        cipherSuite: forge.util.bytesToHex(msg.cipher_suite)
	      });
	    }

	    // TODO: handle compression methods
	    if(client) {
	      c.session.compressionMethod = msg.compression_method;
	    } else {
	      // no compression
	      c.session.compressionMethod = tls.CompressionMethod.none;
	    }
	  }

	  return msg;
	};

	/**
	 * Creates security parameters for the given connection based on the given
	 * hello message.
	 *
	 * @param c the TLS connection.
	 * @param msg the hello message.
	 */
	tls.createSecurityParameters = function(c, msg) {
	  /* Note: security params are from TLS 1.2, some values like prf_algorithm
	  are ignored for TLS 1.0/1.1 and the builtin as specified in the spec is
	  used. */

	  // TODO: handle other options from server when more supported

	  // get client and server randoms
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var msgRandom = msg.random.bytes();
	  var cRandom = client ? c.session.sp.client_random : msgRandom;
	  var sRandom = client ? msgRandom : tls.createRandom().getBytes();

	  // create new security parameters
	  c.session.sp = {
	    entity: c.entity,
	    prf_algorithm: tls.PRFAlgorithm.tls_prf_sha256,
	    bulk_cipher_algorithm: null,
	    cipher_type: null,
	    enc_key_length: null,
	    block_length: null,
	    fixed_iv_length: null,
	    record_iv_length: null,
	    mac_algorithm: null,
	    mac_length: null,
	    mac_key_length: null,
	    compression_algorithm: c.session.compressionMethod,
	    pre_master_secret: null,
	    master_secret: null,
	    client_random: cRandom,
	    server_random: sRandom
	  };
	};

	/**
	 * Called when a client receives a ServerHello record.
	 *
	 * When a ServerHello message will be sent:
	 *   The server will send this message in response to a client hello message
	 *   when it was able to find an acceptable set of algorithms. If it cannot
	 *   find such a match, it will respond with a handshake failure alert.
	 *
	 * uint24 length;
	 * struct {
	 *   ProtocolVersion server_version;
	 *   Random random;
	 *   SessionID session_id;
	 *   CipherSuite cipher_suite;
	 *   CompressionMethod compression_method;
	 *   select(extensions_present) {
	 *     case false:
	 *       struct {};
	 *     case true:
	 *       Extension extensions<0..2^16-1>;
	 *   };
	 * } ServerHello;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerHello = function(c, record, length) {
	  var msg = tls.parseHelloMessage(c, record, length);
	  if(c.fail) {
	    return;
	  }

	  // ensure server version is compatible
	  if(msg.version.minor <= c.version.minor) {
	    c.version.minor = msg.version.minor;
	  } else {
	    return c.error(c, {
	      message: 'Incompatible TLS version.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.protocol_version
	      }
	    });
	  }

	  // indicate session version has been set
	  c.session.version = c.version;

	  // get the session ID from the message
	  var sessionId = msg.session_id.bytes();

	  // if the session ID is not blank and matches the cached one, resume
	  // the session
	  if(sessionId.length > 0 && sessionId === c.session.id) {
	    // resuming session, expect a ChangeCipherSpec next
	    c.expect = SCC;
	    c.session.resuming = true;

	    // get new server random
	    c.session.sp.server_random = msg.random.bytes();
	  } else {
	    // not resuming, expect a server Certificate message next
	    c.expect = SCE;
	    c.session.resuming = false;

	    // create new security parameters
	    tls.createSecurityParameters(c, msg);
	  }

	  // set new session ID
	  c.session.id = sessionId;

	  // continue
	  c.process();
	};

	/**
	 * Called when a server receives a ClientHello record.
	 *
	 * When a ClientHello message will be sent:
	 *   When a client first connects to a server it is required to send the
	 *   client hello as its first message. The client can also send a client
	 *   hello in response to a hello request or on its own initiative in order
	 *   to renegotiate the security parameters in an existing connection.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleClientHello = function(c, record, length) {
	  var msg = tls.parseHelloMessage(c, record, length);
	  if(c.fail) {
	    return;
	  }

	  // get the session ID from the message
	  var sessionId = msg.session_id.bytes();

	  // see if the given session ID is in the cache
	  var session = null;
	  if(c.sessionCache) {
	    session = c.sessionCache.getSession(sessionId);
	    if(session === null) {
	      // session ID not found
	      sessionId = '';
	    } else if(session.version.major !== msg.version.major ||
	      session.version.minor > msg.version.minor) {
	      // if session version is incompatible with client version, do not resume
	      session = null;
	      sessionId = '';
	    }
	  }

	  // no session found to resume, generate a new session ID
	  if(sessionId.length === 0) {
	    sessionId = forge.random.getBytes(32);
	  }

	  // update session
	  c.session.id = sessionId;
	  c.session.clientHelloVersion = msg.version;
	  c.session.sp = {};
	  if(session) {
	    // use version and security parameters from resumed session
	    c.version = c.session.version = session.version;
	    c.session.sp = session.sp;
	  } else {
	    // use highest compatible minor version
	    var version;
	    for(var i = 1; i < tls.SupportedVersions.length; ++i) {
	      version = tls.SupportedVersions[i];
	      if(version.minor <= msg.version.minor) {
	        break;
	      }
	    }
	    c.version = {major: version.major, minor: version.minor};
	    c.session.version = c.version;
	  }

	  // if a session is set, resume it
	  if(session !== null) {
	    // resuming session, expect a ChangeCipherSpec next
	    c.expect = CCC;
	    c.session.resuming = true;

	    // get new client random
	    c.session.sp.client_random = msg.random.bytes();
	  } else {
	    // not resuming, expect a Certificate or ClientKeyExchange
	    c.expect = (c.verifyClient !== false) ? CCE : CKE;
	    c.session.resuming = false;

	    // create new security parameters
	    tls.createSecurityParameters(c, msg);
	  }

	  // connection now open
	  c.open = true;

	  // queue server hello
	  tls.queue(c, tls.createRecord(c, {
	    type: tls.ContentType.handshake,
	    data: tls.createServerHello(c)
	  }));

	  if(c.session.resuming) {
	    // queue change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // create pending state
	    c.state.pending = tls.createConnectionState(c);

	    // change current write state to pending write state
	    c.state.current.write = c.state.pending.write;

	    // queue finished
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));
	  } else {
	    // queue server certificate
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createCertificate(c)
	    }));

	    if(!c.fail) {
	      // queue server key exchange
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createServerKeyExchange(c)
	      }));

	      // request client certificate if set
	      if(c.verifyClient !== false) {
	        // queue certificate request
	        tls.queue(c, tls.createRecord(c, {
	          type: tls.ContentType.handshake,
	          data: tls.createCertificateRequest(c)
	        }));
	      }

	      // queue server hello done
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createServerHelloDone(c)
	      }));
	    }
	  }

	  // send records
	  tls.flush(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a Certificate record.
	 *
	 * When this message will be sent:
	 *   The server must send a certificate whenever the agreed-upon key exchange
	 *   method is not an anonymous one. This message will always immediately
	 *   follow the server hello message.
	 *
	 * Meaning of this message:
	 *   The certificate type must be appropriate for the selected cipher suite's
	 *   key exchange algorithm, and is generally an X.509v3 certificate. It must
	 *   contain a key which matches the key exchange method, as follows. Unless
	 *   otherwise specified, the signing algorithm for the certificate must be
	 *   the same as the algorithm for the certificate key. Unless otherwise
	 *   specified, the public key may be of any length.
	 *
	 * opaque ASN.1Cert<1..2^24-1>;
	 * struct {
	 *   ASN.1Cert certificate_list<1..2^24-1>;
	 * } Certificate;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificate = function(c, record, length) {
	  // minimum of 3 bytes in message
	  if(length < 3) {
	    return c.error(c, {
	      message: 'Invalid Certificate message. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  var b = record.fragment;
	  var msg = {
	    certificate_list: readVector(b, 3)
	  };

	  /* The sender's certificate will be first in the list (chain), each
	    subsequent one that follows will certify the previous one, but root
	    certificates (self-signed) that specify the certificate authority may
	    be omitted under the assumption that clients must already possess it. */
	  var cert, asn1;
	  var certs = [];
	  try {
	    while(msg.certificate_list.length() > 0) {
	      // each entry in msg.certificate_list is a vector with 3 len bytes
	      cert = readVector(msg.certificate_list, 3);
	      asn1 = forge.asn1.fromDer(cert);
	      cert = forge.pki.certificateFromAsn1(asn1, true);
	      certs.push(cert);
	    }
	  } catch(ex) {
	    return c.error(c, {
	      message: 'Could not parse certificate list.',
	      cause: ex,
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.bad_certificate
	      }
	    });
	  }

	  // ensure at least 1 certificate was provided if in client-mode
	  // or if verifyClient was set to true to require a certificate
	  // (as opposed to 'optional')
	  var client = (c.entity === tls.ConnectionEnd.client);
	  if((client || c.verifyClient === true) && certs.length === 0) {
	    // error, no certificate
	    c.error(c, {
	      message: client ?
	        'No server certificate provided.' :
	        'No client certificate provided.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  } else if(certs.length === 0) {
	    // no certs to verify
	    // expect a ServerKeyExchange or ClientKeyExchange message next
	    c.expect = client ? SKE : CKE;
	  } else {
	    // save certificate in session
	    if(client) {
	      c.session.serverCertificate = certs[0];
	    } else {
	      c.session.clientCertificate = certs[0];
	    }

	    if(tls.verifyCertificateChain(c, certs)) {
	      // expect a ServerKeyExchange or ClientKeyExchange message next
	      c.expect = client ? SKE : CKE;
	    }
	  }

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ServerKeyExchange record.
	 *
	 * When this message will be sent:
	 *   This message will be sent immediately after the server certificate
	 *   message (or the server hello message, if this is an anonymous
	 *   negotiation).
	 *
	 *   The server key exchange message is sent by the server only when the
	 *   server certificate message (if sent) does not contain enough data to
	 *   allow the client to exchange a premaster secret.
	 *
	 * Meaning of this message:
	 *   This message conveys cryptographic information to allow the client to
	 *   communicate the premaster secret: either an RSA public key to encrypt
	 *   the premaster secret with, or a Diffie-Hellman public key with which the
	 *   client can complete a key exchange (with the result being the premaster
	 *   secret.)
	 *
	 * enum {
	 *   dhe_dss, dhe_rsa, dh_anon, rsa, dh_dss, dh_rsa
	 * } KeyExchangeAlgorithm;
	 *
	 * struct {
	 *   opaque dh_p<1..2^16-1>;
	 *   opaque dh_g<1..2^16-1>;
	 *   opaque dh_Ys<1..2^16-1>;
	 * } ServerDHParams;
	 *
	 * struct {
	 *   select(KeyExchangeAlgorithm) {
	 *     case dh_anon:
	 *       ServerDHParams params;
	 *     case dhe_dss:
	 *     case dhe_rsa:
	 *       ServerDHParams params;
	 *       digitally-signed struct {
	 *         opaque client_random[32];
	 *         opaque server_random[32];
	 *         ServerDHParams params;
	 *       } signed_params;
	 *     case rsa:
	 *     case dh_dss:
	 *     case dh_rsa:
	 *       struct {};
	 *   };
	 * } ServerKeyExchange;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerKeyExchange = function(c, record, length) {
	  // this implementation only supports RSA, no Diffie-Hellman support
	  // so any length > 0 is invalid
	  if(length > 0) {
	    return c.error(c, {
	      message: 'Invalid key parameters. Only RSA is supported.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unsupported_certificate
	      }
	    });
	  }

	  // expect an optional CertificateRequest message next
	  c.expect = SCR;

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ClientKeyExchange record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleClientKeyExchange = function(c, record, length) {
	  // this implementation only supports RSA, no Diffie-Hellman support
	  // so any length < 48 is invalid
	  if(length < 48) {
	    return c.error(c, {
	      message: 'Invalid key parameters. Only RSA is supported.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.unsupported_certificate
	      }
	    });
	  }

	  var b = record.fragment;
	  var msg = {
	    enc_pre_master_secret: readVector(b, 2).getBytes()
	  };

	  // do rsa decryption
	  var privateKey = null;
	  if(c.getPrivateKey) {
	    try {
	      privateKey = c.getPrivateKey(c, c.session.serverCertificate);
	      privateKey = forge.pki.privateKeyFromPem(privateKey);
	    } catch(ex) {
	      c.error(c, {
	        message: 'Could not get private key.',
	        cause: ex,
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    }
	  }

	  if(privateKey === null) {
	    return c.error(c, {
	      message: 'No private key set.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.internal_error
	      }
	    });
	  }

	  try {
	    // decrypt 48-byte pre-master secret
	    var sp = c.session.sp;
	    sp.pre_master_secret = privateKey.decrypt(msg.enc_pre_master_secret);

	    // ensure client hello version matches first 2 bytes
	    var version = c.session.clientHelloVersion;
	    if(version.major !== sp.pre_master_secret.charCodeAt(0) ||
	      version.minor !== sp.pre_master_secret.charCodeAt(1)) {
	      // error, do not send alert (see BLEI attack below)
	      throw new Error('TLS version rollback attack detected.');
	    }
	  } catch(ex) {
	    /* Note: Daniel Bleichenbacher [BLEI] can be used to attack a
	      TLS server which is using PKCS#1 encoded RSA, so instead of
	      failing here, we generate 48 random bytes and use that as
	      the pre-master secret. */
	    sp.pre_master_secret = forge.random.getBytes(48);
	  }

	  // expect a CertificateVerify message if a Certificate was received that
	  // does not have fixed Diffie-Hellman params, otherwise expect
	  // ChangeCipherSpec
	  c.expect = CCC;
	  if(c.session.clientCertificate !== null) {
	    // only RSA support, so expect CertificateVerify
	    // TODO: support Diffie-Hellman
	    c.expect = CCV;
	  }

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a CertificateRequest record.
	 *
	 * When this message will be sent:
	 *   A non-anonymous server can optionally request a certificate from the
	 *   client, if appropriate for the selected cipher suite. This message, if
	 *   sent, will immediately follow the Server Key Exchange message (if it is
	 *   sent; otherwise, the Server Certificate message).
	 *
	 * enum {
	 *   rsa_sign(1), dss_sign(2), rsa_fixed_dh(3), dss_fixed_dh(4),
	 *   rsa_ephemeral_dh_RESERVED(5), dss_ephemeral_dh_RESERVED(6),
	 *   fortezza_dms_RESERVED(20), (255)
	 * } ClientCertificateType;
	 *
	 * opaque DistinguishedName<1..2^16-1>;
	 *
	 * struct {
	 *   ClientCertificateType certificate_types<1..2^8-1>;
	 *   SignatureAndHashAlgorithm supported_signature_algorithms<2^16-1>;
	 *   DistinguishedName certificate_authorities<0..2^16-1>;
	 * } CertificateRequest;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificateRequest = function(c, record, length) {
	  // minimum of 3 bytes in message
	  if(length < 3) {
	    return c.error(c, {
	      message: 'Invalid CertificateRequest. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // TODO: TLS 1.2+ has different format including
	  // SignatureAndHashAlgorithm after cert types
	  var b = record.fragment;
	  var msg = {
	    certificate_types: readVector(b, 1),
	    certificate_authorities: readVector(b, 2)
	  };

	  // save certificate request in session
	  c.session.certificateRequest = msg;

	  // expect a ServerHelloDone message next
	  c.expect = SHD;

	  // continue
	  c.process();
	};

	/**
	 * Called when a server receives a CertificateVerify record.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleCertificateVerify = function(c, record, length) {
	  if(length < 2) {
	    return c.error(c, {
	      message: 'Invalid CertificateVerify. Message too short.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // rewind to get full bytes for message so it can be manually
	  // digested below (special case for CertificateVerify messages because
	  // they must be digested *after* handling as opposed to all others)
	  var b = record.fragment;
	  b.read -= 4;
	  var msgBytes = b.bytes();
	  b.read += 4;

	  var msg = {
	    signature: readVector(b, 2).getBytes()
	  };

	  // TODO: add support for DSA

	  // generate data to verify
	  var verify = forge.util.createBuffer();
	  verify.putBuffer(c.session.md5.digest());
	  verify.putBuffer(c.session.sha1.digest());
	  verify = verify.getBytes();

	  try {
	    var cert = c.session.clientCertificate;
	    /*b = forge.pki.rsa.decrypt(
	      msg.signature, cert.publicKey, true, verify.length);
	    if(b !== verify) {*/
	    if(!cert.publicKey.verify(verify, msg.signature, 'NONE')) {
	      throw new Error('CertificateVerify signature does not match.');
	    }

	    // digest message now that it has been handled
	    c.session.md5.update(msgBytes);
	    c.session.sha1.update(msgBytes);
	  } catch(ex) {
	    return c.error(c, {
	      message: 'Bad signature in CertificateVerify.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.handshake_failure
	      }
	    });
	  }

	  // expect ChangeCipherSpec
	  c.expect = CCC;

	  // continue
	  c.process();
	};

	/**
	 * Called when a client receives a ServerHelloDone record.
	 *
	 * When this message will be sent:
	 *   The server hello done message is sent by the server to indicate the end
	 *   of the server hello and associated messages. After sending this message
	 *   the server will wait for a client response.
	 *
	 * Meaning of this message:
	 *   This message means that the server is done sending messages to support
	 *   the key exchange, and the client can proceed with its phase of the key
	 *   exchange.
	 *
	 *   Upon receipt of the server hello done message the client should verify
	 *   that the server provided a valid certificate if required and check that
	 *   the server hello parameters are acceptable.
	 *
	 * struct {} ServerHelloDone;
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleServerHelloDone = function(c, record, length) {
	  // len must be 0 bytes
	  if(length > 0) {
	    return c.error(c, {
	      message: 'Invalid ServerHelloDone message. Invalid length.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.record_overflow
	      }
	    });
	  }

	  if(c.serverCertificate === null) {
	    // no server certificate was provided
	    var error = {
	      message: 'No server certificate provided. Not enough security.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.insufficient_security
	      }
	    };

	    // call application callback
	    var depth = 0;
	    var ret = c.verify(c, error.alert.description, depth, []);
	    if(ret !== true) {
	      // check for custom alert info
	      if(ret || ret === 0) {
	        // set custom message and alert description
	        if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	          if(ret.message) {
	            error.message = ret.message;
	          }
	          if(ret.alert) {
	            error.alert.description = ret.alert;
	          }
	        } else if(typeof ret === 'number') {
	          // set custom alert description
	          error.alert.description = ret;
	        }
	      }

	      // send error
	      return c.error(c, error);
	    }
	  }

	  // create client certificate message if requested
	  if(c.session.certificateRequest !== null) {
	    record = tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createCertificate(c)
	    });
	    tls.queue(c, record);
	  }

	  // create client key exchange message
	  record = tls.createRecord(c, {
	     type: tls.ContentType.handshake,
	     data: tls.createClientKeyExchange(c)
	  });
	  tls.queue(c, record);

	  // expect no messages until the following callback has been called
	  c.expect = SER;

	  // create callback to handle client signature (for client-certs)
	  var callback = function(c, signature) {
	    if(c.session.certificateRequest !== null &&
	      c.session.clientCertificate !== null) {
	      // create certificate verify message
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createCertificateVerify(c, signature)
	      }));
	    }

	    // create change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // create pending state
	    c.state.pending = tls.createConnectionState(c);

	    // change current write state to pending write state
	    c.state.current.write = c.state.pending.write;

	    // create finished message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));

	    // expect a server ChangeCipherSpec message next
	    c.expect = SCC;

	    // send records
	    tls.flush(c);

	    // continue
	    c.process();
	  };

	  // if there is no certificate request or no client certificate, do
	  // callback immediately
	  if(c.session.certificateRequest === null ||
	    c.session.clientCertificate === null) {
	    return callback(c, null);
	  }

	  // otherwise get the client signature
	  tls.getClientSignature(c, callback);
	};

	/**
	 * Called when a ChangeCipherSpec record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleChangeCipherSpec = function(c, record) {
	  if(record.fragment.getByte() !== 0x01) {
	    return c.error(c, {
	      message: 'Invalid ChangeCipherSpec message received.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.illegal_parameter
	      }
	    });
	  }

	  // create pending state if:
	  // 1. Resuming session in client mode OR
	  // 2. NOT resuming session in server mode
	  var client = (c.entity === tls.ConnectionEnd.client);
	  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
	    c.state.pending = tls.createConnectionState(c);
	  }

	  // change current read state to pending read state
	  c.state.current.read = c.state.pending.read;

	  // clear pending state if:
	  // 1. NOT resuming session in client mode OR
	  // 2. resuming a session in server mode
	  if((!c.session.resuming && client) || (c.session.resuming && !client)) {
	    c.state.pending = null;
	  }

	  // expect a Finished record next
	  c.expect = client ? SFI : CFI;

	  // continue
	  c.process();
	};

	/**
	 * Called when a Finished record is received.
	 *
	 * When this message will be sent:
	 *   A finished message is always sent immediately after a change
	 *   cipher spec message to verify that the key exchange and
	 *   authentication processes were successful. It is essential that a
	 *   change cipher spec message be received between the other
	 *   handshake messages and the Finished message.
	 *
	 * Meaning of this message:
	 *   The finished message is the first protected with the just-
	 *   negotiated algorithms, keys, and secrets. Recipients of finished
	 *   messages must verify that the contents are correct.  Once a side
	 *   has sent its Finished message and received and validated the
	 *   Finished message from its peer, it may begin to send and receive
	 *   application data over the connection.
	 *
	 * struct {
	 *   opaque verify_data[verify_data_length];
	 * } Finished;
	 *
	 * verify_data
	 *   PRF(master_secret, finished_label, Hash(handshake_messages))
	 *     [0..verify_data_length-1];
	 *
	 * finished_label
	 *   For Finished messages sent by the client, the string
	 *   "client finished". For Finished messages sent by the server, the
	 *   string "server finished".
	 *
	 * verify_data_length depends on the cipher suite. If it is not specified
	 * by the cipher suite, then it is 12. Versions of TLS < 1.2 always used
	 * 12 bytes.
	 *
	 * @param c the connection.
	 * @param record the record.
	 * @param length the length of the handshake message.
	 */
	tls.handleFinished = function(c, record, length) {
	  // rewind to get full bytes for message so it can be manually
	  // digested below (special case for Finished messages because they
	  // must be digested *after* handling as opposed to all others)
	  var b = record.fragment;
	  b.read -= 4;
	  var msgBytes = b.bytes();
	  b.read += 4;

	  // message contains only verify_data
	  var vd = record.fragment.getBytes();

	  // ensure verify data is correct
	  b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());

	  // set label based on entity type
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var label = client ? 'server finished' : 'client finished';

	  // TODO: determine prf function and verify length for TLS 1.2
	  var sp = c.session.sp;
	  var vdl = 12;
	  var prf = prf_TLS1;
	  b = prf(sp.master_secret, label, b.getBytes(), vdl);
	  if(b.getBytes() !== vd) {
	    return c.error(c, {
	      message: 'Invalid verify_data in Finished message.',
	      send: true,
	      alert: {
	        level: tls.Alert.Level.fatal,
	        description: tls.Alert.Description.decrypt_error
	      }
	    });
	  }

	  // digest finished message now that it has been handled
	  c.session.md5.update(msgBytes);
	  c.session.sha1.update(msgBytes);

	  // resuming session as client or NOT resuming session as server
	  if((c.session.resuming && client) || (!c.session.resuming && !client)) {
	    // create change cipher spec message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.change_cipher_spec,
	      data: tls.createChangeCipherSpec()
	    }));

	    // change current write state to pending write state, clear pending
	    c.state.current.write = c.state.pending.write;
	    c.state.pending = null;

	    // create finished message
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.handshake,
	      data: tls.createFinished(c)
	    }));
	  }

	  // expect application data next
	  c.expect = client ? SAD : CAD;

	  // handshake complete
	  c.handshaking = false;
	  ++c.handshakes;

	  // save access to peer certificate
	  c.peerCertificate = client ?
	    c.session.serverCertificate : c.session.clientCertificate;

	  // send records
	  tls.flush(c);

	  // now connected
	  c.isConnected = true;
	  c.connected(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when an Alert record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleAlert = function(c, record) {
	  // read alert
	  var b = record.fragment;
	  var alert = {
	    level: b.getByte(),
	    description: b.getByte()
	  };

	  // TODO: consider using a table?
	  // get appropriate message
	  var msg;
	  switch(alert.description) {
	  case tls.Alert.Description.close_notify:
	    msg = 'Connection closed.';
	    break;
	  case tls.Alert.Description.unexpected_message:
	    msg = 'Unexpected message.';
	    break;
	  case tls.Alert.Description.bad_record_mac:
	    msg = 'Bad record MAC.';
	    break;
	  case tls.Alert.Description.decryption_failed:
	    msg = 'Decryption failed.';
	    break;
	  case tls.Alert.Description.record_overflow:
	    msg = 'Record overflow.';
	    break;
	  case tls.Alert.Description.decompression_failure:
	    msg = 'Decompression failed.';
	    break;
	  case tls.Alert.Description.handshake_failure:
	    msg = 'Handshake failure.';
	    break;
	  case tls.Alert.Description.bad_certificate:
	    msg = 'Bad certificate.';
	    break;
	  case tls.Alert.Description.unsupported_certificate:
	    msg = 'Unsupported certificate.';
	    break;
	  case tls.Alert.Description.certificate_revoked:
	    msg = 'Certificate revoked.';
	    break;
	  case tls.Alert.Description.certificate_expired:
	    msg = 'Certificate expired.';
	    break;
	  case tls.Alert.Description.certificate_unknown:
	    msg = 'Certificate unknown.';
	    break;
	  case tls.Alert.Description.illegal_parameter:
	    msg = 'Illegal parameter.';
	    break;
	  case tls.Alert.Description.unknown_ca:
	    msg = 'Unknown certificate authority.';
	    break;
	  case tls.Alert.Description.access_denied:
	    msg = 'Access denied.';
	    break;
	  case tls.Alert.Description.decode_error:
	    msg = 'Decode error.';
	    break;
	  case tls.Alert.Description.decrypt_error:
	    msg = 'Decrypt error.';
	    break;
	  case tls.Alert.Description.export_restriction:
	    msg = 'Export restriction.';
	    break;
	  case tls.Alert.Description.protocol_version:
	    msg = 'Unsupported protocol version.';
	    break;
	  case tls.Alert.Description.insufficient_security:
	    msg = 'Insufficient security.';
	    break;
	  case tls.Alert.Description.internal_error:
	    msg = 'Internal error.';
	    break;
	  case tls.Alert.Description.user_canceled:
	    msg = 'User canceled.';
	    break;
	  case tls.Alert.Description.no_renegotiation:
	    msg = 'Renegotiation not supported.';
	    break;
	  default:
	    msg = 'Unknown error.';
	    break;
	  }

	  // close connection on close_notify, not an error
	  if(alert.description === tls.Alert.Description.close_notify) {
	    return c.close();
	  }

	  // call error handler
	  c.error(c, {
	    message: msg,
	    send: false,
	    // origin is the opposite end
	    origin: (c.entity === tls.ConnectionEnd.client) ? 'server' : 'client',
	    alert: alert
	  });

	  // continue
	  c.process();
	};

	/**
	 * Called when a Handshake record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleHandshake = function(c, record) {
	  // get the handshake type and message length
	  var b = record.fragment;
	  var type = b.getByte();
	  var length = b.getInt24();

	  // see if the record fragment doesn't yet contain the full message
	  if(length > b.length()) {
	    // cache the record, clear its fragment, and reset the buffer read
	    // pointer before the type and length were read
	    c.fragmented = record;
	    record.fragment = forge.util.createBuffer();
	    b.read -= 4;

	    // continue
	    return c.process();
	  }

	  // full message now available, clear cache, reset read pointer to
	  // before type and length
	  c.fragmented = null;
	  b.read -= 4;

	  // save the handshake bytes for digestion after handler is found
	  // (include type and length of handshake msg)
	  var bytes = b.bytes(length + 4);

	  // restore read pointer
	  b.read += 4;

	  // handle expected message
	  if(type in hsTable[c.entity][c.expect]) {
	    // initialize server session
	    if(c.entity === tls.ConnectionEnd.server && !c.open && !c.fail) {
	      c.handshaking = true;
	      c.session = {
	        version: null,
	        extensions: {
	          server_name: {
	            serverNameList: []
	          }
	        },
	        cipherSuite: null,
	        compressionMethod: null,
	        serverCertificate: null,
	        clientCertificate: null,
	        md5: forge.md.md5.create(),
	        sha1: forge.md.sha1.create()
	      };
	    }

	    /* Update handshake messages digest. Finished and CertificateVerify
	      messages are not digested here. They can't be digested as part of
	      the verify_data that they contain. These messages are manually
	      digested in their handlers. HelloRequest messages are simply never
	      included in the handshake message digest according to spec. */
	    if(type !== tls.HandshakeType.hello_request &&
	      type !== tls.HandshakeType.certificate_verify &&
	      type !== tls.HandshakeType.finished) {
	      c.session.md5.update(bytes);
	      c.session.sha1.update(bytes);
	    }

	    // handle specific handshake type record
	    hsTable[c.entity][c.expect][type](c, record, length);
	  } else {
	    // unexpected record
	    tls.handleUnexpected(c, record);
	  }
	};

	/**
	 * Called when an ApplicationData record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleApplicationData = function(c, record) {
	  // buffer data, notify that its ready
	  c.data.putBuffer(record.fragment);
	  c.dataReady(c);

	  // continue
	  c.process();
	};

	/**
	 * Called when a Heartbeat record is received.
	 *
	 * @param c the connection.
	 * @param record the record.
	 */
	tls.handleHeartbeat = function(c, record) {
	  // get the heartbeat type and payload
	  var b = record.fragment;
	  var type = b.getByte();
	  var length = b.getInt16();
	  var payload = b.getBytes(length);

	  if(type === tls.HeartbeatMessageType.heartbeat_request) {
	    // discard request during handshake or if length is too large
	    if(c.handshaking || length > payload.length) {
	      // continue
	      return c.process();
	    }
	    // retransmit payload
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.heartbeat,
	      data: tls.createHeartbeat(
	        tls.HeartbeatMessageType.heartbeat_response, payload)
	    }));
	    tls.flush(c);
	  } else if(type === tls.HeartbeatMessageType.heartbeat_response) {
	    // check payload against expected payload, discard heartbeat if no match
	    if(payload !== c.expectedHeartbeatPayload) {
	      // continue
	      return c.process();
	    }

	    // notify that a valid heartbeat was received
	    if(c.heartbeatReceived) {
	      c.heartbeatReceived(c, forge.util.createBuffer(payload));
	    }
	  }

	  // continue
	  c.process();
	};

	/**
	 * The transistional state tables for receiving TLS records. It maps the
	 * current TLS engine state and a received record to a function to handle the
	 * record and update the state.
	 *
	 * For instance, if the current state is SHE, then the TLS engine is expecting
	 * a ServerHello record. Once a record is received, the handler function is
	 * looked up using the state SHE and the record's content type.
	 *
	 * The resulting function will either be an error handler or a record handler.
	 * The function will take whatever action is appropriate and update the state
	 * for the next record.
	 *
	 * The states are all based on possible server record types. Note that the
	 * client will never specifically expect to receive a HelloRequest or an alert
	 * from the server so there is no state that reflects this. These messages may
	 * occur at any time.
	 *
	 * There are two tables for mapping states because there is a second tier of
	 * types for handshake messages. Once a record with a content type of handshake
	 * is received, the handshake record handler will look up the handshake type in
	 * the secondary map to get its appropriate handler.
	 *
	 * Valid message orders are as follows:
	 *
	 * =======================FULL HANDSHAKE======================
	 * Client                                               Server
	 *
	 * ClientHello                  -------->
	 *                                                 ServerHello
	 *                                                Certificate*
	 *                                          ServerKeyExchange*
	 *                                         CertificateRequest*
	 *                              <--------      ServerHelloDone
	 * Certificate*
	 * ClientKeyExchange
	 * CertificateVerify*
	 * [ChangeCipherSpec]
	 * Finished                     -------->
	 *                                          [ChangeCipherSpec]
	 *                              <--------             Finished
	 * Application Data             <------->     Application Data
	 *
	 * =====================SESSION RESUMPTION=====================
	 * Client                                                Server
	 *
	 * ClientHello                   -------->
	 *                                                  ServerHello
	 *                                           [ChangeCipherSpec]
	 *                               <--------             Finished
	 * [ChangeCipherSpec]
	 * Finished                      -------->
	 * Application Data              <------->     Application Data
	 */
	// client expect states (indicate which records are expected to be received)
	var SHE = 0; // rcv server hello
	var SCE = 1; // rcv server certificate
	var SKE = 2; // rcv server key exchange
	var SCR = 3; // rcv certificate request
	var SHD = 4; // rcv server hello done
	var SCC = 5; // rcv change cipher spec
	var SFI = 6; // rcv finished
	var SAD = 7; // rcv application data
	var SER = 8; // not expecting any messages at this point

	// server expect states
	var CHE = 0; // rcv client hello
	var CCE = 1; // rcv client certificate
	var CKE = 2; // rcv client key exchange
	var CCV = 3; // rcv certificate verify
	var CCC = 4; // rcv change cipher spec
	var CFI = 5; // rcv finished
	var CAD = 6; // rcv application data
	var CER = 7; // not expecting any messages at this point

	// map client current expect state and content type to function
	var __ = tls.handleUnexpected;
	var R0 = tls.handleChangeCipherSpec;
	var R1 = tls.handleAlert;
	var R2 = tls.handleHandshake;
	var R3 = tls.handleApplicationData;
	var R4 = tls.handleHeartbeat;
	var ctTable = [];
	ctTable[tls.ConnectionEnd.client] = [
	//      CC,AL,HS,AD,HB
	/*SHE*/[__,R1,R2,__,R4],
	/*SCE*/[__,R1,R2,__,R4],
	/*SKE*/[__,R1,R2,__,R4],
	/*SCR*/[__,R1,R2,__,R4],
	/*SHD*/[__,R1,R2,__,R4],
	/*SCC*/[R0,R1,__,__,R4],
	/*SFI*/[__,R1,R2,__,R4],
	/*SAD*/[__,R1,R2,R3,R4],
	/*SER*/[__,R1,R2,__,R4]
	];

	// map server current expect state and content type to function
	ctTable[tls.ConnectionEnd.server] = [
	//      CC,AL,HS,AD
	/*CHE*/[__,R1,R2,__,R4],
	/*CCE*/[__,R1,R2,__,R4],
	/*CKE*/[__,R1,R2,__,R4],
	/*CCV*/[__,R1,R2,__,R4],
	/*CCC*/[R0,R1,__,__,R4],
	/*CFI*/[__,R1,R2,__,R4],
	/*CAD*/[__,R1,R2,R3,R4],
	/*CER*/[__,R1,R2,__,R4]
	];

	// map client current expect state and handshake type to function
	var H0 = tls.handleHelloRequest;
	var H1 = tls.handleServerHello;
	var H2 = tls.handleCertificate;
	var H3 = tls.handleServerKeyExchange;
	var H4 = tls.handleCertificateRequest;
	var H5 = tls.handleServerHelloDone;
	var H6 = tls.handleFinished;
	var hsTable = [];
	hsTable[tls.ConnectionEnd.client] = [
	//      HR,01,SH,03,04,05,06,07,08,09,10,SC,SK,CR,HD,15,CK,17,18,19,FI
	/*SHE*/[__,__,H1,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SCE*/[H0,__,__,__,__,__,__,__,__,__,__,H2,H3,H4,H5,__,__,__,__,__,__],
	/*SKE*/[H0,__,__,__,__,__,__,__,__,__,__,__,H3,H4,H5,__,__,__,__,__,__],
	/*SCR*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,H4,H5,__,__,__,__,__,__],
	/*SHD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,H5,__,__,__,__,__,__],
	/*SCC*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SFI*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
	/*SAD*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*SER*/[H0,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
	];

	// map server current expect state and handshake type to function
	// Note: CAD[CH] does not map to FB because renegotation is prohibited
	var H7 = tls.handleClientHello;
	var H8 = tls.handleClientKeyExchange;
	var H9 = tls.handleCertificateVerify;
	hsTable[tls.ConnectionEnd.server] = [
	//      01,CH,02,03,04,05,06,07,08,09,10,CC,12,13,14,CV,CK,17,18,19,FI
	/*CHE*/[__,H7,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CCE*/[__,__,__,__,__,__,__,__,__,__,__,H2,__,__,__,__,__,__,__,__,__],
	/*CKE*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H8,__,__,__,__],
	/*CCV*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H9,__,__,__,__,__],
	/*CCC*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CFI*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,H6],
	/*CAD*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__],
	/*CER*/[__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__]
	];

	/**
	 * Generates the master_secret and keys using the given security parameters.
	 *
	 * The security parameters for a TLS connection state are defined as such:
	 *
	 * struct {
	 *   ConnectionEnd          entity;
	 *   PRFAlgorithm           prf_algorithm;
	 *   BulkCipherAlgorithm    bulk_cipher_algorithm;
	 *   CipherType             cipher_type;
	 *   uint8                  enc_key_length;
	 *   uint8                  block_length;
	 *   uint8                  fixed_iv_length;
	 *   uint8                  record_iv_length;
	 *   MACAlgorithm           mac_algorithm;
	 *   uint8                  mac_length;
	 *   uint8                  mac_key_length;
	 *   CompressionMethod      compression_algorithm;
	 *   opaque                 master_secret[48];
	 *   opaque                 client_random[32];
	 *   opaque                 server_random[32];
	 * } SecurityParameters;
	 *
	 * Note that this definition is from TLS 1.2. In TLS 1.0 some of these
	 * parameters are ignored because, for instance, the PRFAlgorithm is a
	 * builtin-fixed algorithm combining iterations of MD5 and SHA-1 in TLS 1.0.
	 *
	 * The Record Protocol requires an algorithm to generate keys required by the
	 * current connection state.
	 *
	 * The master secret is expanded into a sequence of secure bytes, which is then
	 * split to a client write MAC key, a server write MAC key, a client write
	 * encryption key, and a server write encryption key. In TLS 1.0 a client write
	 * IV and server write IV are also generated. Each of these is generated from
	 * the byte sequence in that order. Unused values are empty. In TLS 1.2, some
	 * AEAD ciphers may additionally require a client write IV and a server write
	 * IV (see Section 6.2.3.3).
	 *
	 * When keys, MAC keys, and IVs are generated, the master secret is used as an
	 * entropy source.
	 *
	 * To generate the key material, compute:
	 *
	 * master_secret = PRF(pre_master_secret, "master secret",
	 *                     ClientHello.random + ServerHello.random)
	 *
	 * key_block = PRF(SecurityParameters.master_secret,
	 *                 "key expansion",
	 *                 SecurityParameters.server_random +
	 *                 SecurityParameters.client_random);
	 *
	 * until enough output has been generated. Then, the key_block is
	 * partitioned as follows:
	 *
	 * client_write_MAC_key[SecurityParameters.mac_key_length]
	 * server_write_MAC_key[SecurityParameters.mac_key_length]
	 * client_write_key[SecurityParameters.enc_key_length]
	 * server_write_key[SecurityParameters.enc_key_length]
	 * client_write_IV[SecurityParameters.fixed_iv_length]
	 * server_write_IV[SecurityParameters.fixed_iv_length]
	 *
	 * In TLS 1.2, the client_write_IV and server_write_IV are only generated for
	 * implicit nonce techniques as described in Section 3.2.1 of [AEAD]. This
	 * implementation uses TLS 1.0 so IVs are generated.
	 *
	 * Implementation note: The currently defined cipher suite which requires the
	 * most material is AES_256_CBC_SHA256. It requires 2 x 32 byte keys and 2 x 32
	 * byte MAC keys, for a total 128 bytes of key material. In TLS 1.0 it also
	 * requires 2 x 16 byte IVs, so it actually takes 160 bytes of key material.
	 *
	 * @param c the connection.
	 * @param sp the security parameters to use.
	 *
	 * @return the security keys.
	 */
	tls.generateKeys = function(c, sp) {
	  // TLS_RSA_WITH_AES_128_CBC_SHA (required to be compliant with TLS 1.2) &
	  // TLS_RSA_WITH_AES_256_CBC_SHA are the only cipher suites implemented
	  // at present

	  // TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA is required to be compliant with
	  // TLS 1.0 but we don't care right now because AES is better and we have
	  // an implementation for it

	  // TODO: TLS 1.2 implementation
	  /*
	  // determine the PRF
	  var prf;
	  switch(sp.prf_algorithm) {
	  case tls.PRFAlgorithm.tls_prf_sha256:
	    prf = prf_sha256;
	    break;
	  default:
	    // should never happen
	    throw new Error('Invalid PRF');
	  }
	  */

	  // TLS 1.0/1.1 implementation
	  var prf = prf_TLS1;

	  // concatenate server and client random
	  var random = sp.client_random + sp.server_random;

	  // only create master secret if session is new
	  if(!c.session.resuming) {
	    // create master secret, clean up pre-master secret
	    sp.master_secret = prf(
	      sp.pre_master_secret, 'master secret', random, 48).bytes();
	    sp.pre_master_secret = null;
	  }

	  // generate the amount of key material needed
	  random = sp.server_random + sp.client_random;
	  var length = 2 * sp.mac_key_length + 2 * sp.enc_key_length;

	  // include IV for TLS/1.0
	  var tls10 = (c.version.major === tls.Versions.TLS_1_0.major &&
	    c.version.minor === tls.Versions.TLS_1_0.minor);
	  if(tls10) {
	    length += 2 * sp.fixed_iv_length;
	  }
	  var km = prf(sp.master_secret, 'key expansion', random, length);

	  // split the key material into the MAC and encryption keys
	  var rval = {
	    client_write_MAC_key: km.getBytes(sp.mac_key_length),
	    server_write_MAC_key: km.getBytes(sp.mac_key_length),
	    client_write_key: km.getBytes(sp.enc_key_length),
	    server_write_key: km.getBytes(sp.enc_key_length)
	  };

	  // include TLS 1.0 IVs
	  if(tls10) {
	    rval.client_write_IV = km.getBytes(sp.fixed_iv_length);
	    rval.server_write_IV = km.getBytes(sp.fixed_iv_length);
	  }

	  return rval;
	};

	/**
	 * Creates a new initialized TLS connection state. A connection state has
	 * a read mode and a write mode.
	 *
	 * compression state:
	 *   The current state of the compression algorithm.
	 *
	 * cipher state:
	 *   The current state of the encryption algorithm. This will consist of the
	 *   scheduled key for that connection. For stream ciphers, this will also
	 *   contain whatever state information is necessary to allow the stream to
	 *   continue to encrypt or decrypt data.
	 *
	 * MAC key:
	 *   The MAC key for the connection.
	 *
	 * sequence number:
	 *   Each connection state contains a sequence number, which is maintained
	 *   separately for read and write states. The sequence number MUST be set to
	 *   zero whenever a connection state is made the active state. Sequence
	 *   numbers are of type uint64 and may not exceed 2^64-1. Sequence numbers do
	 *   not wrap. If a TLS implementation would need to wrap a sequence number,
	 *   it must renegotiate instead. A sequence number is incremented after each
	 *   record: specifically, the first record transmitted under a particular
	 *   connection state MUST use sequence number 0.
	 *
	 * @param c the connection.
	 *
	 * @return the new initialized TLS connection state.
	 */
	tls.createConnectionState = function(c) {
	  var client = (c.entity === tls.ConnectionEnd.client);

	  var createMode = function() {
	    var mode = {
	      // two 32-bit numbers, first is most significant
	      sequenceNumber: [0, 0],
	      macKey: null,
	      macLength: 0,
	      macFunction: null,
	      cipherState: null,
	      cipherFunction: function(record) {return true;},
	      compressionState: null,
	      compressFunction: function(record) {return true;},
	      updateSequenceNumber: function() {
	        if(mode.sequenceNumber[1] === 0xFFFFFFFF) {
	          mode.sequenceNumber[1] = 0;
	          ++mode.sequenceNumber[0];
	        } else {
	          ++mode.sequenceNumber[1];
	        }
	      }
	    };
	    return mode;
	  };
	  var state = {
	    read: createMode(),
	    write: createMode()
	  };

	  // update function in read mode will decrypt then decompress a record
	  state.read.update = function(c, record) {
	    if(!state.read.cipherFunction(record, state.read)) {
	      c.error(c, {
	        message: 'Could not decrypt record or bad MAC.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          // doesn't matter if decryption failed or MAC was
	          // invalid, return the same error so as not to reveal
	          // which one occurred
	          description: tls.Alert.Description.bad_record_mac
	        }
	      });
	    } else if(!state.read.compressFunction(c, record, state.read)) {
	      c.error(c, {
	        message: 'Could not decompress record.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.decompression_failure
	        }
	      });
	    }
	    return !c.fail;
	  };

	  // update function in write mode will compress then encrypt a record
	  state.write.update = function(c, record) {
	    if(!state.write.compressFunction(c, record, state.write)) {
	      // error, but do not send alert since it would require
	      // compression as well
	      c.error(c, {
	        message: 'Could not compress record.',
	        send: false,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    } else if(!state.write.cipherFunction(record, state.write)) {
	      // error, but do not send alert since it would require
	      // encryption as well
	      c.error(c, {
	        message: 'Could not encrypt record.',
	        send: false,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    }
	    return !c.fail;
	  };

	  // handle security parameters
	  if(c.session) {
	    var sp = c.session.sp;
	    c.session.cipherSuite.initSecurityParameters(sp);

	    // generate keys
	    sp.keys = tls.generateKeys(c, sp);
	    state.read.macKey = client ?
	      sp.keys.server_write_MAC_key : sp.keys.client_write_MAC_key;
	    state.write.macKey = client ?
	      sp.keys.client_write_MAC_key : sp.keys.server_write_MAC_key;

	    // cipher suite setup
	    c.session.cipherSuite.initConnectionState(state, c, sp);

	    // compression setup
	    switch(sp.compression_algorithm) {
	    case tls.CompressionMethod.none:
	      break;
	    case tls.CompressionMethod.deflate:
	      state.read.compressFunction = inflate;
	      state.write.compressFunction = deflate;
	      break;
	    default:
	      throw new Error('Unsupported compression algorithm.');
	    }
	  }

	  return state;
	};

	/**
	 * Creates a Random structure.
	 *
	 * struct {
	 *   uint32 gmt_unix_time;
	 *   opaque random_bytes[28];
	 * } Random;
	 *
	 * gmt_unix_time:
	 *   The current time and date in standard UNIX 32-bit format (seconds since
	 *   the midnight starting Jan 1, 1970, UTC, ignoring leap seconds) according
	 *   to the sender's internal clock. Clocks are not required to be set
	 *   correctly by the basic TLS protocol; higher-level or application
	 *   protocols may define additional requirements. Note that, for historical
	 *   reasons, the data element is named using GMT, the predecessor of the
	 *   current worldwide time base, UTC.
	 * random_bytes:
	 *   28 bytes generated by a secure random number generator.
	 *
	 * @return the Random structure as a byte array.
	 */
	tls.createRandom = function() {
	  // get UTC milliseconds
	  var d = new Date();
	  var utc = +d + d.getTimezoneOffset() * 60000;
	  var rval = forge.util.createBuffer();
	  rval.putInt32(utc);
	  rval.putBytes(forge.random.getBytes(28));
	  return rval;
	};

	/**
	 * Creates a TLS record with the given type and data.
	 *
	 * @param c the connection.
	 * @param options:
	 *   type: the record type.
	 *   data: the plain text data in a byte buffer.
	 *
	 * @return the created record.
	 */
	tls.createRecord = function(c, options) {
	  if(!options.data) {
	    return null;
	  }
	  var record = {
	    type: options.type,
	    version: {
	      major: c.version.major,
	      minor: c.version.minor
	    },
	    length: options.data.length(),
	    fragment: options.data
	  };
	  return record;
	};

	/**
	 * Creates a TLS alert record.
	 *
	 * @param c the connection.
	 * @param alert:
	 *   level: the TLS alert level.
	 *   description: the TLS alert description.
	 *
	 * @return the created alert record.
	 */
	tls.createAlert = function(c, alert) {
	  var b = forge.util.createBuffer();
	  b.putByte(alert.level);
	  b.putByte(alert.description);
	  return tls.createRecord(c, {
	    type: tls.ContentType.alert,
	    data: b
	  });
	};

	/* The structure of a TLS handshake message.
	 *
	 * struct {
	 *    HandshakeType msg_type;    // handshake type
	 *    uint24 length;             // bytes in message
	 *    select(HandshakeType) {
	 *       case hello_request:       HelloRequest;
	 *       case client_hello:        ClientHello;
	 *       case server_hello:        ServerHello;
	 *       case certificate:         Certificate;
	 *       case server_key_exchange: ServerKeyExchange;
	 *       case certificate_request: CertificateRequest;
	 *       case server_hello_done:   ServerHelloDone;
	 *       case certificate_verify:  CertificateVerify;
	 *       case client_key_exchange: ClientKeyExchange;
	 *       case finished:            Finished;
	 *    } body;
	 * } Handshake;
	 */

	/**
	 * Creates a ClientHello message.
	 *
	 * opaque SessionID<0..32>;
	 * enum { null(0), deflate(1), (255) } CompressionMethod;
	 * uint8 CipherSuite[2];
	 *
	 * struct {
	 *   ProtocolVersion client_version;
	 *   Random random;
	 *   SessionID session_id;
	 *   CipherSuite cipher_suites<2..2^16-2>;
	 *   CompressionMethod compression_methods<1..2^8-1>;
	 *   select(extensions_present) {
	 *     case false:
	 *       struct {};
	 *     case true:
	 *       Extension extensions<0..2^16-1>;
	 *   };
	 * } ClientHello;
	 *
	 * The extension format for extended client hellos and server hellos is:
	 *
	 * struct {
	 *   ExtensionType extension_type;
	 *   opaque extension_data<0..2^16-1>;
	 * } Extension;
	 *
	 * Here:
	 *
	 * - "extension_type" identifies the particular extension type.
	 * - "extension_data" contains information specific to the particular
	 * extension type.
	 *
	 * The extension types defined in this document are:
	 *
	 * enum {
	 *   server_name(0), max_fragment_length(1),
	 *   client_certificate_url(2), trusted_ca_keys(3),
	 *   truncated_hmac(4), status_request(5), (65535)
	 * } ExtensionType;
	 *
	 * @param c the connection.
	 *
	 * @return the ClientHello byte buffer.
	 */
	tls.createClientHello = function(c) {
	  // save hello version
	  c.session.clientHelloVersion = {
	    major: c.version.major,
	    minor: c.version.minor
	  };

	  // create supported cipher suites
	  var cipherSuites = forge.util.createBuffer();
	  for(var i = 0; i < c.cipherSuites.length; ++i) {
	    var cs = c.cipherSuites[i];
	    cipherSuites.putByte(cs.id[0]);
	    cipherSuites.putByte(cs.id[1]);
	  }
	  var cSuites = cipherSuites.length();

	  // create supported compression methods, null always supported, but
	  // also support deflate if connection has inflate and deflate methods
	  var compressionMethods = forge.util.createBuffer();
	  compressionMethods.putByte(tls.CompressionMethod.none);
	  // FIXME: deflate support disabled until issues with raw deflate data
	  // without zlib headers are resolved
	  /*
	  if(c.inflate !== null && c.deflate !== null) {
	    compressionMethods.putByte(tls.CompressionMethod.deflate);
	  }
	  */
	  var cMethods = compressionMethods.length();

	  // create TLS SNI (server name indication) extension if virtual host
	  // has been specified, see RFC 3546
	  var extensions = forge.util.createBuffer();
	  if(c.virtualHost) {
	    // create extension struct
	    var ext = forge.util.createBuffer();
	    ext.putByte(0x00); // type server_name (ExtensionType is 2 bytes)
	    ext.putByte(0x00);

	    /* In order to provide the server name, clients MAY include an
	     * extension of type "server_name" in the (extended) client hello.
	     * The "extension_data" field of this extension SHALL contain
	     * "ServerNameList" where:
	     *
	     * struct {
	     *   NameType name_type;
	     *   select(name_type) {
	     *     case host_name: HostName;
	     *   } name;
	     * } ServerName;
	     *
	     * enum {
	     *   host_name(0), (255)
	     * } NameType;
	     *
	     * opaque HostName<1..2^16-1>;
	     *
	     * struct {
	     *   ServerName server_name_list<1..2^16-1>
	     * } ServerNameList;
	     */
	    var serverName = forge.util.createBuffer();
	    serverName.putByte(0x00); // type host_name
	    writeVector(serverName, 2, forge.util.createBuffer(c.virtualHost));

	    // ServerNameList is in extension_data
	    var snList = forge.util.createBuffer();
	    writeVector(snList, 2, serverName);
	    writeVector(ext, 2, snList);
	    extensions.putBuffer(ext);
	  }
	  var extLength = extensions.length();
	  if(extLength > 0) {
	    // add extension vector length
	    extLength += 2;
	  }

	  // determine length of the handshake message
	  // cipher suites and compression methods size will need to be
	  // updated if more get added to the list
	  var sessionId = c.session.id;
	  var length =
	    sessionId.length + 1 + // session ID vector
	    2 +                    // version (major + minor)
	    4 + 28 +               // random time and random bytes
	    2 + cSuites +          // cipher suites vector
	    1 + cMethods +         // compression methods vector
	    extLength;             // extensions vector

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.client_hello);
	  rval.putInt24(length);                     // handshake length
	  rval.putByte(c.version.major);             // major version
	  rval.putByte(c.version.minor);             // minor version
	  rval.putBytes(c.session.sp.client_random); // random time + bytes
	  writeVector(rval, 1, forge.util.createBuffer(sessionId));
	  writeVector(rval, 2, cipherSuites);
	  writeVector(rval, 1, compressionMethods);
	  if(extLength > 0) {
	    writeVector(rval, 2, extensions);
	  }
	  return rval;
	};

	/**
	 * Creates a ServerHello message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerHello byte buffer.
	 */
	tls.createServerHello = function(c) {
	  // determine length of the handshake message
	  var sessionId = c.session.id;
	  var length =
	    sessionId.length + 1 + // session ID vector
	    2 +                    // version (major + minor)
	    4 + 28 +               // random time and random bytes
	    2 +                    // chosen cipher suite
	    1;                     // chosen compression method

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.server_hello);
	  rval.putInt24(length);                     // handshake length
	  rval.putByte(c.version.major);             // major version
	  rval.putByte(c.version.minor);             // minor version
	  rval.putBytes(c.session.sp.server_random); // random time + bytes
	  writeVector(rval, 1, forge.util.createBuffer(sessionId));
	  rval.putByte(c.session.cipherSuite.id[0]);
	  rval.putByte(c.session.cipherSuite.id[1]);
	  rval.putByte(c.session.compressionMethod);
	  return rval;
	};

	/**
	 * Creates a Certificate message.
	 *
	 * When this message will be sent:
	 *   This is the first message the client can send after receiving a server
	 *   hello done message and the first message the server can send after
	 *   sending a ServerHello. This client message is only sent if the server
	 *   requests a certificate. If no suitable certificate is available, the
	 *   client should send a certificate message containing no certificates. If
	 *   client authentication is required by the server for the handshake to
	 *   continue, it may respond with a fatal handshake failure alert.
	 *
	 * opaque ASN.1Cert<1..2^24-1>;
	 *
	 * struct {
	 *   ASN.1Cert certificate_list<0..2^24-1>;
	 * } Certificate;
	 *
	 * @param c the connection.
	 *
	 * @return the Certificate byte buffer.
	 */
	tls.createCertificate = function(c) {
	  // TODO: check certificate request to ensure types are supported

	  // get a certificate (a certificate as a PEM string)
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var cert = null;
	  if(c.getCertificate) {
	    var hint;
	    if(client) {
	      hint = c.session.certificateRequest;
	    } else {
	      hint = c.session.extensions.server_name.serverNameList;
	    }
	    cert = c.getCertificate(c, hint);
	  }

	  // buffer to hold certificate list
	  var certList = forge.util.createBuffer();
	  if(cert !== null) {
	    try {
	      // normalize cert to a chain of certificates
	      if(!forge.util.isArray(cert)) {
	        cert = [cert];
	      }
	      var asn1 = null;
	      for(var i = 0; i < cert.length; ++i) {
	        var msg = forge.pem.decode(cert[i])[0];
	        if(msg.type !== 'CERTIFICATE' &&
	          msg.type !== 'X509 CERTIFICATE' &&
	          msg.type !== 'TRUSTED CERTIFICATE') {
	          var error = new Error('Could not convert certificate from PEM; PEM ' +
	            'header type is not "CERTIFICATE", "X509 CERTIFICATE", or ' +
	            '"TRUSTED CERTIFICATE".');
	          error.headerType = msg.type;
	          throw error;
	        }
	        if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	          throw new Error('Could not convert certificate from PEM; PEM is encrypted.');
	        }

	        var der = forge.util.createBuffer(msg.body);
	        if(asn1 === null) {
	          asn1 = forge.asn1.fromDer(der.bytes(), false);
	        }

	        // certificate entry is itself a vector with 3 length bytes
	        var certBuffer = forge.util.createBuffer();
	        writeVector(certBuffer, 3, der);

	        // add cert vector to cert list vector
	        certList.putBuffer(certBuffer);
	      }

	      // save certificate
	      cert = forge.pki.certificateFromAsn1(asn1);
	      if(client) {
	        c.session.clientCertificate = cert;
	      } else {
	        c.session.serverCertificate = cert;
	      }
	    } catch(ex) {
	      return c.error(c, {
	        message: 'Could not send certificate list.',
	        cause: ex,
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.bad_certificate
	        }
	      });
	    }
	  }

	  // determine length of the handshake message
	  var length = 3 + certList.length(); // cert list vector

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate);
	  rval.putInt24(length);
	  writeVector(rval, 3, certList);
	  return rval;
	};

	/**
	 * Creates a ClientKeyExchange message.
	 *
	 * When this message will be sent:
	 *   This message is always sent by the client. It will immediately follow the
	 *   client certificate message, if it is sent. Otherwise it will be the first
	 *   message sent by the client after it receives the server hello done
	 *   message.
	 *
	 * Meaning of this message:
	 *   With this message, the premaster secret is set, either though direct
	 *   transmission of the RSA-encrypted secret, or by the transmission of
	 *   Diffie-Hellman parameters which will allow each side to agree upon the
	 *   same premaster secret. When the key exchange method is DH_RSA or DH_DSS,
	 *   client certification has been requested, and the client was able to
	 *   respond with a certificate which contained a Diffie-Hellman public key
	 *   whose parameters (group and generator) matched those specified by the
	 *   server in its certificate, this message will not contain any data.
	 *
	 * Meaning of this message:
	 *   If RSA is being used for key agreement and authentication, the client
	 *   generates a 48-byte premaster secret, encrypts it using the public key
	 *   from the server's certificate or the temporary RSA key provided in a
	 *   server key exchange message, and sends the result in an encrypted
	 *   premaster secret message. This structure is a variant of the client
	 *   key exchange message, not a message in itself.
	 *
	 * struct {
	 *   select(KeyExchangeAlgorithm) {
	 *     case rsa: EncryptedPreMasterSecret;
	 *     case diffie_hellman: ClientDiffieHellmanPublic;
	 *   } exchange_keys;
	 * } ClientKeyExchange;
	 *
	 * struct {
	 *   ProtocolVersion client_version;
	 *   opaque random[46];
	 * } PreMasterSecret;
	 *
	 * struct {
	 *   public-key-encrypted PreMasterSecret pre_master_secret;
	 * } EncryptedPreMasterSecret;
	 *
	 * A public-key-encrypted element is encoded as a vector <0..2^16-1>.
	 *
	 * @param c the connection.
	 *
	 * @return the ClientKeyExchange byte buffer.
	 */
	tls.createClientKeyExchange = function(c) {
	  // create buffer to encrypt
	  var b = forge.util.createBuffer();

	  // add highest client-supported protocol to help server avoid version
	  // rollback attacks
	  b.putByte(c.session.clientHelloVersion.major);
	  b.putByte(c.session.clientHelloVersion.minor);

	  // generate and add 46 random bytes
	  b.putBytes(forge.random.getBytes(46));

	  // save pre-master secret
	  var sp = c.session.sp;
	  sp.pre_master_secret = b.getBytes();

	  // RSA-encrypt the pre-master secret
	  var key = c.session.serverCertificate.publicKey;
	  b = key.encrypt(sp.pre_master_secret);

	  /* Note: The encrypted pre-master secret will be stored in a
	    public-key-encrypted opaque vector that has the length prefixed using
	    2 bytes, so include those 2 bytes in the handshake message length. This
	    is done as a minor optimization instead of calling writeVector(). */

	  // determine length of the handshake message
	  var length = b.length + 2;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.client_key_exchange);
	  rval.putInt24(length);
	  // add vector length bytes
	  rval.putInt16(b.length);
	  rval.putBytes(b);
	  return rval;
	};

	/**
	 * Creates a ServerKeyExchange message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerKeyExchange byte buffer.
	 */
	tls.createServerKeyExchange = function(c) {
	  // this implementation only supports RSA, no Diffie-Hellman support,
	  // so this record is empty

	  // determine length of the handshake message
	  var length = 0;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  if(length > 0) {
	    rval.putByte(tls.HandshakeType.server_key_exchange);
	    rval.putInt24(length);
	  }
	  return rval;
	};

	/**
	 * Gets the signed data used to verify a client-side certificate. See
	 * tls.createCertificateVerify() for details.
	 *
	 * @param c the connection.
	 * @param callback the callback to call once the signed data is ready.
	 */
	tls.getClientSignature = function(c, callback) {
	  // generate data to RSA encrypt
	  var b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());
	  b = b.getBytes();

	  // create default signing function as necessary
	  c.getSignature = c.getSignature || function(c, b, callback) {
	    // do rsa encryption, call callback
	    var privateKey = null;
	    if(c.getPrivateKey) {
	      try {
	        privateKey = c.getPrivateKey(c, c.session.clientCertificate);
	        privateKey = forge.pki.privateKeyFromPem(privateKey);
	      } catch(ex) {
	        c.error(c, {
	          message: 'Could not get private key.',
	          cause: ex,
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.internal_error
	          }
	        });
	      }
	    }
	    if(privateKey === null) {
	      c.error(c, {
	        message: 'No private key set.',
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: tls.Alert.Description.internal_error
	        }
	      });
	    } else {
	      b = privateKey.sign(b, null);
	    }
	    callback(c, b);
	  };

	  // get client signature
	  c.getSignature(c, b, callback);
	};

	/**
	 * Creates a CertificateVerify message.
	 *
	 * Meaning of this message:
	 *   This structure conveys the client's Diffie-Hellman public value
	 *   (Yc) if it was not already included in the client's certificate.
	 *   The encoding used for Yc is determined by the enumerated
	 *   PublicValueEncoding. This structure is a variant of the client
	 *   key exchange message, not a message in itself.
	 *
	 * When this message will be sent:
	 *   This message is used to provide explicit verification of a client
	 *   certificate. This message is only sent following a client
	 *   certificate that has signing capability (i.e. all certificates
	 *   except those containing fixed Diffie-Hellman parameters). When
	 *   sent, it will immediately follow the client key exchange message.
	 *
	 * struct {
	 *   Signature signature;
	 * } CertificateVerify;
	 *
	 * CertificateVerify.signature.md5_hash
	 *   MD5(handshake_messages);
	 *
	 * Certificate.signature.sha_hash
	 *   SHA(handshake_messages);
	 *
	 * Here handshake_messages refers to all handshake messages sent or
	 * received starting at client hello up to but not including this
	 * message, including the type and length fields of the handshake
	 * messages.
	 *
	 * select(SignatureAlgorithm) {
	 *   case anonymous: struct { };
	 *   case rsa:
	 *     digitally-signed struct {
	 *       opaque md5_hash[16];
	 *       opaque sha_hash[20];
	 *     };
	 *   case dsa:
	 *     digitally-signed struct {
	 *       opaque sha_hash[20];
	 *     };
	 * } Signature;
	 *
	 * In digital signing, one-way hash functions are used as input for a
	 * signing algorithm. A digitally-signed element is encoded as an opaque
	 * vector <0..2^16-1>, where the length is specified by the signing
	 * algorithm and key.
	 *
	 * In RSA signing, a 36-byte structure of two hashes (one SHA and one
	 * MD5) is signed (encrypted with the private key). It is encoded with
	 * PKCS #1 block type 0 or type 1 as described in [PKCS1].
	 *
	 * In DSS, the 20 bytes of the SHA hash are run directly through the
	 * Digital Signing Algorithm with no additional hashing.
	 *
	 * @param c the connection.
	 * @param signature the signature to include in the message.
	 *
	 * @return the CertificateVerify byte buffer.
	 */
	tls.createCertificateVerify = function(c, signature) {
	  /* Note: The signature will be stored in a "digitally-signed" opaque
	    vector that has the length prefixed using 2 bytes, so include those
	    2 bytes in the handshake message length. This is done as a minor
	    optimization instead of calling writeVector(). */

	  // determine length of the handshake message
	  var length = signature.length + 2;

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate_verify);
	  rval.putInt24(length);
	  // add vector length bytes
	  rval.putInt16(signature.length);
	  rval.putBytes(signature);
	  return rval;
	};

	/**
	 * Creates a CertificateRequest message.
	 *
	 * @param c the connection.
	 *
	 * @return the CertificateRequest byte buffer.
	 */
	tls.createCertificateRequest = function(c) {
	  // TODO: support other certificate types
	  var certTypes = forge.util.createBuffer();

	  // common RSA certificate type
	  certTypes.putByte(0x01);

	  // TODO: verify that this data format is correct
	  // add distinguished names from CA store
	  var cAs = forge.util.createBuffer();
	  for(var key in c.caStore.certs) {
	    var cert = c.caStore.certs[key];
	    var dn = forge.pki.distinguishedNameToAsn1(cert.subject);
	    cAs.putBuffer(forge.asn1.toDer(dn));
	  }

	  // TODO: TLS 1.2+ has a different format

	  // determine length of the handshake message
	  var length =
	    1 + certTypes.length() +
	    2 + cAs.length();

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.certificate_request);
	  rval.putInt24(length);
	  writeVector(rval, 1, certTypes);
	  writeVector(rval, 2, cAs);
	  return rval;
	};

	/**
	 * Creates a ServerHelloDone message.
	 *
	 * @param c the connection.
	 *
	 * @return the ServerHelloDone byte buffer.
	 */
	tls.createServerHelloDone = function(c) {
	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.server_hello_done);
	  rval.putInt24(0);
	  return rval;
	};

	/**
	 * Creates a ChangeCipherSpec message.
	 *
	 * The change cipher spec protocol exists to signal transitions in
	 * ciphering strategies. The protocol consists of a single message,
	 * which is encrypted and compressed under the current (not the pending)
	 * connection state. The message consists of a single byte of value 1.
	 *
	 * struct {
	 *   enum { change_cipher_spec(1), (255) } type;
	 * } ChangeCipherSpec;
	 *
	 * @return the ChangeCipherSpec byte buffer.
	 */
	tls.createChangeCipherSpec = function() {
	  var rval = forge.util.createBuffer();
	  rval.putByte(0x01);
	  return rval;
	};

	/**
	 * Creates a Finished message.
	 *
	 * struct {
	 *   opaque verify_data[12];
	 * } Finished;
	 *
	 * verify_data
	 *   PRF(master_secret, finished_label, MD5(handshake_messages) +
	 *   SHA-1(handshake_messages)) [0..11];
	 *
	 * finished_label
	 *   For Finished messages sent by the client, the string "client
	 *   finished". For Finished messages sent by the server, the
	 *   string "server finished".
	 *
	 * handshake_messages
	 *   All of the data from all handshake messages up to but not
	 *   including this message. This is only data visible at the
	 *   handshake layer and does not include record layer headers.
	 *   This is the concatenation of all the Handshake structures as
	 *   defined in 7.4 exchanged thus far.
	 *
	 * @param c the connection.
	 *
	 * @return the Finished byte buffer.
	 */
	tls.createFinished = function(c) {
	  // generate verify_data
	  var b = forge.util.createBuffer();
	  b.putBuffer(c.session.md5.digest());
	  b.putBuffer(c.session.sha1.digest());

	  // TODO: determine prf function and verify length for TLS 1.2
	  var client = (c.entity === tls.ConnectionEnd.client);
	  var sp = c.session.sp;
	  var vdl = 12;
	  var prf = prf_TLS1;
	  var label = client ? 'client finished' : 'server finished';
	  b = prf(sp.master_secret, label, b.getBytes(), vdl);

	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(tls.HandshakeType.finished);
	  rval.putInt24(b.length());
	  rval.putBuffer(b);
	  return rval;
	};

	/**
	 * Creates a HeartbeatMessage (See RFC 6520).
	 *
	 * struct {
	 *   HeartbeatMessageType type;
	 *   uint16 payload_length;
	 *   opaque payload[HeartbeatMessage.payload_length];
	 *   opaque padding[padding_length];
	 * } HeartbeatMessage;
	 *
	 * The total length of a HeartbeatMessage MUST NOT exceed 2^14 or
	 * max_fragment_length when negotiated as defined in [RFC6066].
	 *
	 * type: The message type, either heartbeat_request or heartbeat_response.
	 *
	 * payload_length: The length of the payload.
	 *
	 * payload: The payload consists of arbitrary content.
	 *
	 * padding: The padding is random content that MUST be ignored by the
	 *   receiver. The length of a HeartbeatMessage is TLSPlaintext.length
	 *   for TLS and DTLSPlaintext.length for DTLS. Furthermore, the
	 *   length of the type field is 1 byte, and the length of the
	 *   payload_length is 2. Therefore, the padding_length is
	 *   TLSPlaintext.length - payload_length - 3 for TLS and
	 *   DTLSPlaintext.length - payload_length - 3 for DTLS. The
	 *   padding_length MUST be at least 16.
	 *
	 * The sender of a HeartbeatMessage MUST use a random padding of at
	 * least 16 bytes. The padding of a received HeartbeatMessage message
	 * MUST be ignored.
	 *
	 * If the payload_length of a received HeartbeatMessage is too large,
	 * the received HeartbeatMessage MUST be discarded silently.
	 *
	 * @param c the connection.
	 * @param type the tls.HeartbeatMessageType.
	 * @param payload the heartbeat data to send as the payload.
	 * @param [payloadLength] the payload length to use, defaults to the
	 *          actual payload length.
	 *
	 * @return the HeartbeatRequest byte buffer.
	 */
	tls.createHeartbeat = function(type, payload, payloadLength) {
	  if(typeof payloadLength === 'undefined') {
	    payloadLength = payload.length;
	  }
	  // build record fragment
	  var rval = forge.util.createBuffer();
	  rval.putByte(type);               // heartbeat message type
	  rval.putInt16(payloadLength);     // payload length
	  rval.putBytes(payload);           // payload
	  // padding
	  var plaintextLength = rval.length();
	  var paddingLength = Math.max(16, plaintextLength - payloadLength - 3);
	  rval.putBytes(forge.random.getBytes(paddingLength));
	  return rval;
	};

	/**
	 * Fragments, compresses, encrypts, and queues a record for delivery.
	 *
	 * @param c the connection.
	 * @param record the record to queue.
	 */
	tls.queue = function(c, record) {
	  // error during record creation
	  if(!record) {
	    return;
	  }

	  // if the record is a handshake record, update handshake hashes
	  if(record.type === tls.ContentType.handshake) {
	    var bytes = record.fragment.bytes();
	    c.session.md5.update(bytes);
	    c.session.sha1.update(bytes);
	    bytes = null;
	  }

	  // handle record fragmentation
	  var records;
	  if(record.fragment.length() <= tls.MaxFragment) {
	    records = [record];
	  } else {
	    // fragment data as long as it is too long
	    records = [];
	    var data = record.fragment.bytes();
	    while(data.length > tls.MaxFragment) {
	      records.push(tls.createRecord(c, {
	        type: record.type,
	        data: forge.util.createBuffer(data.slice(0, tls.MaxFragment))
	      }));
	      data = data.slice(tls.MaxFragment);
	    }
	    // add last record
	    if(data.length > 0) {
	      records.push(tls.createRecord(c, {
	        type: record.type,
	        data: forge.util.createBuffer(data)
	      }));
	    }
	  }

	  // compress and encrypt all fragmented records
	  for(var i = 0; i < records.length && !c.fail; ++i) {
	    // update the record using current write state
	    var rec = records[i];
	    var s = c.state.current.write;
	    if(s.update(c, rec)) {
	      // store record
	      c.records.push(rec);
	    }
	  }
	};

	/**
	 * Flushes all queued records to the output buffer and calls the
	 * tlsDataReady() handler on the given connection.
	 *
	 * @param c the connection.
	 *
	 * @return true on success, false on failure.
	 */
	tls.flush = function(c) {
	  for(var i = 0; i < c.records.length; ++i) {
	    var record = c.records[i];

	    // add record header and fragment
	    c.tlsData.putByte(record.type);
	    c.tlsData.putByte(record.version.major);
	    c.tlsData.putByte(record.version.minor);
	    c.tlsData.putInt16(record.fragment.length());
	    c.tlsData.putBuffer(c.records[i].fragment);
	  }
	  c.records = [];
	  return c.tlsDataReady(c);
	};

	/**
	 * Maps a pki.certificateError to a tls.Alert.Description.
	 *
	 * @param error the error to map.
	 *
	 * @return the alert description.
	 */
	var _certErrorToAlertDesc = function(error) {
	  switch(error) {
	  case true:
	    return true;
	  case forge.pki.certificateError.bad_certificate:
	    return tls.Alert.Description.bad_certificate;
	  case forge.pki.certificateError.unsupported_certificate:
	    return tls.Alert.Description.unsupported_certificate;
	  case forge.pki.certificateError.certificate_revoked:
	    return tls.Alert.Description.certificate_revoked;
	  case forge.pki.certificateError.certificate_expired:
	    return tls.Alert.Description.certificate_expired;
	  case forge.pki.certificateError.certificate_unknown:
	    return tls.Alert.Description.certificate_unknown;
	  case forge.pki.certificateError.unknown_ca:
	    return tls.Alert.Description.unknown_ca;
	  default:
	    return tls.Alert.Description.bad_certificate;
	  }
	};

	/**
	 * Maps a tls.Alert.Description to a pki.certificateError.
	 *
	 * @param desc the alert description.
	 *
	 * @return the certificate error.
	 */
	var _alertDescToCertError = function(desc) {
	  switch(desc) {
	  case true:
	    return true;
	  case tls.Alert.Description.bad_certificate:
	    return forge.pki.certificateError.bad_certificate;
	  case tls.Alert.Description.unsupported_certificate:
	    return forge.pki.certificateError.unsupported_certificate;
	  case tls.Alert.Description.certificate_revoked:
	    return forge.pki.certificateError.certificate_revoked;
	  case tls.Alert.Description.certificate_expired:
	    return forge.pki.certificateError.certificate_expired;
	  case tls.Alert.Description.certificate_unknown:
	    return forge.pki.certificateError.certificate_unknown;
	  case tls.Alert.Description.unknown_ca:
	    return forge.pki.certificateError.unknown_ca;
	  default:
	    return forge.pki.certificateError.bad_certificate;
	  }
	};

	/**
	 * Verifies a certificate chain against the given connection's
	 * Certificate Authority store.
	 *
	 * @param c the TLS connection.
	 * @param chain the certificate chain to verify, with the root or highest
	 *          authority at the end.
	 *
	 * @return true if successful, false if not.
	 */
	tls.verifyCertificateChain = function(c, chain) {
	  try {
	    // verify chain
	    forge.pki.verifyCertificateChain(c.caStore, chain,
	      function verify(vfd, depth, chain) {
	        // convert pki.certificateError to tls alert description
	        var desc = _certErrorToAlertDesc(vfd);

	        // call application callback
	        var ret = c.verify(c, vfd, depth, chain);
	        if(ret !== true) {
	          if(typeof ret === 'object' && !forge.util.isArray(ret)) {
	            // throw custom error
	            var error = new Error('The application rejected the certificate.');
	            error.send = true;
	            error.alert = {
	              level: tls.Alert.Level.fatal,
	              description: tls.Alert.Description.bad_certificate
	            };
	            if(ret.message) {
	              error.message = ret.message;
	            }
	            if(ret.alert) {
	              error.alert.description = ret.alert;
	            }
	            throw error;
	          }

	          // convert tls alert description to pki.certificateError
	          if(ret !== vfd) {
	            ret = _alertDescToCertError(ret);
	          }
	        }

	        return ret;
	      });
	  } catch(ex) {
	    // build tls error if not already customized
	    var err = ex;
	    if(typeof err !== 'object' || forge.util.isArray(err)) {
	      err = {
	        send: true,
	        alert: {
	          level: tls.Alert.Level.fatal,
	          description: _certErrorToAlertDesc(ex)
	        }
	      };
	    }
	    if(!('send' in err)) {
	      err.send = true;
	    }
	    if(!('alert' in err)) {
	      err.alert = {
	        level: tls.Alert.Level.fatal,
	        description: _certErrorToAlertDesc(err.error)
	      };
	    }

	    // send error
	    c.error(c, err);
	  }

	  return !c.fail;
	};

	/**
	 * Creates a new TLS session cache.
	 *
	 * @param cache optional map of session ID to cached session.
	 * @param capacity the maximum size for the cache (default: 100).
	 *
	 * @return the new TLS session cache.
	 */
	tls.createSessionCache = function(cache, capacity) {
	  var rval = null;

	  // assume input is already a session cache object
	  if(cache && cache.getSession && cache.setSession && cache.order) {
	    rval = cache;
	  } else {
	    // create cache
	    rval = {};
	    rval.cache = cache || {};
	    rval.capacity = Math.max(capacity || 100, 1);
	    rval.order = [];

	    // store order for sessions, delete session overflow
	    for(var key in cache) {
	      if(rval.order.length <= capacity) {
	        rval.order.push(key);
	      } else {
	        delete cache[key];
	      }
	    }

	    // get a session from a session ID (or get any session)
	    rval.getSession = function(sessionId) {
	      var session = null;
	      var key = null;

	      // if session ID provided, use it
	      if(sessionId) {
	        key = forge.util.bytesToHex(sessionId);
	      } else if(rval.order.length > 0) {
	        // get first session from cache
	        key = rval.order[0];
	      }

	      if(key !== null && key in rval.cache) {
	        // get cached session and remove from cache
	        session = rval.cache[key];
	        delete rval.cache[key];
	        for(var i in rval.order) {
	          if(rval.order[i] === key) {
	            rval.order.splice(i, 1);
	            break;
	          }
	        }
	      }

	      return session;
	    };

	    // set a session in the cache
	    rval.setSession = function(sessionId, session) {
	      // remove session from cache if at capacity
	      if(rval.order.length === rval.capacity) {
	        var key = rval.order.shift();
	        delete rval.cache[key];
	      }
	      // add session to cache
	      var key = forge.util.bytesToHex(sessionId);
	      rval.order.push(key);
	      rval.cache[key] = session;
	    };
	  }

	  return rval;
	};

	/**
	 * Creates a new TLS connection.
	 *
	 * See public createConnection() docs for more details.
	 *
	 * @param options the options for this connection.
	 *
	 * @return the new TLS connection.
	 */
	tls.createConnection = function(options) {
	  var caStore = null;
	  if(options.caStore) {
	    // if CA store is an array, convert it to a CA store object
	    if(forge.util.isArray(options.caStore)) {
	      caStore = forge.pki.createCaStore(options.caStore);
	    } else {
	      caStore = options.caStore;
	    }
	  } else {
	    // create empty CA store
	    caStore = forge.pki.createCaStore();
	  }

	  // setup default cipher suites
	  var cipherSuites = options.cipherSuites || null;
	  if(cipherSuites === null) {
	    cipherSuites = [];
	    for(var key in tls.CipherSuites) {
	      cipherSuites.push(tls.CipherSuites[key]);
	    }
	  }

	  // set default entity
	  var entity = (options.server || false) ?
	    tls.ConnectionEnd.server : tls.ConnectionEnd.client;

	  // create session cache if requested
	  var sessionCache = options.sessionCache ?
	    tls.createSessionCache(options.sessionCache) : null;

	  // create TLS connection
	  var c = {
	    version: {major: tls.Version.major, minor: tls.Version.minor},
	    entity: entity,
	    sessionId: options.sessionId,
	    caStore: caStore,
	    sessionCache: sessionCache,
	    cipherSuites: cipherSuites,
	    connected: options.connected,
	    virtualHost: options.virtualHost || null,
	    verifyClient: options.verifyClient || false,
	    verify: options.verify || function(cn, vfd, dpth, cts) {return vfd;},
	    getCertificate: options.getCertificate || null,
	    getPrivateKey: options.getPrivateKey || null,
	    getSignature: options.getSignature || null,
	    input: forge.util.createBuffer(),
	    tlsData: forge.util.createBuffer(),
	    data: forge.util.createBuffer(),
	    tlsDataReady: options.tlsDataReady,
	    dataReady: options.dataReady,
	    heartbeatReceived: options.heartbeatReceived,
	    closed: options.closed,
	    error: function(c, ex) {
	      // set origin if not set
	      ex.origin = ex.origin ||
	        ((c.entity === tls.ConnectionEnd.client) ? 'client' : 'server');

	      // send TLS alert
	      if(ex.send) {
	        tls.queue(c, tls.createAlert(c, ex.alert));
	        tls.flush(c);
	      }

	      // error is fatal by default
	      var fatal = (ex.fatal !== false);
	      if(fatal) {
	        // set fail flag
	        c.fail = true;
	      }

	      // call error handler first
	      options.error(c, ex);

	      if(fatal) {
	        // fatal error, close connection, do not clear fail
	        c.close(false);
	      }
	    },
	    deflate: options.deflate || null,
	    inflate: options.inflate || null
	  };

	  /**
	   * Resets a closed TLS connection for reuse. Called in c.close().
	   *
	   * @param clearFail true to clear the fail flag (default: true).
	   */
	  c.reset = function(clearFail) {
	    c.version = {major: tls.Version.major, minor: tls.Version.minor};
	    c.record = null;
	    c.session = null;
	    c.peerCertificate = null;
	    c.state = {
	      pending: null,
	      current: null
	    };
	    c.expect = (c.entity === tls.ConnectionEnd.client) ? SHE : CHE;
	    c.fragmented = null;
	    c.records = [];
	    c.open = false;
	    c.handshakes = 0;
	    c.handshaking = false;
	    c.isConnected = false;
	    c.fail = !(clearFail || typeof(clearFail) === 'undefined');
	    c.input.clear();
	    c.tlsData.clear();
	    c.data.clear();
	    c.state.current = tls.createConnectionState(c);
	  };

	  // do initial reset of connection
	  c.reset();

	  /**
	   * Updates the current TLS engine state based on the given record.
	   *
	   * @param c the TLS connection.
	   * @param record the TLS record to act on.
	   */
	  var _update = function(c, record) {
	    // get record handler (align type in table by subtracting lowest)
	    var aligned = record.type - tls.ContentType.change_cipher_spec;
	    var handlers = ctTable[c.entity][c.expect];
	    if(aligned in handlers) {
	      handlers[aligned](c, record);
	    } else {
	      // unexpected record
	      tls.handleUnexpected(c, record);
	    }
	  };

	  /**
	   * Reads the record header and initializes the next record on the given
	   * connection.
	   *
	   * @param c the TLS connection with the next record.
	   *
	   * @return 0 if the input data could be processed, otherwise the
	   *         number of bytes required for data to be processed.
	   */
	  var _readRecordHeader = function(c) {
	    var rval = 0;

	    // get input buffer and its length
	    var b = c.input;
	    var len = b.length();

	    // need at least 5 bytes to initialize a record
	    if(len < 5) {
	      rval = 5 - len;
	    } else {
	      // enough bytes for header
	      // initialize record
	      c.record = {
	        type: b.getByte(),
	        version: {
	          major: b.getByte(),
	          minor: b.getByte()
	        },
	        length: b.getInt16(),
	        fragment: forge.util.createBuffer(),
	        ready: false
	      };

	      // check record version
	      var compatibleVersion = (c.record.version.major === c.version.major);
	      if(compatibleVersion && c.session && c.session.version) {
	        // session version already set, require same minor version
	        compatibleVersion = (c.record.version.minor === c.version.minor);
	      }
	      if(!compatibleVersion) {
	        c.error(c, {
	          message: 'Incompatible TLS version.',
	          send: true,
	          alert: {
	            level: tls.Alert.Level.fatal,
	            description: tls.Alert.Description.protocol_version
	          }
	        });
	      }
	    }

	    return rval;
	  };

	  /**
	   * Reads the next record's contents and appends its message to any
	   * previously fragmented message.
	   *
	   * @param c the TLS connection with the next record.
	   *
	   * @return 0 if the input data could be processed, otherwise the
	   *         number of bytes required for data to be processed.
	   */
	  var _readRecord = function(c) {
	    var rval = 0;

	    // ensure there is enough input data to get the entire record
	    var b = c.input;
	    var len = b.length();
	    if(len < c.record.length) {
	      // not enough data yet, return how much is required
	      rval = c.record.length - len;
	    } else {
	      // there is enough data to parse the pending record
	      // fill record fragment and compact input buffer
	      c.record.fragment.putBytes(b.getBytes(c.record.length));
	      b.compact();

	      // update record using current read state
	      var s = c.state.current.read;
	      if(s.update(c, c.record)) {
	        // see if there is a previously fragmented message that the
	        // new record's message fragment should be appended to
	        if(c.fragmented !== null) {
	          // if the record type matches a previously fragmented
	          // record, append the record fragment to it
	          if(c.fragmented.type === c.record.type) {
	            // concatenate record fragments
	            c.fragmented.fragment.putBuffer(c.record.fragment);
	            c.record = c.fragmented;
	          } else {
	            // error, invalid fragmented record
	            c.error(c, {
	              message: 'Invalid fragmented record.',
	              send: true,
	              alert: {
	                level: tls.Alert.Level.fatal,
	                description:
	                  tls.Alert.Description.unexpected_message
	              }
	            });
	          }
	        }

	        // record is now ready
	        c.record.ready = true;
	      }
	    }

	    return rval;
	  };

	  /**
	   * Performs a handshake using the TLS Handshake Protocol, as a client.
	   *
	   * This method should only be called if the connection is in client mode.
	   *
	   * @param sessionId the session ID to use, null to start a new one.
	   */
	  c.handshake = function(sessionId) {
	    // error to call this in non-client mode
	    if(c.entity !== tls.ConnectionEnd.client) {
	      // not fatal error
	      c.error(c, {
	        message: 'Cannot initiate handshake as a server.',
	        fatal: false
	      });
	    } else if(c.handshaking) {
	      // handshake is already in progress, fail but not fatal error
	      c.error(c, {
	        message: 'Handshake already in progress.',
	        fatal: false
	      });
	    } else {
	      // clear fail flag on reuse
	      if(c.fail && !c.open && c.handshakes === 0) {
	        c.fail = false;
	      }

	      // now handshaking
	      c.handshaking = true;

	      // default to blank (new session)
	      sessionId = sessionId || '';

	      // if a session ID was specified, try to find it in the cache
	      var session = null;
	      if(sessionId.length > 0) {
	        if(c.sessionCache) {
	          session = c.sessionCache.getSession(sessionId);
	        }

	        // matching session not found in cache, clear session ID
	        if(session === null) {
	          sessionId = '';
	        }
	      }

	      // no session given, grab a session from the cache, if available
	      if(sessionId.length === 0 && c.sessionCache) {
	        session = c.sessionCache.getSession();
	        if(session !== null) {
	          sessionId = session.id;
	        }
	      }

	      // set up session
	      c.session = {
	        id: sessionId,
	        version: null,
	        cipherSuite: null,
	        compressionMethod: null,
	        serverCertificate: null,
	        certificateRequest: null,
	        clientCertificate: null,
	        sp: {},
	        md5: forge.md.md5.create(),
	        sha1: forge.md.sha1.create()
	      };

	      // use existing session information
	      if(session) {
	        // only update version on connection, session version not yet set
	        c.version = session.version;
	        c.session.sp = session.sp;
	      }

	      // generate new client random
	      c.session.sp.client_random = tls.createRandom().getBytes();

	      // connection now open
	      c.open = true;

	      // send hello
	      tls.queue(c, tls.createRecord(c, {
	        type: tls.ContentType.handshake,
	        data: tls.createClientHello(c)
	      }));
	      tls.flush(c);
	    }
	  };

	  /**
	   * Called when TLS protocol data has been received from somewhere and should
	   * be processed by the TLS engine.
	   *
	   * @param data the TLS protocol data, as a string, to process.
	   *
	   * @return 0 if the data could be processed, otherwise the number of bytes
	   *         required for data to be processed.
	   */
	  c.process = function(data) {
	    var rval = 0;

	    // buffer input data
	    if(data) {
	      c.input.putBytes(data);
	    }

	    // process next record if no failure, process will be called after
	    // each record is handled (since handling can be asynchronous)
	    if(!c.fail) {
	      // reset record if ready and now empty
	      if(c.record !== null &&
	        c.record.ready && c.record.fragment.isEmpty()) {
	        c.record = null;
	      }

	      // if there is no pending record, try to read record header
	      if(c.record === null) {
	        rval = _readRecordHeader(c);
	      }

	      // read the next record (if record not yet ready)
	      if(!c.fail && c.record !== null && !c.record.ready) {
	        rval = _readRecord(c);
	      }

	      // record ready to be handled, update engine state
	      if(!c.fail && c.record !== null && c.record.ready) {
	        _update(c, c.record);
	      }
	    }

	    return rval;
	  };

	  /**
	   * Requests that application data be packaged into a TLS record. The
	   * tlsDataReady handler will be called when the TLS record(s) have been
	   * prepared.
	   *
	   * @param data the application data, as a raw 'binary' encoded string, to
	   *          be sent; to send utf-16/utf-8 string data, use the return value
	   *          of util.encodeUtf8(str).
	   *
	   * @return true on success, false on failure.
	   */
	  c.prepare = function(data) {
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.application_data,
	      data: forge.util.createBuffer(data)
	    }));
	    return tls.flush(c);
	  };

	  /**
	   * Requests that a heartbeat request be packaged into a TLS record for
	   * transmission. The tlsDataReady handler will be called when TLS record(s)
	   * have been prepared.
	   *
	   * When a heartbeat response has been received, the heartbeatReceived
	   * handler will be called with the matching payload. This handler can
	   * be used to clear a retransmission timer, etc.
	   *
	   * @param payload the heartbeat data to send as the payload in the message.
	   * @param [payloadLength] the payload length to use, defaults to the
	   *          actual payload length.
	   *
	   * @return true on success, false on failure.
	   */
	  c.prepareHeartbeatRequest = function(payload, payloadLength) {
	    if(payload instanceof forge.util.ByteBuffer) {
	      payload = payload.bytes();
	    }
	    if(typeof payloadLength === 'undefined') {
	      payloadLength = payload.length;
	    }
	    c.expectedHeartbeatPayload = payload;
	    tls.queue(c, tls.createRecord(c, {
	      type: tls.ContentType.heartbeat,
	      data: tls.createHeartbeat(
	        tls.HeartbeatMessageType.heartbeat_request, payload, payloadLength)
	    }));
	    return tls.flush(c);
	  };

	  /**
	   * Closes the connection (sends a close_notify alert).
	   *
	   * @param clearFail true to clear the fail flag (default: true).
	   */
	  c.close = function(clearFail) {
	    // save session if connection didn't fail
	    if(!c.fail && c.sessionCache && c.session) {
	      // only need to preserve session ID, version, and security params
	      var session = {
	        id: c.session.id,
	        version: c.session.version,
	        sp: c.session.sp
	      };
	      session.sp.keys = null;
	      c.sessionCache.setSession(session.id, session);
	    }

	    if(c.open) {
	      // connection no longer open, clear input
	      c.open = false;
	      c.input.clear();

	      // if connected or handshaking, send an alert
	      if(c.isConnected || c.handshaking) {
	        c.isConnected = c.handshaking = false;

	        // send close_notify alert
	        tls.queue(c, tls.createAlert(c, {
	          level: tls.Alert.Level.warning,
	          description: tls.Alert.Description.close_notify
	        }));
	        tls.flush(c);
	      }

	      // call handler
	      c.closed(c);
	    }

	    // reset TLS connection, do not clear fail flag
	    c.reset(clearFail);
	  };

	  return c;
	};

	/* TLS API */
	forge.tls = forge.tls || {};

	// expose non-functions
	for(var key in tls) {
	  if(typeof tls[key] !== 'function') {
	    forge.tls[key] = tls[key];
	  }
	}

	// expose prf_tls1 for testing
	forge.tls.prf_tls1 = prf_TLS1;

	// expose sha1 hmac method
	forge.tls.hmac_sha1 = hmac_sha1;

	// expose session cache creation
	forge.tls.createSessionCache = tls.createSessionCache;

	/**
	 * Creates a new TLS connection. This does not make any assumptions about the
	 * transport layer that TLS is working on top of, ie: it does not assume there
	 * is a TCP/IP connection or establish one. A TLS connection is totally
	 * abstracted away from the layer is runs on top of, it merely establishes a
	 * secure channel between a client" and a "server".
	 *
	 * A TLS connection contains 4 connection states: pending read and write, and
	 * current read and write.
	 *
	 * At initialization, the current read and write states will be null. Only once
	 * the security parameters have been set and the keys have been generated can
	 * the pending states be converted into current states. Current states will be
	 * updated for each record processed.
	 *
	 * A custom certificate verify callback may be provided to check information
	 * like the common name on the server's certificate. It will be called for
	 * every certificate in the chain. It has the following signature:
	 *
	 * variable func(c, certs, index, preVerify)
	 * Where:
	 * c         The TLS connection
	 * verified  Set to true if certificate was verified, otherwise the alert
	 *           tls.Alert.Description for why the certificate failed.
	 * depth     The current index in the chain, where 0 is the server's cert.
	 * certs     The certificate chain, *NOTE* if the server was anonymous then
	 *           the chain will be empty.
	 *
	 * The function returns true on success and on failure either the appropriate
	 * tls.Alert.Description or an object with 'alert' set to the appropriate
	 * tls.Alert.Description and 'message' set to a custom error message. If true
	 * is not returned then the connection will abort using, in order of
	 * availability, first the returned alert description, second the preVerify
	 * alert description, and lastly the default 'bad_certificate'.
	 *
	 * There are three callbacks that can be used to make use of client-side
	 * certificates where each takes the TLS connection as the first parameter:
	 *
	 * getCertificate(conn, hint)
	 *   The second parameter is a hint as to which certificate should be
	 *   returned. If the connection entity is a client, then the hint will be
	 *   the CertificateRequest message from the server that is part of the
	 *   TLS protocol. If the connection entity is a server, then it will be
	 *   the servername list provided via an SNI extension the ClientHello, if
	 *   one was provided (empty array if not). The hint can be examined to
	 *   determine which certificate to use (advanced). Most implementations
	 *   will just return a certificate. The return value must be a
	 *   PEM-formatted certificate or an array of PEM-formatted certificates
	 *   that constitute a certificate chain, with the first in the array/chain
	 *   being the client's certificate.
	 * getPrivateKey(conn, certificate)
	 *   The second parameter is an forge.pki X.509 certificate object that
	 *   is associated with the requested private key. The return value must
	 *   be a PEM-formatted private key.
	 * getSignature(conn, bytes, callback)
	 *   This callback can be used instead of getPrivateKey if the private key
	 *   is not directly accessible in javascript or should not be. For
	 *   instance, a secure external web service could provide the signature
	 *   in exchange for appropriate credentials. The second parameter is a
	 *   string of bytes to be signed that are part of the TLS protocol. These
	 *   bytes are used to verify that the private key for the previously
	 *   provided client-side certificate is accessible to the client. The
	 *   callback is a function that takes 2 parameters, the TLS connection
	 *   and the RSA encrypted (signed) bytes as a string. This callback must
	 *   be called once the signature is ready.
	 *
	 * @param options the options for this connection:
	 *   server: true if the connection is server-side, false for client.
	 *   sessionId: a session ID to reuse, null for a new connection.
	 *   caStore: an array of certificates to trust.
	 *   sessionCache: a session cache to use.
	 *   cipherSuites: an optional array of cipher suites to use,
	 *     see tls.CipherSuites.
	 *   connected: function(conn) called when the first handshake completes.
	 *   virtualHost: the virtual server name to use in a TLS SNI extension.
	 *   verifyClient: true to require a client certificate in server mode,
	 *     'optional' to request one, false not to (default: false).
	 *   verify: a handler used to custom verify certificates in the chain.
	 *   getCertificate: an optional callback used to get a certificate or
	 *     a chain of certificates (as an array).
	 *   getPrivateKey: an optional callback used to get a private key.
	 *   getSignature: an optional callback used to get a signature.
	 *   tlsDataReady: function(conn) called when TLS protocol data has been
	 *     prepared and is ready to be used (typically sent over a socket
	 *     connection to its destination), read from conn.tlsData buffer.
	 *   dataReady: function(conn) called when application data has
	 *     been parsed from a TLS record and should be consumed by the
	 *     application, read from conn.data buffer.
	 *   closed: function(conn) called when the connection has been closed.
	 *   error: function(conn, error) called when there was an error.
	 *   deflate: function(inBytes) if provided, will deflate TLS records using
	 *     the deflate algorithm if the server supports it.
	 *   inflate: function(inBytes) if provided, will inflate TLS records using
	 *     the deflate algorithm if the server supports it.
	 *
	 * @return the new TLS connection.
	 */
	forge.tls.createConnection = tls.createConnection;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'tls';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/tls',[
	  'require',
	  'module',
	  './asn1',
	  './hmac',
	  './md',
	  './pem',
	  './pki',
	  './random',
	  './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * A Javascript implementation of AES Cipher Suites for TLS.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2015 Digital Bazaar, Inc.
	 *
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var tls = forge.tls;

	/**
	 * Supported cipher suites.
	 */
	tls.CipherSuites['TLS_RSA_WITH_AES_128_CBC_SHA'] = {
	  id: [0x00,0x2f],
	  name: 'TLS_RSA_WITH_AES_128_CBC_SHA',
	  initSecurityParameters: function(sp) {
	    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
	    sp.cipher_type = tls.CipherType.block;
	    sp.enc_key_length = 16;
	    sp.block_length = 16;
	    sp.fixed_iv_length = 16;
	    sp.record_iv_length = 16;
	    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
	    sp.mac_length = 20;
	    sp.mac_key_length = 20;
	  },
	  initConnectionState: initConnectionState
	};
	tls.CipherSuites['TLS_RSA_WITH_AES_256_CBC_SHA'] = {
	  id: [0x00,0x35],
	  name: 'TLS_RSA_WITH_AES_256_CBC_SHA',
	  initSecurityParameters: function(sp) {
	    sp.bulk_cipher_algorithm = tls.BulkCipherAlgorithm.aes;
	    sp.cipher_type = tls.CipherType.block;
	    sp.enc_key_length = 32;
	    sp.block_length = 16;
	    sp.fixed_iv_length = 16;
	    sp.record_iv_length = 16;
	    sp.mac_algorithm = tls.MACAlgorithm.hmac_sha1;
	    sp.mac_length = 20;
	    sp.mac_key_length = 20;
	  },
	  initConnectionState: initConnectionState
	};

	function initConnectionState(state, c, sp) {
	  var client = (c.entity === forge.tls.ConnectionEnd.client);

	  // cipher setup
	  state.read.cipherState = {
	    init: false,
	    cipher: forge.cipher.createDecipher('AES-CBC', client ?
	      sp.keys.server_write_key : sp.keys.client_write_key),
	    iv: client ? sp.keys.server_write_IV : sp.keys.client_write_IV
	  };
	  state.write.cipherState = {
	    init: false,
	    cipher: forge.cipher.createCipher('AES-CBC', client ?
	      sp.keys.client_write_key : sp.keys.server_write_key),
	    iv: client ? sp.keys.client_write_IV : sp.keys.server_write_IV
	  };
	  state.read.cipherFunction = decrypt_aes_cbc_sha1;
	  state.write.cipherFunction = encrypt_aes_cbc_sha1;

	  // MAC setup
	  state.read.macLength = state.write.macLength = sp.mac_length;
	  state.read.macFunction = state.write.macFunction = tls.hmac_sha1;
	}

	/**
	 * Encrypts the TLSCompressed record into a TLSCipherText record using AES
	 * in CBC mode.
	 *
	 * @param record the TLSCompressed record to encrypt.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	function encrypt_aes_cbc_sha1(record, s) {
	  var rval = false;

	  // append MAC to fragment, update sequence number
	  var mac = s.macFunction(s.macKey, s.sequenceNumber, record);
	  record.fragment.putBytes(mac);
	  s.updateSequenceNumber();

	  // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
	  var iv;
	  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
	    // use the pre-generated IV when initializing for TLS 1.0, otherwise use
	    // the residue from the previous encryption
	    iv = s.cipherState.init ? null : s.cipherState.iv;
	  } else {
	    iv = forge.random.getBytesSync(16);
	  }

	  s.cipherState.init = true;

	  // start cipher
	  var cipher = s.cipherState.cipher;
	  cipher.start({iv: iv});

	  // TLS 1.1+ write IV into output
	  if(record.version.minor >= tls.Versions.TLS_1_1.minor) {
	    cipher.output.putBytes(iv);
	  }

	  // do encryption (default padding is appropriate)
	  cipher.update(record.fragment);
	  if(cipher.finish(encrypt_aes_cbc_sha1_padding)) {
	    // set record fragment to encrypted output
	    record.fragment = cipher.output;
	    record.length = record.fragment.length();
	    rval = true;
	  }

	  return rval;
	}

	/**
	 * Handles padding for aes_cbc_sha1 in encrypt mode.
	 *
	 * @param blockSize the block size.
	 * @param input the input buffer.
	 * @param decrypt true in decrypt mode, false in encrypt mode.
	 *
	 * @return true on success, false on failure.
	 */
	function encrypt_aes_cbc_sha1_padding(blockSize, input, decrypt) {
	  /* The encrypted data length (TLSCiphertext.length) is one more than the sum
	   of SecurityParameters.block_length, TLSCompressed.length,
	   SecurityParameters.mac_length, and padding_length.

	   The padding may be any length up to 255 bytes long, as long as it results in
	   the TLSCiphertext.length being an integral multiple of the block length.
	   Lengths longer than necessary might be desirable to frustrate attacks on a
	   protocol based on analysis of the lengths of exchanged messages. Each uint8
	   in the padding data vector must be filled with the padding length value.

	   The padding length should be such that the total size of the
	   GenericBlockCipher structure is a multiple of the cipher's block length.
	   Legal values range from zero to 255, inclusive. This length specifies the
	   length of the padding field exclusive of the padding_length field itself.

	   This is slightly different from PKCS#7 because the padding value is 1
	   less than the actual number of padding bytes if you include the
	   padding_length uint8 itself as a padding byte. */
	  if(!decrypt) {
	    // get the number of padding bytes required to reach the blockSize and
	    // subtract 1 for the padding value (to make room for the padding_length
	    // uint8)
	    var padding = blockSize - (input.length() % blockSize);
	    input.fillWithByte(padding - 1, padding);
	  }
	  return true;
	}

	/**
	 * Handles padding for aes_cbc_sha1 in decrypt mode.
	 *
	 * @param blockSize the block size.
	 * @param output the output buffer.
	 * @param decrypt true in decrypt mode, false in encrypt mode.
	 *
	 * @return true on success, false on failure.
	 */
	function decrypt_aes_cbc_sha1_padding(blockSize, output, decrypt) {
	  var rval = true;
	  if(decrypt) {
	    /* The last byte in the output specifies the number of padding bytes not
	      including itself. Each of the padding bytes has the same value as that
	      last byte (known as the padding_length). Here we check all padding
	      bytes to ensure they have the value of padding_length even if one of
	      them is bad in order to ward-off timing attacks. */
	    var len = output.length();
	    var paddingLength = output.last();
	    for(var i = len - 1 - paddingLength; i < len - 1; ++i) {
	      rval = rval && (output.at(i) == paddingLength);
	    }
	    if(rval) {
	      // trim off padding bytes and last padding length byte
	      output.truncate(paddingLength + 1);
	    }
	  }
	  return rval;
	}

	/**
	 * Decrypts a TLSCipherText record into a TLSCompressed record using
	 * AES in CBC mode.
	 *
	 * @param record the TLSCipherText record to decrypt.
	 * @param s the ConnectionState to use.
	 *
	 * @return true on success, false on failure.
	 */
	var count = 0;
	function decrypt_aes_cbc_sha1(record, s) {
	  var rval = false;
	  ++count;

	  var iv;
	  if(record.version.minor === tls.Versions.TLS_1_0.minor) {
	    // use pre-generated IV when initializing for TLS 1.0, otherwise use the
	    // residue from the previous decryption
	    iv = s.cipherState.init ? null : s.cipherState.iv;
	  } else {
	    // TLS 1.1+ use an explicit IV every time to protect against CBC attacks
	    // that is appended to the record fragment
	    iv = record.fragment.getBytes(16);
	  }

	  s.cipherState.init = true;

	  // start cipher
	  var cipher = s.cipherState.cipher;
	  cipher.start({iv: iv});

	  // do decryption
	  cipher.update(record.fragment);
	  rval = cipher.finish(decrypt_aes_cbc_sha1_padding);

	  // even if decryption fails, keep going to minimize timing attacks

	  // decrypted data:
	  // first (len - 20) bytes = application data
	  // last 20 bytes          = MAC
	  var macLen = s.macLength;

	  // create a random MAC to check against should the mac length check fail
	  // Note: do this regardless of the failure to keep timing consistent
	  var mac = forge.random.getBytesSync(macLen);

	  // get fragment and mac
	  var len = cipher.output.length();
	  if(len >= macLen) {
	    record.fragment = cipher.output.getBytes(len - macLen);
	    mac = cipher.output.getBytes(macLen);
	  } else {
	    // bad data, but get bytes anyway to try to keep timing consistent
	    record.fragment = cipher.output.getBytes();
	  }
	  record.fragment = forge.util.createBuffer(record.fragment);
	  record.length = record.fragment.length();

	  // see if data integrity checks out, update sequence number
	  var mac2 = s.macFunction(s.macKey, s.sequenceNumber, record);
	  s.updateSequenceNumber();
	  rval = compareMacs(s.macKey, mac, mac2) && rval;
	  return rval;
	}

	/**
	 * Safely compare two MACs. This function will compare two MACs in a way
	 * that protects against timing attacks.
	 *
	 * TODO: Expose elsewhere as a utility API.
	 *
	 * See: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/
	 *
	 * @param key the MAC key to use.
	 * @param mac1 as a binary-encoded string of bytes.
	 * @param mac2 as a binary-encoded string of bytes.
	 *
	 * @return true if the MACs are the same, false if not.
	 */
	function compareMacs(key, mac1, mac2) {
	  var hmac = forge.hmac.create();

	  hmac.start('SHA1', key);
	  hmac.update(mac1);
	  mac1 = hmac.digest().getBytes();

	  hmac.start(null, null);
	  hmac.update(mac2);
	  mac2 = hmac.digest().getBytes();

	  return mac1 === mac2;
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'aesCipherSuites';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/aesCipherSuites',['require', 'module', './aes', './tls'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Debugging support for web applications.
	 *
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright 2008-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* DEBUG API */
	forge.debug = forge.debug || {};

	// Private storage for debugging.
	// Useful to expose data that is otherwise unviewable behind closures.
	// NOTE: remember that this can hold references to data and cause leaks!
	// format is "forge._debug.<modulename>.<dataname> = data"
	// Example:
	// (function() {
	//   var cat = 'forge.test.Test'; // debugging category
	//   var sState = {...}; // local state
	//   forge.debug.set(cat, 'sState', sState);
	// })();
	forge.debug.storage = {};

	/**
	 * Gets debug data. Omit name for all cat data  Omit name and cat for
	 * all data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to get (optional).
	 * @return object with requested debug data or undefined.
	 */
	forge.debug.get = function(cat, name) {
	  var rval;
	  if(typeof(cat) === 'undefined') {
	    rval = forge.debug.storage;
	  } else if(cat in forge.debug.storage) {
	    if(typeof(name) === 'undefined') {
	      rval = forge.debug.storage[cat];
	    } else {
	      rval = forge.debug.storage[cat][name];
	    }
	  }
	  return rval;
	};

	/**
	 * Sets debug data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to set.
	 * @param data data to set.
	 */
	forge.debug.set = function(cat, name, data) {
	  if(!(cat in forge.debug.storage)) {
	    forge.debug.storage[cat] = {};
	  }
	  forge.debug.storage[cat][name] = data;
	};

	/**
	 * Clears debug data. Omit name for all cat data. Omit name and cat for
	 * all data.
	 *
	 * @param cat name of debugging category.
	 * @param name name of data to clear or omit to clear entire category.
	 */
	forge.debug.clear = function(cat, name) {
	  if(typeof(cat) === 'undefined') {
	    forge.debug.storage = {};
	  } else if(cat in forge.debug.storage) {
	    if(typeof(name) === 'undefined') {
	      delete forge.debug.storage[cat];
	    } else {
	      delete forge.debug.storage[cat][name];
	    }
	  }
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'debug';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/debug',['require', 'module'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of RSA-KEM.
	 *
	 * @author Lautaro Cozzani Rodriguez
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014 Lautaro Cozzani <lautaro.cozzani@scytl.com>
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	forge.kem = forge.kem || {};

	var BigInteger = forge.jsbn.BigInteger;

	/**
	 * The API for the RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
	 */
	forge.kem.rsa = {};

	/**
	 * Creates an RSA KEM API object for generating a secret asymmetric key.
	 *
	 * The symmetric key may be generated via a call to 'encrypt', which will
	 * produce a ciphertext to be transmitted to the recipient and a key to be
	 * kept secret. The ciphertext is a parameter to be passed to 'decrypt' which
	 * will produce the same secret key for the recipient to use to decrypt a
	 * message that was encrypted with the secret key.
	 *
	 * @param kdf the KDF API to use (eg: new forge.kem.kdf1()).
	 * @param options the options to use.
	 *          [prng] a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 */
	forge.kem.rsa.create = function(kdf, options) {
	  options = options || {};
	  var prng = options.prng || forge.random;

	  var kem = {};

	  /**
	   * Generates a secret key and its encapsulation.
	   *
	   * @param publicKey the RSA public key to encrypt with.
	   * @param keyLength the length, in bytes, of the secret key to generate.
	   *
	   * @return an object with:
	   *   encapsulation: the ciphertext for generating the secret key, as a
	   *     binary-encoded string of bytes.
	   *   key: the secret key to use for encrypting a message.
	   */
	  kem.encrypt = function(publicKey, keyLength) {
	    // generate a random r where 1 > r > n
	    var byteLength = Math.ceil(publicKey.n.bitLength() / 8);
	    var r;
	    do {
	      r = new BigInteger(
	        forge.util.bytesToHex(prng.getBytesSync(byteLength)),
	        16).mod(publicKey.n);
	    } while(r.equals(BigInteger.ZERO));

	    // prepend r with zeros
	    r = forge.util.hexToBytes(r.toString(16));
	    var zeros = byteLength - r.length;
	    if(zeros > 0) {
	      r = forge.util.fillString(String.fromCharCode(0), zeros) + r;
	    }

	    // encrypt the random
	    var encapsulation = publicKey.encrypt(r, 'NONE');

	    // generate the secret key
	    var key = kdf.generate(r, keyLength);

	    return {encapsulation: encapsulation, key: key};
	  };

	  /**
	   * Decrypts an encapsulated secret key.
	   *
	   * @param privateKey the RSA private key to decrypt with.
	   * @param encapsulation the ciphertext for generating the secret key, as
	   *          a binary-encoded string of bytes.
	   * @param keyLength the length, in bytes, of the secret key to generate.
	   *
	   * @return the secret key as a binary-encoded string of bytes.
	   */
	  kem.decrypt = function(privateKey, encapsulation, keyLength) {
	    // decrypt the encapsulation and generate the secret key
	    var r = privateKey.decrypt(encapsulation, 'NONE');
	    return kdf.generate(r, keyLength);
	  };

	  return kem;
	};

	// TODO: add forge.kem.kdf.create('KDF1', {md: ..., ...}) API?

	/**
	 * Creates a key derivation API object that implements KDF1 per ISO 18033-2.
	 *
	 * @param md the hash API to use.
	 * @param [digestLength] an optional digest length that must be positive and
	 *          less than or equal to md.digestLength.
	 *
	 * @return a KDF1 API object.
	 */
	forge.kem.kdf1 = function(md, digestLength) {
	  _createKDF(this, md, 0, digestLength || md.digestLength);
	};

	/**
	 * Creates a key derivation API object that implements KDF2 per ISO 18033-2.
	 *
	 * @param md the hash API to use.
	 * @param [digestLength] an optional digest length that must be positive and
	 *          less than or equal to md.digestLength.
	 *
	 * @return a KDF2 API object.
	 */
	forge.kem.kdf2 = function(md, digestLength) {
	  _createKDF(this, md, 1, digestLength || md.digestLength);
	};

	/**
	 * Creates a KDF1 or KDF2 API object.
	 *
	 * @param md the hash API to use.
	 * @param counterStart the starting index for the counter.
	 * @param digestLength the digest length to use.
	 *
	 * @return the KDF API object.
	 */
	function _createKDF(kdf, md, counterStart, digestLength) {
	  /**
	   * Generate a key of the specified length.
	   *
	   * @param x the binary-encoded byte string to generate a key from.
	   * @param length the number of bytes to generate (the size of the key).
	   *
	   * @return the key as a binary-encoded string.
	   */
	  kdf.generate = function(x, length) {
	    var key = new forge.util.ByteBuffer();

	    // run counter from counterStart to ceil(length / Hash.len)
	    var k = Math.ceil(length / digestLength) + counterStart;

	    var c = new forge.util.ByteBuffer();
	    for(var i = counterStart; i < k; ++i) {
	      // I2OSP(i, 4): convert counter to an octet string of 4 octets
	      c.putInt32(i);

	      // digest 'x' and the counter and add the result to the key
	      md.start();
	      md.update(x + c.getBytes());
	      var hash = md.digest();
	      key.putBytes(hash.getBytes(digestLength));
	    }

	    // truncate to the correct key length
	    key.truncate(key.length() - length);
	    return key.getBytes();
	  };
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'kem';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/kem',['require', 'module', './util','./random','./jsbn'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Cross-browser support for logging in a web application.
	 *
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright (c) 2008-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	/* LOG API */
	forge.log = forge.log || {};

	/**
	 * Application logging system.
	 *
	 * Each logger level available as it's own function of the form:
	 *   forge.log.level(category, args...)
	 * The category is an arbitrary string, and the args are the same as
	 * Firebug's console.log API. By default the call will be output as:
	 *   'LEVEL [category] <args[0]>, args[1], ...'
	 * This enables proper % formatting via the first argument.
	 * Each category is enabled by default but can be enabled or disabled with
	 * the setCategoryEnabled() function.
	 */
	// list of known levels
	forge.log.levels = [
	  'none', 'error', 'warning', 'info', 'debug', 'verbose', 'max'];
	// info on the levels indexed by name:
	//   index: level index
	//   name: uppercased display name
	var sLevelInfo = {};
	// list of loggers
	var sLoggers = [];
	/**
	 * Standard console logger. If no console support is enabled this will
	 * remain null. Check before using.
	 */
	var sConsoleLogger = null;

	// logger flags
	/**
	 * Lock the level at the current value. Used in cases where user config may
	 * set the level such that only critical messages are seen but more verbose
	 * messages are needed for debugging or other purposes.
	 */
	forge.log.LEVEL_LOCKED = (1 << 1);
	/**
	 * Always call log function. By default, the logging system will check the
	 * message level against logger.level before calling the log function. This
	 * flag allows the function to do its own check.
	 */
	forge.log.NO_LEVEL_CHECK = (1 << 2);
	/**
	 * Perform message interpolation with the passed arguments. "%" style
	 * fields in log messages will be replaced by arguments as needed. Some
	 * loggers, such as Firebug, may do this automatically. The original log
	 * message will be available as 'message' and the interpolated version will
	 * be available as 'fullMessage'.
	 */
	forge.log.INTERPOLATE = (1 << 3);

	// setup each log level
	for(var i = 0; i < forge.log.levels.length; ++i) {
	  var level = forge.log.levels[i];
	  sLevelInfo[level] = {
	    index: i,
	    name: level.toUpperCase()
	  };
	}

	/**
	 * Message logger. Will dispatch a message to registered loggers as needed.
	 *
	 * @param message message object
	 */
	forge.log.logMessage = function(message) {
	  var messageLevelIndex = sLevelInfo[message.level].index;
	  for(var i = 0; i < sLoggers.length; ++i) {
	    var logger = sLoggers[i];
	    if(logger.flags & forge.log.NO_LEVEL_CHECK) {
	      logger.f(message);
	    } else {
	      // get logger level
	      var loggerLevelIndex = sLevelInfo[logger.level].index;
	      // check level
	      if(messageLevelIndex <= loggerLevelIndex) {
	        // message critical enough, call logger
	        logger.f(logger, message);
	      }
	    }
	  }
	};

	/**
	 * Sets the 'standard' key on a message object to:
	 * "LEVEL [category] " + message
	 *
	 * @param message a message log object
	 */
	forge.log.prepareStandard = function(message) {
	  if(!('standard' in message)) {
	    message.standard =
	      sLevelInfo[message.level].name +
	      //' ' + +message.timestamp +
	      ' [' + message.category + '] ' +
	      message.message;
	  }
	};

	/**
	 * Sets the 'full' key on a message object to the original message
	 * interpolated via % formatting with the message arguments.
	 *
	 * @param message a message log object.
	 */
	forge.log.prepareFull = function(message) {
	  if(!('full' in message)) {
	    // copy args and insert message at the front
	    var args = [message.message];
	    args = args.concat([] || message['arguments']);
	    // format the message
	    message.full = forge.util.format.apply(this, args);
	  }
	};

	/**
	 * Applies both preparseStandard() and prepareFull() to a message object and
	 * store result in 'standardFull'.
	 *
	 * @param message a message log object.
	 */
	forge.log.prepareStandardFull = function(message) {
	  if(!('standardFull' in message)) {
	    // FIXME implement 'standardFull' logging
	    forge.log.prepareStandard(message);
	    message.standardFull = message.standard;
	  }
	};

	// create log level functions
	if(true) {
	  // levels for which we want functions
	  var levels = ['error', 'warning', 'info', 'debug', 'verbose'];
	  for(var i = 0; i < levels.length; ++i) {
	    // wrap in a function to ensure proper level var is passed
	    (function(level) {
	      // create function for this level
	      forge.log[level] = function(category, message/*, args...*/) {
	        // convert arguments to real array, remove category and message
	        var args = Array.prototype.slice.call(arguments).slice(2);
	        // create message object
	        // Note: interpolation and standard formatting is done lazily
	        var msg = {
	          timestamp: new Date(),
	          level: level,
	          category: category,
	          message: message,
	          'arguments': args
	          /*standard*/
	          /*full*/
	          /*fullMessage*/
	        };
	        // process this message
	        forge.log.logMessage(msg);
	      };
	    })(levels[i]);
	  }
	}

	/**
	 * Creates a new logger with specified custom logging function.
	 *
	 * The logging function has a signature of:
	 *   function(logger, message)
	 * logger: current logger
	 * message: object:
	 *   level: level id
	 *   category: category
	 *   message: string message
	 *   arguments: Array of extra arguments
	 *   fullMessage: interpolated message and arguments if INTERPOLATE flag set
	 *
	 * @param logFunction a logging function which takes a log message object
	 *          as a parameter.
	 *
	 * @return a logger object.
	 */
	forge.log.makeLogger = function(logFunction) {
	  var logger = {
	    flags: 0,
	    f: logFunction
	  };
	  forge.log.setLevel(logger, 'none');
	  return logger;
	};

	/**
	 * Sets the current log level on a logger.
	 *
	 * @param logger the target logger.
	 * @param level the new maximum log level as a string.
	 *
	 * @return true if set, false if not.
	 */
	forge.log.setLevel = function(logger, level) {
	  var rval = false;
	  if(logger && !(logger.flags & forge.log.LEVEL_LOCKED)) {
	    for(var i = 0; i < forge.log.levels.length; ++i) {
	      var aValidLevel = forge.log.levels[i];
	      if(level == aValidLevel) {
	        // set level
	        logger.level = level;
	        rval = true;
	        break;
	      }
	    }
	  }

	  return rval;
	};

	/**
	 * Locks the log level at its current value.
	 *
	 * @param logger the target logger.
	 * @param lock boolean lock value, default to true.
	 */
	forge.log.lock = function(logger, lock) {
	  if(typeof lock === 'undefined' || lock) {
	    logger.flags |= forge.log.LEVEL_LOCKED;
	  } else {
	    logger.flags &= ~forge.log.LEVEL_LOCKED;
	  }
	};

	/**
	 * Adds a logger.
	 *
	 * @param logger the logger object.
	 */
	forge.log.addLogger = function(logger) {
	  sLoggers.push(logger);
	};

	// setup the console logger if possible, else create fake console.log
	if(typeof(console) !== 'undefined' && 'log' in console) {
	  var logger;
	  if(console.error && console.warn && console.info && console.debug) {
	    // looks like Firebug-style logging is available
	    // level handlers map
	    var levelHandlers = {
	      error: console.error,
	      warning: console.warn,
	      info: console.info,
	      debug: console.debug,
	      verbose: console.debug
	    };
	    var f = function(logger, message) {
	      forge.log.prepareStandard(message);
	      var handler = levelHandlers[message.level];
	      // prepend standard message and concat args
	      var args = [message.standard];
	      args = args.concat(message['arguments'].slice());
	      // apply to low-level console function
	      handler.apply(console, args);
	    };
	    logger = forge.log.makeLogger(f);
	  } else {
	    // only appear to have basic console.log
	    var f = function(logger, message) {
	      forge.log.prepareStandardFull(message);
	      console.log(message.standardFull);
	    };
	    logger = forge.log.makeLogger(f);
	  }
	  forge.log.setLevel(logger, 'debug');
	  forge.log.addLogger(logger);
	  sConsoleLogger = logger;
	} else {
	  // define fake console.log to avoid potential script errors on
	  // browsers that do not have console logging
	  console = {
	    log: function() {}
	  };
	}

	/*
	 * Check for logging control query vars.
	 *
	 * console.level=<level-name>
	 * Set's the console log level by name.  Useful to override defaults and
	 * allow more verbose logging before a user config is loaded.
	 *
	 * console.lock=<true|false>
	 * Lock the console log level at whatever level it is set at.  This is run
	 * after console.level is processed.  Useful to force a level of verbosity
	 * that could otherwise be limited by a user config.
	 */
	if(sConsoleLogger !== null) {
	  var query = forge.util.getQueryVariables();
	  if('console.level' in query) {
	    // set with last value
	    forge.log.setLevel(
	      sConsoleLogger, query['console.level'].slice(-1)[0]);
	  }
	  if('console.lock' in query) {
	    // set with last value
	    var lock = query['console.lock'].slice(-1)[0];
	    if(lock == 'true') {
	      forge.log.lock(sConsoleLogger);
	    }
	  }
	}

	// provide public access to console logger
	forge.log.consoleLogger = sConsoleLogger;

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'log';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/log',['require', 'module', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Javascript implementation of PKCS#7 v1.5.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 *
	 * Currently this implementation only supports ContentType of EnvelopedData,
	 * EncryptedData, or SignedData at the root level. The top level elements may
	 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
	 * nesting is not (yet) supported.
	 *
	 * The Forge validators for PKCS #7's ASN.1 structures are available from
	 * a separate file pkcs7asn1.js, since those are referenced from other
	 * PKCS standards like PKCS #12.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// shortcut for ASN.1 API
	var asn1 = forge.asn1;

	// shortcut for PKCS#7 API
	var p7 = forge.pkcs7 = forge.pkcs7 || {};

	/**
	 * Converts a PKCS#7 message from PEM format.
	 *
	 * @param pem the PEM-formatted PKCS#7 message.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromPem = function(pem) {
	  var msg = forge.pem.decode(pem)[0];

	  if(msg.type !== 'PKCS7') {
	    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' +
	      'header type is not "PKCS#7".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return p7.messageFromAsn1(obj);
	};

	/**
	 * Converts a PKCS#7 message to PEM format.
	 *
	 * @param msg The PKCS#7 message object
	 * @param maxline The maximum characters per line, defaults to 64.
	 *
	 * @return The PEM-formatted PKCS#7 message.
	 */
	p7.messageToPem = function(msg, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var pemObj = {
	    type: 'PKCS7',
	    body: asn1.toDer(msg.toAsn1()).getBytes()
	  };
	  return forge.pem.encode(pemObj, {maxline: maxline});
	};

	/**
	 * Converts a PKCS#7 message from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a ContentInfo.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromAsn1 = function(obj) {
	  // validate root level ContentInfo and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors))
	  {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not an PKCS#7 ContentInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var contentType = asn1.derToOid(capture.contentType);
	  var msg;

	  switch(contentType) {
	    case forge.pki.oids.envelopedData:
	      msg = p7.createEnvelopedData();
	      break;

	    case forge.pki.oids.encryptedData:
	      msg = p7.createEncryptedData();
	      break;

	    case forge.pki.oids.signedData:
	      msg = p7.createSignedData();
	      break;

	    default:
	      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' +
	        contentType + ' is not (yet) supported.');
	  }

	  msg.fromAsn1(capture.content.value[0]);
	  return msg;
	};

	p7.createSignedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.signedData,
	    version: 1,
	    certificates: [],
	    crls: [],
	    // TODO: add json-formatted signer stuff here?
	    signers: [],
	    // populated during sign()
	    digestAlgorithmIdentifiers: [],
	    contentInfo: null,
	    signerInfos: [],

	    fromAsn1: function(obj) {
	      // validate SignedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
	      msg.certificates = [];
	      msg.crls = [];
	      msg.digestAlgorithmIdentifiers = [];
	      msg.contentInfo = null;
	      msg.signerInfos = [];

	      var certs = msg.rawCapture.certificates.value;
	      for(var i = 0; i < certs.length; ++i) {
	        msg.certificates.push(forge.pki.certificateFromAsn1(certs[i]));
	      }

	      // TODO: parse crls
	    },

	    toAsn1: function() {
	      // degenerate case with no content
	      if(!msg.contentInfo) {
	        msg.sign();
	      }

	      var certs = [];
	      for(var i = 0; i < msg.certificates.length; ++i) {
	        certs.push(forge.pki.certificateToAsn1(msg.certificates[i]));
	      }

	      var crls = [];
	      // TODO: implement CRLs

	      // [0] SignedData
	      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // Version
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	            asn1.integerToDer(msg.version).getBytes()),
	          // DigestAlgorithmIdentifiers
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	            msg.digestAlgorithmIdentifiers),
	          // ContentInfo
	          msg.contentInfo
	        ])
	      ]);
	      if(certs.length > 0) {
	        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
	      }
	      if(crls.length > 0) {
	        // [1] IMPLICIT CertificateRevocationLists OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
	      }
	      // SignerInfos
	      signedData.value[0].value.push(
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	          msg.signerInfos));

	      // ContentInfo
	      return asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // ContentType
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(msg.type).getBytes()),
	          // [0] SignedData
	          signedData
	        ]);
	    },

	    /**
	     * Add (another) entity to list of signers.
	     *
	     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
	     * they must include at least two attributes: content type and
	     * message digest. The message digest attribute value will be
	     * auto-calculated during signing and will be ignored if provided.
	     *
	     * Here's an example of providing these two attributes:
	     *
	     * forge.pkcs7.createSignedData();
	     * p7.addSigner({
	     *   issuer: cert.issuer.attributes,
	     *   serialNumber: cert.serialNumber,
	     *   key: privateKey,
	     *   digestAlgorithm: forge.pki.oids.sha1,
	     *   authenticatedAttributes: [{
	     *     type: forge.pki.oids.contentType,
	     *     value: forge.pki.oids.data
	     *   }, {
	     *     type: forge.pki.oids.messageDigest
	     *   }]
	     * });
	     *
	     * TODO: Support [subjectKeyIdentifier] as signer's ID.
	     *
	     * @param signer the signer information:
	     *          key the signer's private key.
	     *          [certificate] a certificate containing the public key
	     *            associated with the signer's private key; use this option as
	     *            an alternative to specifying signer.issuer and
	     *            signer.serialNumber.
	     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
	     *          [serialNumber] the signer's certificate's serial number in
	     *           hexadecimal (eg: cert.serialNumber).
	     *          [digestAlgorithm] the message digest OID, as a string, to use
	     *            (eg: forge.pki.oids.sha1).
	     *          [authenticatedAttributes] an optional array of attributes
	     *            to also sign along with the content.
	     */
	    addSigner: function(signer) {
	      var issuer = signer.issuer;
	      var serialNumber = signer.serialNumber;
	      if(signer.certificate) {
	        var cert = signer.certificate;
	        if(typeof cert === 'string') {
	          cert = forge.pki.certificateFromPem(cert);
	        }
	        issuer = cert.issuer.attributes;
	        serialNumber = cert.serialNumber;
	      }
	      var key = signer.key;
	      if(!key) {
	        throw new Error(
	          'Could not add PKCS#7 signer; no private key specified.');
	      }
	      if(typeof key === 'string') {
	        key = forge.pki.privateKeyFromPem(key);
	      }

	      // ensure OID known for digest algorithm
	      var digestAlgorithm = signer.digestAlgorithm || forge.pki.oids.sha1;
	      switch(digestAlgorithm) {
	      case forge.pki.oids.sha1:
	      case forge.pki.oids.sha256:
	      case forge.pki.oids.sha384:
	      case forge.pki.oids.sha512:
	      case forge.pki.oids.md5:
	        break;
	      default:
	        throw new Error(
	          'Could not add PKCS#7 signer; unknown message digest algorithm: ' +
	          digestAlgorithm);
	      }

	      // if authenticatedAttributes is present, then the attributes
	      // must contain at least PKCS #9 content-type and message-digest
	      var authenticatedAttributes = signer.authenticatedAttributes || [];
	      if(authenticatedAttributes.length > 0) {
	        var contentType = false;
	        var messageDigest = false;
	        for(var i = 0; i < authenticatedAttributes.length; ++i) {
	          var attr = authenticatedAttributes[i];
	          if(!contentType && attr.type === forge.pki.oids.contentType) {
	            contentType = true;
	            if(messageDigest) {
	              break;
	            }
	            continue;
	          }
	          if(!messageDigest && attr.type === forge.pki.oids.messageDigest) {
	            messageDigest = true;
	            if(contentType) {
	              break;
	            }
	            continue;
	          }
	        }

	        if(!contentType || !messageDigest) {
	          throw new Error('Invalid signer.authenticatedAttributes. If ' +
	            'signer.authenticatedAttributes is specified, then it must ' +
	            'contain at least two attributes, PKCS #9 content-type and ' +
	            'PKCS #9 message-digest.');
	        }
	      }

	      msg.signers.push({
	        key: key,
	        version: 1,
	        issuer: issuer,
	        serialNumber: serialNumber,
	        digestAlgorithm: digestAlgorithm,
	        signatureAlgorithm: forge.pki.oids.rsaEncryption,
	        signature: null,
	        authenticatedAttributes: authenticatedAttributes,
	        unauthenticatedAttributes: []
	      });
	    },

	    /**
	     * Signs the content.
	     */
	    sign: function() {
	      // auto-generate content info
	      if(typeof msg.content !== 'object' || msg.contentInfo === null) {
	        // use Data ContentInfo
	        msg.contentInfo = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // ContentType
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(forge.pki.oids.data).getBytes())
	          ]);

	        // add actual content, if present
	        if('content' in msg) {
	          var content;
	          if(msg.content instanceof forge.util.ByteBuffer) {
	            content = msg.content.bytes();
	          } else if(typeof msg.content === 'string') {
	            content = forge.util.encodeUtf8(msg.content);
	          }

	          msg.contentInfo.value.push(
	            // [0] EXPLICIT content
	            asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	              asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	                content)
	            ]));
	        }
	      }

	      // no signers, return early (degenerate case for certificate container)
	      if(msg.signers.length === 0) {
	        return;
	      }

	      // generate digest algorithm identifiers
	      var mds = addDigestAlgorithmIds();

	      // generate signerInfos
	      addSignerInfos(mds);
	    },

	    verify: function() {
	      throw new Error('PKCS#7 signature verification not yet implemented.');
	    },

	    /**
	     * Add a certificate.
	     *
	     * @param cert the certificate to add.
	     */
	    addCertificate: function(cert) {
	      // convert from PEM
	      if(typeof cert === 'string') {
	        cert = forge.pki.certificateFromPem(cert);
	      }
	      msg.certificates.push(cert);
	    },

	    /**
	     * Add a certificate revokation list.
	     *
	     * @param crl the certificate revokation list to add.
	     */
	    addCertificateRevokationList: function(crl) {
	      throw new Error('PKCS#7 CRL support not yet implemented.');
	    }
	  };
	  return msg;

	  function addDigestAlgorithmIds() {
	    var mds = {};

	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];
	      var oid = signer.digestAlgorithm;
	      if(!(oid in mds)) {
	        // content digest
	        mds[oid] = forge.md[forge.pki.oids[oid]].create();
	      }
	      if(signer.authenticatedAttributes.length === 0) {
	        // no custom attributes to digest; use content message digest
	        signer.md = mds[oid];
	      } else {
	        // custom attributes to be digested; use own message digest
	        // TODO: optimize to just copy message digest state if that
	        // feature is ever supported with message digests
	        signer.md = forge.md[forge.pki.oids[oid]].create();
	      }
	    }

	    // add unique digest algorithm identifiers
	    msg.digestAlgorithmIdentifiers = [];
	    for(var oid in mds) {
	      msg.digestAlgorithmIdentifiers.push(
	        // AlgorithmIdentifier
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // algorithm
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(oid).getBytes()),
	          // parameters (null)
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ]));
	    }

	    return mds;
	  }

	  function addSignerInfos(mds) {
	    // Note: ContentInfo is a SEQUENCE with 2 values, second value is
	    // the content field and is optional for a ContentInfo but required here
	    // since signers are present
	    if(msg.contentInfo.value.length < 2) {
	      throw new Error(
	        'Could not sign PKCS#7 message; there is no content to sign.');
	    }

	    // get ContentInfo content type
	    var contentType = asn1.derToOid(msg.contentInfo.value[0].value);

	    // get ContentInfo content
	    var content = msg.contentInfo.value[1];
	    // skip [0] EXPLICIT content wrapper
	    content = content.value[0];

	    // serialize content
	    var bytes = asn1.toDer(content);

	    // skip identifier and length per RFC 2315 9.3
	    // skip identifier (1 byte)
	    bytes.getByte();
	    // read and discard length bytes
	    asn1.getBerValueLength(bytes);
	    bytes = bytes.getBytes();

	    // digest content DER value bytes
	    for(var oid in mds) {
	      mds[oid].start().update(bytes);
	    }

	    // sign content
	    var signingTime = new Date();
	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];

	      if(signer.authenticatedAttributes.length === 0) {
	        // if ContentInfo content type is not "Data", then
	        // authenticatedAttributes must be present per RFC 2315
	        if(contentType !== forge.pki.oids.data) {
	          throw new Error(
	            'Invalid signer; authenticatedAttributes must be present ' +
	            'when the ContentInfo content type is not PKCS#7 Data.');
	        }
	      } else {
	        // process authenticated attributes
	        // [0] IMPLICIT
	        signer.authenticatedAttributesAsn1 = asn1.create(
	          asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

	        // per RFC 2315, attributes are to be digested using a SET container
	        // not the above [0] IMPLICIT container
	        var attrsAsn1 = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);

	        for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
	          var attr = signer.authenticatedAttributes[ai];
	          if(attr.type === forge.pki.oids.messageDigest) {
	            // use content message digest as value
	            attr.value = mds[signer.digestAlgorithm].digest();
	          } else if(attr.type === forge.pki.oids.signingTime) {
	            // auto-populate signing time if not already set
	            if(!attr.value) {
	              attr.value = signingTime;
	            }
	          }

	          // convert to ASN.1 and push onto Attributes SET (for signing) and
	          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
	          // TODO: optimize away duplication
	          attrsAsn1.value.push(_attributeToAsn1(attr));
	          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
	        }

	        // DER-serialize and digest SET OF attributes only
	        bytes = asn1.toDer(attrsAsn1).getBytes();
	        signer.md.start().update(bytes);
	      }

	      // sign digest
	      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');
	    }

	    // add signer info
	    msg.signerInfos = _signersToAsn1(msg.signers);
	  }
	};

	/**
	 * Creates an empty PKCS#7 message of type EncryptedData.
	 *
	 * @return the message.
	 */
	p7.createEncryptedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.encryptedData,
	    version: 0,
	    encryptedContent: {
	      algorithm: forge.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EncryptedData content block (in ASN.1 format)
	     *
	     * @param obj The ASN.1 representation of the EncryptedData content block
	     */
	    fromAsn1: function(obj) {
	      // Validate EncryptedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
	    },

	    /**
	     * Decrypt encrypted content
	     *
	     * @param key The (symmetric) key as a byte buffer
	     */
	    decrypt: function(key) {
	      if(key !== undefined) {
	        msg.encryptedContent.key = key;
	      }
	      _decryptContent(msg);
	    }
	  };
	  return msg;
	};

	/**
	 * Creates an empty PKCS#7 message of type EnvelopedData.
	 *
	 * @return the message.
	 */
	p7.createEnvelopedData = function() {
	  var msg = null;
	  msg = {
	    type: forge.pki.oids.envelopedData,
	    version: 0,
	    recipients: [],
	    encryptedContent: {
	      algorithm: forge.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EnvelopedData content block (in ASN.1 format)
	     *
	     * @param obj the ASN.1 representation of the EnvelopedData content block.
	     */
	    fromAsn1: function(obj) {
	      // validate EnvelopedData content block and capture data
	      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
	      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
	    },

	    toAsn1: function() {
	      // ContentInfo
	      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // ContentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(msg.type).getBytes()),
	        // [0] EnvelopedData
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // Version
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	              asn1.integerToDer(msg.version).getBytes()),
	            // RecipientInfos
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	              _recipientsToAsn1(msg.recipients)),
	            // EncryptedContentInfo
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true,
	              _encryptedContentToAsn1(msg.encryptedContent))
	          ])
	        ])
	      ]);
	    },

	    /**
	     * Find recipient by X.509 certificate's issuer.
	     *
	     * @param cert the certificate with the issuer to look for.
	     *
	     * @return the recipient object.
	     */
	    findRecipient: function(cert) {
	      var sAttr = cert.issuer.attributes;

	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var r = msg.recipients[i];
	        var rAttr = r.issuer;

	        if(r.serialNumber !== cert.serialNumber) {
	          continue;
	        }

	        if(rAttr.length !== sAttr.length) {
	          continue;
	        }

	        var match = true;
	        for(var j = 0; j < sAttr.length; ++j) {
	          if(rAttr[j].type !== sAttr[j].type ||
	            rAttr[j].value !== sAttr[j].value) {
	            match = false;
	            break;
	          }
	        }

	        if(match) {
	          return r;
	        }
	      }

	      return null;
	    },

	    /**
	     * Decrypt enveloped content
	     *
	     * @param recipient The recipient object related to the private key
	     * @param privKey The (RSA) private key object
	     */
	    decrypt: function(recipient, privKey) {
	      if(msg.encryptedContent.key === undefined && recipient !== undefined &&
	        privKey !== undefined) {
	        switch(recipient.encryptedContent.algorithm) {
	          case forge.pki.oids.rsaEncryption:
	          case forge.pki.oids.desCBC:
	            var key = privKey.decrypt(recipient.encryptedContent.content);
	            msg.encryptedContent.key = forge.util.createBuffer(key);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, ' +
	              'OID ' + recipient.encryptedContent.algorithm);
	        }
	      }

	      _decryptContent(msg);
	    },

	    /**
	     * Add (another) entity to list of recipients.
	     *
	     * @param cert The certificate of the entity to add.
	     */
	    addRecipient: function(cert) {
	      msg.recipients.push({
	        version: 0,
	        issuer: cert.issuer.attributes,
	        serialNumber: cert.serialNumber,
	        encryptedContent: {
	          // We simply assume rsaEncryption here, since forge.pki only
	          // supports RSA so far.  If the PKI module supports other
	          // ciphers one day, we need to modify this one as well.
	          algorithm: forge.pki.oids.rsaEncryption,
	          key: cert.publicKey
	        }
	      });
	    },

	    /**
	     * Encrypt enveloped content.
	     *
	     * This function supports two optional arguments, cipher and key, which
	     * can be used to influence symmetric encryption.  Unless cipher is
	     * provided, the cipher specified in encryptedContent.algorithm is used
	     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
	     * is (re-)used.  If that one's not set, a random key will be generated
	     * automatically.
	     *
	     * @param [key] The key to be used for symmetric encryption.
	     * @param [cipher] The OID of the symmetric cipher to use.
	     */
	    encrypt: function(key, cipher) {
	      // Part 1: Symmetric encryption
	      if(msg.encryptedContent.content === undefined) {
	        cipher = cipher || msg.encryptedContent.algorithm;
	        key = key || msg.encryptedContent.key;

	        var keyLen, ivLen, ciphFn;
	        switch(cipher) {
	          case forge.pki.oids['aes128-CBC']:
	            keyLen = 16;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['aes192-CBC']:
	            keyLen = 24;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['aes256-CBC']:
	            keyLen = 32;
	            ivLen = 16;
	            ciphFn = forge.aes.createEncryptionCipher;
	            break;

	          case forge.pki.oids['des-EDE3-CBC']:
	            keyLen = 24;
	            ivLen = 8;
	            ciphFn = forge.des.createEncryptionCipher;
	            break;

	          default:
	            throw new Error('Unsupported symmetric cipher, OID ' + cipher);
	        }

	        if(key === undefined) {
	          key = forge.util.createBuffer(forge.random.getBytes(keyLen));
	        } else if(key.length() != keyLen) {
	          throw new Error('Symmetric key has wrong length; ' +
	            'got ' + key.length() + ' bytes, expected ' + keyLen + '.');
	        }

	        // Keep a copy of the key & IV in the object, so the caller can
	        // use it for whatever reason.
	        msg.encryptedContent.algorithm = cipher;
	        msg.encryptedContent.key = key;
	        msg.encryptedContent.parameter = forge.util.createBuffer(
	          forge.random.getBytes(ivLen));

	        var ciph = ciphFn(key);
	        ciph.start(msg.encryptedContent.parameter.copy());
	        ciph.update(msg.content);

	        // The finish function does PKCS#7 padding by default, therefore
	        // no action required by us.
	        if(!ciph.finish()) {
	          throw new Error('Symmetric encryption failed.');
	        }

	        msg.encryptedContent.content = ciph.output;
	      }

	      // Part 2: asymmetric encryption for each recipient
	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var recipient = msg.recipients[i];

	        // Nothing to do, encryption already done.
	        if(recipient.encryptedContent.content !== undefined) {
	          continue;
	        }

	        switch(recipient.encryptedContent.algorithm) {
	          case forge.pki.oids.rsaEncryption:
	            recipient.encryptedContent.content =
	              recipient.encryptedContent.key.encrypt(
	                msg.encryptedContent.key.data);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, OID ' +
	              recipient.encryptedContent.algorithm);
	        }
	      }
	    }
	  };
	  return msg;
	};

	/**
	 * Converts a single recipient from an ASN.1 object.
	 *
	 * @param obj the ASN.1 RecipientInfo.
	 *
	 * @return the recipient object.
	 */
	function _recipientFromAsn1(obj) {
	  // validate EnvelopedData content block and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' +
	      'ASN.1 object is not an PKCS#7 RecipientInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  return {
	    version: capture.version.charCodeAt(0),
	    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
	    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
	    encryptedContent: {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: capture.encParameter.value,
	      content: capture.encKey
	    }
	  };
	}

	/**
	 * Converts a single recipient object to an ASN.1 object.
	 *
	 * @param obj the recipient object.
	 *
	 * @return the ASN.1 RecipientInfo.
	 */
	function _recipientToAsn1(obj) {
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // Version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // IssuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Name
	      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // Serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge.util.hexToBytes(obj.serialNumber))
	    ]),
	    // KeyEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),
	      // Parameter, force NULL, only RSA supported for now.
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // EncryptedKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      obj.encryptedContent.content)
	  ]);
	}

	/**
	 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
	 *
	 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
	 *
	 * @return an array of recipient objects.
	 */
	function _recipientsFromAsn1(infos) {
	  var ret = [];
	  for(var i = 0; i < infos.length; ++i) {
	    ret.push(_recipientFromAsn1(infos[i]));
	  }
	  return ret;
	}

	/**
	 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
	 *
	 * @param recipients an array of recipientInfo objects.
	 *
	 * @return an array of ASN.1 RecipientInfos.
	 */
	function _recipientsToAsn1(recipients) {
	  var ret = [];
	  for(var i = 0; i < recipients.length; ++i) {
	    ret.push(_recipientToAsn1(recipients[i]));
	  }
	  return ret;
	}

	/**
	 * Converts a single signer from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a SignerInfo.
	 *
	 * @return the signer object.
	 */
	function _signerFromAsn1(obj) {
	  // validate EnvelopedData content block and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.signerInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 SignerInfo. ' +
	      'ASN.1 object is not an PKCS#7 SignerInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var rval = {
	    version: capture.version.charCodeAt(0),
	    issuer: forge.pki.RDNAttributesAsArray(capture.issuer),
	    serialNumber: forge.util.createBuffer(capture.serial).toHex(),
	    digestAlgorithm: asn1.derToOid(capture.digestAlgorithm),
	    signatureAlgorithm: asn1.derToOid(capture.signatureAlgorithm),
	    signature: capture.signature,
	    authenticatedAttributes: [],
	    unauthenticatedAttributes: []
	  };

	  // TODO: convert attributes
	  var authenticatedAttributes = capture.authenticatedAttributes || [];
	  var unauthenticatedAttributes = capture.unauthenticatedAttributes || [];

	  return rval;
	}

	/**
	 * Converts a single signerInfo object to an ASN.1 object.
	 *
	 * @param obj the signerInfo object.
	 *
	 * @return the ASN.1 representation of a SignerInfo.
	 */
	function _signerToAsn1(obj) {
	  // SignerInfo
	  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // issuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // name
	      forge.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge.util.hexToBytes(obj.serialNumber))
	    ]),
	    // digestAlgorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.digestAlgorithm).getBytes()),
	      // parameters (null)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ])
	  ]);

	  // authenticatedAttributes (OPTIONAL)
	  if(obj.authenticatedAttributesAsn1) {
	    // add ASN.1 previously generated during signing
	    rval.value.push(obj.authenticatedAttributesAsn1);
	  }

	  // digestEncryptionAlgorithm
	  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // algorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(obj.signatureAlgorithm).getBytes()),
	    // parameters (null)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	  ]));

	  // encryptedDigest
	  rval.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));

	  // unauthenticatedAttributes (OPTIONAL)
	  if(obj.unauthenticatedAttributes.length > 0) {
	    // [1] IMPLICIT
	    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
	    for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
	      var attr = obj.unauthenticatedAttributes[i];
	      attrsAsn1.values.push(_attributeToAsn1(attr));
	    }
	    rval.value.push(attrsAsn1);
	  }

	  return rval;
	}

	/**
	 * Map a set of SignerInfo ASN.1 objects to an array of signer objects.
	 *
	 * @param signerInfoAsn1s an array of ASN.1 SignerInfos (i.e. SET OF).
	 *
	 * @return an array of signers objects.
	 */
	function _signersFromAsn1(signerInfoAsn1s) {
	  var ret = [];
	  for(var i = 0; i < signerInfoAsn1s.length; ++i) {
	    ret.push(_signerFromAsn1(signerInfoAsn1s[i]));
	  }
	  return ret;
	}

	/**
	 * Map an array of signer objects to ASN.1 objects.
	 *
	 * @param signers an array of signer objects.
	 *
	 * @return an array of ASN.1 SignerInfos.
	 */
	function _signersToAsn1(signers) {
	  var ret = [];
	  for(var i = 0; i < signers.length; ++i) {
	    ret.push(_signerToAsn1(signers[i]));
	  }
	  return ret;
	}

	/**
	 * Convert an attribute object to an ASN.1 Attribute.
	 *
	 * @param attr the attribute object.
	 *
	 * @return the ASN.1 Attribute.
	 */
	function _attributeToAsn1(attr) {
	  var value;

	  // TODO: generalize to support more attributes
	  if(attr.type === forge.pki.oids.contentType) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.value).getBytes());
	  } else if(attr.type === forge.pki.oids.messageDigest) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      attr.value.bytes());
	  } else if(attr.type === forge.pki.oids.signingTime) {
	    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
	      (inclusive) MUST be encoded as UTCTime. Any dates with year values
	      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
	      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
	      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
	      number of seconds is zero.  Midnight (GMT) must be represented as
	      "YYMMDD000000Z". */
	    // TODO: make these module-level constants
	    var jan_1_1950 = new Date('Jan 1, 1950 00:00:00Z');
	    var jan_1_2050 = new Date('Jan 1, 2050 00:00:00Z');
	    var date = attr.value;
	    if(typeof date === 'string') {
	      // try to parse date
	      var timestamp = Date.parse(date);
	      if(!isNaN(timestamp)) {
	        date = new Date(timestamp);
	      } else if(date.length === 13) {
	        // YYMMDDHHMMSSZ (13 chars for UTCTime)
	        date = asn1.utcTimeToDate(date);
	      } else {
	        // assume generalized time
	        date = asn1.generalizedTimeToDate(date);
	      }
	    }

	    if(date >= jan_1_1950 && date < jan_1_2050) {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(date));
	    } else {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,
	        asn1.dateToGeneralizedTime(date));
	    }
	  }

	  // TODO: expose as common API call
	  // create a RelativeDistinguishedName set
	  // each value in the set is an AttributeTypeAndValue first
	  // containing the type (an OID) and second the value
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // AttributeType
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.type).getBytes()),
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	      // AttributeValue
	      value
	    ])
	  ]);
	}

	/**
	 * Map messages encrypted content to ASN.1 objects.
	 *
	 * @param ec The encryptedContent object of the message.
	 *
	 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
	 */
	function _encryptedContentToAsn1(ec) {
	  return [
	    // ContentType, always Data for the moment
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(forge.pki.oids.data).getBytes()),
	    // ContentEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(ec.algorithm).getBytes()),
	      // Parameters (IV)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	        ec.parameter.getBytes())
	    ]),
	    // [0] EncryptedContent
	    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	        ec.content.getBytes())
	    ])
	  ];
	}

	/**
	 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
	 *
	 * This function reads the "common part" of the PKCS#7 content blocks
	 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
	 * encrypted content block.
	 *
	 * The result of the ASN.1 validate and capture process is returned
	 * to allow the caller to extract further data, e.g. the list of recipients
	 * in case of a EnvelopedData object.
	 *
	 * @param msg the PKCS#7 object to read the data to.
	 * @param obj the ASN.1 representation of the content block.
	 * @param validator the ASN.1 structure validator object to use.
	 *
	 * @return the value map captured by validator object.
	 */
	function _fromAsn1(msg, obj, validator) {
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, validator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not a supported PKCS#7 message.');
	    error.errors = error;
	    throw error;
	  }

	  // Check contentType, so far we only support (raw) Data.
	  var contentType = asn1.derToOid(capture.contentType);
	  if(contentType !== forge.pki.oids.data) {
	    throw new Error('Unsupported PKCS#7 message. ' +
	      'Only wrapped ContentType Data supported.');
	  }

	  if(capture.encryptedContent) {
	    var content = '';
	    if(forge.util.isArray(capture.encryptedContent)) {
	      for(var i = 0; i < capture.encryptedContent.length; ++i) {
	        if(capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting encrypted ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.encryptedContent[i].value;
	      }
	    } else {
	      content = capture.encryptedContent;
	    }
	    msg.encryptedContent = {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: forge.util.createBuffer(capture.encParameter.value),
	      content: forge.util.createBuffer(content)
	    };
	  }

	  if(capture.content) {
	    var content = '';
	    if(forge.util.isArray(capture.content)) {
	      for(var i = 0; i < capture.content.length; ++i) {
	        if(capture.content[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.content[i].value;
	      }
	    } else {
	      content = capture.content;
	    }
	    msg.content = forge.util.createBuffer(content);
	  }

	  msg.version = capture.version.charCodeAt(0);
	  msg.rawCapture = capture;

	  return capture;
	}

	/**
	 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
	 *
	 * Decryption is skipped in case the PKCS#7 message object already has a
	 * (decrypted) content attribute.  The algorithm, key and cipher parameters
	 * (probably the iv) are taken from the encryptedContent attribute of the
	 * message object.
	 *
	 * @param The PKCS#7 message object.
	 */
	function _decryptContent(msg) {
	  if(msg.encryptedContent.key === undefined) {
	    throw new Error('Symmetric key not available.');
	  }

	  if(msg.content === undefined) {
	    var ciph;

	    switch(msg.encryptedContent.algorithm) {
	      case forge.pki.oids['aes128-CBC']:
	      case forge.pki.oids['aes192-CBC']:
	      case forge.pki.oids['aes256-CBC']:
	        ciph = forge.aes.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      case forge.pki.oids['desCBC']:
	      case forge.pki.oids['des-EDE3-CBC']:
	        ciph = forge.des.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      default:
	        throw new Error('Unsupported symmetric cipher, OID ' +
	          msg.encryptedContent.algorithm);
	    }
	    ciph.start(msg.encryptedContent.parameter);
	    ciph.update(msg.encryptedContent.content);

	    if(!ciph.finish()) {
	      throw new Error('Symmetric decryption failed.');
	    }

	    msg.content = ciph.output;
	  }
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'pkcs7';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/pkcs7',[
	  'require',
	  'module',
	  './aes',
	  './asn1',
	  './des',
	  './oids',
	  './pem',
	  './pkcs7asn1',
	  './random',
	  './util',
	  './x509'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Functions to output keys in SSH-friendly formats.
	 *
	 * This is part of the Forge project which may be used under the terms of
	 * either the BSD License or the GNU General Public License (GPL) Version 2.
	 *
	 * See: https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE
	 *
	 * @author https://github.com/shellac
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	var ssh = forge.ssh = forge.ssh || {};

	/**
	 * Encodes (and optionally encrypts) a private RSA key as a Putty PPK file.
	 *
	 * @param privateKey the key.
	 * @param passphrase a passphrase to protect the key (falsy for no encryption).
	 * @param comment a comment to include in the key file.
	 *
	 * @return the PPK file as a string.
	 */
	ssh.privateKeyToPutty = function(privateKey, passphrase, comment) {
	  comment = comment || '';
	  passphrase = passphrase || '';
	  var algorithm = 'ssh-rsa';
	  var encryptionAlgorithm = (passphrase === '') ? 'none' : 'aes256-cbc';

	  var ppk = 'PuTTY-User-Key-File-2: ' + algorithm + '\r\n';
	  ppk += 'Encryption: ' + encryptionAlgorithm + '\r\n';
	  ppk += 'Comment: ' + comment + '\r\n';

	  // public key into buffer for ppk
	  var pubbuffer = forge.util.createBuffer();
	  _addStringToBuffer(pubbuffer, algorithm);
	  _addBigIntegerToBuffer(pubbuffer, privateKey.e);
	  _addBigIntegerToBuffer(pubbuffer, privateKey.n);

	  // write public key
	  var pub = forge.util.encode64(pubbuffer.bytes(), 64);
	  var length = Math.floor(pub.length / 66) + 1; // 66 = 64 + \r\n
	  ppk += 'Public-Lines: ' + length + '\r\n';
	  ppk += pub;

	  // private key into a buffer
	  var privbuffer = forge.util.createBuffer();
	  _addBigIntegerToBuffer(privbuffer, privateKey.d);
	  _addBigIntegerToBuffer(privbuffer, privateKey.p);
	  _addBigIntegerToBuffer(privbuffer, privateKey.q);
	  _addBigIntegerToBuffer(privbuffer, privateKey.qInv);

	  // optionally encrypt the private key
	  var priv;
	  if(!passphrase) {
	    // use the unencrypted buffer
	    priv = forge.util.encode64(privbuffer.bytes(), 64);
	  } else {
	    // encrypt RSA key using passphrase
	    var encLen = privbuffer.length() + 16 - 1;
	    encLen -= encLen % 16;

	    // pad private key with sha1-d data -- needs to be a multiple of 16
	    var padding = _sha1(privbuffer.bytes());

	    padding.truncate(padding.length() - encLen + privbuffer.length());
	    privbuffer.putBuffer(padding);

	    var aeskey = forge.util.createBuffer();
	    aeskey.putBuffer(_sha1('\x00\x00\x00\x00', passphrase));
	    aeskey.putBuffer(_sha1('\x00\x00\x00\x01', passphrase));

	    // encrypt some bytes using CBC mode
	    // key is 40 bytes, so truncate *by* 8 bytes
	    var cipher = forge.aes.createEncryptionCipher(aeskey.truncate(8), 'CBC');
	    cipher.start(forge.util.createBuffer().fillWithByte(0, 16));
	    cipher.update(privbuffer.copy());
	    cipher.finish();
	    var encrypted = cipher.output;

	    // Note: this appears to differ from Putty -- is forge wrong, or putty?
	    // due to padding we finish as an exact multiple of 16
	    encrypted.truncate(16); // all padding

	    priv = forge.util.encode64(encrypted.bytes(), 64);
	  }

	  // output private key
	  length = Math.floor(priv.length / 66) + 1; // 64 + \r\n
	  ppk += '\r\nPrivate-Lines: ' + length + '\r\n';
	  ppk += priv;

	  // MAC
	  var mackey = _sha1('putty-private-key-file-mac-key', passphrase);

	  var macbuffer = forge.util.createBuffer();
	  _addStringToBuffer(macbuffer, algorithm);
	  _addStringToBuffer(macbuffer, encryptionAlgorithm);
	  _addStringToBuffer(macbuffer, comment);
	  macbuffer.putInt32(pubbuffer.length());
	  macbuffer.putBuffer(pubbuffer);
	  macbuffer.putInt32(privbuffer.length());
	  macbuffer.putBuffer(privbuffer);

	  var hmac = forge.hmac.create();
	  hmac.start('sha1', mackey);
	  hmac.update(macbuffer.bytes());

	  ppk += '\r\nPrivate-MAC: ' + hmac.digest().toHex() + '\r\n';

	  return ppk;
	};

	/**
	 * Encodes a public RSA key as an OpenSSH file.
	 *
	 * @param key the key.
	 * @param comment a comment.
	 *
	 * @return the public key in OpenSSH format.
	 */
	ssh.publicKeyToOpenSSH = function(key, comment) {
	  var type = 'ssh-rsa';
	  comment = comment || '';

	  var buffer = forge.util.createBuffer();
	  _addStringToBuffer(buffer, type);
	  _addBigIntegerToBuffer(buffer, key.e);
	  _addBigIntegerToBuffer(buffer, key.n);

	  return type + ' ' + forge.util.encode64(buffer.bytes()) + ' ' + comment;
	};

	/**
	 * Encodes a private RSA key as an OpenSSH file.
	 *
	 * @param key the key.
	 * @param passphrase a passphrase to protect the key (falsy for no encryption).
	 *
	 * @return the public key in OpenSSH format.
	 */
	ssh.privateKeyToOpenSSH = function(privateKey, passphrase) {
	  if(!passphrase) {
	    return forge.pki.privateKeyToPem(privateKey);
	  }
	  // OpenSSH private key is just a legacy format, it seems
	  return forge.pki.encryptRsaPrivateKey(privateKey, passphrase,
	    {legacy: true, algorithm: 'aes128'});
	};

	/**
	 * Gets the SSH fingerprint for the given public key.
	 *
	 * @param options the options to use.
	 *          [md] the message digest object to use (defaults to forge.md.md5).
	 *          [encoding] an alternative output encoding, such as 'hex'
	 *            (defaults to none, outputs a byte buffer).
	 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
	 *            output, eg: ':' (defaults to none).
	 *
	 * @return the fingerprint as a byte buffer or other encoding based on options.
	 */
	ssh.getPublicKeyFingerprint = function(key, options) {
	  options = options || {};
	  var md = options.md || forge.md.md5.create();

	  var type = 'ssh-rsa';
	  var buffer = forge.util.createBuffer();
	  _addStringToBuffer(buffer, type);
	  _addBigIntegerToBuffer(buffer, key.e);
	  _addBigIntegerToBuffer(buffer, key.n);

	  // hash public key bytes
	  md.start();
	  md.update(buffer.getBytes());
	  var digest = md.digest();
	  if(options.encoding === 'hex') {
	    var hex = digest.toHex();
	    if(options.delimiter) {
	      return hex.match(/.{2}/g).join(options.delimiter);
	    }
	    return hex;
	  } else if(options.encoding === 'binary') {
	    return digest.getBytes();
	  } else if(options.encoding) {
	    throw new Error('Unknown encoding "' + options.encoding + '".');
	  }
	  return digest;
	};

	/**
	 * Adds len(val) then val to a buffer.
	 *
	 * @param buffer the buffer to add to.
	 * @param val a big integer.
	 */
	function _addBigIntegerToBuffer(buffer, val) {
	  var hexVal = val.toString(16);
	  // ensure 2s complement +ve
	  if(hexVal[0] >= '8') {
	    hexVal = '00' + hexVal;
	  }
	  var bytes = forge.util.hexToBytes(hexVal);
	  buffer.putInt32(bytes.length);
	  buffer.putBytes(bytes);
	}

	/**
	 * Adds len(val) then val to a buffer.
	 *
	 * @param buffer the buffer to add to.
	 * @param val a string.
	 */
	function _addStringToBuffer(buffer, val) {
	  buffer.putInt32(val.length);
	  buffer.putString(val);
	}

	/**
	 * Hashes the arguments into one value using SHA-1.
	 *
	 * @return the sha1 hash of the provided arguments.
	 */
	function _sha1() {
	  var sha = forge.md.sha1.create();
	  var num = arguments.length;
	  for (var i = 0; i < num; ++i) {
	    sha.update(arguments[i]);
	  }
	  return sha.digest();
	}

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'ssh';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/ssh',[
	  'require',
	  'module',
	  './aes',
	  './hmac',
	  './md5',
	  './sha1',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Support for concurrent task management and synchronization in web
	 * applications.
	 *
	 * @author Dave Longley
	 * @author David I. Lehn <dlehn@digitalbazaar.com>
	 *
	 * Copyright (c) 2009-2013 Digital Bazaar, Inc.
	 */
	(function() {
	/* ########## Begin module implementation ########## */
	function initModule(forge) {

	// logging category
	var cat = 'forge.task';

	// verbose level
	// 0: off, 1: a little, 2: a whole lot
	// Verbose debug logging is surrounded by a level check to avoid the
	// performance issues with even calling the logging code regardless if it
	// is actually logged.  For performance reasons this should not be set to 2
	// for production use.
	// ex: if(sVL >= 2) forge.log.verbose(....)
	var sVL = 0;

	// track tasks for debugging
	var sTasks = {};
	var sNextTaskId = 0;
	// debug access
	forge.debug.set(cat, 'tasks', sTasks);

	// a map of task type to task queue
	var sTaskQueues = {};
	// debug access
	forge.debug.set(cat, 'queues', sTaskQueues);

	// name for unnamed tasks
	var sNoTaskName = '?';

	// maximum number of doNext() recursions before a context swap occurs
	// FIXME: might need to tweak this based on the browser
	var sMaxRecursions = 30;

	// time slice for doing tasks before a context swap occurs
	// FIXME: might need to tweak this based on the browser
	var sTimeSlice = 20;

	/**
	 * Task states.
	 *
	 * READY: ready to start processing
	 * RUNNING: task or a subtask is running
	 * BLOCKED: task is waiting to acquire N permits to continue
	 * SLEEPING: task is sleeping for a period of time
	 * DONE: task is done
	 * ERROR: task has an error
	 */
	var READY = 'ready';
	var RUNNING = 'running';
	var BLOCKED = 'blocked';
	var SLEEPING = 'sleeping';
	var DONE = 'done';
	var ERROR = 'error';

	/**
	 * Task actions.  Used to control state transitions.
	 *
	 * STOP: stop processing
	 * START: start processing tasks
	 * BLOCK: block task from continuing until 1 or more permits are released
	 * UNBLOCK: release one or more permits
	 * SLEEP: sleep for a period of time
	 * WAKEUP: wakeup early from SLEEPING state
	 * CANCEL: cancel further tasks
	 * FAIL: a failure occured
	 */
	var STOP = 'stop';
	var START = 'start';
	var BLOCK = 'block';
	var UNBLOCK = 'unblock';
	var SLEEP = 'sleep';
	var WAKEUP = 'wakeup';
	var CANCEL = 'cancel';
	var FAIL = 'fail';

	/**
	 * State transition table.
	 *
	 * nextState = sStateTable[currentState][action]
	 */
	var sStateTable = {};

	sStateTable[READY] = {};
	sStateTable[READY][STOP] = READY;
	sStateTable[READY][START] = RUNNING;
	sStateTable[READY][CANCEL] = DONE;
	sStateTable[READY][FAIL] = ERROR;

	sStateTable[RUNNING] = {};
	sStateTable[RUNNING][STOP] = READY;
	sStateTable[RUNNING][START] = RUNNING;
	sStateTable[RUNNING][BLOCK] = BLOCKED;
	sStateTable[RUNNING][UNBLOCK] = RUNNING;
	sStateTable[RUNNING][SLEEP] = SLEEPING;
	sStateTable[RUNNING][WAKEUP] = RUNNING;
	sStateTable[RUNNING][CANCEL] = DONE;
	sStateTable[RUNNING][FAIL] = ERROR;

	sStateTable[BLOCKED] = {};
	sStateTable[BLOCKED][STOP] = BLOCKED;
	sStateTable[BLOCKED][START] = BLOCKED;
	sStateTable[BLOCKED][BLOCK] = BLOCKED;
	sStateTable[BLOCKED][UNBLOCK] = BLOCKED;
	sStateTable[BLOCKED][SLEEP] = BLOCKED;
	sStateTable[BLOCKED][WAKEUP] = BLOCKED;
	sStateTable[BLOCKED][CANCEL] = DONE;
	sStateTable[BLOCKED][FAIL] = ERROR;

	sStateTable[SLEEPING] = {};
	sStateTable[SLEEPING][STOP] = SLEEPING;
	sStateTable[SLEEPING][START] = SLEEPING;
	sStateTable[SLEEPING][BLOCK] = SLEEPING;
	sStateTable[SLEEPING][UNBLOCK] = SLEEPING;
	sStateTable[SLEEPING][SLEEP] = SLEEPING;
	sStateTable[SLEEPING][WAKEUP] = SLEEPING;
	sStateTable[SLEEPING][CANCEL] = DONE;
	sStateTable[SLEEPING][FAIL] = ERROR;

	sStateTable[DONE] = {};
	sStateTable[DONE][STOP] = DONE;
	sStateTable[DONE][START] = DONE;
	sStateTable[DONE][BLOCK] = DONE;
	sStateTable[DONE][UNBLOCK] = DONE;
	sStateTable[DONE][SLEEP] = DONE;
	sStateTable[DONE][WAKEUP] = DONE;
	sStateTable[DONE][CANCEL] = DONE;
	sStateTable[DONE][FAIL] = ERROR;

	sStateTable[ERROR] = {};
	sStateTable[ERROR][STOP] = ERROR;
	sStateTable[ERROR][START] = ERROR;
	sStateTable[ERROR][BLOCK] = ERROR;
	sStateTable[ERROR][UNBLOCK] = ERROR;
	sStateTable[ERROR][SLEEP] = ERROR;
	sStateTable[ERROR][WAKEUP] = ERROR;
	sStateTable[ERROR][CANCEL] = ERROR;
	sStateTable[ERROR][FAIL] = ERROR;

	/**
	 * Creates a new task.
	 *
	 * @param options options for this task
	 *   run: the run function for the task (required)
	 *   name: the run function for the task (optional)
	 *   parent: parent of this task (optional)
	 *
	 * @return the empty task.
	 */
	var Task = function(options) {
	  // task id
	  this.id = -1;

	  // task name
	  this.name = options.name || sNoTaskName;

	  // task has no parent
	  this.parent = options.parent || null;

	  // save run function
	  this.run = options.run;

	  // create a queue of subtasks to run
	  this.subtasks = [];

	  // error flag
	  this.error = false;

	  // state of the task
	  this.state = READY;

	  // number of times the task has been blocked (also the number
	  // of permits needed to be released to continue running)
	  this.blocks = 0;

	  // timeout id when sleeping
	  this.timeoutId = null;

	  // no swap time yet
	  this.swapTime = null;

	  // no user data
	  this.userData = null;

	  // initialize task
	  // FIXME: deal with overflow
	  this.id = sNextTaskId++;
	  sTasks[this.id] = this;
	  if(sVL >= 1) {
	    forge.log.verbose(cat, '[%s][%s] init', this.id, this.name, this);
	  }
	};

	/**
	 * Logs debug information on this task and the system state.
	 */
	Task.prototype.debug = function(msg) {
	  msg = msg || '';
	  forge.log.debug(cat, msg,
	    '[%s][%s] task:', this.id, this.name, this,
	    'subtasks:', this.subtasks.length,
	    'queue:', sTaskQueues);
	};

	/**
	 * Adds a subtask to run after task.doNext() or task.fail() is called.
	 *
	 * @param name human readable name for this task (optional).
	 * @param subrun a function to run that takes the current task as
	 *          its first parameter.
	 *
	 * @return the current task (useful for chaining next() calls).
	 */
	Task.prototype.next = function(name, subrun) {
	  // juggle parameters if it looks like no name is given
	  if(typeof(name) === 'function') {
	    subrun = name;

	    // inherit parent's name
	    name = this.name;
	  }
	  // create subtask, set parent to this task, propagate callbacks
	  var subtask = new Task({
	    run: subrun,
	    name: name,
	    parent: this
	  });
	  // start subtasks running
	  subtask.state = RUNNING;
	  subtask.type = this.type;
	  subtask.successCallback = this.successCallback || null;
	  subtask.failureCallback = this.failureCallback || null;

	  // queue a new subtask
	  this.subtasks.push(subtask);

	  return this;
	};

	/**
	 * Adds subtasks to run in parallel after task.doNext() or task.fail()
	 * is called.
	 *
	 * @param name human readable name for this task (optional).
	 * @param subrun functions to run that take the current task as
	 *          their first parameter.
	 *
	 * @return the current task (useful for chaining next() calls).
	 */
	Task.prototype.parallel = function(name, subrun) {
	  // juggle parameters if it looks like no name is given
	  if(forge.util.isArray(name)) {
	    subrun = name;

	    // inherit parent's name
	    name = this.name;
	  }
	  // Wrap parallel tasks in a regular task so they are started at the
	  // proper time.
	  return this.next(name, function(task) {
	    // block waiting for subtasks
	    var ptask = task;
	    ptask.block(subrun.length);

	    // we pass the iterator from the loop below as a parameter
	    // to a function because it is otherwise included in the
	    // closure and changes as the loop changes -- causing i
	    // to always be set to its highest value
	    var startParallelTask = function(pname, pi) {
	      forge.task.start({
	        type: pname,
	        run: function(task) {
	           subrun[pi](task);
	        },
	        success: function(task) {
	           ptask.unblock();
	        },
	        failure: function(task) {
	           ptask.unblock();
	        }
	      });
	    };

	    for(var i = 0; i < subrun.length; i++) {
	      // Type must be unique so task starts in parallel:
	      //    name + private string + task id + sub-task index
	      // start tasks in parallel and unblock when the finish
	      var pname = name + '__parallel-' + task.id + '-' + i;
	      var pi = i;
	      startParallelTask(pname, pi);
	    }
	  });
	};

	/**
	 * Stops a running task.
	 */
	Task.prototype.stop = function() {
	  this.state = sStateTable[this.state][STOP];
	};

	/**
	 * Starts running a task.
	 */
	Task.prototype.start = function() {
	  this.error = false;
	  this.state = sStateTable[this.state][START];

	  // try to restart
	  if(this.state === RUNNING) {
	    this.start = new Date();
	    this.run(this);
	    runNext(this, 0);
	  }
	};

	/**
	 * Blocks a task until it one or more permits have been released. The
	 * task will not resume until the requested number of permits have
	 * been released with call(s) to unblock().
	 *
	 * @param n number of permits to wait for(default: 1).
	 */
	Task.prototype.block = function(n) {
	  n = typeof(n) === 'undefined' ? 1 : n;
	  this.blocks += n;
	  if(this.blocks > 0) {
	    this.state = sStateTable[this.state][BLOCK];
	  }
	};

	/**
	 * Releases a permit to unblock a task. If a task was blocked by
	 * requesting N permits via block(), then it will only continue
	 * running once enough permits have been released via unblock() calls.
	 *
	 * If multiple processes need to synchronize with a single task then
	 * use a condition variable (see forge.task.createCondition). It is
	 * an error to unblock a task more times than it has been blocked.
	 *
	 * @param n number of permits to release (default: 1).
	 *
	 * @return the current block count (task is unblocked when count is 0)
	 */
	Task.prototype.unblock = function(n) {
	  n = typeof(n) === 'undefined' ? 1 : n;
	  this.blocks -= n;
	  if(this.blocks === 0 && this.state !== DONE) {
	    this.state = RUNNING;
	    runNext(this, 0);
	  }
	  return this.blocks;
	};

	/**
	 * Sleep for a period of time before resuming tasks.
	 *
	 * @param n number of milliseconds to sleep (default: 0).
	 */
	Task.prototype.sleep = function(n) {
	  n = typeof(n) === 'undefined' ? 0 : n;
	  this.state = sStateTable[this.state][SLEEP];
	  var self = this;
	  this.timeoutId = setTimeout(function() {
	    self.timeoutId = null;
	    self.state = RUNNING;
	    runNext(self, 0);
	  }, n);
	};

	/**
	 * Waits on a condition variable until notified. The next task will
	 * not be scheduled until notification. A condition variable can be
	 * created with forge.task.createCondition().
	 *
	 * Once cond.notify() is called, the task will continue.
	 *
	 * @param cond the condition variable to wait on.
	 */
	Task.prototype.wait = function(cond) {
	  cond.wait(this);
	};

	/**
	 * If sleeping, wakeup and continue running tasks.
	 */
	Task.prototype.wakeup = function() {
	  if(this.state === SLEEPING) {
	    cancelTimeout(this.timeoutId);
	    this.timeoutId = null;
	    this.state = RUNNING;
	    runNext(this, 0);
	  }
	};

	/**
	 * Cancel all remaining subtasks of this task.
	 */
	Task.prototype.cancel = function() {
	  this.state = sStateTable[this.state][CANCEL];
	  // remove permits needed
	  this.permitsNeeded = 0;
	  // cancel timeouts
	  if(this.timeoutId !== null) {
	    cancelTimeout(this.timeoutId);
	    this.timeoutId = null;
	  }
	  // remove subtasks
	  this.subtasks = [];
	};

	/**
	 * Finishes this task with failure and sets error flag. The entire
	 * task will be aborted unless the next task that should execute
	 * is passed as a parameter. This allows levels of subtasks to be
	 * skipped. For instance, to abort only this tasks's subtasks, then
	 * call fail(task.parent). To abort this task's subtasks and its
	 * parent's subtasks, call fail(task.parent.parent). To abort
	 * all tasks and simply call the task callback, call fail() or
	 * fail(null).
	 *
	 * The task callback (success or failure) will always, eventually, be
	 * called.
	 *
	 * @param next the task to continue at, or null to abort entirely.
	 */
	Task.prototype.fail = function(next) {
	  // set error flag
	  this.error = true;

	  // finish task
	  finish(this, true);

	  if(next) {
	    // propagate task info
	    next.error = this.error;
	    next.swapTime = this.swapTime;
	    next.userData = this.userData;

	    // do next task as specified
	    runNext(next, 0);
	  } else {
	    if(this.parent !== null) {
	      // finish root task (ensures it is removed from task queue)
	      var parent = this.parent;
	      while(parent.parent !== null) {
	        // propagate task info
	        parent.error = this.error;
	        parent.swapTime = this.swapTime;
	        parent.userData = this.userData;
	        parent = parent.parent;
	      }
	      finish(parent, true);
	    }

	    // call failure callback if one exists
	    if(this.failureCallback) {
	      this.failureCallback(this);
	    }
	  }
	};

	/**
	 * Asynchronously start a task.
	 *
	 * @param task the task to start.
	 */
	var start = function(task) {
	  task.error = false;
	  task.state = sStateTable[task.state][START];
	  setTimeout(function() {
	    if(task.state === RUNNING) {
	      task.swapTime = +new Date();
	      task.run(task);
	      runNext(task, 0);
	    }
	  }, 0);
	};

	/**
	 * Run the next subtask or finish this task.
	 *
	 * @param task the task to process.
	 * @param recurse the recursion count.
	 */
	var runNext = function(task, recurse) {
	  // get time since last context swap (ms), if enough time has passed set
	  // swap to true to indicate that doNext was performed asynchronously
	  // also, if recurse is too high do asynchronously
	  var swap =
	    (recurse > sMaxRecursions) ||
	    (+new Date() - task.swapTime) > sTimeSlice;

	  var doNext = function(recurse) {
	    recurse++;
	    if(task.state === RUNNING) {
	      if(swap) {
	        // update swap time
	        task.swapTime = +new Date();
	      }

	      if(task.subtasks.length > 0) {
	        // run next subtask
	        var subtask = task.subtasks.shift();
	        subtask.error = task.error;
	        subtask.swapTime = task.swapTime;
	        subtask.userData = task.userData;
	        subtask.run(subtask);
	        if(!subtask.error) {
	           runNext(subtask, recurse);
	        }
	      } else {
	        finish(task);

	        if(!task.error) {
	          // chain back up and run parent
	          if(task.parent !== null) {
	            // propagate task info
	            task.parent.error = task.error;
	            task.parent.swapTime = task.swapTime;
	            task.parent.userData = task.userData;

	            // no subtasks left, call run next subtask on parent
	            runNext(task.parent, recurse);
	          }
	        }
	      }
	    }
	  };

	  if(swap) {
	    // we're swapping, so run asynchronously
	    setTimeout(doNext, 0);
	  } else {
	    // not swapping, so run synchronously
	    doNext(recurse);
	  }
	};

	/**
	 * Finishes a task and looks for the next task in the queue to start.
	 *
	 * @param task the task to finish.
	 * @param suppressCallbacks true to suppress callbacks.
	 */
	var finish = function(task, suppressCallbacks) {
	  // subtask is now done
	  task.state = DONE;

	  delete sTasks[task.id];
	  if(sVL >= 1) {
	    forge.log.verbose(cat, '[%s][%s] finish',
	      task.id, task.name, task);
	  }

	  // only do queue processing for root tasks
	  if(task.parent === null) {
	    // report error if queue is missing
	    if(!(task.type in sTaskQueues)) {
	      forge.log.error(cat,
	        '[%s][%s] task queue missing [%s]',
	        task.id, task.name, task.type);
	    } else if(sTaskQueues[task.type].length === 0) {
	      // report error if queue is empty
	      forge.log.error(cat,
	        '[%s][%s] task queue empty [%s]',
	        task.id, task.name, task.type);
	    } else if(sTaskQueues[task.type][0] !== task) {
	      // report error if this task isn't the first in the queue
	      forge.log.error(cat,
	        '[%s][%s] task not first in queue [%s]',
	        task.id, task.name, task.type);
	    } else {
	      // remove ourselves from the queue
	      sTaskQueues[task.type].shift();
	      // clean up queue if it is empty
	      if(sTaskQueues[task.type].length === 0) {
	        if(sVL >= 1) {
	          forge.log.verbose(cat, '[%s][%s] delete queue [%s]',
	            task.id, task.name, task.type);
	        }
	        /* Note: Only a task can delete a queue of its own type. This
	         is used as a way to synchronize tasks. If a queue for a certain
	         task type exists, then a task of that type is running.
	         */
	        delete sTaskQueues[task.type];
	      } else {
	        // dequeue the next task and start it
	        if(sVL >= 1) {
	          forge.log.verbose(cat,
	            '[%s][%s] queue start next [%s] remain:%s',
	            task.id, task.name, task.type,
	            sTaskQueues[task.type].length);
	        }
	        sTaskQueues[task.type][0].start();
	      }
	    }

	    if(!suppressCallbacks) {
	      // call final callback if one exists
	      if(task.error && task.failureCallback) {
	        task.failureCallback(task);
	      } else if(!task.error && task.successCallback) {
	        task.successCallback(task);
	      }
	    }
	  }
	};

	/* Tasks API */
	forge.task = forge.task || {};

	/**
	 * Starts a new task that will run the passed function asynchronously.
	 *
	 * In order to finish the task, either task.doNext() or task.fail()
	 * *must* be called.
	 *
	 * The task must have a type (a string identifier) that can be used to
	 * synchronize it with other tasks of the same type. That type can also
	 * be used to cancel tasks that haven't started yet.
	 *
	 * To start a task, the following object must be provided as a parameter
	 * (each function takes a task object as its first parameter):
	 *
	 * {
	 *   type: the type of task.
	 *   run: the function to run to execute the task.
	 *   success: a callback to call when the task succeeds (optional).
	 *   failure: a callback to call when the task fails (optional).
	 * }
	 *
	 * @param options the object as described above.
	 */
	forge.task.start = function(options) {
	  // create a new task
	  var task = new Task({
	    run: options.run,
	    name: options.name || sNoTaskName
	  });
	  task.type = options.type;
	  task.successCallback = options.success || null;
	  task.failureCallback = options.failure || null;

	  // append the task onto the appropriate queue
	  if(!(task.type in sTaskQueues)) {
	    if(sVL >= 1) {
	      forge.log.verbose(cat, '[%s][%s] create queue [%s]',
	        task.id, task.name, task.type);
	    }
	    // create the queue with the new task
	    sTaskQueues[task.type] = [task];
	    start(task);
	  } else {
	    // push the task onto the queue, it will be run after a task
	    // with the same type completes
	    sTaskQueues[options.type].push(task);
	  }
	};

	/**
	 * Cancels all tasks of the given type that haven't started yet.
	 *
	 * @param type the type of task to cancel.
	 */
	forge.task.cancel = function(type) {
	  // find the task queue
	  if(type in sTaskQueues) {
	    // empty all but the current task from the queue
	    sTaskQueues[type] = [sTaskQueues[type][0]];
	  }
	};

	/**
	 * Creates a condition variable to synchronize tasks. To make a task wait
	 * on the condition variable, call task.wait(condition). To notify all
	 * tasks that are waiting, call condition.notify().
	 *
	 * @return the condition variable.
	 */
	forge.task.createCondition = function() {
	  var cond = {
	    // all tasks that are blocked
	    tasks: {}
	  };

	  /**
	   * Causes the given task to block until notify is called. If the task
	   * is already waiting on this condition then this is a no-op.
	   *
	   * @param task the task to cause to wait.
	   */
	  cond.wait = function(task) {
	    // only block once
	    if(!(task.id in cond.tasks)) {
	       task.block();
	       cond.tasks[task.id] = task;
	    }
	  };

	  /**
	   * Notifies all waiting tasks to wake up.
	   */
	  cond.notify = function() {
	    // since unblock() will run the next task from here, make sure to
	    // clear the condition's blocked task list before unblocking
	    var tmp = cond.tasks;
	    cond.tasks = {};
	    for(var id in tmp) {
	      tmp[id].unblock();
	    }
	  };

	  return cond;
	};

	} // end module implementation

	/* ########## Begin module wrapper ########## */
	var name = 'task';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      forge = {};
	    }
	    return initModule(forge);
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    }).concat(initModule);
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge[name];
	  };
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/task',['require', 'module', './debug', './log', './util'], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();

	/**
	 * Node.js module for Forge.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2014 Digital Bazaar, Inc.
	 */
	(function() {
	var name = 'forge';
	if(typeof define !== 'function') {
	  // NodeJS -> AMD
	  if(typeof module === 'object' && module.exports) {
	    var nodeJS = true;
	    define = function(ids, factory) {
	      factory(require, module);
	    };
	  } else {
	    // <script>
	    if(typeof forge === 'undefined') {
	      // set to true to disable native code if even it's available
	      forge = {disableNativeCode: false};
	    }
	    return;
	  }
	}
	// AMD
	var deps;
	var defineFunc = function(require, module) {
	  module.exports = function(forge) {
	    var mods = deps.map(function(dep) {
	      return require(dep);
	    });
	    // handle circular dependencies
	    forge = forge || {};
	    forge.defined = forge.defined || {};
	    if(forge.defined[name]) {
	      return forge[name];
	    }
	    forge.defined[name] = true;
	    for(var i = 0; i < mods.length; ++i) {
	      mods[i](forge);
	    }
	    return forge;
	  };
	  // set to true to disable native code if even it's available
	  module.exports.disableNativeCode = false;
	  module.exports(module.exports);
	};
	var tmpDefine = define;
	define = function(ids, factory) {
	  deps = (typeof ids === 'string') ? factory.slice(2) : ids.slice(2);
	  if(nodeJS) {
	    delete define;
	    return tmpDefine.apply(null, Array.prototype.slice.call(arguments, 0));
	  }
	  define = tmpDefine;
	  return define.apply(null, Array.prototype.slice.call(arguments, 0));
	};
	define('js/forge',[
	  'require',
	  'module',
	  './aes',
	  './aesCipherSuites',
	  './asn1',
	  './cipher',
	  './cipherModes',
	  './debug',
	  './des',
	  './hmac',
	  './kem',
	  './log',
	  './md',
	  './mgf1',
	  './pbkdf2',
	  './pem',
	  './pkcs7',
	  './pkcs1',
	  './pkcs12',
	  './pki',
	  './prime',
	  './prng',
	  './pss',
	  './random',
	  './rc2',
	  './ssh',
	  './task',
	  './tls',
	  './util'
	], function() {
	  defineFunc.apply(null, Array.prototype.slice.call(arguments, 0));
	});
	})();


	return require('js/forge');

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11), __webpack_require__(12).setImmediate, __webpack_require__(13)(module), __webpack_require__(14).Buffer))

/***/ },
/* 35 */
/***/ function(module, exports) {

	"use strict";

	let utils = {
		mergeConfig(config1, config2){
			let out = {};
			
			for(var propName in config1)
				if(config1.hasOwnProperty(propName))
					out[propName] = config1[propName];

			for(var propName in config2)
				if(config2.hasOwnProperty(propName))
					out[propName] = config2[propName];

			return out;
		},

		log(chord, msg){
			if(chord.config.debug)
				console.log(msg);
		}
	}

	module.exports = utils;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const EventEmitter2 = __webpack_require__(33).EventEmitter2;

	//EVENTS
	//	.on("close", destId)

	class Session {
		constructor (shallot, route, aesKeys, circ) {
			this.shallot = shallot;
			this.route = route;
			this.aesKeys = aesKeys;
			this.circ = circ;

			this._evts = new EventEmitter2({
				maxListeners: 20
			});
		}

		get emit () {
			return this._evts.emit.bind(this._evts);
		}

		get on () {
			return this._evts.on.bind(this._evts);
		}

		get off () {
			return this._evts.off.bind(this._evts);
		}

		send (data) {
			return this.shallot._sendOnion(this.aesKeys, this.route[0], this.circ, {c: data})
				.catch(reason => {
					this.emit("close", this.route[this.route.length-1].id)
				});
		}
	}

	module.exports = Session;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	const EventEmitter2 = __webpack_require__(33).EventEmitter2;

	//EVENTS:
	//	.on("data", data)
	//	.on("close", startId)

	class RecvSession {
		constructor (shallot, startId) {
			this.module = shallot;
			this.startId = startId;

			this._evts = new EventEmitter2({
				maxListeners: 20
			});

			shallot.emit("receiveConnection", this);
		}

		get emit () {
			return this._evts.emit.bind(this._evts);
		}

		get on () {
			return this._evts.on.bind(this._evts);
		}

		get off () {
			return this._evts.off.bind(this._evts);
		}

		content (data) {
			this.emit("data", data);
		}
	}

	module.exports = RecvSession;

/***/ }
/******/ ]);